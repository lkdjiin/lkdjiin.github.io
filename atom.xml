<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-11-16T10:15:06+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques 39: Resolution du sac à dos]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/"/>
    <updated>2013-11-16T10:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La dernière fois on a vu une façon simplement
<a href="http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/">d&#8217;évaluer le contenu</a>
du sac à dos.
Aujourd&#8217;hui on met en place l&#8217;algorithme génétique proprement dit:
sélection, croisement, mutation, etc.</p>

<!-- more -->


<p>J&#8217;ai mis le <a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack.rb">code complet de l&#8217;algorithme sur Github</a>.
Celui-ci est basé sur ce qu&#8217;on a fait jusqu&#8217;ici pour
<a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">le paradoxe du singe savant</a>
et pour <a href="http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/">le problème des 8 dames</a>.
Je vais donc commenter les parties qui changent.</p>

<h2>La classe GeneticAlgorithm</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GeneticAlgorithm</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">best_ever</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@generations</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Evaluator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@capacity</span><span class="p">,</span> <span class="vi">@population</span><span class="p">)</span><span class="o">.</span><span class="n">evaluate</span>
</span><span class='line'>      <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">best</span>
</span><span class='line'>      <span class="n">best_ever</span> <span class="o">=</span> <span class="n">best</span> <span class="k">if</span> <span class="n">best</span> <span class="o">&gt;</span> <span class="n">best_ever</span>
</span><span class='line'>      <span class="nb">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>      <span class="n">next_generation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">display_best_ever</span><span class="p">(</span><span class="n">best_ever</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display_best_ever</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;----------------------&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Best ever&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;----------------------&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;score:      </span><span class="si">#{</span><span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;chromosome: </span><span class="si">#{</span><span class="n">individual</span><span class="o">.</span><span class="n">chromosome_as_list</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voyons la méthode <code>run</code>. La variable <code>best_ever</code> va contenir le meilleur
individu, toutes générations confondues. À chaque itération, on compare
ce «meilleur de tout les temps» avec le meilleur individu de la génération:</p>

<pre><code>best_ever = best if best &gt; best_ever
</code></pre>

<p>C&#8217;est pour ça qu&#8217;on avait besoin d&#8217;une méthode <code>&gt;</code> dans la classe <code>Individual</code>
(voir <a href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/">cet article</a>).</p>

<p>À la fin de la méthode <code>run</code> on utilise la nouvelle méthode <code>display_best_ever</code>
pour afficher notre meilleure solution.</p>

<h2>La classe Mutator</h2>

<p>La seconde classe qui change un peu est la classe <code>Mutator</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mutator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="o">!</span> <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">chromosome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un chromosome étant une liste (un Array) de booléens, la mutation consiste
à <em>inverser</em> un élément, true devient false et inversement:</p>

<pre><code>chromosome[index] = ! chromosome[index] if rand &lt; @rate
</code></pre>

<h2>Le lancement du programme</h2>

<p>Le problème n&#8217;a pas l&#8217;air trop complexe, je me dis donc que 100 générations
devraient suffire. La population compte 1 000 individus, ce qui est
classique et le taux de mutation est assez élevé (1%):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">knapsack_capacity</span> <span class="o">=</span> <span class="mi">400</span>
</span><span class='line'><span class="n">generations</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">population</span> <span class="o">=</span> <span class="no">Population</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">mutation</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">01</span>
</span><span class='line'><span class="no">GeneticAlgorithm</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">knapsack_capacity</span><span class="p">,</span> <span class="n">mutation</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le moment de vérité:</p>

<pre><code>[~]⇒ ruby knapsack.rb 
Gen: 0 Best score: 922
Gen: 1 Best score: 950
.
.
.
Gen: 57 Best score: 1010
Gen: 58 Best score: 957
Gen: 59 Best score: 1030
.
.
.
Gen: 99 Best score: 957
----------------------
Best ever
----------------------
score:      1030
chromosome: map, compass, water, sandwich, glucose, banana, suntan cream,
waterproof trousers, waterproof overclothes, note-case, sunglasses, socks
</code></pre>

<p>La prochaine fois on va analyser ce résultat et faire en sorte de
l&#8217;améliorer.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 37: Le problème du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/'>Les algorithmes génétiques démystifiés: un point sur les performances</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les Rubyists 7: Module basique]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/"/>
    <updated>2013-11-15T10:18:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La dernière fois, on a écrit notre <a href="http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/">première fonction en Racket</a>. Et avant
d&#8217;écrire des tests unitaires pour pouvoir la passer à la moulinette du
<em>refactoring</em>, il faut explorer un peu les modules Racket.</p>

<!-- more -->


<h2>La notion de module en Racket</h2>

<p>Jusqu&#8217;ici on a utilisé le REPL, il est temps maintenant de mettre notre
code dans un fichier. Voyons le programme suivant, à mettre dans un
fichier <code>foo.rkt</code>:</p>

<figure class='code'><figcaption><span>foo.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">times-2</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">times-3</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">times-2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous reconnaissez la définition de deux fonctions: <code>times-2</code> et <code>times-3</code>
qui multiplient respectivements leur argument par 2 et par 3. En plus de ça,
il y a trois éléments nouveaux:</p>

<h3>Spécification d&#8217;un dialecte</h3>

<p>La ligne <code>#lang racket</code> spécifie à Racket le dialecte utilisé. Il y en a
plein et je n&#8217;utiliserais que celui-ci. Il faudra penser à toujours placé
cette ligne au début de chaque fichier.</p>

<h3>Convention de nommage</h3>

<p>Un petit exemple vaut mieux qu&#8217;un long discours:</p>

<pre><code>thisIsJavaConvention

this_is_ruby_convention

this-is-racket-convention
</code></pre>

<h3>La fonction provide</h3>

<p>La fonction <code>provide</code>, qu&#8217;on peut placer n&#8217;importe où dans le fichier (donc
au début ou à la fin), permet <em>d&#8217;exporter</em> les fonctions données en
argument. Les autres fonctions (celle qui ne sont pas données à <code>provide</code>)
sont visible dans le fichier, mais pas à l&#8217;extérieur. Autrement dit,
<code>provide</code> permet de spécifier l&#8217;API, les fonctions publiques.</p>

<h2>Utilisation d&#8217;un module</h2>

<p>Dans le REPL, <em>démaré dans le même dossier que le fichier &ldquo;foo.rkt&rdquo;</em>,
on utilise la fonction <code>require</code>:</p>

<pre><code>-&gt; (require "foo.rkt")
</code></pre>

<p>On peut maintenant utiliser la fonction <em>publique</em> <code>times-2</code>:</p>

<pre><code>-&gt; (times-2 9)
18
</code></pre>

<p>Et comme attendu, on ne peut pas utiliser <code>times-3</code>:</p>

<pre><code>-&gt; (times-3 9)
; times-3: undefined;
;  cannot reference undefined identifier
</code></pre>

<h2>Comparaison avec les modules Ruby</h2>

<p>Voici le pendant du fichier <code>foo.rkt</code> écrit en Ruby:</p>

<figure class='code'><figcaption><span>foo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">times_2</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">2</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">times_3</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">3</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici comment on s&#8217;en sert dans une session irb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="go">LoadError: cannot load such file -- foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s2">&quot;./foo&quot;</span>
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="o">.</span><span class="n">times_2</span> <span class="mi">9</span>
</span><span class='line'><span class="go">18</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="o">.</span><span class="n">times_3</span> <span class="mi">9</span>
</span><span class='line'><span class="go">NoMethodError: private method `times_3&#39; called for Foo:Module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le comportement est assez similaire. Petite différence, Ruby oblige à définir
le fichier requis par rapport au dossier courant alors que Racket le fait
automatiquement (ok, j&#8217;aurais pu utiliser <code>require_relative</code>…).</p>

<p>Mais la <strong>grande différence</strong> est qu&#8217;un module Ruby définit un espace
de nom, pas un module Racket. <em>À l&#8217;heure actuelle je ne sais pas si Racket
possède un mécanisme pour les espaces de nom, je n&#8217;en suis pas encore là,
mais j&#8217;espère que oui…</em></p>

<p>La prochaine fois, on verra comment faire des tests unitaires simples en
Racket.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/'>Racket pour les rubyists 5: Définitions imbriquées</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/01/apprendre-ruby-en-faisant-des-maths-6-methodes-utilitaires-et-module/'>Apprendre Ruby en faisant des maths 6: méthodes utilitaires et module</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths 7: Tests unitaires simples]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/"/>
    <updated>2013-11-14T13:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Si vous voulez vraiment apprendre Ruby, vous <em>devriez</em> aussi apprendre
à faire des tests automatisés: c&#8217;est le meilleur moyen d&#8217;avoir confiance
en son code. Et la question se pose de savoir quel framework utiliser ?
Il en existe plusieurs: unit/test, minitest, RSpec, Shoulda, Cucumber et
j&#8217;en oublie… Chaque développeur a ses préférences, et c&#8217;est bien normal.</p>

<p><code>&lt;opinion&gt;</code></p>

<p>Mais souvent les développeurs ont aussi des convictions, ce qui est parfois
problématique. Un framework de test est un outil, comme tant d&#8217;autres.
Un outil X peut être parfait pour telle application et bien moins bon pour
telle autre application. Autrement dit, <strong>LE</strong> framework de test n&#8217;existe
pas. Quand vous en aurez testé quelques uns, vous aurez une préférence,
d&#8217;accord, pas de soucis. Mais s&#8217;il vous plait, avant d&#8217;avoir une conviction,
attendez d&#8217;en avoir <em>utilisé</em> 3 ou 4, et chacun dans différents types de
projet.</p>

<p><code>&lt;/opinion&gt;</code></p>

<!-- more -->


<p>Aujourd&#8217;hui on va apprendre à tester le module créé <a href="http://lkdjiin.github.io/blog/2013/11/01/apprendre-ruby-en-faisant-des-maths-6-methodes-utilitaires-et-module/">la dernière fois</a>
à l&#8217;aide du framework test/unit. Pas parce que ce framework est le
meilleur, pas parce que j&#8217;ai une préférence pour ce framework mais parce qu&#8217;il
est livré avec Ruby et qu&#8217;il ne necessite donc pas d&#8217;installation.</p>

<h2>Le fichier de test</h2>

<p>Voici le code à mettre dans un fichier nommé <code>tc_number.rb</code>:</p>

<figure class='code'><figcaption><span>tc_number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNumber</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le fichier <code>tc_number.rb</code> contient le code pour tester notre module <code>Number</code>,
qui est dans le fichier <code>number.rb</code>. Veillez à garder les deux fichiers dans
le même dossier.</p>

<h2>Explications</h2>

<p>Voici les explications, ligne par ligne:</p>

<pre><code>require_relative "number"
</code></pre>

<p>On charge notre module <code>Number</code>.</p>

<pre><code>require "test/unit"
</code></pre>

<p>On charge la bibliothèque <code>test/unit</code>, qui contient plusieurs classes/modules
et méthodes qui vont nous permettre d&#8217;écrire nos tests.</p>

<pre><code>class TestNumber &lt; Test::Unit::TestCase
</code></pre>

<p>On crée une classe <code>TestNumber</code>. Vous remarquez que c&#8217;est le nom de notre
module à tester, préfixé par Test. Cette classe hérite de
<code>Test::Unit::TestCase</code>. Si vous ne savez pas encore ce qu&#8217;est une classe,
dites vous que c&#8217;est un module un peu spécial. Si vous ne savez pas
encore ce qu&#8217;est l&#8217;héritage, ce n&#8217;est pas grave.</p>

<pre><code>def test_divisors
</code></pre>

<p>On définit un test de la méthode <code>divisors</code>, à travers la méthodes
<code>test_divisors</code>. Vous remarquez que c&#8217;est le nom de notre méthode à tester,
préfixé par <code>test_</code>.</p>

<pre><code>assert_equal [1, 2, 4, 8], Number.divisors(4)
</code></pre>

<p>Voici enfin le test proprement dit. La méthode <code>assert_equal</code> s&#8217;assure
que ses deux arguments sont égaux. On veut savoir si <code>Number.divisors(4)</code>
est bien égal à l&#8217;Array (la liste) <code>[1, 2, 3, 4]</code>, <em>ce qui est faux</em>.</p>

<h2>Utilisation</h2>

<p>Voici la sortie:</p>

<pre><code>[~]⇒ ruby tc_number.rb 
Run options: 

# Running tests:

F

Finished tests in 0.002405s, 415.8087 tests/s, 415.8087 assertions/s.

  1) Failure:
test_divisors(TestNumber) [tc_number.rb:6]:
&lt;[1, 2, 4, 8]&gt; expected but was
&lt;[1, 2, 4]&gt;.

1 tests, 1 assertions, 1 failures, 0 errors, 0 skips
</code></pre>

<p>La section <code>1) Failure:</code> est particulièrement intéressante et nous indique
que la liste <code>[1, 2, 3, 4]</code> était attendue, mais que c&#8217;est la liste
<code>[1, 2, 4]</code> qui a été reçue.</p>

<p>Si on corrige notre test:</p>

<figure class='code'><figcaption><span>tc_number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNumber</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois-ci la sortie nous indique que tout va bien:</p>

<pre><code>[~]⇒ ruby tc_number.rb 
Run options: 

# Running tests:

.

Finished tests in 0.000644s, 1553.5887 tests/s, 1553.5887 assertions/s.

1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<h2>Plus de tests</h2>

<p>Nous pouvons ajouter un autre test pour la méthode <code>divisors</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais aussi tester les autres méthodes de notre module, selon le même
modèle:</p>

<figure class='code'><figcaption><span>tc_number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNumber</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_proper_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">proper_divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">proper_divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_sum_of_proper_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">3</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">sum_of_proper_divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">1</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">sum_of_proper_divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/'>Racket pour les rubyists 5: Définitions imbriquées</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/"/>
    <updated>2013-11-13T09:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Comment évaluer le contenu du sac à dos ? C&#8217;est à cette question qu&#8217;on
répond aujourd&#8217;hui, après avoir vu hier la
<a href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/">création de la population</a>.</p>

<!-- more -->


<h2>La fonction d&#8217;évaluation</h2>

<p>Évaluer le contenu du sac à dos est trivial, on calcule sa valeur en
ajoutant la valeur de tout les objets, et on calcule son poids en ajoutant
le poids de tout les objets. Si le poids total dépasse la capacité du
sac à dos, on va considèrer <em>pour l&#8217;instant</em> que la solution est invalide, et
on ne lui permettra pas de se reproduire. Autrement dit, plus la valeur est
importante sans que le poids ne dépasse la capacité, meilleure est
l&#8217;individu.</p>

<h2>La classe Evaluator</h2>

<p>Voici le code complet de la classe <code>Evaluator</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">capacity</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@capacity</span> <span class="o">=</span> <span class="n">capacity</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">fitness</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">weight</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">item</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">value</span>
</span><span class='line'>        <span class="n">weight</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">weight</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">weight</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fitness</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Explication du code</h2>

<p>Ce qui nous intéresse se passe dans la méthode <code>score</code>. Tout d&#8217;abord on
calcule la valeur totale et le poids total du sac à dos:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">item</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">value</span>
</span><span class='line'>    <span class="n">weight</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">weight</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je rappelle qu&#8217;un chromosome est ici un Array de booléens, d&#8217;où la ligne
<code>if item</code> pour savoir si l&#8217;objet est présent ou non.</p>

<p>Une fois valeur et poids calculés, on peut donner un score:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">weight</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>  <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si le poids du sac à dos dépasse sa capacité, on invalide l&#8217;individu en
mettant son score à zéro, ce qui lui interdira par la suite de se reproduire.
Sinon, le score est simplement la valeur totale du sac à dos.</p>

<p>La prochaine fois on mettra en place la sélection, le croisement, la mutation,
etc…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 37: Le problème du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/'>Les algorithmes génétiques démystifiés: un point sur les performances</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 37: Le problème du sac à dos]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/"/>
    <updated>2013-11-12T13:02:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour continuer notre exploration des algorithmes génétiques, on va
s&#8217;intéresser maintenant au problème du sac à dos:</p>

<blockquote><p>En algorithmique, le problème du sac à dos, noté également KP (en anglais,<br/>Knapsack Problem) est un problème d&#8217;optimisation combinatoire. Il modélise une<br/>situation analogue au remplissage d&#8217;un sac à dos, ne pouvant supporter plus<br/>d&#8217;un certain poids, avec tout ou partie d&#8217;un ensemble donné d&#8217;objets ayant<br/>chacun un poids et une valeur. Les objets mis dans le sac à dos doivent<br/>maximiser la valeur totale, sans dépasser le poids maximum.</p><footer><strong>Wikipédia</strong> <cite><a href='http://fr.wikipedia.org/wiki/Probl%C3%A8me_du_sac_%C3%A0_dos'>fr.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>




<!-- more -->


<p>Un des intéret de ce problème est que certaines solutions <em>invalides</em> sont
plus proches de la meilleure solution que nombres de solutions <em>valides</em>.</p>

<p>De même, c&#8217;est un problème <em>théorique</em> qui peut être vu comme une
simplification de problèmes <em>pratiques</em>. Par exemple: «Mon bateau peut
transporter 100 containers, pour un poids de X tonnes. Je gagne plus ou
moins d&#8217;argent selon les containers transportés. Quels containers je dois
embarquer parmi un choix de 300 containers ?»</p>

<p>La liste des objets que je vais utiliser se trouve sur le
<a href="http://rosettacode.org/wiki/Knapsack_problem/0-1">projet RosettaCode</a>.</p>

<p>On commence tout de suite avec la création de la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">,</span> <span class="ss">:value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Knapsack</span>
</span><span class='line'>  <span class="no">ITEMS</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;map&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">150</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">35</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;water&#39;</span><span class="p">,</span> <span class="mi">153</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sandwich&#39;</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">160</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;glucose&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;tin&#39;</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">45</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;banana&#39;</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;cheese&#39;</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;beer&#39;</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;suntan cream&#39;</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;camera&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;t-shirt&#39;</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;trousers&#39;</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;umbrella&#39;</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;waterproof trousers&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;waterproof overclothes&#39;</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">75</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;note-case&#39;</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">80</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sunglasses&#39;</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;towel&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;socks&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;book&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour ceux qui ne connaissent pas Ruby, <code>Struct</code> permet de définir rapidement
une classe simpliste, une espèce de POxO (Plain Old &ldquo;insérez votre langage&rdquo;
Object). La classe <code>KnapsackItem</code> aura donc 3 accesseurs: <code>name</code>, <code>weight</code> et
<code>value</code>. On pourra accéder à la liste des objets avec <code>Knapsack::ITEMS</code>.</p>

<p>Maintenant la classe <code>Individual</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">chromosome_as_list</span>
</span><span class='line'>    <span class="n">list</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">gene</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">list</span> <span class="o">&lt;&lt;</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">name</span> <span class="k">if</span> <span class="n">gene</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">&gt;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">other</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un chromosome est défini comme un Array de booléens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chaque case de l&#8217;Array nous indique si un objet est sélectionné (true) ou
non (false).</p>

<p>J&#8217;ai aussi ajouté 2 nouvelles méthodes à cette classe. Tout d&#8217;abord
<code>chromosome_as_list</code> produit une chaîne de caractères avec la liste
des objets sélectionnés dans le chromosome. Puis la méthode <code>&gt;</code> nous
sera utile pour comparer deux chromosomes.</p>

<p>Reste la classe <code>Population</code>, qui est identique à ce que nous avons
déjà écrit avec d&#8217;autres algorithmes génétiques:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on verra une première version de la méthode d&#8217;évaluation.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/'>Les algorithmes génétiques démystifiés: un point sur les performances</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les rubyists 6: Une première fonction]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/"/>
    <updated>2013-11-11T20:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Grâce à ce qu&#8217;on a appris depuis <a href="http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction/">le début</a> de cette série d&#8217;articles,
il est enfin temps de traduire la méthode Ruby suivante en Racket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Une première fonction Racket</h2>

<p>Sans plus attendre, voici une traduction en Racket, qui suit le modèle
du <a href="http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/">dernier article</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; Is i a divisor of n?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor?</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="nv">divisor?</span> <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici la fonction en action:</p>

<pre><code>-&gt; (divisors 1)
'(1)
-&gt; (divisors 8)
'(1 2 4 8)
-&gt; (divisors 17)
'(1 17)
-&gt; (divisors 171)
'(1 3 9 19 57 171)
</code></pre>

<p>Alors ça fait pas mal de code Racket comparé au code Ruby, mais attention de ne
pas juger le langage sur ce seul exemple. D&#8217;abord l&#8217;opérateur <code>..</code> de Ruby et
ses <em>blocks</em> permettent une syntaxe incroyablement concise, ensuite je
vous rappelle que <em>j&#8217;apprends</em> Racket, et que donc j&#8217;ai peut-être raté des
trucs…</p>

<p>Vous remarquez que je me suis senti obligé de commenté la fonction imbriquée
<code>divisor?</code>, ce qui n&#8217;est pas bon signe. Je suis un adepte du code court,
sous-entendu: une fonction devrait faire une seule chose. Or il me semble
qu&#8217;ici la fonction <code>divisors</code> fait trois choses:</p>

<ol>
<li>Elle regarde si un nombre i est un diviseur de n.</li>
<li>Elle produit une liste de 1 à n inclus.</li>
<li>Enfin, elle produit la liste des diviseurs de n.</li>
</ol>


<p>Donc <code>divisors</code> est un bon candidat au refactoring. Mais avant ça il va
falloir parler des tests unitaires avec Racket. Et avant de parler des
tests unitaires, il va falloir aborder la notion de module Racket. Si
ces sujets vous intéressent, restez à l&#8217;écoute de ce blog, c&#8217;est pour
bientôt.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/'>Racket pour les rubyists 5: Définitions imbriquées</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les rubyists 5: Définitions imbriquées]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/"/>
    <updated>2013-11-10T21:17:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Après avoir vu l&#8217;utilisation de la fonction <code>filter</code>, on passe aux
définitions de fonctions imbriquées en Racket, ce qui nous permet de
survoler la portée des variables.</p>

<!-- more -->


<h2>Fonctions Racket imbriquées</h2>

<p>Avec Racket les définitions de fonction peuvent s&#8217;imbriquer les unes dans les
autres.  Autrement dit, on peut définir une fonction B à l&#8217;intérieur d&#8217;une
fonction A. Dans l&#8217;exemple suivant, la fonction <code>bar</code> est définie à
l&#8217;intérieur de la fonction <code>foo</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">foo</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bar</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">bar</span> <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le code ci-dessus, <code>bar</code> est une fonction qui ajoute 2 à son argument.
La fonction englobante <code>foo</code> appelle <code>bar</code> et donc son rôle est aussi d&#8217;ajouter
2 à son argument, comme on peut le voir dans la session racket suivante:</p>

<pre><code>-&gt; (foo 10)
12
</code></pre>

<p>Il est important de comprendre que <code>bar</code> est définie à l&#8217;intérieur de <code>foo</code>,
et donc <code>bar</code> est <em>indéfinie</em> à l&#8217;extérieur de <code>foo</code>:</p>

<pre><code>-&gt; (bar 10)
; bar: undefined;
;  cannot reference undefined identifier
</code></pre>

<h2>Méthodes Ruby imbriquées</h2>

<p>Ruby se comporte différement. Il permet bien de définir une méthode à
l&#8217;intérieur d&#8217;une autre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>    <span class="n">y</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="k">end</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">bar</span> <span class="n">x</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">nil</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="mi">10</span>
</span><span class='line'><span class="go">12</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais à la différence du comportement de Racket, la méthode Ruby <code>bar</code> est
<em>visible</em> à l&#8217;extérieur de <code>foo</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">bar</span> <span class="mi">10</span>
</span><span class='line'><span class="go">12</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et c&#8217;est tout à fait normal. Il s&#8217;agit là d&#8217;une différence entre fonction
et méthode: une méthode est attachée à un objet.</p>

<h2>Retour à Racket</h2>

<p>La méthode <code>foo</code> peut être simplifiée. La revoici:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">foo</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bar</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">bar</span> <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour la simplifier, il suffit de comprendre que l&#8217;argument <code>x</code> est <em>visible</em>
dans la fonction <code>bar</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">foo</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">bar</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Évidemment, la vraie simplification serait celle-ci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">foo</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais cet article parle de fonctions imbriquées…</p>

<p>La prochaine fois on réunira tout ce qu&#8217;on a appris jusqu&#8217;ici pour enfin
traduire en Racket la méthode Ruby suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les Rubyists 4: La fonction filter]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/09/racket-pour-les-rubyists-4-la-fonction-filter/"/>
    <updated>2013-11-09T18:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/09/racket-pour-les-rubyists-4-la-fonction-filter</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aprés avoir vu comment faire un <a href="http://lkdjiin.github.io/blog/2013/11/08/racket-pour-les-rubyists-3-trouver-les-diviseurs/">test d&#8217;égalité</a>
en Racket, on s&#8217;intéresse aujourd&#8217;hui à la fonction <code>filter</code>, en la
comparant à la méthode Ruby <code>select</code>.</p>

<!-- more -->


<h2>select vs filter</h2>

<p>Pour obtenir les nombres impairs d&#8217;une liste, voici comment on pourrait
faire en Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span> <span class="c1">#=&gt; [1, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>D&#8217;une manière générale, on a:</p>

<pre><code>liste.select bloc
</code></pre>

<p>Et voici la façon de faire en Racket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">filter</span> <span class="nv">odd?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span> <span class="c1">;=&gt; &#39;(1 3)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Qu&#8217;on généralise en:</p>

<pre><code>(filter fonction liste)
</code></pre>

<p>Comme Ruby, Racket place un point d&#8217;interrogation à la fin du nom d&#8217;une
fonction qui retourne vrai ou faux. <code>odd?</code> s&#8217;utilise ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nb">odd? </span><span class="mi">1</span><span class="p">)</span> <span class="c1">;=&gt; #t</span>
</span><span class='line'><span class="p">(</span><span class="nb">odd? </span><span class="mi">2</span><span class="p">)</span> <span class="c1">;=&gt; #f</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit que dans <code>(filter odd? '(1 2 3 4))</code>, chaque élément de la liste est
fourni <em>implicitement</em> à la fonction <code>odd?</code>. De plus, on ne mets pas de
parenthèses autour de <code>odd?</code> car on ne veut pas l&#8217;évaluer mais seulement
fournir la référence. C&#8217;est quelque chose sur lequel je reviendrais souvent
et qu&#8217;il faudra expliquer plus en détail.</p>

<p>La prochaine fois on parlera des fonctions imbriquées en Racket.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/08/racket-pour-les-rubyists-3-trouver-les-diviseurs/'>Racket pour les Rubyists 3: Trouver les diviseurs</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/06/racket-pour-les-rubyists-2-produire-une-suite-de-nombre/'>Racket pour les rubyists 2: Produire une suite de nombre</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction/'>Racket pour les Rubyists: Définir une fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les Rubyists 3: Trouver les diviseurs]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/08/racket-pour-les-rubyists-3-trouver-les-diviseurs/"/>
    <updated>2013-11-08T19:17:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/08/racket-pour-les-rubyists-3-trouver-les-diviseurs</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Précédemment, on a vu comment produire une
<a href="http://lkdjiin.github.io/blog/2013/11/06/racket-pour-les-rubyists-2-produire-une-suite-de-nombre/">liste de nombre</a>
avec la fonction <code>range</code>. Aujourd&#8217;hui on va traduire les tests Ruby suivants
en Racket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">8</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="mi">8</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Reste d&#8217;une division</h2>

<p>Pour calculer le reste d&#8217;une division euclidienne, on utilise la fonction
<code>remainder</code>. Par exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nb">remainder </span><span class="mi">8</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">;=&gt; 0</span>
</span><span class='line'><span class="p">(</span><span class="nb">remainder </span><span class="mi">8</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">;=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>D&#8217;une manière plus générale, <code>(remainder a b)</code> calcule le reste de la
division de <code>a</code> par <code>b</code>. Vous remarquerez encore une fois la notation <em>prefix</em>
de Racket.</p>

<p>Au passage, vous notez que le signe pour débuter un commentaire est le
point-virgule (<code>;</code>).</p>

<h2>Les booléens</h2>

<p>En Ruby les deux valeurs booléennes sont <strong>true</strong> et <strong>false</strong>, en Racket
elles sont notées <strong>#t</strong> et <strong>#f</strong>:</p>

<h2>Tester l&#8217;égalité</h2>

<p>Quand Ruby utilise le signe <code>==</code>, comme beaucoup d&#8217;autres langages, Racket
utilise un seul signe <code>=</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">;=&gt; #t</span>
</span><span class='line'><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">;=&gt; #f</span>
</span></code></pre></td></tr></table></div></figure>


<p>Attention, <code>=</code> ne fonctionne qu&#8217;avec les nombres comme vous pouvez le
constater dans la session suivante:</p>

<pre><code>-&gt; (= "xav" "xav")
; =: contract violation
;   expected: number?
;   given: "xav"
;   argument position: 1st
</code></pre>

<p>Donc, pour tester si le reste d&#8217;une division euclidienne est égal à zéro,
on pourra faire comme ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">8</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">;=&gt; #t</span>
</span><span class='line'><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">8</span> <span class="mi">3</span><span class="p">))</span> <span class="c1">;=&gt; #f</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et d&#8217;une manière générale, pour tester si <em>i</em> est un diviseur de <em>n</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois, on verra la fonction Racket <code>filter</code>, qui est le
pendant de la méthode <code>select</code> de Ruby.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/09/racket-pour-les-rubyists-4-la-fonction-filter/'>Racket pour les Rubyists 4: La fonction filter</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/06/racket-pour-les-rubyists-2-produire-une-suite-de-nombre/'>Racket pour les rubyists 2: Produire une suite de nombre</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction/'>Racket pour les Rubyists: Définir une fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prise en main de la gem chunky_png]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png/"/>
    <updated>2013-11-07T17:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour un projet j&#8217;ai besoin de manipuler du format png et j&#8217;ai décidé
d&#8217;utiliser la gem <code>chunky_png</code> pour faire ça. Comme je ne la connais pas,
j&#8217;écris aujourd&#8217;hui une rapide prise en main de cette gem, histoire de me
familiariser avec.</p>

<p>Pour l&#8217;installer, c&#8217;est comme d&#8217;habitude:</p>

<pre><code>gem install chunky_png
</code></pre>

<!-- more -->


<p>Pour la documentation on pourra commencer par <a href="https://github.com/wvanbergen/chunky_png/wiki">le wiki</a> du projet.</p>

<p>La première chose que je veux faire c&#8217;est lire et écrire un fichier png.</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;chunky_png&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&quot;copy.png&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après l&#8217;avoir lancé, ce programme crée une copie de l&#8217;image originale sous le
nom &ldquo;copy.png&rdquo;:</p>

<pre><code>[~]⇒ ruby test.rb test.png 
</code></pre>

<p>Super, bon début. Maintenant je voudrais accéder à la valeur RGB d&#8217;un pixel
quelconque de l&#8217;image. Voici le second programme:</p>

<figure class='code'><figcaption><span>test2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;chunky_png&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">g</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">b</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">to_hex</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">60</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">to_truecolor_bytes</span><span class="p">(</span><span class="n">image</span><span class="o">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">80</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et un exemple de sortie possible:</p>

<pre><code>[~]⇒ ruby test2.rb test.png 
255
255
255
"#000000ff"
[0, 0, 0]
</code></pre>

<p>L&#8217;image est vue comme un tableau à 2 dimensions: <code>image[x, y]</code>.
Les méthodes <code>r</code>, <code>g</code> et <code>b</code> renvoient respectivement la composante rouge,
verte ou bleue du pixel. La méthode <code>to_hex</code> formate <em>à la HTML</em> et la
méthode <code>to_truecolor_bytes</code> renvoie un tableau des trois composantes RGB.</p>

<p>J&#8217;aimerais maintenant dessiner un rectangle dans l&#8217;image:</p>

<figure class='code'><figcaption><span>test3.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;chunky_png&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">99</span><span class="p">)</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&quot;copy.png&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous lancez ce programme (avec <code>ruby test3.rb test.png</code>), vous verrez
qu&#8217;il dessine bien un rectangle (x = 0, y = 0, largeur = 99, hauteur = 99).
Malheureusement, seul le <em>contour</em> du rectangle est dessiné.
Pour dessiner un rectangle rempli, il en faut un peu plus:</p>

<figure class='code'><figcaption><span>test4.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;chunky_png&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_color</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">rgb</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="n">my_color</span><span class="p">,</span> <span class="n">my_color</span><span class="p">)</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&quot;copy.png&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois on a bien un rectangle <em>rempli</em>. Et au passage on voit comment
définir une couleur au format RGB.</p>

<p>Pour finir, je voudrais créer une image:</p>

<figure class='code'><figcaption><span>test5.png</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;chunky_png&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span>
</span><span class='line'>                             <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>                             <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">::</span><span class="no">WHITE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_color</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">rgb</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="n">my_color2</span> <span class="o">=</span> <span class="ss">ChunkyPNG</span><span class="p">:</span><span class="ss">:Color</span><span class="o">.</span><span class="n">rgb</span><span class="p">(</span><span class="mi">110</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">199</span><span class="p">,</span> <span class="mi">199</span><span class="p">,</span> <span class="n">my_color</span><span class="p">,</span> <span class="n">my_color</span><span class="p">)</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">rect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">399</span><span class="p">,</span> <span class="mi">399</span><span class="p">,</span> <span class="n">my_color2</span><span class="p">,</span> <span class="n">my_color2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&quot;new.png&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le programme se lance avec <code>ruby test5.rb</code> et crée une nouvelle image <code>new.png</code>.
Le constructeur de <code>Image</code> prend tout simplement la largeur, la hauteur et
la couleur de fond de l&#8217;image.</p>

<p>En bref, <code>chunky_png</code> est une gem qui a l&#8217;air simple a utiliser.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les rubyists 2: Produire une suite de nombre]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/06/racket-pour-les-rubyists-2-produire-une-suite-de-nombre/"/>
    <updated>2013-11-06T19:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/06/racket-pour-les-rubyists-2-produire-une-suite-de-nombre</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La <a href="http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction/">dernière fois</a>
on a vu comment définir une fonction en Racket. Aujourd&#8217;hui on va essayer
de traduire la méthode Ruby suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Tout d&#8217;abord, j&#8217;ai envie découper cette méthode en trois parties plus petites:</p>

<ol>
<li><code>1..n</code>, pour produire une suite de nombre.</li>
<li><code>select</code>, qui est la méthode utilisée pour conserver/supprimer certains
éléments.</li>
<li><code>n % i == 0</code>, qui est un test pour savoir si i est un diviseur de n.</li>
</ol>


<h2>Produire une suite de nombre</h2>

<p>On s&#8217;intéresse d&#8217;abord à la 1ère partie. Racket possède la fonction <code>range</code>,
qui produit une liste de nombre. En fournissant un seul argument, n, <code>range</code>
produit une liste de 0 à n <em>non-inclus</em>:</p>

<pre><code>-&gt; (range 4)
'(0 1 2 3)
</code></pre>

<p>En fournissant deux arguments, m et n, <code>range</code> produit une liste de m à n
<em>non-inclus</em>:</p>

<pre><code>-&gt; (range 1 4)
'(1 2 3)
</code></pre>

<p>Pour être exhaustif, il existe une dernière possibilité, avec 3 arguments
m, n et p, pour produire une liste
de m à n <em>non-inclus</em> par pas de p:</p>

<pre><code>-&gt; (range 10 20 3)
'(10 13 16 19)
</code></pre>

<p>Pour produire une liste de m à n <em>inclus</em>, il faut falloir augmenter n de 1:</p>

<pre><code>-&gt; (define n 4)
-&gt; (range 1 (+ n 1))
'(1 2 3 4)
</code></pre>

<p>Vous notez au passage la manière de définir une variable, identique à la
définition d&#8217;une méthode, ainsi que la façon dont Racket écrit une liste:</p>

<ul>
<li>entre parenthèses</li>
<li>précédée par un apostrophe</li>
<li>pas de virgule pour séparer les éléments</li>
</ul>


<p>Le prochain article abordera le test d&#8217;égalité en Racket.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/09/racket-pour-les-rubyists-4-la-fonction-filter/'>Racket pour les Rubyists 4: La fonction filter</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/08/racket-pour-les-rubyists-3-trouver-les-diviseurs/'>Racket pour les Rubyists 3: Trouver les diviseurs</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction/'>Racket pour les Rubyists: Définir une fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une regex pour savoir si un nombre est premier]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/05/une-regex-pour-savoir-si-un-nombre-est-premier/"/>
    <updated>2013-11-05T16:55:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/05/une-regex-pour-savoir-si-un-nombre-est-premier</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui je traduis (approximativement) un article de 2007 qui m&#8217;a fasciné:
<a href="http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/">A regular expression to check for prime numbers</a>.</p>

<!-- more -->


<p>Les regexs sont très puissantes. C&#8217;est un truc que je lis une ou deux fois par
jour sur le web.</p>

<p>Pendant que j&#8217;étais sur le net aujourd&#8217;hui, je suis tombé sur
<a href="http://montreal.pm.org/tech/neil_kandalgaonkar.shtml">cette page</a>
qui décrit minutieusement la regex <code>/^1?$|^(11+?)\1+$/</code> en Perl pour voir
si un nombre est premier ou non !</p>

<p>Pour être franc, j&#8217;étais sceptique. La regex semble être magique ! Et je
voulais la comprendre mieux. Je l&#8217;ai réécrite en Ruby, pour la tester:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">[~]⇒ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">prime?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">*</span> <span class="n">n</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">=&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">prime?</span> <span class="mi">10</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">prime?</span> <span class="mi">11</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">prime?</span> <span class="mi">12</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">prime?</span> <span class="mi">13</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">prime?</span> <span class="mi">99</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">prime?</span> <span class="mi">100</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">prime?</span> <span class="mi">101</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool ! Ça marche aussi en Ruby ! Ce qui veut dire qu&#8217;il n&#8217;y a aucune magie
due à Perl. La regex fonctionne vraiment. Mais comment ? Essayons de la
décortiquer.</p>

<h2>Est-ce-que 7 est un nombre premier ?</h2>

<p>Pour le savoir, la méthode génère &ldquo;1111111&rdquo; et regarde si cette chaîne
<strong>ne correspond pas</strong> avec <code>/^1?$|^(11+?)\1+$/</code>. Si il n&#8217;y a pas
correspondance, alors le nombre est premier.</p>

<p>Notez que la regex a deux parties (séparées par une barre verticale <code>|</code>).</p>

<p>La première partie <code>/^1?$/</code> est triviale, et cherche une correspondance
avec un début de ligne (<code>^</code>), un 1 optionel (<code>1?</code>) et une fin de ligne
(<code>$</code>), ce qui implique une chaîne vide ou &ldquo;1&rdquo;. Donc l&#8217;appel de cette
méthode quand n vaut 0 ou 1 renverra false, le bon résultat.</p>

<p>La seconde partie est plus… magique…</p>

<p><code>/^(11+?)\1+$/</code> cherche une correspondance avec un début de ligne (<code>^</code>)
puis <code>11+?</code> puis <code>\1+</code> et finalement une fin de ligne (<code>$</code>).
Je suppose que vous savez que <code>\1</code> est une variable attachée à ce qui a été
mis en correspondance précédement (dans notre cas avec <code>11+?</code>).</p>

<p>Allons y lentement…</p>

<p><code>(11+?)</code> fait deux choses:</p>

<ol>
<li>Il cherche une correspondance avec un &ldquo;1&rdquo; suivi par un ou plusieurs autres
&ldquo;1&rdquo; <strong>de façon minimale</strong>. Ce qui signifie qu&#8217;on aura une correspondance
avec &ldquo;11&rdquo; la première fois (notez que si il n&#8217;y avait pas de <code>?</code> dans
<code>(11+?)</code> c&#8217;est la chaîne entière qui serait mise en correspondance).</li>
<li>La chaîne obtenue (&ldquo;11&rdquo; la première fois) est attachée à la variable <code>\1</code>.</li>
</ol>


<p><code>\1+</code> cherche alors une correspondance avec ce qu&#8217;on a obtenu avant (&ldquo;11&rdquo;
la première fois) <strong>de manière répétitive, une ou plusieurs fois</strong>.
Si une correspondance est trouvée, alors le nombre n&#8217;est pas premier.</p>

<p>Si vous suivez jusqu&#8217;ici, vous avez peut-être réalisé que cela éliminait tout
les nombres pairs, excepté 2 (par exemple, 8 est &ldquo;11111111&rdquo; and donc <code>(11+?)</code>
va correspondre avec &ldquo;11&rdquo; et <code>\1+</code> va correspondre avec &ldquo;111111&rdquo;).</p>

<p>Pour les nombres impairs (7 dans notre cas), le <code>(11+?)</code> correspond à &ldquo;11&rdquo;
la première fois mais <code>\1+$</code> ne peut pas être vrai (notez le <code>$</code>) puisqu&#8217;il
reste cinq &ldquo;1&rdquo;. Le moteur de regexp va <strong>revenir en arrière</strong> et <code>(11+?)</code>
va alors correspondre avec &ldquo;111&rdquo; et là aussi, <code>\1+$</code> sera faux puisqu&#8217;il
reste quatre &ldquo;1&rdquo; (et à ce moment là, <code>\1+$</code> ne peut correspondre qu&#8217;avec un
nombre de &ldquo;1&rdquo; qui est multiple de 3, suivi par une fin de ligne), etc…
D&#8217;où le fait que &ldquo;1111111&rdquo; ne correspondra jamais avec la regex, ce qui
implique que 7 est un nombre premier.</p>

<p>[&hellip;] Voyons ce qu&#8217;il se passe avec 9, qui n&#8217;est pas un nombre premier:
&ldquo;1&rdquo; * 9 devrait correspondre avec la regex.</p>

<p>&ldquo;1&rdquo; * 9 = &ldquo;111111111&rdquo;. <code>(11+?)</code> correspond initialement à &ldquo;11&rdquo;. <code>\1+$</code> ne
peut être mis en correspondance puisqu&#8217;il reste 7 &ldquo;1&rdquo;. Quand le moteur de
regex repart en arrière, <code>(11+?)</code> correspond alors avec &ldquo;111&rdquo;. Et cette
fois <code>\1+$</code> correspond aux 6 &ldquo;1&rdquo; restants ! D&#8217;où 9 n&#8217;est pas premier.</p>

<p>Simple et beau en même temps.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 37: Le problème du sac à dos</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire une fonction Vim avec Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/04/ecrire-une-fonction-vim-avec-ruby/"/>
    <updated>2013-11-04T17:01:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/04/ecrire-une-fonction-vim-avec-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Parfois, pas besoin de faire appel à un plugin, une simple petite fonction
suffit pour ce qu&#8217;on veut faire. Mais il faut avouer que le Vim Script est
un langage qui est loin de faire l&#8217;unanimité. Si on pouvait faire appel
à Ruby (ou Python, etc) pour écrire en partie nos fonctions Vim, ce serait
cool, non ?</p>

<!-- more -->


<h2>Un cas d&#8217;utilisation simple</h2>

<p>Prenons un cas habituel: supprimer les espaces en fin de ligne dans tout un
fichier. Pour cela il nous suffit d&#8217;écrire directement dans Vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="k">s</span><span class="sr">/\s\+$/</span>/
</span></code></pre></td></tr></table></div></figure>


<p>Mouais… Ça fonctionne, c&#8217;est sûr. Mais j&#8217;ai deux petits problèmes:</p>

<ol>
<li>Je ne veux pas taper ça à chaque fois, parce qu&#8217;il faut que je me
concentre un minimum pour bien écrire une regex, même si là y a pas
de quoi fouetter un chat. En même temps, ça ne vaut pas le coup
d&#8217;écrire un plugin juste pour ça.</li>
<li>Y&#8217;a rien à faire, je ne me rappelle jamais comment fonctionnent les
regex Vim, quels sont les méta-caractères et tout et tout. 9 fois
sur 10 j&#8217;oublierais par exemple d&#8217;échapper le <code>+</code>.</li>
</ol>


<h2>Une fonction Vim</h2>

<p>Si ça ne vaut pas un plugin, ça vaut bien une petite fonction à mettre,
par exemple, dans son <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> RemoveTrailingSpaces<span class="p">()</span>
</span><span class='line'>  %<span class="k">s</span><span class="sr">/\s\+$/</span>/
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant, on peut appeler notre fonction ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">call</span> RemoveTrailingSpaces<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou bien la mapper sur une touche, si on l&#8217;utilise souvent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">r</span> :<span class="k">call</span> RemoveTrailingSpaces<span class="p">()&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Premier problème réglé, au suivant.</p>

<h2>Utiliser Ruby dans une fonction Vim</h2>

<p>Il faut bien sûr que votre Vim ait été compilé avec le support de Ruby.
Pour le savoir vous pouvez taper la ligne suivante dans votre console,
si &ldquo;+ruby&rdquo; s&#8217;affiche, c&#8217;est bon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ vim --version | grep --color -i <span class="se">\+</span>ruby
</span><span class='line'>+printer +profile +python -python3 +quickfix +reltime +rightleft +ruby
</span></code></pre></td></tr></table></div></figure>


<p>Voilà ce que donnerait notre fonction en utilisant Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> RemoveTrailingSpaces<span class="p">()</span>
</span><span class='line'>  <span class="k">rubydo</span> gsub <span class="sr">/\s+$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est tout, <code>rubydo</code> suivi de l&#8217;instruction en Ruby !  Et vous, vous auriez des
petites astuces de ce genre à partager ?</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 37: Le problème du sac à dos</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les Rubyists: Définir une fonction]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction/"/>
    <updated>2013-11-03T15:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Racket est un langage dérivé de Scheme que je suis en train d&#8217;apprendre.
Je vais m&#8217;inspirer de ma série d&#8217;articles
<a href="http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/">Apprendre Ruby en faisant des maths</a>
pour expliquer les bases de Racket en le comparant à Ruby. Si vous
connaissez un peu Ruby, j&#8217;espère que vous n&#8217;aurez aucun mal à suivre
ces articles. On commence aujourd&#8217;hui avec la définition d&#8217;une fonction.</p>

<!-- more -->


<p>J&#8217;utiliserais la version 5.3.6 de Racket et la version 2.0 de Ruby.
Au début, on va utiliser le REPL, pour Ruby on a <code>irb</code>, pour Racket on
a <code>racket</code>.</p>

<h2>Définir une fonction</h2>

<p>Racket a des fonctions et Ruby a des méthodes, mais ça ne fait aucune
différence pour l&#8217;instant. Voyons comment définir une fonction <code>addition</code>,
qui va calculer et renvoyer la somme de deux arguments, <code>a</code> et <code>b</code>:</p>

<pre><code>[~]⇒ racket
-&gt; (define (addition a b)
     (+ a b))
-&gt; (addition 12 34)
46
</code></pre>

<p>Comparons immédiatement avec la version Ruby:</p>

<pre><code>[~]⇒ irb
&gt;&gt; def addition(a, b)
&gt;&gt;   a + b
&gt;&gt; end
nil
&gt;&gt; addition 12, 34
46
</code></pre>

<p>Première remarque: avec Racket les parenthèses sont <strong>très importantes</strong>.
On est obligé de les utilisées, et de les utilisées correctement.</p>

<p>Deuxième remarque: Ruby utilise la notation <em>infix</em> (<code>a + b</code>) alors que
Racket utilise la notation <em>prefix</em> (<code>+ a b</code>). Étrange au début si vous
n&#8217;avez jamais utilisé ce genre de truc, on s&#8217;y fait très vite.</p>

<p>Troisième remarque: avec Racket les arguments ne sont pas séparés par des
virgules.</p>

<p>Enfin, Ruby utilise des mots clés (<code>def</code> et <code>end</code>) pour délimiter un
bloc/ensemble d&#8217;instructions alors que Racket utilise simplement les
parenthèses.</p>

<p><strong>Exercice</strong>: Sur le même modèle que la fonction <code>addition</code>, définissez et
utilsez les fonctions <code>soustraction</code> et <code>multiplication</code>. Voici les solutions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">soustraction</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">- </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">soustraction</span> <span class="mi">17</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">multiplication</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">multiplication</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/09/racket-pour-les-rubyists-4-la-fonction-filter/'>Racket pour les Rubyists 4: La fonction filter</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/08/racket-pour-les-rubyists-3-trouver-les-diviseurs/'>Racket pour les Rubyists 3: Trouver les diviseurs</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/06/racket-pour-les-rubyists-2-produire-une-suite-de-nombre/'>Racket pour les rubyists 2: Produire une suite de nombre</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Coloration syntaxique des parenthèses]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses/"/>
    <updated>2013-11-02T12:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je l&#8217;ai annoncé sur ce blog, je suis en train d&#8217;apprendre Racket (dérivé de
Scheme, de Lisp). Donc un langage qui fait un très large usage des
parenthèses.</p>

<p><img src="http://lkdjiin.github.io/images/rainbow-parentheses.png"></p>

<!-- more -->


<p>C&#8217;est là que le plugin <a href="http://www.vim.org/scripts/script.php?script_id=3772">Rainbow Parentheses</a> peut aider.
Il colore les parenthèses différement suivant le niveau d&#8217;imbrication.
Il n&#8217;est pas activé par défaut, et c&#8217;est tant mieux: ce type de coloration
syntaxique n&#8217;est pas utile tout le temps, mais seulement à certains moments,
quand on se sent un peu perdu
(<em>sinon, bonjour l&#8217;effet sapin de Noël</em>). Pour l&#8217;activer/le désactiver, il suffit de
taper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>RainbowParenthesesToggle
</span></code></pre></td></tr></table></div></figure>


<p>Si vous l&#8217;utilsez régulièrement, il sera sûrement utile de mapper la fonction
précédente. Par exemple pour l&#8217;avoir en tapant la touche <code>leader</code> puis <code>p</code>,
vous ajouterez ceci dans votre .vimrc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">p</span> :RainbowParenthesesToggle<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le plugin Rainbow Parentheses peut aussi colorer d&#8217;autres paires de caractères,
comme <code>[]</code>, <code>{}</code> et <code>&lt;&gt;</code>. Consultez le readme pour en savoir plus.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/'>Vim: Créez des présentations avec Vimdeck</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty/'>Vim: la commande point et le clavier Azerty</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/'>Le système de fenêtrage de Vim</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths 6: méthodes utilitaires et module]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/01/apprendre-ruby-en-faisant-des-maths-6-methodes-utilitaires-et-module/"/>
    <updated>2013-11-01T21:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/01/apprendre-ruby-en-faisant-des-maths-6-methodes-utilitaires-et-module</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans les articles précédents, nous avons définis trois méthodes:
<code>divisors</code>, <code>proper_divisors</code> et <code>sum_of_proper_divisors</code>.
Ces trois méthodes commencent à former ce qu&#8217;on appelle une
collection, ou un ensemble, de méthodes utilitaires. Nous allons
aujourd&#8217;hui les regrouper dans un module.</p>

<!-- more -->


<p>Pour l&#8217;instant nous n&#8217;avons que trois méthodes, et elles portent toutes
sur les nombres. Mais nous allons bientôt en ajouter d&#8217;autres, peut-être
beaucoup d&#8217;autres. Certaines porteront peut-être sur la géométrie ou les
probabilités ? Il est plus propre de regrouper entre elles les méthodes
qui traitent du même sujet, alors pourquoi attendre ?</p>

<p>Voici comment on peut regrouper nos méthodes au sein du module <code>Number</code>:</p>

<figure class='code'><figcaption><span>number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Number</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sum_of_proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous voyez que les méthodes sont insérées à l&#8217;intérieur de:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Number</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous voyez aussi qu&#8217;on a ajouté <code>self.</code> devant le nom de chaque méthode.
Cela indique à Ruby qu&#8217;on veut utiliser ces méthodes sans pour autant
avoir à créer un objet (<em>si vous ne savez pas encore ce qu&#8217;est un objet,
ne vous inquiétez pas, nous n&#8217;en avons pas besoin pour l&#8217;instant</em>).</p>

<p>Voici une seconde manière de regrouper nos méthodes au sein du module <code>Number</code>:</p>

<figure class='code'><figcaption><span>number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Number</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="n">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum_of_proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="n">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette deuxième syntaxe, qui peut sembler un peu bizarre si vous la
rencontrez pour la première fois, fait exactement la même chose que
la première syntaxe. Avec Ruby, il y a souvent plusieurs façons de dire
une même chose.
Je ne vais pas expliquer cette syntaxe aujourd&#8217;hui, mais sachez qu&#8217;elle
est très prisée dans la communauté Ruby et que vous la rencontrerez
souvent. Vous pouvez choisir celle que vous voulez.</p>

<p>Notez que, <strong>par convention</strong>, le module Number doit être enregistré
dans le fichier <code>number.rb</code>. Il n&#8217;y a pas d&#8217;obligation, mais avouez
que ça facilite grandement les choses.</p>

<h2>Comment utiliser un module ?</h2>

<p><strong>Première solution</strong>, vous pouvez écrire votre code à la suite du module:</p>

<figure class='code'><figcaption><span>number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Number</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="n">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum_of_proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="n">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Number</span><span class="o">.</span><span class="n">sum_of_proper_divisors</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis vous lancez le programme:</p>

<pre><code>[~/]⇒ ruby number.rb 
7
</code></pre>

<p><strong>Deuxième solution</strong>, vous lancez irb, <em>dans le même dossier</em> que le fichier
<code>number.rb</code> et vous chargez le module:</p>

<pre><code>[~/]⇒ irb
&gt;&gt; require "./number"
true
&gt;&gt; Number.sum_of_proper_divisors 8
7
</code></pre>

<p><strong>Troisième solution</strong>, vous écrivez un programme dans un fichier séparé, par
exemple <code>test.rb</code>, <em>dans le même dossier</em> que le fichier
<code>number.rb</code>:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;./number&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Number</span><span class="o">.</span><span class="n">sum_of_proper_divisors</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis vous le lancez:</p>

<pre><code>[~/]⇒ ruby test.rb
7
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installer Scheme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/31/installer-scheme/"/>
    <updated>2013-10-31T18:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/31/installer-scheme</id>
    <content type="html"><![CDATA[<p>Avant d&#8217;apprendre Scheme, il faut l&#8217;installer. Avant de l&#8217;installer, il
faut choisir une implémentation: interpréteur ou compilateur ? Les deux ?
Quel OS ? Quel(s) dialecte(s) ? Le site
<a href="http://community.schemewiki.org/?scheme-faq-standards#implementations">community.schemewiki.org</a>
recense 75 implémentations ! Oui, j&#8217;ai compté.</p>

<!-- more -->


<p>Après prises de conseils et réflexion, j&#8217;ai décidé d&#8217;essayer trois
implémentations:
<a href="http://www.gnu.org/software/guile/">Guile</a>,
<a href="http://www.call-cc.org/">Chicken</a>
et <a href="http://racket-lang.org/">Racket</a>.
<strong>Guile</strong> parce qu&#8217;il est déjà installé sur ma machine.
<strong>Chicken</strong> pour son compilateur vers
le langage C. <strong>Racket</strong> pour ses nombreux DSL, parce qu&#8217;il a l&#8217;air très cool
pour créer de nouveaux DSL et parce qu&#8217;il semble être le plus utilisé.</p>

<h2>Guile</h2>

<p>Guile semble être déjà installé sur la plupart des Linux. En tout cas, il
l&#8217;était sur ma machine…
Le REPL n&#8217;utilise pas readline par défaut, ce qui est d&#8217;ailleurs le cas
des 3 implementations que j&#8217;ai testé.
Pour activer readline, il faut créer un fichier <code>.guile</code> dans le <code>home</code> et y mettre:</p>

<figure class='code'><figcaption><span>.guile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">use-modules</span> <span class="p">(</span><span class="nf">ice-9</span> <span class="nv">readline</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">activate-readline</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Chicken</h2>

<p>J&#8217;ai installé Chicken grâce aux paquets Debian, rien à dire… Pour activer
readline dans le REPL, il faut d&#8217;abord installer une bibliothèque (un <em>egg</em>
dans le jargon Chicken):</p>

<pre><code>sudo chicken-install readline
</code></pre>

<p>Ensuite on crée un fichier <code>~/.csirc</code> avec le contenu suivant:</p>

<figure class='code'><figcaption><span>.csirc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="nv">readline</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">current-input-port </span><span class="p">(</span><span class="nf">make-gnu-readline-port</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">gnu-history-install-file-manager</span>
</span><span class='line'> <span class="p">(</span><span class="nb">string-append </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nf">get-environment-variable</span> <span class="s">&quot;HOME&quot;</span><span class="p">)</span> <span class="s">&quot;.&quot;</span><span class="p">)</span> <span class="s">&quot;/.csi.history&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin on crée le fichier d&#8217;historique:</p>

<pre><code>touch ~/.csi.history
</code></pre>

<h2>Racket</h2>

<p>Je voulais la toute dernière version, j&#8217;ai donc téléchargé les sources et
lancé une compilation. Tout a très bien fonctionné, le fichier <code>README</code> est
parfaitement clair. Pour activer readline dans le REPL de Racket, il faut
cette fois créé un fichier <code>~/.racketrc</code> avec le texte suivant:</p>

<figure class='code'><figcaption><span>.racketrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="nv">xrepl</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/'>Racket pour les rubyists 5: Définitions imbriquées</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/30/apprendre-ruby-en-faisant-des-maths-5/"/>
    <updated>2013-10-30T19:15:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/30/apprendre-ruby-en-faisant-des-maths-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Jusqu&#8217;ici on a écrit une méthode qui calcule les diviseurs d&#8217;un nombre et
une seconde méthode qui calcule les diviseurs stricts.
Notre objectif étant de lister les nombres amiables jusqu&#8217;à 10 000, il nous
faut maintenant obtenir la <em>somme</em> des diviseurs stricts d&#8217;un nombre.</p>

<!-- more -->


<p>Il nous faut donc calculer la somme des nombres qui composent une liste.
Allons y, prenons une liste et plaçons la dans une variable nommée <code>x</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons déjà vu la méthode <code>select</code>, qui sélectionne certains éléments
d&#8217;une liste ; nous allons voir maintenant la méthode <code>reduce</code>, qui va <em>réduire</em>
les éléments d&#8217;une liste à <em>un seul</em> élément:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">x</span><span class="o">.</span><span class="n">reduce</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">int</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">int</span><span class="p">}</span>
</span><span class='line'><span class="go">=&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>Contrairement à la méthode <code>select</code> qui ne prenait qu&#8217;une seule variable
dans le bloc d&#8217;instruction, la méthode <code>reduce</code> en prends ici deux:
<code>sum</code> et <code>int</code>. <code>sum</code> joue le rôle d&#8217;un accumulateur et contient le résultat
qui sera retourné par la méthode. <code>int</code> fait référence à l&#8217;élément de la
liste en cours de traitement, exactement comme avec <code>select</code>. Pour chaque
élément de la liste <code>x</code>, l&#8217;instruction <code>sum + int</code> est exécutée.</p>

<p>On peut se demander quelle est la valeur initiale de <code>sum</code> ? Tout simplement
le premier élément de la liste. Et nous ne sommes pas limité aux nombres,
<code>reduce</code> fonctionnera avec ce qu&#8217;on veut, par exemple des chaînes de
caractères:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="s2">&quot;f&quot;</span><span class="p">,</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span> <span class="s2">&quot;o&quot;</span><span class="o">].</span><span class="n">reduce</span> <span class="p">{</span><span class="o">|</span><span class="n">string</span><span class="p">,</span> <span class="n">letter</span><span class="o">|</span> <span class="n">string</span> <span class="o">+</span> <span class="n">letter</span><span class="p">}</span>
</span><span class='line'><span class="go">=&gt; &quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby permet aussi de simplifier l&#8217;écriture dans un cas trivial comme le
notre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">x</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>En fait, <code>reduce</code> ne prend pas obligatoirement un bloc. Ci-dessus,
<code>reduce</code> prend
en argument un symbole: <code>:+</code>. <code>+</code> est le nom d&#8217;une méthode. Oui, <code>+</code> est
bien une méthode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">1</span><span class="o">.</span><span class="n">+</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je ne vais pas parler plus des symboles aujourd&#8217;hui, sachez seulement
que les deux écritures suivantes font la même chose mais que la seconde
est plus dans l&#8217;esprit de Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">reduce</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">int</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">int</span><span class="p">}</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, on est prêt à implémenter la méthode <code>sum_of_proper_divisors</code>, ce
qui signifie en français «somme des diviseurs stricts»:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sum_of_proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme la dernière fois, on se sert d&#8217;une méthode plus générale
(<code>proper_divisors</code>) pour écrire une méthode plus spécifique.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">&gt;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">&gt;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">sum_of_proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">&gt;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">divisors</span> <span class="mi">8</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4, 8]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">proper_divisors</span> <span class="mi">8</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">sum_of_proper_divisors</span> <span class="mi">8</span>
</span><span class='line'><span class="go">=&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je vais apprendre Scheme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme/"/>
    <updated>2013-10-29T22:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme</id>
    <content type="html"><![CDATA[<p>C&#8217;est décidé, je me mets à <a href="http://en.wikipedia.org/wiki/Scheme_%28programming_language%29">Scheme</a>.
En voici les raisons principales:</p>

<ul>
<li>Je veux apprendre <a href="http://racket-lang.org/">Racket</a>, qui est me semble-t-il un surensemble de Scheme.</li>
<li>J&#8217;ai essayé Emacs Lisp il y a longtemps (au siècle dernier !),
j&#8217;avais trouvé ça intéressant.</li>
<li>J&#8217;ai fait du Logo il y a encore plus longtemps et j&#8217;en garde un très
bon souvenir.</li>
<li>Je cherche un langage qui ne soit pas orienté objet pour écrire des
algorithmes génétiques, parce que je ne suis pas persuadé que ce soit
le meilleur paradigme pour ce type de programmes.</li>
<li>Je cherche un langage qui ait un coté fonctionnel mais je ne suis pas
encore prêt à abandonner le confort des variables mutables.</li>
</ul>


<!-- more -->


<p>Bref, je crois que Scheme (Racket en fait) est le langage que je cherche.
Vous pouvez donc vous attendre à quelques articles sur le sujet dans les
semaines qui viennent ;) Et pour commencer je parlerais un peu de la
<strong>véritable jungle</strong> des interpreteurs/compilateurs pour Scheme.
J&#8217;en ai sélectionné deux pour l&#8217;instant: Guile et Racket.</p>

<p>Est-ce-que certains d&#8217;entre vous ont de l&#8217;expérience avec Scheme et/ou
Racket ? Des conseils à me donner ?</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/31/installer-scheme/'>Installer Scheme</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/28/apprendre-ruby-en-faisant-des-maths-4/"/>
    <updated>2013-10-28T16:15:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/28/apprendre-ruby-en-faisant-des-maths-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La <a href="http://lkdjiin.github.io/blog/2013/10/25/apprendre-ruby-en-faisant-des-maths-3/">dernière fois</a>,
on a écrit une méthode qui calcule et renvoie les diviseurs d&#8217;un nombre n:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">int</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">int</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aujourd&#8217;hui, on se sert de cette méthode pour en écrire une autre.</p>

<!-- more -->


<p>Après avoir obtenu la liste des diviseurs d&#8217;un nombre, je voudrais maintenant
pouvoir obtenir la liste des diviseurs <em>stricts</em> d&#8217;un nombre. C&#8217;est à dire
tous les diviseurs de n <em>sauf</em> le nombre n lui-même.</p>

<pre><code>diviseurs de 8 :         1 ; 2 ; 4 ; 8
diviseurs stricts de 8 : 1 ; 2 ; 4
</code></pre>

<p>La méthode <code>divisors</code> fait <em>presque</em> ce qu&#8217;on veut. Elle renvoie un nombre de
trop, le dernier. On voudrait donc une nouvelle méthode qui renvoie la même
chose que <code>divisors</code>, exepté le dernier élément de la liste. Voyons comment
obtenir juste une partie d&#8217;une liste à l&#8217;aide d&#8217;<code>irb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">int</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">int</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">liste</span> <span class="o">=</span> <span class="n">divisors</span> <span class="mi">8</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4, 8]</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a commencé par reécrire la méthode <code>divisors</code>, puis on a assigné à la
variable <em>liste</em> les diviseurs du nombre 8. Notre liste (qui, je le rappelle
est de type <code>Array</code>) comporte quatre éléments. En Ruby, comme dans beaucoup
d&#8217;autres langages, le numéro d&#8217;ordre d&#8217;un élément d&#8217;une liste (qu&#8217;on appelle
aussi indice ou index) comme avec zéro. Notre liste à donc 4 éléments, dont
les indexs vont de 0 à 3:</p>

<pre><code>index  élément
  0       1
  1       2
  2       4
  3       8
</code></pre>

<p>Pour obtenir le 1er élément (index 0) je dois écrire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">liste</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour obtenir le 4ème, et dernier, élément (index 3) j&#8217;écris:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">liste</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; 8</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est bien joli mais je veux obtenir un <em>ensemble</em> d&#8217;élément, et pas un
élément unique comme dans les exemples précédents. Et si on essayait avec
un <code>Range</code> ? On veut les 3 premiers éléments, autrement dit les éléments
d&#8217;index 0 à 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">liste</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>On y est presque ! Effectivement, ce que je veux en réalité ce n&#8217;est pas
les éléments de 0 jusqu&#8217;à 2, mais les éléments de 0 jusqu&#8217;à <em>l&#8217;avant-dernier</em>.
Je veux que ça fonctionne quelque soit le nombre d&#8217;élément de la liste.
Pour cela, Ruby offre une syntaxe très simple: le dernier élément de la
liste se voit attribuer l&#8217;index <code>-1</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">liste</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4, 8]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et comme vous l&#8217;avez peut-être déjà deviné, l&#8217;avant-dernier élément possède
l&#8217;index <code>-2</code> (et ainsi de suite…):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">liste</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois ça y est, on est prêt à se servir de la méthode <code>divisors</code> comme
d&#8217;une base pour construire une nouvelle méthode. Celle-ci va s&#8217;appeler
<code>proper_divisors</code>, ce qui signifie «diviseurs stricts» en anglais:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">proper_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">divisors</span> <span class="mi">8</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4, 8]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">proper_divisors</span> <span class="mi">8</span>
</span><span class='line'><span class="go">=&gt; [1, 2, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
