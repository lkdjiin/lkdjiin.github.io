<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-11T19:34:14+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les fonctions en Julia]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/11/les-fonctions-en-julia/"/>
    <updated>2014-05-11T18:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/11/les-fonctions-en-julia</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici une présentation de base des fonctions en Julia, d&#8217;après ce que j&#8217;en ai retenu ;)</p>

<p>Tout d&#8217;abord, une définition d&#8217;une fonction nommée <code>double</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> double</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>On voit que la valeur de retour est <em>implicite</em>, pas besoin du mot-clé
<code>return</code>. On peut le mettre si on veut, la fonction suivante est identique
à la précédente:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> double</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà comment on appelle cette fonction, rien à dire de particulier
là-dessus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">double</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="c"># =&gt; 24</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quand une fonction est aussi simple que la fonction <code>double</code>, on peut aussi
la définir comme suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">double</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si notre programme comporte de nombreuses petites fonctions, cette concision
peut être un atout.</p>

<p>Une fonction Julia est une valeur comme une autre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="nb">typeof</span><span class="p">(</span><span class="n">double</span><span class="p">)</span> <span class="c"># =&gt; Function</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut donc affecter cette <em>valeur</em> à une autre variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">bis</span> <span class="o">=</span> <span class="n">double</span>
</span><span class='line'><span class="n">bis</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c"># =&gt; 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut passer une fonction en argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">map</span><span class="p">(</span><span class="n">double</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span> <span class="c"># =&gt; [2, 4, 6]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un truc sympa en Julia, c&#8217;est qu&#8217;une fonction est composée de une ou plusieurs
méthodes ! Quand j&#8217;ai lu ça la première fois… j&#8217;ai pensé que l&#8217;auteur de cette
phrase était dingue. En fait il s&#8217;agit simplement de fonctions avec un nom
identique mais des signatures différentes. Par exemple, si j&#8217;essaye de
<em>doubler</em> une chaîne de caractères:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">double</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c"># =&gt; ERROR: no method +(ASCIIString, ASCIIString)</span>
</span><span class='line'><span class="c">#     in double at none:1</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;obtiens une erreur car il n&#8217;y a pas de fonction <code>+</code> pour les <em>strings</em>.
Je vais donc ajouter une seconde <em>méthode</em> à la fonction <code>double</code>, qui
s&#8217;occupera du cas particulier des chaînes de caractères:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">double</span><span class="p">(</span><span class="n">x</span><span class="p">::</span><span class="n">String</span><span class="p">)</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">$</span><span class="s">x</span><span class="si">$</span><span class="s">x&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au passage, le caractère <code>$</code> permet l&#8217;interpolation. Plus intéressant, on voit
que j&#8217;ai donné un <em>type</em> à l&#8217;argument <code>x</code>. Quand <code>double</code> recevra un argument
de type <em>String</em>, c&#8217;est cette version (méthode) de la fonction qui sera
utilisée:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">double</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span> <span class="c"># =&gt; &quot;hellohello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors que dans tous les autres cas, ce sera la version (méthode) <em>générique</em>
qui sera utilisée:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">double</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>   <span class="c"># =&gt; 24</span>
</span><span class='line'><span class="n">double</span><span class="p">(</span><span class="mf">0.78</span><span class="p">)</span> <span class="c"># =&gt; 1.56</span>
</span><span class='line'><span class="n">double</span><span class="p">(</span><span class="mh">0xf</span><span class="p">)</span>  <span class="c"># =&gt; 0x0000001e</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/10/le-langage-julia-2/'>Le langage Julia &ndash; 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/09/le-langage-julia/'>Le langage Julia</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir/'>Une définition de la programmation fonctionnelle avec Elixir</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le langage Julia - 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/10/le-langage-julia-2/"/>
    <updated>2014-05-10T21:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/10/le-langage-julia-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>J&#8217;ai continué aujourd&#8217;hui a tester le langage
<a href="http://julialang.org/">Julia</a>.
Et en faisant quelques recherches, je me suis aperçu qu&#8217;il était très
souvent présenté comme un langage pour le calcul scientifique (voir par
exemple <a href="http://fr.wikipedia.org/wiki/Julia_%28langage_de_programmation%29">la page consacrée à Julia</a> sur Wikipédia). Ça m&#8217;énerve un peu.</p>

<!-- more -->


<p>Car sur le blog de Julia, on peut lire dans l&#8217;article d&#8217;introduction
<a href="http://julialang.org/blog/2012/02/why-we-created-julia/">Why we created Julia</a>:</p>

<blockquote><p>We want a language that’s open source, with a liberal license. We want the speed of C with the dynamism of Ruby. We want a language that’s homoiconic, with true macros like Lisp, but with obvious, familiar mathematical notation like Matlab. We want something as usable for general programming as Python, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.</p></blockquote>


<p>C&#8217;est donc loin d&#8217;être un langage utile seulement pour le calcul scientifique.
Enfin, je verrais bien qui dit vrai une fois que je le maitriserai assez…</p>

<p>Si vous avez déjà testé/utilisé Julia, qu&#8217;en avez vous pensez ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/11/les-fonctions-en-julia/'>Les fonctions en Julia</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/09/le-langage-julia/'>Le langage Julia</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir/'>Une définition de la programmation fonctionnelle avec Elixir</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le langage Julia]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/09/le-langage-julia/"/>
    <updated>2014-05-09T21:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/09/le-langage-julia</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui j&#8217;ai commencé à jouer un peu (2 heures à peine) avec le langage
<a href="http://julialang.org/">Julia</a>.
Ça faisait longtemps que j&#8217;en avais envie et j&#8217;ai été enthousiasmé.</p>

<!-- more -->


<p>Je cherche un langage fonctionnel qui, entre autres,:</p>

<ul>
<li>ne soit pas <em>purement</em> fonctionnel.</li>
<li>soit rapide.</li>
<li>ai une syntaxe assez simple.</li>
</ul>


<p>J&#8217;ai peut-être trouvé ça avec Julia. Cet après-midi j&#8217;ai installé la
version binaire sur OS X sans problème. En ce moment je suis en train de
la compiler sur Debian (c&#8217;est très long…).</p>

<p>J&#8217;en suis encore à faire le tour de la syntaxe en suivant
<a href="http://learnxinyminutes.com/docs/julia/">cette introduction</a>. J&#8217;en parlerais
plus quand j&#8217;aurais un peu avancé ;)</p>

<p>Deux/trois trucs que j&#8217;ai retenu:</p>

<p>L&#8217;operateur de division est logiquement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="mi">5</span> <span class="o">/</span> <span class="mi">2</span> <span class="c"># =&gt; 2.5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais plus surprenant (pour moi en tous cas):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="mi">2</span> \ <span class="mi">5</span> <span class="c"># =&gt; 2.5</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai hâte de savoir si il y a une utilité à ça ;)</p>

<p>J&#8217;ai eu aussi plaisir à retrouver une arithmétique binaire, par exemple
la multiplication par 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="mi">8</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="c"># =&gt; 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dernier truc, et je m&#8217;arrête là, j&#8217;aime quand les indices commencent à
1, et non pas à 0:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="s">&quot;Bonjour&quot;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># =&gt; &#39;B&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/11/les-fonctions-en-julia/'>Les fonctions en Julia</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/10/le-langage-julia-2/'>Le langage Julia &ndash; 2</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir/'>Une définition de la programmation fonctionnelle avec Elixir</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des benchmarks en général et de Ruby en particulier]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier/"/>
    <updated>2014-05-08T18:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>En ce moment je fais quelques recherches sur la <em>lenteur</em> de Ruby.
J&#8217;aimerais faire un article sur pourquoi Ruby est lent et pourquoi ça
n&#8217;est pas un problême la plupart du temps.</p>

<p>Pendant ces recherches je suis tombé sur cet article:
<a href="http://blog.clifreeder.com/blog/2013/04/21/ruby-is-too-slow-for-programming-competitions/">Ruby Is Too Slow for Programming Competitions</a>.
Dans cet article, l&#8217;auteur utilise ce <a href="https://gist.github.com/clifff/5401367">script</a> de benchmark pour comparer deux manières différentes pour savoir
si un nombre est un <a href="http://fr.wikipedia.org/wiki/Nombre_palindrome">palindrome</a>.
La première manière utilise une méthode mathématique et la seconde manière
transforme le nombre en chaîne de caractères.</p>

<!-- more -->


<p>Alors je n&#8217;ai pas regardé le code en détail, j&#8217;ai juste voulu faire tourner
le benchmark sur quelques version de Ruby. On commence avec la version
1.9.3:</p>

<p><strong>ruby MRI 1.9.3</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method  18.800000   0.000000  18.800000 ( 18.814018)
String palindrome method    9.860000   0.010000   9.870000 (  9.885368)
--------------------------------------------------- total: 28.670000sec

                                user     system      total        real
Integer palindrome method  18.150000   0.000000  18.150000 ( 18.168135)
String palindrome method    9.830000   0.000000   9.830000 (  9.844366)
</code></pre>

<p>On voit que la méthode qui utilise les nombres est deux fois plus lente que
la méthode qui utilise les chaînes de caractères.</p>

<p>Passons à la version 2.0 de Ruby:</p>

<p><strong>ruby MRI 2.0</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method  19.250000   0.010000  19.260000 ( 19.273625)
String palindrome method    8.910000   0.000000   8.910000 (  8.922845)
--------------------------------------------------- total: 28.170000sec

                                user     system      total        real
Integer palindrome method  19.560000   0.000000  19.560000 ( 19.555138)
String palindrome method    8.760000   0.100000   8.860000 (  8.866579)
</code></pre>

<p>Je ne m&#8217;attendais pas du tout à ça ! La seconde méthode est bien légèrement
plus rapide mais la première méthode est au contraire légèrement plus lente
qu&#8217;avec Ruby 1.9.3. Utilisant Ruby au quotidien, j&#8217;avais noté une réelle
amélioration de la vitesse lors du passage à 2.0.</p>

<p>Maintenant voyons ce que donne la version 2.1:</p>

<p><strong>ruby MRI 2.1</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method  13.930000   0.010000  13.940000 ( 13.938652)
String palindrome method    8.160000   0.000000   8.160000 (  8.165836)
--------------------------------------------------- total: 22.100000sec

                                user     system      total        real
Integer palindrome method  14.000000   0.000000  14.000000 ( 13.992662)
String palindrome method    8.320000   0.000000   8.320000 (  8.323284)
</code></pre>

<p>C&#8217;est plus conforme à mes attentes, on voit une nette amélioration avec la
première méthode.</p>

<p>Comme j&#8217;ai un rubinius sous la main et que j&#8217;ai déjà pu constater que cette
implémentation de Ruby pouvait être rapide, j&#8217;essaye:</p>

<p><strong>rubinius 2.0</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method   3.768236   0.000000   3.768236 (  3.781376)
String palindrome method   10.240640   0.044002  10.284642 ( 10.293314)
--------------------------------------------------- total: 14.052878sec

                                user     system      total        real
Integer palindrome method   2.140134   0.000000   2.140134 (  2.141363)
String palindrome method    8.472530   0.048003   8.520533 (  8.533402)
</code></pre>

<p>Waow ! Si la seconde méthode (avec les chaînes de caractères) est
sensiblement équivalente à Ruby 2.1, la première méthode (avec les
nombres) est pratiquement <strong>7 fois plus rapide</strong>.</p>

<p>De là à dire que les benchmarks ne servent à rien, il n&#8217;y a qu&#8217;un pas que
je ne veux pas franchir. Je veux seulement dire qu&#8217;il faut faire très
attention avec les benchmarks et ne pas tirer de conclusions hatives.
L&#8217;auteur de ce benchmark concluait à tort que la seconde méthode est plus
rapide que la première. Alors que c&#8217;est plus une question de contexte,
d&#8217;algorithme utilisé, d&#8217;implémentation du langage, et peut-être encore
d&#8217;autres choses qui m&#8217;échappent.</p>

<p>La seule conclusion que je peux tirer de ça est: d&#8217;une manière générale,
pensez à tester votre application avec Rubinius, vous pourriez être
agréablement surpris ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/'>Mettre à jour des gems ayants des références circulaires avec Bundle</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby/'>Le double bang en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/22/demandez-conseil-regulierement/'>Demandez conseil régulièrement</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmation concurrente pour Ruby avec eldritch - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/07/programmation-concurrente-pour-ruby-avec-eldritch-partie-2/"/>
    <updated>2014-05-07T19:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/07/programmation-concurrente-pour-ruby-avec-eldritch-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Suite du test de la gem <a href="https://github.com/beraboris/eldritch">eldritch</a>
qui facilite la programmation concurrente en Ruby.</p>

<!-- more -->


<p>Prenons le programme de référence suivant:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">long_task</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> : </span><span class="si">#{</span><span class="n">long_task</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>long_task</code> va <em>dormir</em> pendant une seconde puis renvoyer la
date courante. Si on l&#8217;appelle 10 fois de suite, voici la sortie:</p>

<pre><code>$ time ruby test.rb
0 : 2014-05-07 18:15:52 +0200
1 : 2014-05-07 18:15:53 +0200
2 : 2014-05-07 18:15:54 +0200
3 : 2014-05-07 18:15:55 +0200
4 : 2014-05-07 18:15:56 +0200
5 : 2014-05-07 18:15:57 +0200
6 : 2014-05-07 18:15:58 +0200
7 : 2014-05-07 18:15:59 +0200
8 : 2014-05-07 18:16:00 +0200
9 : 2014-05-07 18:16:01 +0200

real    0m10.809s
</code></pre>

<p>Un appel par seconde, normal.</p>

<p>Maintenant on va se servir de <strong>eldritch</strong> pour que les 10 appels à
<code>long_task</code> soient concurrents:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;eldritch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">long_task</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">together</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">async</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> : </span><span class="si">#{</span><span class="n">long_task</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le bloc <code>together</code> permet au programme d&#8217;attendre que chacune des <em>tâches</em>
soient terminées avant d&#8217;aller plus loin. Voici ce que ça donne:</p>

<pre><code>$ time ruby test.rb
0 : 2014-05-07 18:16:52 +02002 : 2014-05-07 18:16:52 +0200

3 : 2014-05-07 18:16:52 +0200
4 : 2014-05-07 18:16:52 +0200
5 : 2014-05-07 18:16:52 +0200
6 : 2014-05-07 18:16:52 +0200
7 : 2014-05-07 18:16:52 +0200
8 : 2014-05-07 18:16:52 +0200
9 : 2014-05-07 18:16:52 +0200
1 : 2014-05-07 18:16:52 +0200

real    0m1.890s
</code></pre>

<p>Que nous apprend cette sortie ? Chacune des dix tâches a été démarrée à la
même seconde (pas en même temps exactement bien sûr). On voit bien aussi
que l&#8217;ordre de terminaison des 10 tâches est aléatoires, ce qui est normal
en programmation concurrente. Le programme s&#8217;est terminé 10 fois plus vite,
c&#8217;est normal puisque <code>long_task</code> passe son temps à ne rien faire ;)</p>

<p>À quoi sert exactement ce bloc <code>together</code> ? Voyons ce qu&#8217;il se passe si on le
retire:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;eldritch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">long_task</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">async</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> : </span><span class="si">#{</span><span class="n">long_task</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ time ruby test.rb

real    0m0.846s
</code></pre>

<p>Oups ! Le programme s&#8217;est terminé <em>avant</em> la fin des tâches, elles sont
perdues !</p>

<p>Une autre façon de faire est de créer <em>explicitement</em> une tâche, avec
<code>task = async do ...</code> et d&#8217;utiliser <code>task.value</code> qui attend que la tâche
soit complètée:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;eldritch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">long_task</span> <span class="o">=</span> <span class="n">async</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> : </span><span class="si">#{</span><span class="n">long_task</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ time ruby eldritch2.rb
0 : 2014-05-07 18:38:20 +0200
1 : 2014-05-07 18:38:20 +0200
2 : 2014-05-07 18:38:20 +0200
3 : 2014-05-07 18:38:20 +0200
4 : 2014-05-07 18:38:20 +0200
5 : 2014-05-07 18:38:20 +0200
6 : 2014-05-07 18:38:20 +0200
7 : 2014-05-07 18:38:20 +0200
8 : 2014-05-07 18:38:20 +0200
9 : 2014-05-07 18:38:20 +0200

real    0m1.861s
</code></pre>

<p>Tout les tests que j&#8217;ai fait avec cette méthode montrent que l&#8217;ordre des
tâches est respecté, de 0 à 9. Est-ce que c&#8217;est vraiment le cas ou bien
est-ce une coincidence ? Je n&#8217;ai pas encore de réponses…</p>

<p>Quoiqu&#8217;il en soit, je suis pressé d&#8217;essayer <strong>eldritch</strong> avec les algorithmes génétiques, ce
qui par la même occasion me permettra d&#8217;en reparler (des algos) dans ce blog.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/06/programmation-concurrente-pour-ruby-avec-eldritch/'>Programmation concurrente pour Ruby avec eldritch</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/05/le-load-path-dans-ruby/'>Le LOAD_PATH dans Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmation concurrente pour Ruby avec eldritch]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/06/programmation-concurrente-pour-ruby-avec-eldritch/"/>
    <updated>2014-05-06T21:38:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/06/programmation-concurrente-pour-ruby-avec-eldritch</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Ce matin j&#8217;ai découvert la gem <a href="https://github.com/beraboris/eldritch">eldritch</a>,
pour faire de la programmation concurrente. Son API m&#8217;a paru vraiment
simple et élégante. Ce soir j&#8217;ai seulement 5 minutes pour faire un premier
test, alors on y va sans fioritures.</p>

<!-- more -->


<p>Tout d&#8217;abord, je vais utiliser Rubinius, puisqu&#8217;un ruby MRI ne permet pas
l&#8217;utilisation de plusieurs coeurs.</p>

<pre><code>$ rvm use rbx-2.0.0
Using /home/xavier/.rvm/gems/rbx-2.0.0
</code></pre>

<p>Ensuite, installation de la gem:</p>

<pre><code>gem install eldritch
</code></pre>

<p>Il me faut un programme simple pour tester rapidement. Le voici:</p>

<figure class='code'><figcaption><span>eldritch.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">long_method1</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">long_method2</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;2&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">long_method1</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">long_method2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je simule deux méthodes assez longues grâce à <code>sleep(2)</code>, qui <em>endort</em> le
programme pendant 2 secondes. Le temps d&#8217;exécution est conforme à mes
attentes:</p>

<pre><code>$ time ruby eldritch.rb
1
2

real    0m4.821s
</code></pre>

<p>Maintenant on va utiliser la gem eldritch et son concept de <strong>tâche</strong> pour
réécrire le programme:</p>

<figure class='code'><figcaption><span>eldritch.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;eldritch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">long_task1</span> <span class="o">=</span> <span class="n">async</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">long_task2</span> <span class="o">=</span> <span class="n">async</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;2&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">long_task1</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">long_task2</span><span class="o">.</span><span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le résultat:</p>

<pre><code>$ time ruby eldritch.rb
1
2

real    0m2.869s
</code></pre>

<p><strong>Tada !</strong> Mes deux <em>tâches</em> ont tournées en parallèle.</p>

<p>Ça me plait ce concept de tâche. Mais ce n&#8217;était qu&#8217;un premier test
rapide, eldritch nous réserve encore de bonne surprises. J&#8217;espère pouvoir
tester le reste demain.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/07/programmation-concurrente-pour-ruby-avec-eldritch-partie-2/'>Programmation concurrente pour Ruby avec eldritch &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/05/le-load-path-dans-ruby/'>Le LOAD_PATH dans Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le LOAD_PATH dans Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/05/le-load-path-dans-ruby/"/>
    <updated>2014-05-05T21:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/05/le-load-path-dans-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>En Ruby, la variable <code>$LOAD_PATH</code> contient tous les chemins vers les
bibliothèques chargées.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="vg">$LOAD_PATH</span>
</span><span class='line'><span class="go">[</span>
</span><span class='line'><span class="go">    [0] &quot;/home/xavier/.rvm/gems/ruby-2.1.0/gems/awesome_print-1.2.0/lib&quot;,</span>
</span><span class='line'><span class="go">    [1] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/site_ruby/2.1.0&quot;,</span>
</span><span class='line'><span class="go">    [2] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/site_ruby/2.1.0/i686-linux&quot;,</span>
</span><span class='line'><span class="go">    [3] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/site_ruby&quot;,</span>
</span><span class='line'><span class="go">    [4] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/vendor_ruby/2.1.0&quot;,</span>
</span><span class='line'><span class="go">    [5] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/vendor_ruby/2.1.0/i686-linux&quot;,</span>
</span><span class='line'><span class="go">    [6] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/vendor_ruby&quot;,</span>
</span><span class='line'><span class="go">    [7] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0&quot;,</span>
</span><span class='line'><span class="go">    [8] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/i686-linux&quot;</span>
</span><span class='line'><span class="go">]</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Si je charge Rspec, par exemple, son chemin va être ajouté dans la variable
<code>$LOAD_PATH</code>, ainsi que toutes les bibliothèques dont dépend Rspec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="vg">$LOAD_PATH</span>
</span><span class='line'><span class="go">[</span>
</span><span class='line'><span class="go">    [ 0] &quot;/home/xavier/.rvm/gems/ruby-2.1.0/gems/awesome_print-1.2.0/lib&quot;,</span>
</span><span class='line'><span class="go">    [ 1] &quot;/home/xavier/.rvm/gems/ruby-2.1.0/gems/rspec-2.14.1/lib&quot;,</span>
</span><span class='line'><span class="go">    [ 2] &quot;/home/xavier/.rvm/gems/ruby-2.1.0/gems/rspec-core-2.14.8/lib&quot;,</span>
</span><span class='line'><span class="go">    [ 3] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/site_ruby/2.1.0&quot;,</span>
</span><span class='line'><span class="go">    [ 4] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/site_ruby/2.1.0/i686-linux&quot;,</span>
</span><span class='line'><span class="go">    [ 5] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/site_ruby&quot;,</span>
</span><span class='line'><span class="go">    [ 6] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/vendor_ruby/2.1.0&quot;,</span>
</span><span class='line'><span class="go">    [ 7] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/vendor_ruby/2.1.0/i686-linux&quot;,</span>
</span><span class='line'><span class="go">    [ 8] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/vendor_ruby&quot;,</span>
</span><span class='line'><span class="go">    [ 9] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0&quot;,</span>
</span><span class='line'><span class="go">    [10] &quot;/home/xavier/.rvm/rubies/ruby-2.1.0/lib/ruby/2.1.0/i686-linux&quot;</span>
</span><span class='line'><span class="go">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a encore quelques jours, je faisais systématiquement cela au début de
toutes mes gems:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ceci pour que ma gem ajoute son propre chemin dans le <code>LOAD_PATH</code>.
Et bien je viens d&#8217;apprendre que non, c&#8217;est inutile ! L&#8217;utilitaire <code>gem</code>
fait très bien cela tout seul.</p>

<p>Aujourd&#8217;hui j&#8217;ai (encore) appris quelque chose ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/07/programmation-concurrente-pour-ruby-avec-eldritch-partie-2/'>Programmation concurrente pour Ruby avec eldritch &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/06/programmation-concurrente-pour-ruby-avec-eldritch/'>Programmation concurrente pour Ruby avec eldritch</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/"/>
    <updated>2014-05-04T21:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on termine de structurer quelque peu le projet. Voici ce que je
veux obtenir:</p>

<pre><code>$ tree -a
.
├── lib/
│   ├── base.rb
│   ├── database.rb
│   └── recorder.rb
├── .rspec
├── sorm.rb
├── spec/
│   ├── base_spec.rb
│   └── database_spec.rb
└── test.db
</code></pre>

<!-- more -->


<p>Le fichier <code>sorm.rb</code> à la racine du projet va contenir nos require:</p>

<figure class='code'><figcaption><span>sorm.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./lib/database&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./lib/base&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./lib/recorder&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quant aux 3 fichiers sous <code>lib/</code> ils contiennent chacun une classe
de notre ancien fichier <code>sorm.rb</code>, qui était un fourre-tout.
Voici ces fichiers:</p>

<figure class='code'><figcaption><span>lib/base.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">SORM</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Recorder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="n">attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="n">singleton_class</span><span class="o">.</span><span class="n">class_eval</span><span class="p">{</span><span class="kp">attr_reader</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>lib/database.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">SORM</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">disconnect</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="o">!!</span><span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>lib/recorder.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">SORM</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Recorder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@table</span> <span class="o">=</span> <span class="n">table</span>
</span><span class='line'>      <span class="vi">@parameters</span> <span class="o">=</span> <span class="n">parameters</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>      <span class="no">Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">query</span>
</span><span class='line'>      <span class="s2">&quot;INSERT INTO </span><span class="si">#@table</span><span class="s2"> (</span><span class="si">#{</span><span class="n">columns</span><span class="si">}</span><span class="s2">) VALUES(</span><span class="si">#{</span><span class="n">values</span><span class="si">}</span><span class="s2">);&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">columns</span>
</span><span class='line'>      <span class="vi">@parameters</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">values</span>
</span><span class='line'>      <span class="vi">@parameters</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>        <span class="n">item</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="nb">String</span> <span class="p">?</span> <span class="s2">&quot;&#39;</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">&#39;&quot;</span> <span class="p">:</span> <span class="n">item</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On va enfin pouvoir ajouter de nouvelles fonctionnalités à notre ORM !
C&#8217;est pas trop tôt, je commençais à m&#8217;ennuyer ;)</p>

<p>Je tâcherais aussi de mettre le projet sur Github prochainement pour
qu&#8217;il soit plus facile à suivre.</p>

<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 11</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/27/ruby-et-si-on-ecrivait-un-orm-partie-10/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 10</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trois-centième article aujourd'hui !]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/03/trois-centieme-article-aujourdhui-slash/"/>
    <updated>2014-05-03T21:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/03/trois-centieme-article-aujourdhui-slash</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui c&#8217;est le 300ème article de ce blog ! Voilà 300 jours que je
pond un article au quotidien. J&#8217;en reviens pas !</p>

<!-- more -->


<p>Encore 65 et j&#8217;aurais réussi le défi que je m&#8217;étais fixé il y a 300 jours:
écrire un article par jour pendant un an.</p>

<p>Bref, le contenu du jour sera : le fichier <code>.yardopts</code>. Qu&#8217;est-ce que c&#8217;est
encore que ça ?</p>

<p>Pour générer une documentation de vos gems Ruby avec
<a href="http://yardoc.org/">Yard</a> vous écrivez peut-être comme moi une tâche Rake dans ce genre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s1">&#39;Create documentation&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:doc</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="s1">&#39;yardoc --title &quot;Titre de la doc&quot;&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là j&#8217;ai mis une seule option, mais on en a souvent d&#8217;autres, plus des fichiers
à inclure (comme la licence, le changelog, etc).</p>

<p>Et bien j&#8217;ai appris aujourd&#8217;hui que ces options pouvaient être mises dans
un fichier <code>.yardopts</code>. En reprenant l&#8217;exemple précédant, cela deviendrait:</p>

<figure class='code'><figcaption><span>.yardopts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">--title &quot;Titre de la doc&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s1">&#39;Create documentation&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:doc</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="s1">&#39;yardoc&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Non seulement ça évite de surcharger la tâche rake avec des informations
inutiles, mais surtout, ça permet à des service externes comme
<a href="http://www.rubydoc.info/">RubyDoc</a> de savoir exactement ce que vous voulez.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/07/programmation-concurrente-pour-ruby-avec-eldritch-partie-2/'>Programmation concurrente pour Ruby avec eldritch &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/06/programmation-concurrente-pour-ruby-avec-eldritch/'>Programmation concurrente pour Ruby avec eldritch</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/05/le-load-path-dans-ruby/'>Le LOAD_PATH dans Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12/"/>
    <updated>2014-05-02T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Douzième partie déjà de cette série sur la construction d&#8217;un ORM en Ruby…</p>

<!-- more -->


<p>On doit ajouter une méthode <code>disconnect</code> à notre classe <code>Database</code>, voici
d&#8217;abord le test:</p>

<figure class='code'><figcaption><span>spec/database_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./sorm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;is not connected by default&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;after connection&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;test.db&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">after</span>  <span class="p">{</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">disconnect</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is connected&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is disconnected after disconnection&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">disconnect</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant l&#8217;implémentation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">disconnect</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="o">!!</span><span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rien à dire d&#8217;intéressant là-dessus. Je vais aussi configurer Rspec pour
qu&#8217;il joue les tests dans un ordre alétoire, et tant que j&#8217;y suis j&#8217;ajoute
un peu de couleur à la sortie:</p>

<figure class='code'><figcaption><span>.rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">--color</span>
</span><span class='line'><span class="err">--order=random</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici l&#8217;instant de vérité:</p>

<pre><code>$ rspec
........
Finished in 0.03996 seconds
8 examples, 0 failures
Randomized with seed 55135
</code></pre>

<p>Parfait, on a splitté les tests, on les a mis dans un dossier <code>spec/</code>,
on les a amélioré. C&#8217;est tout bon. Maintenant on devrait pouvoir faire
facilement un truc similaire avec le fichier <code>sorm.rb</code>.</p>

<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 11</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/27/ruby-et-si-on-ecrivait-un-orm-partie-10/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 10</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La balise hr dans votre console]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/01/la-balise-hr-dans-votre-console/"/>
    <updated>2014-05-01T16:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/01/la-balise-hr-dans-votre-console</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je vais parler d&#8217;un programme rigoureusement inutile. Mais
totalement indispensable. J&#8217;ai nommé <strong>hr</strong>. Il va vous permettre
d&#8217;obtenir la magnifique ligne suivante dans votre console:</p>

<pre><code>$ hr
########################################################################
$
</code></pre>

<!-- more -->


<p>Sans rire, je l&#8217;utilise régulièrement pour séparer visuellement les
commandes avec plein de texte en sortie.</p>

<p>Pour l&#8217;installer sur Linux:</p>

<pre><code>curl https://raw.githubusercontent.com/LuRsT/hr/master/hr &gt; ~/bin/hr
chmod +x ~/bin/hr
</code></pre>

<p>Sous OS X:</p>

<pre><code>brew install hr
</code></pre>

<p>Le <a href="https://github.com/LuRsT/hr">projet</a> est sur Github, et si la version
Bash ne vous branche pas, <strong>hr</strong> existe aussi dans d&#8217;autres langages.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/06/comment-reduire-les-erreurs-de-frappe-dans-la-console/'>Comment réduire les erreurs de frappe dans la console</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/'>Astuce Bash &ndash; Améliorer l&#8217;historique</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/17/afficher-larborescence-dun-dossier-dans-le-terminal/'>Afficher l&#8217;arborescence d&#8217;un dossier dans le terminal</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11/"/>
    <updated>2014-04-30T21:39:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On a dit qu&#8217;il était temps de <em>splitter</em> les fichiers, aussi bien pour
les tests que pour le code d&#8217;implémentation.</p>

<!-- more -->


<p>On commence par créer un dossier spec avec à l&#8217;intérieur le fichier
<code>database_spec.rb</code>:</p>

<figure class='code'><figcaption><span>spec/database_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./sorm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;connection&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is not connected&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;after connection&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;is connected&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;test.db&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on vérifie que tout va bien:</p>

<pre><code>$ rspec spec/database_spec.rb 
..
Finished in 0.00267 seconds
2 examples, 0 failures
</code></pre>

<p>Au tour de la classe <code>Base</code> d&#8217;avoir son propre fichier de tests. Je vous
épargne le contenu des méthodes <code>it</code>, il n&#8217;a pas changé:</p>

<figure class='code'><figcaption><span>spec/base_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./sorm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;.execute&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(1, &#39;Foo&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(2, &#39;Bar&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">after</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;DELETE FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns the correct number of rows&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns correct values&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;object creation&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">after</span> <span class="p">{</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;DELETE FROM article;&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;creates a record&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns an object with correct class&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns an object with correct attributes&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Place à la vérification:</p>

<pre><code>$ rspec spec/base_spec.rb 
An error occurred in an after hook
  NoMethodError: undefined method `execute' for false:FalseClass
[...]
5 examples, 5 failures
</code></pre>

<p>Bah oui, ça ne devrait pas nous surprendre. Notre ancien fichier de
test <em>global</em> était mal conçu. On n&#8217;est plus connecté à la base de
données. Et là se pose la question de savoir si on doit se connecter
avant chaque test, dans un <code>before :each</code> ou bien une fois pour toute
au début du fichier, dans un <code>before :all</code> ? La seconde solution me parait
la plus adaptée, mais on pourra toujours en changer par la suite si besoin
est:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="ss">:all</span> <span class="k">do</span>
</span><span class='line'>    <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;test.db&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or relance les tests:</p>

<pre><code>$ rspec spec/base_spec.rb 
.....
Finished in 0.10185 seconds
5 examples, 0 failures
</code></pre>

<p>Ok, cool. Reste encore à lancer les tests <strong>au complet</strong> avant de crier
victoire:</p>

<pre><code>$ rspec
.....F.

Failures:

  1) SORM::Database connection is not connected
     Failure/Error: expect(SORM::Database.connected?).to be false

       expected #&lt;FalseClass:0&gt; =&gt; false
            got #&lt;TrueClass:2&gt; =&gt; true

       Compared using equal?, which compares object identity,
       but expected and actual are not the same object. Use
       `expect(actual).to eq(expected)` if you don't care about
       object identity in this example.
     # ./spec/database_spec.rb:6:in `block (3 levels) in &lt;top (required)&gt;'

Finished in 0.03452 seconds
7 examples, 1 failure

Failed examples:

rspec ./spec/database_spec.rb:5 # SORM::Database connection is not connected
</code></pre>

<p>Et oui, on ne maitrise plus l&#8217;ordre des tests ! <code>base_spec.rb</code>, premier
dans l&#8217;ordre alphabétique a été joué avant, et donc <code>database_spec.rb</code> se
retrouve avec une base de données connectée.</p>

<p>On ajoutera donc la prochaine fois une méthode <code>disconnect</code>. Et ça me
fait penser aussi qu&#8217;il faudra configurer Rspec pour jouer les tests dans
un ordre aléatoire.</p>

<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/27/ruby-et-si-on-ecrivait-un-orm-partie-10/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 10</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insérer le contenu d'un fichier ou d'une commande shell dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/"/>
    <updated>2014-04-29T21:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour insérer le contenu d&#8217;un fichier quelconque dans le buffer courant de
Vim, utilisez la commande <code>:r</code>:</p>

<!-- more -->


<p>Comme dans: <code>:r /mon/fichier/quelconque</code>.</p>

<p>C&#8217;est vraiment utile parfois, le problème est que le nom du fichier doit
être
absolu, ou doit commencer par le tilde (<code>~</code>). Ce qui dans certains cas
limite pas mal l&#8217;usage de cette commande.</p>

<p>Au fait, <code>r</code> est le petit nom de <code>read</code> :)</p>

<p>La version avec un point d&#8217;exclamation <code>:r!</code> est aussi très intéressante
puisqu&#8217;elle insère la sortie d&#8217;une commande shell. Par exemple, si je tape:</p>

<pre><code>:r! cal
</code></pre>

<p>Cela va insèrer le calendrier du mois dans cet article, comme ceci:</p>

<pre><code>     Avril 2014
di lu ma me je ve sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30
</code></pre>

<p>Mais là encore j&#8217;ai un souci. Ça ne fonctionne qu&#8217;avec des commandes shell
et automatiquement dans mon <em>home</em>. Je m&#8217;explique:</p>

<ol>
<li>Si j&#8217;édite un fichier <code>~/dossier/fichier</code> et que je veuille insérer le
contenu de <code>dossier</code>, je dois écrire <code>:r! ls ~/dossier</code>. Alors que
j&#8217;aimerais écrire juste <code>:r! ls</code>.</li>
<li>J&#8217;aimerais bien pouvoir insérer avec <code>r</code> la sortie de mes tests Rspec,
par exemple. Mais <code>:r! rspec ~/mon/fichier</code> ne fonctionne pas, <code>rspec</code>
n&#8217;étant pas reconnu par Vim comme étant une commande.</li>
</ol>


<p>Enfin, bref, si tu sais comment venir à bout de ses limitations, ton
commentaire m&#8217;intéresse. Sinon, il m&#8217;intéresse aussi ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/'>Vim &ndash; Comment ouvrir la fenêtre courante dans un nouvel onglet</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/'>Plugin vim-refactor pour Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mettre à jour des gems ayants des références circulaires avec Bundle]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/"/>
    <updated>2014-04-28T21:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ok, c&#8217;est sûrement le titre le plus incompréhensible de l&#8217;histoire de ce
blog. Mais je n&#8217;arrive pas à trouver mieux…</p>

<p>Prenons le Gemfile fictif suivant:</p>

<pre><code>gem a
gem b
gem c
</code></pre>

<p>Je veux mettre à jour la gem a, de la version 1.0.0 vers la nouvelle version
1.0.1.</p>

<!-- more -->


<p>Pour ça je fais évidemment:</p>

<pre><code>bundle update a
</code></pre>

<p>Mais voilà que <code>bundle</code> me répond quelque chose comme ça:</p>

<pre><code>impossible de mettre à jour la gem a
la gem a 1.0.1 dépend de la gem b 1.0.1
</code></pre>

<p>D&#8217;accord, pas de souci, je fais donc:</p>

<pre><code>bundle update b
</code></pre>

<p>Et devinez ce que ce cher <code>bundle</code> me répond ?</p>

<pre><code>impossible de mettre à jour la gem b
la gem b 1.0.1 dépend de la gem c 1.0.1
</code></pre>

<p>Bon, j&#8217;espère que c&#8217;est bientôt fini. Parce que évidemment mon Gemfile
réel ne comporte pas que 3 gems, lui. Donc je me soumet:</p>

<pre><code>bundle update c
</code></pre>

<p>Et la réponse ne tarde pas:</p>

<pre><code>impossible de mettre à jour la gem c
la gem c 1.0.1 dépend de la gem a 1.0.1
</code></pre>

<p>Super :( J&#8217;ai l&#8217;impression qu&#8217;on me demande de remplir un formulaire
administratif ! La gem a dépend de b, qui elle, dépend de c, qui à son
tour dépend de a…</p>

<p>Malgré tout, la solution est très simple (merci collègue
<a href="https://twitter.com/hellvinz">@hellvinz</a>) il suffit de mettre à jour les
3 gems en même temps:</p>

<pre><code>bundle update a b c
</code></pre>

<p>Et le tour est joué. Peut-être que vous le saviez déjà ? Mais moi j&#8217;avais
raté cette partie de Bundle.</p>

<p>Aujourd&#8217;hui j&#8217;ai encore appris quelque chose :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png/'>Prise en main de la gem chunky_png</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier/'>Des benchmarks en général et de Ruby en particulier</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/27/ruby-et-si-on-ecrivait-un-orm-partie-10/"/>
    <updated>2014-04-27T18:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/27/ruby-et-si-on-ecrivait-un-orm-partie-10</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je continue toujours le refactoring de SORM, cette fois je veux supprimer
le paramêtre <code>connection</code> dans l&#8217;initialisation de <code>Recorder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Recorder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">connection</span><span class="p">,</span> <span class="n">table</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@connection</span> <span class="o">=</span> <span class="n">connection</span>
</span><span class='line'>      <span class="vi">@table</span> <span class="o">=</span> <span class="n">table</span>
</span><span class='line'>      <span class="vi">@parameters</span> <span class="o">=</span> <span class="n">parameters</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>      <span class="vi">@connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Bon, c&#8217;est tout simple, on utilise directement la classe <code>Database</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Recorder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@table</span> <span class="o">=</span> <span class="n">table</span>
</span><span class='line'>      <span class="vi">@parameters</span> <span class="o">=</span> <span class="n">parameters</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>      <span class="no">Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Recorder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, c&#8217;est trop court comme article, non ? Alors je continue. Comme dit la
dernière fois, la méthode <code>Base.sql</code> me semble inutile. Je la supprime donc,
ce qui conduit à ce code:</p>

<figure class='code'><figcaption><span>sorm.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">SORM</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="o">!!</span><span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Recorder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="n">attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="n">singleton_class</span><span class="o">.</span><span class="n">class_eval</span><span class="p">{</span><span class="kp">attr_reader</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Recorder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@table</span> <span class="o">=</span> <span class="n">table</span>
</span><span class='line'>      <span class="vi">@parameters</span> <span class="o">=</span> <span class="n">parameters</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>      <span class="no">Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">query</span>
</span><span class='line'>      <span class="s2">&quot;INSERT INTO </span><span class="si">#@table</span><span class="s2"> (</span><span class="si">#{</span><span class="n">columns</span><span class="si">}</span><span class="s2">) VALUES(</span><span class="si">#{</span><span class="n">values</span><span class="si">}</span><span class="s2">);&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">columns</span>
</span><span class='line'>      <span class="vi">@parameters</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">values</span>
</span><span class='line'>      <span class="vi">@parameters</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>        <span class="n">item</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="nb">String</span> <span class="p">?</span> <span class="s2">&quot;&#39;</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">&#39;&quot;</span> <span class="p">:</span> <span class="n">item</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais maintenant ce sont les tests qui sont dans les choux ! Il faut
remplacer toutes les occurences de <code>Article.sql</code> par
<code>SORM::Database.execute</code>. Ce qui donne:</p>

<figure class='code'><figcaption><span>sorm_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./sorm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;connection&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is not connected&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;after connection&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;is connected&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;test.db&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;.sql&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(1, &#39;Foo&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(2, &#39;Bar&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">after</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;DELETE FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns the correct number of rows&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns correct values&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;Foo&#39;</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;Bar&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;object creation&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">after</span> <span class="p">{</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;DELETE FROM article;&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;creates a record&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Article</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;bépo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article WHERE id = 1;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;bépo&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns an object with correct class&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;bépo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">class</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="no">Article</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns an object with correct attributes&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;bépo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;bépo&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et les tests passent de nouveau. Mais on a un nouveau problème !
Le bloc <code>describe '.sql'</code> suivant est devenu ridicule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;.sql&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(1, &#39;Foo&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(2, &#39;Bar&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">after</span> <span class="k">do</span>
</span><span class='line'>      <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;DELETE FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns the correct number of rows&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns correct values&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;Foo&#39;</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;Bar&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>1) Il n&#8217;y a plus de méthode <code>sql</code> et 2) il teste <code>Database.execute</code> et
n&#8217;a donc rien à faire ici. Je corrigerais ça la prochaine fois, et je pense
qu&#8217;il est temps aussi de <em>splitter</em> les fichiers tests et sources…</p>

<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/26/ruby-et-si-on-ecrivait-un-orm-partie-9/"/>
    <updated>2014-04-26T14:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/26/ruby-et-si-on-ecrivait-un-orm-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Encore du refactoring, cette fois ci dans la classe <code>Base</code>. Regardons le
code suivant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sql</span><span class="p">(</span><span class="n">raw_query</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Database</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">raw_query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <code>Database.connection.execute</code> me dérange. Il viole
<a href="http://fr.wikipedia.org/wiki/Loi_de_D%C3%A9m%C3%A9ter">la loi de Demeter</a>.</p>

<!-- more -->


<p>À bien y réfléchir, je n&#8217;ai tout simplement pas envie d&#8217;exposer la méthode
<code>connection</code>, qu&#8217;on trouve aussi un peu plus loin dans la class <code>Base</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Recorder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Database</span><span class="o">.</span><span class="n">connection</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe <code>Database</code> est actuellement comme ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="o">!!</span><span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connection</span>
</span><span class='line'>      <span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je supprime purement et simplement la méthode <code>connection</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="o">!!</span><span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant, on rejoue les tests, qui vont nous indiquer ce qui doit être
réécrit:</p>

<pre><code>$ rspec sorm_spec.rb 
[...]
     NoMethodError:
       undefined method `connection' for SORM::Database:Class
     # ./sorm.rb:19:in `sql'
[...]
     NoMethodError:
       undefined method `connection' for SORM::Database:Class
     # ./sorm.rb:23:in `save'
[...]
7 examples, 5 failures
</code></pre>

<p>On va simplement créer une méthode <code>Database.execute</code>, qui elle, pourra
utiliser l&#8217;objet <code>connection</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="o">!!</span><span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sql</span><span class="p">(</span><span class="n">raw_query</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Database</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">raw_query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>À y regarder de près, je ne suis plus certain de trouver un intérêt à
<code>Base.sql</code>. Il faudrait la supprimer puisqu&#8217;elle peut être remplacée par
<code>Database.execute</code>. Mais il faudra attendre car il y a encore des tests qui ne
passent plus, à cause de ce code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Recorder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Database</span><span class="o">.</span><span class="n">connection</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On s&#8217;en occupera la prochaine fois.</p>

<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/25/ruby-et-si-on-ecrivait-un-orm-partie-8/"/>
    <updated>2014-04-25T21:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/25/ruby-et-si-on-ecrivait-un-orm-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je continue le refactoring de SORM. Voici la classe <code>Database</code> dans son
état actuel:</p>

<figure class='code'><figcaption><span>sorm.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">SORM</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@db</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="vc">@@db</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connection</span>
</span><span class='line'>      <span class="vc">@@db</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>La première chose que j&#8217;ai envie de faire, c&#8217;est de supprimer l&#8217;abbréviation
<code>db</code>. De plus, comme il s&#8217;agit plutôt d&#8217;établir une <em>connexion</em>, je change
pour <code>connection</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@connection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connection</span>
</span><span class='line'>      <span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À ce sujet, j&#8217;applique <a href="http://lkdjiin.github.io/blog/2013/08/21/code-propre-non-aux-abreviations/">mes propres principes</a> ;)</p>

<p>Ensuite je vais modifier l&#8217;implémentation de la méthode <code>.connected?</code>. Elle
va passer de:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>  <span class="vc">@@db</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À quelque chose de plus expressif:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>  <span class="o">!!</span><span class="vc">@@connection</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai écris récemment un article sur <a href="http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby/">le double bang</a> si vous vous
demandez ce que c&#8217;est ;)</p>

<p>La prochaine fois, on <em>refactorera</em> un peu plus la classe <code>Base</code>.</p>

<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/24/ruby-et-si-on-ecrivait-un-orm-partie-7/"/>
    <updated>2014-04-24T21:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/24/ruby-et-si-on-ecrivait-un-orm-partie-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Seconde partie du refactoring de SORM, mon <em>toy ORM</em> qui me sert de
prétexte pour quelques articles ;)</p>

<!-- more -->


<p>Parce que j&#8217;espère que vous avez compris que je n&#8217;était pas sérieusement
en train d&#8217;écrire un nouvel ORM pour Ruby, hein ? C&#8217;est juste pour étudier
un peu ensemble comment ça fonctionne…</p>

<p>Bref, il est temps je pense d&#8217;utiliser quelques namespace. <code>SORM::Database</code>
pour gérer la connexion et <code>SORM::Base</code> comme modèle de base. Voici donc les
tests remaniés:</p>

<figure class='code'><figcaption><span>sorm_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./sorm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;connection&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is not connected&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;after connection&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;is connected&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;test.db&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="ss">SORM</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">connected?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="ss">SORM</span><span class="p">:</span><span class="ss">:Base</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;.sql&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Article</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(1, &#39;Foo&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Article</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s2">&quot;INSERT INTO article VALUES(2, &#39;Bar&#39;);&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">after</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Article</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s2">&quot;DELETE FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns the correct number of rows&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns correct values&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;Foo&#39;</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;Bar&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;object creation&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">after</span> <span class="p">{</span> <span class="no">Article</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s2">&quot;DELETE FROM article;&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;creates a record&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Article</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;bépo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rows</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM article WHERE id = 1;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;bépo&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns an object with correct class&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;bépo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">class</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="no">Article</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns an object with correct attributes&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;bépo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;bépo&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et bien sûr la nouvelle implémentation qui va avec:</p>

<figure class='code'><figcaption><span>sorm.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">SORM</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Database</span>
</span><span class='line'>    <span class="vc">@@db</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">database_filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connected?</span>
</span><span class='line'>      <span class="vc">@@db</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connection</span>
</span><span class='line'>      <span class="vc">@@db</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sql</span><span class="p">(</span><span class="n">raw_query</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Database</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">raw_query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Recorder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Database</span><span class="o">.</span><span class="n">connection</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="n">attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="n">singleton_class</span><span class="o">.</span><span class="n">class_eval</span><span class="p">{</span><span class="kp">attr_reader</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Recorder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">connection</span><span class="p">,</span> <span class="n">table</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@connection</span> <span class="o">=</span> <span class="n">connection</span>
</span><span class='line'>      <span class="vi">@table</span> <span class="o">=</span> <span class="n">table</span>
</span><span class='line'>      <span class="vi">@parameters</span> <span class="o">=</span> <span class="n">parameters</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>      <span class="vi">@connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">query</span>
</span><span class='line'>      <span class="s2">&quot;INSERT INTO </span><span class="si">#@table</span><span class="s2"> (</span><span class="si">#{</span><span class="n">columns</span><span class="si">}</span><span class="s2">) VALUES(</span><span class="si">#{</span><span class="n">values</span><span class="si">}</span><span class="s2">);&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">columns</span>
</span><span class='line'>      <span class="vi">@parameters</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">values</span>
</span><span class='line'>      <span class="vi">@parameters</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>        <span class="n">item</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="nb">String</span> <span class="p">?</span> <span class="s2">&quot;&#39;</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2">&#39;&quot;</span> <span class="p">:</span> <span class="n">item</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, ça fait pas mal de code sans explication :( mais j&#8217;ai peu de temps
aujourd&#8217;hui. La prochaine on fera… je sais pas… on verra bien ;)</p>

<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/04/ruby-et-si-on-ecrivait-un-orm-partie-13/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/02/ruby-et-si-on-ecrivait-un-orm-partie-12/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/30/ruby-et-si-on-ecrivait-un-orm-partie-11/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le double bang en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby/"/>
    <updated>2014-04-23T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Ou encore !!, ou double point d&#8217;exclamation</h2>

<p>On peut voir ici ou là ce genre de code Ruby:</p>

<pre><code>!!expression
</code></pre>

<p><em>-C&#8217;est un truc qui n&#8217;est d&#8217;ailleurs pas spécifique au langage Ruby-</em>
Pourquoi voudrait-on écrire ça ?</p>

<!-- more -->


<p>Le <code>!</code> (not) fait une négation booléenne. Donc si une expression est <code>true</code>,
cela va donner <code>false</code>, et inversement, si une expression est <code>false</code>, cela
va donner <code>true</code>. Exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="o">!</span><span class="kp">true</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="o">!</span><span class="kp">false</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donc le <code>!!</code> est la négation booléenne d&#8217;une négation booléenne! Hum, ça
a l&#8217;air un peu inutile, hein:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="o">!!</span><span class="kp">true</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="o">!!</span><span class="kp">false</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qu&#8217;il ne faut pas oublier, c&#8217;est qu&#8217;en Ruby, comme dans plein d&#8217;autres
langages, beaucoup de choses peuvent être <strong>true</strong> ou <strong>false</strong>.
La preuve pour <code>true</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s1">&#39;ok&#39;</span> <span class="k">if</span> <span class="s1">&#39;kind of true value&#39;</span>
</span><span class='line'><span class="go">ok</span>
</span><span class='line'><span class="go">puts &#39;ok&#39; if [1, 2]</span>
</span><span class='line'><span class="go">ok</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s1">&#39;ok&#39;</span> <span class="k">if</span> <span class="o">[]</span>
</span><span class='line'><span class="go">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>En fait, toute valeur autre que <code>false</code> ou <code>nil</code> est considérée comme <code>true</code>.
Et le corollaire: sont considérées comme <code>false</code> les valeurs <code>false</code> ou <code>nil</code>.</p>

<p>On peut maintenant voir l&#8217;intérêt du <code>!!</code>. Soit la classe suivante pour nous
servir d&#8217;exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Connection</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">connection</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@connection</span> <span class="o">=</span> <span class="n">connection</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Returns a boolean.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">connected?</span>
</span><span class='line'>    <span class="o">!!</span><span class="vi">@connection</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bien que <code>@connection</code> soit <code>nil</code> ou un objet quelconque, je veux que
<code>connected?</code> renvoit <code>true</code> ou <code>false</code>. Pour ça je peux écrire:</p>

<pre><code>if @connection
  true
else
  false
end
</code></pre>

<p>ou bien encore:</p>

<pre><code>@connection ? true : false
</code></pre>

<p>Mais le <code>!!@connection</code> fonctionne tout aussi bien. Il est plus concis, et
surtout exprime bien le <em>cast</em> en booléen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">c1</span> <span class="o">=</span> <span class="no">Connection</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="go">=&gt; #&lt;Connection:0x9236910 @connection=nil&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">c1</span><span class="o">.</span><span class="n">connected?</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">c2</span> <span class="o">=</span> <span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; #&lt;Connection:0x922deb4 @connection=#&lt;Object:0x922dec8&gt;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">c2</span><span class="o">.</span><span class="n">connected?</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier/'>Des benchmarks en général et de Ruby en particulier</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/'>Mettre à jour des gems ayants des références circulaires avec Bundle</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/22/demandez-conseil-regulierement/'>Demandez conseil régulièrement</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demandez conseil régulièrement]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/22/demandez-conseil-regulierement/"/>
    <updated>2014-04-22T21:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/22/demandez-conseil-regulierement</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je réparais un bug, rien de très compliqué, juste un
évènement qui n&#8217;était pas appelé. Et j&#8217;en ai profité pour faire un
refactoring: passer d&#8217;une grosse méthode de classe à quelque chose de
plus construit.</p>

<!-- more -->


<p>En gros on avait cette structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Machin</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Truc</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">foo</span><span class="p">(</span><span class="n">des</span><span class="p">,</span> <span class="n">arguments</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># Plusieurs</span>
</span><span class='line'>      <span class="c1"># lignes</span>
</span><span class='line'>      <span class="c1"># d&#39;initialisation</span>
</span><span class='line'>      <span class="c1"># de variables.</span>
</span><span class='line'>      <span class="c1"># Plusieurs</span>
</span><span class='line'>      <span class="c1"># lignes</span>
</span><span class='line'>      <span class="c1"># de calculs</span>
</span><span class='line'>      <span class="c1"># divers.</span>
</span><span class='line'>      <span class="c1"># Et j&#39;en passe</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai fait un refactoring dans ce genre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Machin</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Truc</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">foo</span>
</span><span class='line'>      <span class="n">implementation</span> <span class="o">=</span> <span class="no">TrucImplementation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">des</span><span class="p">,</span> <span class="n">arguments</span><span class="p">)</span>
</span><span class='line'>      <span class="n">implementation</span><span class="o">.</span><span class="n">fait_ce_que_tu_as_a_faire</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">TrucImplementation</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">des</span><span class="p">,</span> <span class="n">arguments</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># Initialisation.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">fait_ce_que_tu_as_a_faire</span>
</span><span class='line'>        <span class="c1"># Ceci.</span>
</span><span class='line'>        <span class="c1"># Cela.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">ceci</span>
</span><span class='line'>        <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">cela</span>
</span><span class='line'>        <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais j&#8217;étais vraiment ennuyé avec ce nom <code>TrucImplementation</code>. Je trouvais
que ça ne faisait pas très Ruby. Bref j&#8217;avais un sentiment bizarre sur ce
code donc j&#8217;ai demandé aux collègues une revue de code en disant que
j&#8217;aimerais bien nommé ça autrement…</p>

<p>La réponse n&#8217;a pas tardée, simple et sybilline: «Tu passes juste les méthodes de
<code>TrucImplementation</code> dans <code>Truc</code> et plus de soucis».</p>

<p>Pourquoi je raconte ça ? Pour me rappeler que parfois, avoir le nez dans le
code trop longtemps fait que tu ne vois plus ce qui est évident. Il ne faut
pas hésiter à demander un coup de main ; un point de vue différent, ou juste
plus frais, peut vite faire une différence.</p>

<p>Je pense que je n&#8217;ai pas fini d&#8217;être chambré là-dessus ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/'>Plugin vim-refactor pour Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/10/ruby-utiliser-les-blocs-pour-faire-du-refactoring-partie-2/'>Ruby &ndash; Utiliser les blocs pour faire du refactoring &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring/'>Ruby &ndash; Utiliser les blocs pour faire du refactoring</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
