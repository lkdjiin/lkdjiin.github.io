<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-12-18T21:15:22+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/"/>
    <updated>2013-12-18T18:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La dernière fois on a vu <a href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/">les numéros de lignes</a>, aujourd&#8217;hui on voit comment
modifier les séparateurs de champ et d&#8217;enregistrement.</p>

<!-- more -->


<p>On continue donc avec un exemple trivial, on a ce fichier de données:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1,a</span>
</span><span class='line'><span class="err">2,b</span>
</span><span class='line'><span class="err">3,c</span>
</span></code></pre></td></tr></table></div></figure>


<p>On va intervertir les champs et modifier le séparateur de champs pour qu&#8217;il
devienne un point-virgule (pour le nom des variables prédéfinie, je vous
renvoie à l&#8217;article sur <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">la gem English</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;English&#39;</span>
</span><span class='line'>  <span class="vg">$FS</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span>
</span><span class='line'>  <span class="vg">$OFS</span> <span class="o">=</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="vg">$_</span> <span class="o">=</span> <span class="vg">$F</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>join</code> va utiliser automatiquement le contenu de <code>$OFS</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -apl test1.rb data.txt
</span><span class='line'>a;1
</span><span class='line'>b;2
</span><span class='line'>c;3
</span></code></pre></td></tr></table></div></figure>


<p>Parfois on veut aussi modifier le séparateur d&#8217;enregistrements (les enregistrements
sont ici nos lignes du fichier). Par exemple, pour passer du caractère <em>newline</em> à
<code>:</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;English&#39;</span>
</span><span class='line'>  <span class="vg">$FS</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span>
</span><span class='line'>  <span class="vg">$OFS</span> <span class="o">=</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'>  <span class="vg">$ORS</span> <span class="o">=</span> <span class="s1">&#39;:&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="vg">$_</span> <span class="o">=</span> <span class="vg">$F</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et le résultat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -apl test1.rb data.txt
</span><span class='line'>a;1:b;2:c;3:
</span></code></pre></td></tr></table></div></figure>


<p>Et bien sûr, si vous le voulez vraiment, vous pouvez toujours écrire ce
script en une ligne, directement dans la console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -aple <span class="s1">&#39;BEGIN{$;=&quot;,&quot;;$,=&quot;;&quot;;$\=&quot;:&quot;};$_=$F.reverse.join&#39;</span> data.txt
</span></code></pre></td></tr></table></div></figure>


<p>Mais êtes-vous sûr de vouloir faire ça ?!</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 12: Numéro de ligne]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/"/>
    <updated>2013-12-17T21:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne</id>
    <content type="html"><![CDATA[<p>Après avoir vu l&#8217;utilité de <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">la gem English</a>, on voit aujourd&#8217;hui une utilisation
des numéros de ligne pour créer un échantillon de données.</p>

<!-- more -->


<p>La variable prédéfinie <code>$.</code> contient le numéro de la ligne en cours de
traitement. Une utilisation de cette variable, que j&#8217;aime beaucoup, est
la création d&#8217;un petit échantillon (<em>sample</em>) de données, à partir d&#8217;un
long fichier.</p>

<p>Pour la démonstration, prenons un fichier de données de 33 lignes:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">.</span>
</span><span class='line'><span class="err">.</span>
</span><span class='line'><span class="err">.</span>
</span><span class='line'><span class="err">33</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;idée est de ne prendre qu&#8217;une ligne sur dix. Voilà le script:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="vg">$_</span> <span class="k">if</span> <span class="vg">$.</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou, en utilisant la gem English:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">require</span> <span class="s1">&#39;English&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$LAST_READ_LINE</span> <span class="k">if</span> <span class="vg">$INPUT_LINE_NUMBER</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne en cours est affichée seulement quand le numéro de la ligne est
un multiple de 10:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n test.rb data.txt
</span><span class='line'>10
</span><span class='line'>20
</span><span class='line'>30
</span></code></pre></td></tr></table></div></figure>


<p>Intéressant quand on veut se créer rapidement un petit jeu de données pour
tester quelque chose…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 45: Économie, calcul du score]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/"/>
    <updated>2013-12-16T18:15:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier j&#8217;ai <a href="http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie/">survolé les trois classes/modules</a> qui s&#8217;occupent de l&#8217;évaluation,
<code>Evaluator</code>, <code>Score</code> et <code>Fitness</code>. Aujourd&#8217;hui je parle en détail du
module <code>Score</code>.</p>

<!-- more -->


<p>Revoici donc le module <code>Score</code> au complet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Score</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">profit_and_cost</span><span class="p">(</span><span class="n">individual</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">profit</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">profit</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>      <span class="n">cost</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">cost</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">[</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compute_score!</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">shift</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="vi">@items</span>
</span><span class='line'>    <span class="n">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">cost</span> <span class="o">-</span> <span class="vi">@capacity</span><span class="p">)</span> <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>    <span class="n">profit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shift</span>
</span><span class='line'>    <span class="n">score_min</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:score</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">+=</span> <span class="n">score_min</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voyons d&#8217;abord rapidement la méthode <code>compute_score!</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">compute_score!</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">shift</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On calcule/affecte le score de chaque individu. Puis on appelle une méthode
<code>shift</code>, dont on verra l&#8217;utilité bientôt.</p>

<p>La méthode <code>score</code> maintenant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="vi">@items</span>
</span><span class='line'>    <span class="n">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On calcule le profit et le coût du portefeuille d&#8217;actions que représente
un individu via la méthode de classe <code>Score.profit_and_cost</code>. Puis on envoit
tout ça dans une méthode <code>malus</code>, qui va gérer les individus invalides.</p>

<p>La méthode <code>Score.profit_and_cost</code> est le <em>coeur</em> du calcul:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">profit_and_cost</span><span class="p">(</span><span class="n">individual</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">profit</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">profit</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>      <span class="n">cost</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">cost</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">[</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme je vais m&#8217;en servir dans d&#8217;autres parties du programme, j&#8217;en ai fait
une méthode de classe. On calcule le profit de l&#8217;individu en additionnant
le profit généré par chacune des actions. <code>items[index].profit</code> se
réfère à la liste <code>Knapsack::ITEMS</code> et <code>number</code> est un gène de l&#8217;individu.
On procède à l&#8217;identique pour le calculer le coût.</p>

<p>On peut passer à la méthode <code>malus</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">cost</span> <span class="o">-</span> <span class="vi">@capacity</span><span class="p">)</span> <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>    <span class="n">profit</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai utilisé le même principe empirique que dans notre
<a href="http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides/">dernier programme</a>,
à savoir que si le coût dépasse la capacité d&#8217;investissement
je diminue le profit de deux fois la différence entre coût
et capacité.</p>

<p>Il reste à parler de la méthode <code>shift</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">shift</span>
</span><span class='line'>    <span class="n">score_min</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:score</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">+=</span> <span class="n">score_min</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>De la façon dont on a calculé le score, celui-ci peut être négatif. Ce
qui pose un problème avec le calcul de la <em>fitness</em>, qui attend un
nombre positif. La méthode <code>shift</code> sert à regler ceci.
Tout d&#8217;abord je calcule la valeur absolue du score minimum. Puis j&#8217;ajoute
cette valeur, plus 1, à chacun des scores. Ainsi je suis sûr que le score
minimal sera 1.</p>

<p>Voilà pour aujourd&#8217;hui. Comme d&#8217;habitude, c&#8217;est l&#8217;évaluation qui demande
le plus de reflexion et d&#8217;explications.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie/'>Les algorithmes génétiques démystifiés 44: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/13/les-algorithmes-genetiques-demystifies-43-economie-la-population/'>Les algorithmes génétiques démystifiés 43: Économie, la population</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/'>Les algorithmes génétiques démystifiés 42: Un problème d&#8217;économie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 44: Économie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie/"/>
    <updated>2013-12-15T18:25:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant que <a href="">la population initiale est créée</a>,
voyons comment l&#8217;évaluer.</p>

<!-- more -->


<p>Voici la classe <code>Evaluator</code>, qui a pris un coup de jeune:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Score</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Fitness</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">capacity</span><span class="p">:,</span> <span class="ss">population</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>    <span class="vi">@capacity</span> <span class="o">=</span> <span class="n">capacity</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="n">items</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate!</span>
</span><span class='line'>    <span class="n">compute_score!</span>
</span><span class='line'>    <span class="n">compute_fitness!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai transferé les calculs du score et de la <em>fitness</em> dans des modules
car cette classe <code>Evaluator</code> commence à enfler (et aussi car je teste
quelques idées en vue d&#8217;un futur framework).</p>

<p>Le module <code>Score</code> est bien sûr responsable de l&#8217;évaluation d&#8217;un
portefeuille d&#8217;actions. Je le présenterais demain, car je n&#8217;ai
malheureusement pas le temps nécessaire aujourd&#8217;hui. Je vous donne
malgré tout le code dès maintenant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Score</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">profit_and_cost</span><span class="p">(</span><span class="n">individual</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">profit</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">profit</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>      <span class="n">cost</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">cost</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">[</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compute_score!</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">shift</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="vi">@items</span>
</span><span class='line'>    <span class="n">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">cost</span> <span class="o">-</span> <span class="vi">@capacity</span><span class="p">)</span> <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>    <span class="n">profit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shift</span>
</span><span class='line'>    <span class="n">score_min</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:score</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">+=</span> <span class="n">score_min</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>En ce qui concerne le module <code>Fitness</code>, le code est le même que
d&#8217;habitude.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Fitness</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compute_fitness!</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, demain on verra en détail le module <code>Score</code>.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/'>Les algorithmes génétiques démystifiés 45: Économie, calcul du score</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/13/les-algorithmes-genetiques-demystifies-43-economie-la-population/'>Les algorithmes génétiques démystifiés 43: Économie, la population</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/'>Les algorithmes génétiques démystifiés 42: Un problème d&#8217;économie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 11: La gem English]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/"/>
    <updated>2013-12-14T16:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Après avoir vu <a href="http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/">un exemple d&#8217;utilisation</a> du mode <em>sed/awk</em> de Ruby au travers
d&#8217;un <em>one liner</em>, on regarde aujourd&#8217;hui la gem English, qui facilite
énormement la
vie pour l&#8217;écriture des scripts.</p>

<!-- more -->


<p>On a vu jusqu&#8217;à présent deux variables globales, j&#8217;ai nommé <code>$_</code> et
<code>$;</code>. Ces noms sont justes barbares et imprononçables. Et des variables
globales de ce genre, il y en a quelques autres qui vont nous être utiles.
Voyons voir si vous êtes capable de deviner ce qu&#8217;elles représentent:
<code>$,</code>, <code>$\</code>, <code>$/</code> et <code>$.</code>. Vous avez deviné ? Non ? C&#8217;est là qu&#8217;entre en
jeu <a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/English/rdoc/English.html">la gem English</a>. Cette gem va nous permettre d&#8217;accéder à ces
variables à l&#8217;aide de noms compréhensibles par le commun des mortels:</p>

<pre><code>   Nom court   Nom long
$; $FS         $FIELD_SEPARATOR
$, $OFS        $OUTPUT_FIELD_SEPARATOR 
$/ $RS         $INPUT_RECORD_SEPARATOR
$\ $ORS        $OUTPUT_RECORD_SEPARATOR
$. $NR         $INPUT_LINE_NUMBER
$_             $LAST_READ_LINE
</code></pre>

<p>Pour avoir accès à ceci dans un script, il faudra charger la gem dans
un bloc BEGIN:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">require</span> <span class="s1">&#39;English&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors quand se servir des noms courts, des noms longs ? Tout dépend de
votre <em>background</em> et de votre tâche.</p>

<p>Si vous débutez en Ruby, si vous devez écrire un script long et/ou complexe,
si le script doit être maintenu pendant des mois ou plus, si il est maintenu
par plusieurs personnes, utilisez les noms longs.</p>

<p>Si vous (et votre équipe) avez une expérience de Awk, les noms courts peuvent
être une solution raisonnable.</p>

<p>Quand aux noms <em>barbares</em>, réservez les pour les <em>one liners</em>, les scripts
courts <em>one shot</em> et les séances de masochisme.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 43: Économie, la population]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/13/les-algorithmes-genetiques-demystifies-43-economie-la-population/"/>
    <updated>2013-12-13T21:36:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/13/les-algorithmes-genetiques-demystifies-43-economie-la-population</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir vu dernièrement l&#8217;énoncé du <a href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/">problème d&#8217;investissement</a>
que je me propose de résoudre à l&#8217;aide d&#8217;un algorithme génétique, on
peut maintenant créer la population initiale.</p>

<!-- more -->


<p>Je me base sur le programme développé pour le problème du sac à dos
<a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack3.rb">disponible sur Github</a>.
Par contre, le code nécessite la version 2.1 de Ruby (disponible en
preview2 à l&#8217;heure où j&#8217;écris ces lignes).</p>

<p>Tout d&#8217;abord la classe <code>Individual</code>, qui recueille toutes les informations
sur nos individus: chromosome, score et fitness.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">random</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">listing</span><span class="p">(</span><span class="ss">chromosome</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>      <span class="n">chromosome</span><span class="o">.</span><span class="n">map</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">gene</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>        <span class="s2">&quot;</span><span class="si">#{</span><span class="n">gene</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">items</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">items</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.item</span><span class="o">.</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">&gt;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">other</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai ajouté une méthode de classe <code>listing</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">listing</span><span class="p">(</span><span class="ss">chromosome</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="o">.</span><span class="n">map</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">gene</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">gene</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elle utilise <a href="http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/">les arguments nommés requis</a> de Ruby 2.1 et prend en
paramêtre un chromosome et la liste des actions (<code>Knapsack::ITEMS</code>,
<a href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/">voir l&#8217;article précédent</a>). Elle servira à afficher la liste des actions,
avec le nombre retenu pour chacune d&#8217;entres elles à la fin de l&#8217;algorithme.</p>

<p>Dans la méthode <code>initialize</code>, on peut voir comment je crée les chromosomes
de la population initiale:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">items</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.item</span><span class="o">.</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>items</code> se réfère à la liste des actions (<code>Knapsack::ITEMS</code>). Un chromosome est
une liste de la même taille que <code>items</code>. Chaque gène (ou emplacement dans
la liste) est un nombre compris entre zéro et le nombre maximum d&#8217;actions
pour cette action particulière (voir encore une fois <code>Knapsack::ITEMS</code>).</p>

<p>Maintenant, pour la création de la population proprement dite, il n&#8217;y a
rien de nouveau:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on verra l&#8217;évaluation…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/'>Les algorithmes génétiques démystifiés 45: Économie, calcul du score</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie/'>Les algorithmes génétiques démystifiés 44: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/'>Les algorithmes génétiques démystifiés 42: Un problème d&#8217;économie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 10: Un exemple d'utilisation]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/"/>
    <updated>2013-12-12T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/">article précédent</a>
sur les algorithmes génétiques, je devais générer des valeurs aléatoires
<em>en dur</em> dans un fichier source Ruby. Le code ressemble à ce qui suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ACCOR&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AIR_LIQUIDE&#39;</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ALSTOM&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ARCELORMITTAL_REG&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AXA&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">65</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BNP_PARIBAS&#39;</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">24</span><span class="p">),</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le dernier nombre de chaque ligne doit être compris entre 1 et 100.
Voici comment faire en utilisant ce qu&#8217;on a appris depuis le début
de cette série <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">Remplacer Sed et Awk par Ruby</a>.</p>

<!-- more -->


<p>J&#8217;ai tout d&#8217;abord écrit mes lignes en mettant la chaîne <code>ABC</code> là où je voulais
un nombre aléatoire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ACCOR&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AIR_LIQUIDE&#39;</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ALSTOM&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ARCELORMITTAL_REG&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AXA&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BNP_PARIBAS&#39;</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela va permettre au script de <em>trouver</em> l&#8217;endroit où substituer un nombre.</p>

<p>Puis, on lance le script suivant depuis une console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -ple <span class="s1">&#39;r=rand(100)+1;$_.sub!(/ABC/,r.to_s)&#39;</span> fichier_source
</span></code></pre></td></tr></table></div></figure>


<p>Explications: <code>rand(100)+1</code> génère un nombre aléatoire entre 1 inclus et
100 inclus. <code>$_.sub!(/ABC/,r.to_s)</code> opère une substitution de la ligne en
cours de traitement: ABC est remplacé par le contenu de <code>r</code>, soit le nombre
aléatoire.</p>

<p>En réalité, je n&#8217;ai pas lancé ce script depuis une console, mais directement
dans Vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> <span class="k">ruby</span> <span class="p">-</span>ple <span class="s1">&#39;r=rand(100)+1;$_.sub\!(/ABC/,r.to_s)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans ce cas, il faut faire attention à échapper le <code>!</code>, sans quoi Vim
n&#8217;aimeras pas…</p>

<p>Voilà un exemple simple d&#8217;utilisation du mode <em>sed/awk</em> de Ruby.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 42: Un problème d'économie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/"/>
    <updated>2013-12-11T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Jusqu&#8217;ici les problèmes abordés dans cette série d&#8217;articles ont été très
<em>théoriques</em>.  Le dernier algorithme génétique qu&#8217;on a exploré a permis de
résoudre
<a href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/">le problème du sac à dos</a>. Ce problème du sac à dos est une bonne base
<em>théorique</em> pour aborder certains problèmes plus <em>concrets</em>. On va justement
se rapprocher un peu du monde réel en tentant de résoudre un problème
d&#8217;économie: optimiser un investissement.</p>

<!-- more -->


<p>Voici l&#8217;énoncé du problème: Vous êtes un investisseur et vous disposez
d&#8217;une somme de 15 000 € pour acheter des actions du CAC 40.
Vous connaissez le coût
d&#8217;une action (son prix), vous savez combien elle rapportera dans, disons un
an, et vous connaissez le nombre d&#8217;actions disponibles (combien vous pouvez
en acheter). L&#8217;objectif est de savoir combien d&#8217;actions acheter pour chaque
entreprise du CAC 40, histoire de faire un maximum de profit.</p>

<p>Alors si on se rapproche du monde réel, on est encore dans un monde
fantastique, puisque pour savoir combien rapportera
une action, soit vous avez un super-pouvoir, soit vous connaissez un
ami médium. Quoiqu&#8217;il en soit, il me semble que c&#8217;est un problème intéressant,
donc c&#8217;est parti.</p>

<p>Ce problème est très proche du problème du sac à dos, je vais donc me baser
sur le code développé dans les derniers articles, et qui est
<a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack3.rb">disponible sur Github</a>.</p>

<p>Dans le problème du sac à dos, on devait choisir des objets ; ici les actions
remplacent les objets. Les objets avaient un poid ; ici les actions ont un
coût. Les objets avaient une valeur ; ici aussi les actions ont une
valeur, qu&#8217;on nommera «profit». La différence, c&#8217;est qu&#8217;ici on va pouvoir
choisir plusieurs actions de même type.</p>

<p>Voici comment on peut représenter une action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:cost</span><span class="p">,</span> <span class="ss">:profit</span><span class="p">,</span> <span class="ss">:number</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a le nom de l&#8217;action (<code>name</code>), son coût en euros (<code>cost</code>), le profit
attendu en euros (<code>profit</code>) et le nombre d&#8217;actions disponibles (<code>number</code>).</p>

<p>Pour le stock d&#8217;actions dans lequel on va puiser, j&#8217;ai été voir le CAC 40,
j&#8217;ai pris la valeur réelle des actions (arrondi à l&#8217;entier) et j&#8217;ai
généré aléatoirement les champs profit et number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Knapsack</span>
</span><span class='line'>  <span class="no">ITEMS</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ACCOR&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AIR_LIQUIDE&#39;</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ALSTOM&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ARCELORMITTAL_REG&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AXA&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">65</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BNP_PARIBAS&#39;</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">24</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BOUYGUES&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">38</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;CAP_GEMINI&#39;</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">47</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;CARREFOUR&#39;</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">37</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;CREDIT_AGRICOLE_SA&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">99</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;DANONE&#39;</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;EADS&#39;</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">63</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;EDF&#39;</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">87</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ESSILOR_INTERNATIONAL&#39;</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">49</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;GDF_SUEZ&#39;</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">42</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;GEMALTO&#39;</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">53</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;KERING&#39;</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">97</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;L&#39;OREAL&quot;</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;LAFARGE&#39;</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">93</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;LEGRAND_SA&#39;</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">49</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;LVMH_MOET_VUITTON&#39;</span><span class="p">,</span> <span class="mi">129</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;MICHELIN&#39;</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ORANGE&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;PERNOD_RICARD&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">53</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;PUBLICIS_GROUPE&#39;</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">49</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;RENAULT&#39;</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SAFRAN&#39;</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">61</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SAINT_GOBAIN&#39;</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">33</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SANOFI&#39;</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SCHNEIDER_ELECTRIC&#39;</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">21</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SOCIETE_GENERALE&#39;</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">93</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SOLVAY&#39;</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">33</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;STMICROELECTRONICS&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">75</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;TECHNIP&#39;</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">47</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;TOTAL&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">95</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;UNIBAIL-RODAMCO&#39;</span><span class="p">,</span> <span class="mi">184</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">82</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VALLOUREC&#39;</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">51</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VEOLIA_ENVIRONNEMENT&#39;</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VINCI&#39;</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">53</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VIVENDI&#39;</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">38</span><span class="p">)</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on s&#8217;occupera de générer la population initiale.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/'>Les algorithmes génétiques démystifiés 45: Économie, calcul du score</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie/'>Les algorithmes génétiques démystifiés 44: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/13/les-algorithmes-genetiques-demystifies-43-economie-la-population/'>Les algorithmes génétiques démystifiés 43: Économie, la population</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby: 9 Utiliser la bibliothèque standard]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/10/remplacer-sed-et-awk-par-ruby-9-utiliser-la-bibliotheque-standard/"/>
    <updated>2013-12-10T18:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/10/remplacer-sed-et-awk-par-ruby-9-utiliser-la-bibliotheque-standard</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Se servir de Ruby pour remplacer Sed et Awk permet, entre autre, d&#8217;avoir accès
à la bibliothèque standard de Ruby (et même à n&#8217;importe quelle gem).  Pour un
script on peut charger les bibliothèques néccessaires dans un bloc BEGIN (avec
<code>require</code>), mais pour un <em>one liner</em>, ce serait beaucoup moins drôle. Ruby
permet de charger une gem sur la ligne de commande avec <code>-r</code>, une syntaxe plus
courte que <code>require</code>.</p>

<!-- more -->


<p>Tout au long de <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">cette série</a>, les exemples ont été triviaux et ça sera
encore le cas aujourd&#8217;hui. Prenons le fichier de données suivant:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;objectif est d&#8217;afficher les différentes valeurs, <strong>sans doublons</strong>.
Pour le fichier ci-dessus, on veut donc obtenir: 1, 2, 3 et 4. Il y a plusieurs
solutions pour réaliser ça, l&#8217;une d&#8217;elles est d&#8217;utiliser <a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/set/rdoc/Set.html">les sets</a>
fournis par la bibliothèque standard de Ruby.</p>

<p>Voici une ligne de commande qui réalise l&#8217;objectif:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -nl -rset -e <span class="s1">&#39;BEGIN{s=Set.new};s.add($_);END{p s}&#39;</span> data.txt
</span><span class='line'><span class="c">#&lt;Set: {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;}&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le switch <code>-n</code> passe Ruby en <em>mode sed/awk</em>. Le switch <code>-l</code> s&#8217;occupe des
caractères de fin de ligne.</p>

<p>Le switch <code>-r</code> va charger la gem passée en argument. Donc <code>-rset</code> va charger
la gem «set».</p>

<p>Pour ce qui est du script, on commence par initialiser une variable <code>s</code> en
tant qu&#8217;objet Set:</p>

<pre><code>BEGIN { s = Set.new }
</code></pre>

<p>Puis on ajoute le contenu de chaque ligne dans ce set (comme il s&#8217;agit
justement d&#8217;un type Set, les doublons ne seront pas pris en compte):</p>

<pre><code>s.add($_)
</code></pre>

<p>Enfin, on affiche le résultat, <code>p s</code> étant un raccourci pour
<code>puts s.inspect</code>. Les raccourcis sont les bienvenus pour les <em>one liners</em>:</p>

<pre><code>END { p s }
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/"/>
    <updated>2013-12-09T20:36:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Il est temps de se passer d&#8217;un fichier pour notre script… Lorsque celui-ci
est suffisament court, on peut l&#8217;écrire directement sur la ligne de
commande.</p>

<!-- more -->


<p>Si on reprend l&#8217;exemple tout simple du <a href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/">dernier article</a>,
nous avions le fichier de données suivant à transformer <em>en place</em> en
majuscule:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">alice</span>
</span><span class='line'><span class="err">bob</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qu&#8217;on a fait à l&#8217;aide du script suivant:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span><span class="o">.</span><span class="n">upcase!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autrement une seule ligne ! Est-ce que ça vaut vraiment la peine d&#8217;écrire
un fichier pour ça ? Bien sûr que non. On va donc se passer du fichier
script en donnant le code sur la ligne de commande grâce à l&#8217;option <code>-e</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -p -i.2 -e <span class="s1">&#39;$_.upcase!&#39;</span> data.txt
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, vous êtes maintenant prêts à écrire des <em>one liners</em>. Notez
quand même qu&#8217;il vaut mieux utiliser les guillemets simples (<code>'</code>) autour
du code plutôt que les doubles (<code>"</code>), pour empêcher Bash d&#8217;interpréter
certains caractères (comme ici le <code>!</code>).</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/"/>
    <updated>2013-12-08T19:30:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Parfois on veut analyser un fichier, et parfois on veut le modifier.
Si on suit la logique de <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">cette série d&#8217;articles</a>, Ruby devrait offrir
un switch permettant de modifier un fichier sans avoir à l&#8217;enregistrer
explicitement. Et je ne vais pas vous surprendre
en vous apprenant qu&#8217;un tel switch existe, il s&#8217;agit de l&#8217;option
<code>-i</code>, qui permet aussi de sauvegarder l&#8217;ancien fichier.</p>

<!-- more -->


<p>L&#8217;exemple d&#8217;aujourd&#8217;hui est encore plus trivial que d&#8217;habitude ;) Voici
le fichier de données:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">alice</span>
</span><span class='line'><span class="err">bob</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce que je voudrais, c&#8217;est simplement tout mettre en majuscule. Ce que
permet le script suivant:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span><span class="o">.</span><span class="n">upcase!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on lance le script comme on sait le faire maintenant
(voir par exemple <a href="http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/">l&#8217;article précédant</a>), on obtient un bel
affichage:</p>

<pre><code>[~/test]⇒ ruby -p test.rb data.txt 
ALICE
BOB
</code></pre>

<p>Mais le fichier lui-même n&#8217;a pas changé:</p>

<pre><code>[~/test]⇒ cat data.txt
alice
bob
</code></pre>

<p>Si on veut modifier le fichier, on doit se servir de l&#8217;option <code>-i</code> en
spécifiant l&#8217;extension qui sera ajouter au fichier original sauvegardé,
ici <code>.2</code>:</p>

<pre><code>[~/test]⇒ ruby -p -i.2 test.rb data.txt 
</code></pre>

<p>Et voilà, on a bien les deux fichiers attendus:</p>

<pre><code>[~/test]⇒ ls data*
data.txt  data.txt.2
</code></pre>

<p>Notre fichier est bien modifié:</p>

<pre><code>[~/test]⇒ cat data.txt
ALICE
BOB
</code></pre>

<p>Et il est bien sauvegardé:</p>

<pre><code>[~/test]⇒ cat data.txt.2
alice
bob
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 6: Séparateur de champ]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/"/>
    <updated>2013-12-07T20:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui on voit comment changer le séparateur de champ à l&#8217;aide de
l&#8217;option <code>-F</code>.</p>

<!-- more -->


<p>Reprenons le fichier de données du <a href="http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/">dernier article</a>,
ajoutons un séparateur de champ, par exemple la virgule (<code>,</code>) et
<em>salissons-le</em> quelque peu:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1, a</span>
</span><span class='line'><span class="err">2, a</span>
</span><span class='line'><span class="err">3, b</span>
</span><span class='line'><span class="err">4 , a</span>
</span><span class='line'><span class="err">5 ,a</span>
</span><span class='line'><span class="err">6 ,b</span>
</span><span class='line'><span class="err">7,b</span>
</span><span class='line'><span class="err">8,b</span>
</span><span class='line'><span class="err">9,b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le script du dernier article ne fonctionnera plus, puisque jusqu&#8217;ici nous
supposions que les champs étaient séparés par des espaces, ce qui n&#8217;est plus
le cas.</p>

<p>En admettant que les champs seront séparés par des virgules, il faut effectuer
un petit changement dans notre script, pour nettoyer le second champ:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="o">+=</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_i</span> <span class="k">if</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">strip</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Total: </span><span class="si">#{</span><span class="n">total</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et pour que Ruby sépare bien les champs en tenant compte des virgules, il faut
lui passer l&#8217;option <code>-F</code>, suivie d&#8217;une <em>regex</em> (sans les <code>//</code>) décrivant
le séparateur:</p>

<pre><code>[~]⇒ ruby -an -F, test.rb &lt; data.txt 
Total: 12
</code></pre>

<p>Et voilà.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aidez-vous : traduisez !]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/"/>
    <updated>2013-12-06T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>D&#8217;aussi loin que je me souvienne,
j&#8217;ai toujours traduit de la documentation technique anglaise en français.
J&#8217;ai commencé par traduire des tutoriaux sur l&#8217;assembleur, juste pour moi.
Plus tard, j&#8217;ai traduis des pages de documentation sur Netbeans.
C&#8217;était un autre temps, un temps où je n&#8217;utilisais pas encore Vim, où je
programmais en Java… Et j&#8217;ai énormement appris en faisant des traductions.</p>

<!-- more -->


<p>Tous les développeurs ne lisent pas l&#8217;anglais, même technique. Certains ont
des problèmes avec la langue de Shakespeare et ont besoin de documentation
en français. On peut toujours se dire que, quand même, ils devraient s&#8217;y
mettre, mais en attendant, ils font comment ?</p>

<p>Même quand vous maitrisez assez l&#8217;anglais pour lire la documentation dans
la langue originale, il est toujours plaisant de pouvoir
lire dans sa langue, surtout pour une première approche du produit.</p>

<p><strong>Aidez-vous, traduisez de la documentation open-source !</strong> J&#8217;y vois trois
avantages:</p>

<ol>
<li>Quel que soit votre niveau en anglais, vous allez vous améliorer en
en faisant des traductions. Apprendre du nouveau vocabulaire, des
nouvelles tournures, etc.</li>
<li>En traduisant des documentations, vous allez en apprendre plus sur
le produit, quel qu&#8217;il soit, puisque vous serez dans l&#8217;obligation
de comprendre chaque détail du produit.</li>
<li>Ça peut être un avantage pour votre CV. S&#8217;il est vrai que certains
employeur ne s&#8217;intéressent pas à votre anglais, je n&#8217;en ai jamais vu
qui considèrent un bon niveau d&#8217;anglais comme un point négatif ;)</li>
</ol>


<p>Même si vous pensez ne pas avoir un niveau suffisant, lancez-vous ! Vous
en retirerez toujours un bénéfice.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 5: Accéder aux champs/colonnes]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/"/>
    <updated>2013-12-05T19:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Toujours dans l&#8217;optique de remplacer Sed et Awk par Ruby,
et après avoir vu <a href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/">les options -p et -l</a>, on voit
comment accéder facilement aux différentes colonnes
d&#8217;un fichier.</p>

<!-- more -->


<p>Voici le fichier de données tout simple qui va nous servir aujourd&#8217;hui:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1 a</span>
</span><span class='line'><span class="err">2 a</span>
</span><span class='line'><span class="err">3 b</span>
</span><span class='line'><span class="err">4 a</span>
</span><span class='line'><span class="err">5 a</span>
</span><span class='line'><span class="err">6 b</span>
</span><span class='line'><span class="err">7 b</span>
</span><span class='line'><span class="err">8 b</span>
</span><span class='line'><span class="err">9 b</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;objectif est de calculer la somme des valeurs de la 1ère colonne,
uniquement quand la 2e colonne affiche <code>a</code>. On pourrait bien sûr splitter
la ligne (<code>$_</code>) pour obtenir nos champs, mais il y a plus rapide.
En activant l&#8217;option <code>-a</code> de la ligne de commande, Ruby va automatiquement
splitter chaque lignes du fichier de données dans la variable prédéfinie
<code>$F</code> (pour <em>Fields</em>). On n&#8217;a donc rien à faire ;) et on peut se concentrer
sur les calculs:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="o">+=</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_i</span> <span class="k">if</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Total: </span><span class="si">#{</span><span class="n">total</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby -an test.rb &lt; data.txt 
Total: 12
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 4: Les options -p et -l]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/"/>
    <updated>2013-12-04T21:21:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Les options -p et -l de la ligne de commande de Ruby permettent de se
rapprocher encore un peu plus du comportement de Sed et Awk.  On reprend notre
fichier tout simple:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">4</span>
</span><span class='line'><span class="err">5</span>
</span><span class='line'><span class="err">6</span>
</span><span class='line'><span class="err">7</span>
</span><span class='line'><span class="err">8</span>
</span><span class='line'><span class="err">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aujourd&#8217;hui l&#8217;objectif est d&#8217;ajouter une nouvelle colonne, qui nous dit si
le nombre est pair (p) ou impair (i). C&#8217;est un exemple trivial, mais
suffisant pour ce que je veux montrer.</p>

<!-- more -->


<h2>Un premier script déjà concis</h2>

<p>Voici un premier code possible, avec ce que nous connaissons déjà, c&#8217;est
à dire l&#8217;option -n:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span> <span class="o">=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">chomp</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">even?</span> <span class="p">?</span> <span class="s2">&quot; p&quot;</span> <span class="p">:</span> <span class="s2">&quot; i&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$_</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby -n test1.rb &lt; data.txt 
1 i
2 p
3 i
4 p
5 i
6 p
7 i
8 p
9 i
</code></pre>

<p>On peut noter que:</p>

<ul>
<li>contrairement à l&#8217;exemple précédent, on n&#8217;utilise pas les blocs BEGIN et
END (voir <a href="http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/">Premiers pas</a>
et <a href="http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end/">BEGIN et END</a>).</li>
<li>la variable prédéfinie <code>$_</code> est <strong>accessible en écriture</strong>.</li>
<li>la variable prédéfinie <code>$_</code> contient le caractère de fin de ligne, il a
fallu le supprimer avec <code>chomp</code>. C&#8217;est agaçant.</li>
<li>on écrit chaque nouvelle ligne avec <code>puts</code>. C&#8217;est un pattern classique,
il doit bien y avoir un truc pour nous éviter cela.</li>
</ul>


<h2>La même chose en plus court</h2>

<p>Voici maintenant une réécriture du script ci-dessus, qui tire parti
des options -p et -l:</p>

<figure class='code'><figcaption><span>test2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span> <span class="o">+=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">even?</span> <span class="p">?</span> <span class="s2">&quot; p&quot;</span> <span class="p">:</span> <span class="s2">&quot; i&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby -pl test2.rb &lt; data.txt 
1 i
2 p
3 i
4 p
5 i
6 p
7 i
8 p
9 i
</code></pre>

<h2>Les explications de -p et -l</h2>

<p>L&#8217;option -p fonctionne comme l&#8217;option -n, mais en plus, affiche automatiquement
le contenu de la variable <code>$_</code> à la fin de la boucle de traitement.</p>

<p>L&#8217;option -l, quant à elle, s&#8217;occupe automatiquement du caractère de fin
de ligne en le supprimant.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le ventilo de mon alimentation fait un bruit d'enfer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer/"/>
    <updated>2013-12-03T20:20:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer</id>
    <content type="html"><![CDATA[<p>Juste avant d&#8217;écrire cet article, le ventilo de l&#8217;alimentation de mon pc
c&#8217;est mis a faire un bruit d&#8217;enfer. Le pc tremble de partout.</p>

<!-- more -->


<p>Je vais tenter un truc pour prolonger un peu sa vie. Si ça rate, je ne
pourrais peut-être pas publié d&#8217;article demain :(</p>

<p>Quand ce genre de chose arrive, on peut tenter de démonter le ventilo, puis
de mettre une goutte d&#8217;huile sur le palier, le truc qui se trouve sous
une pastille autocollante. Voilà, j&#8217;espère que ça va fonctionner…</p>

<p>À demain ?</p>

<p><strong>Edit du jour même</strong> <em>Je ne l&#8217;ai jamais trouvé ce foutu palier ! Sous la
pastille autocollante il y avait… du plastique moulé ! Quoiqu&#8217;il en soit,
il semblerait qu&#8217;un bon coup d&#8217;aspirateur ai suffit à rendre le sourire
au ventilo ;) Je touche du bois…</em></p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires/'>Un plugin Vim pour replier/folder les commentaires</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme/'>Je vais apprendre Scheme</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/'>Couverture de code pour Ruby avec coco</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un plugin Vim pour replier/folder les commentaires]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires/"/>
    <updated>2013-12-02T18:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires</id>
    <content type="html"><![CDATA[<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédent</a>, je montrai comment écrire une fonction pour
folder les commentaires de style Unix dans un fichier. Cette solution avait
plusieurs limites alors j&#8217;ai eu envie d&#8217;en faire un plugin plus
intéressant. Je vous présente donc vim-foldcomments, mon premier plugin
pour Vim.</p>

<!-- more -->


<p>Pouvoir folder/replier tous les commentaires d&#8217;un fichier peut être
utile quand vous étudiez un tout nouveau code, ou au contraire, quand vous
travaillez sur un code bien connu.
Vous pouvez trouver le plugin sur Github: <a href="https://github.com/lkdjiin/vim-foldcomments">vim-foldcomments</a>.
Une fois installé, avec <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> par exemple,
vous pouvez taper la commande:</p>

<pre><code>:FoldComments
</code></pre>

<p>pour replier les commentaires du fichier. Personnelement j&#8217;ai mappé cette
commande sur la touche F5 en mettant ceci dans mon .vimrc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map<span class="p">&lt;</span>F5<span class="p">&gt;</span> FoldComments<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le plugin est en version béta et ne gère pour l&#8217;instant que quelques
langages: Ruby, Haskell, Java, C, Javascript, Logo, Racket, Scheme, Vim,
ainsi que tous commentaires de style Unix (<code>#</code>). Les commentaires
multilignes (<code>/* … */</code> en C ou encore <code>=begin … =end</code> en Ruby) sont aussi
pris en compte.</p>

<p>N&#8217;hésitez pas à le tester et à me donner votre opinion. Vous pouvez aussi
bien sûr participer au code sur Github.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses/'>Vim: Coloration syntaxique des parenthèses</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer/'>Le ventilo de mon alimentation fait un bruit d&#8217;enfer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 3: BEGIN et END]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end/"/>
    <updated>2013-12-01T21:23:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Les blocs BEGIN et END du langage Ruby paraissent étranges pour beaucoup
de personnes. Ils sont inutiles (et certainement néfastes) pour des
programmes dit <em>classiques</em>. Ils peuvent être utiles pour un script.
Il sont indispensables pour remplacer Sed et Awk et on va donc les
regarder plus en détail.</p>

<!-- more -->


<p>Un exemple simple vaut mieux qu&#8217;un long discours:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;avant&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;après&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;au milieu&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby test1.rb 
avant
au milieu
après
</code></pre>

<p><code>BEGIN</code> est donc l&#8217;endroit où on initialisera les variables et <code>END</code>
permettra de faire les calculs et l&#8217;affichage en fin de traitement.</p>

<p>Il faut savoir qu&#8217;on peut avoir plusieurs blocs
<code>BEGIN</code> et <code>END</code>. Les blocs <code>BEGIN</code> seront interprétés dans l&#8217;ordre
d&#8217;apparition, tandis que les blocs <code>END</code> seront interprétés dans l&#8217;ordre
inverse d&#8217;apparition:</p>

<figure class='code'><figcaption><span>test2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;end 1&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;end 2&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;end 3&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;begin 1&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;begin 2&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;begin 3&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby test2.rb
begin 1
begin 2
begin 3
end 3
end 2
end 1
</code></pre>

<p>Enfin, pour être exhaustif, on ne peut pas remplacer les <code>{}</code> par <code>do</code>
et <code>end</code>, comme on pourrait s&#8217;y attendre:</p>

<figure class='code'><figcaption><span>test3.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;avant&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby test3.rb
test3.rb:1: syntax error, unexpected keyword_do, expecting '{'
test3.rb:3: syntax error, unexpected keyword_end, expecting end-of-input
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 2: Premiers pas]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/"/>
    <updated>2013-11-30T16:29:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous avez décidé de <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">remplacer Sed et Awk par Ruby</a> ? C&#8217;est parti.
L&#8217;objectif de cet article sera de calculer et d&#8217;afficher la somme des
valeurs contenues dans un fichier.</p>

<p>Prenons le simple fichier de données (data.txt) suivant:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">4</span>
</span><span class='line'><span class="err">5</span>
</span><span class='line'><span class="err">6</span>
</span><span class='line'><span class="err">7</span>
</span><span class='line'><span class="err">8</span>
</span><span class='line'><span class="err">9</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Hello world!</h2>

<p>Le premier pas sera d&#8217;afficher chaque ligne du fichier de données. Voici le
script Ruby qui va faire ça:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="vg">$_</span>
</span></code></pre></td></tr></table></div></figure>


<p>La variable <code>$_</code> est une variable prédéfinie qui contient la ligne en cours
de traitement. Dans <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">l&#8217;article précédent</a>, j&#8217;évoquai la boucle de traitement
implicite. Pour dire à Ruby d&#8217;utiliser cette boucle implicite, on doit
utiliser l&#8217;option <code>-n</code> sur la ligne de commande:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n test1.rb &lt; data.txt
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>6
</span><span class='line'>7
</span><span class='line'>8
</span><span class='line'>9
</span></code></pre></td></tr></table></div></figure>


<h2>BEGIN et END</h2>

<p>Pour calculer la somme des valeurs du fichier, il va falloir initialiser
une variable <em>avant</em> la boucle de traitement et l&#8217;afficher <em>après</em> la
boucle de traitement. Pour ça, Ruby reprend ce que fait Awk avec les
blocs <code>BEGIN {}</code> et <code>END {}</code>:</p>

<figure class='code'><figcaption><span>one_shot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="o">+=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">total</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code placé dans un bloc <code>BEGIN</code> est executé avant tout autre code du
fichier. Celui placé dans un bloc <code>END</code> est executé après tout autre code
du fichier. Objectif atteint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n one_shot.rb &lt; data.txt
</span><span class='line'>45
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter qu&#8217;on a réussi notre objectif sans avoir explicitement à ouvrir
le fichier et à lire chaque ligne.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/"/>
    <updated>2013-11-29T18:31:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Sed et Awk sont deux petits langages spécialisés dans l&#8217;édition, le
traitement, l&#8217;analyse, le filtrage, etc, des fichiers texte.
Ce que peuvent faire ces deux langages, Ruby peut le faire.</p>

<!-- more -->


<p>Dans mon <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédant</a>
j&#8217;ai écrit:</p>

<blockquote><p>le fichier https://github.com/ruby/ruby/blob/trunk/lib/csv.rb de<br/>Ruby contient à ce jour 46% de lignes qui sont des commentaires.</p></blockquote>


<p>Je n&#8217;ai bien sûr pas compté chaque commentaire du fichier. J&#8217;ai écrit pour
cela un petit script Ruby.</p>

<p>Un algorithme standard pour ce type de tâche serait:</p>

<pre><code>ouvrir le fichier
initialiser des variables

pour chaque ligne du fichier
    mettre à jour des variables
fin

fermer le fichier
calculer le résultat
afficher le résultat
</code></pre>

<p>En fait, quand on traite/édite/analyse/filtre un fichier texte, un pattern
basique apparait:</p>

<pre><code>ouvrir le fichier
pour chaque ligne du fichier
    # faire un truc
fin
fermer le fichier
</code></pre>

<p>Avec Sed et Awk, l&#8217;ouverture du fichier, sa fermeture et la boucle de
traitement sont <em>implicites</em>. Autrement dit, on n&#8217;écrit jamais ce code.
On écrit seulement le code du traitement.</p>

<p>Ruby peut faire cela.</p>

<p>Une question se pose alors :
si Sed et Awk sont faits pour ça, pourquoi utiliser Ruby à la place ?
Il y a plusieurs raisons possibles:</p>

<ul>
<li>Vous ne connaissez ni Sed, ni Awk mais vous connaissez déjà Ruby,
même un peu. Pourquoi apprendre un nouveau langage ?</li>
<li>Vous pratiquez Sed et Awk et vous trouvez la syntaxe … comment dire …
ésotérique (surtout celle de Sed).</li>
<li>Utiliser Ruby permet d&#8217;avoir accès à toutes ses bibliothèques.</li>
</ul>


<p>Convaincu ? Dans ce cas surveillez ce blog, je vais rapidement écrire
quelques articles sur ce sujet.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/'>Remplacer Sed et Awk par Ruby 12: Numéro de ligne</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
