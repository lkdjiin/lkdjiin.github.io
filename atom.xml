<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2019-12-02T21:20:54+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fonctionnement d'un oscillateur à base de CD40106]]></title>
    <link href="http://lkdjiin.github.io/blog/2019/12/02/fonctionnement-dun-oscillateur-a-base-de-cd40106/"/>
    <updated>2019-12-02T20:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2019/12/02/fonctionnement-dun-oscillateur-a-base-de-cd40106</id>
    <content type="html"><![CDATA[<p>Dernièrement j’ai écrit un article qui montre quelques oscillateurs simples,
mais sans fournir d’explications sur le fonctionnement.  Aujourd’hui je vais
tenter d’expliquer ce qu’il se passe, comme j’aurais aimé qu’on m’explique
quand j’ai débuté l’électronique.</p>

<p>Le CD40106 est un inverseur logique, il applique la fonction NOT. Si le signal
en entrée est un 1 logique, le signal en sortie sera un 0 logique. Inversement,
si le signal en entrée est un 0 logique, le signal en sortie sera un 1 logique.</p>

<p>C’est donc du numérique, et ça semble simple.</p>

<p>Mais qu’est ce qu’on entend par 0 et 1 logique ?
Quand le circuit intégré CD40106 est alimenté par une pile 9
Volt, le 0 logique en sortie correspond à un signal de 0 Volt et le 1 logique
correspond, toujours en sortie, à un signal de 9 Volt (à peu près).  Par contre en entrée,
c’est un peu plus compliqué, parce que l’électronique c’est jamais seulement
numérique. Mais on y reviendra plus tard.</p>

<p>Voici l’oscillateur dont je parle dans la suite de l’article :</p>

<p><img class="center" src="http://lkdjiin.github.io/images/oscillo-cd40106.png" /></p>

<!-- more -->

<h2 id="le-circuit">Le circuit</h2>

<p>Lorsqu’on branche la pile, le signal au point A est un 0 logique, il n’y a pas
de tension en entrée. Rien. Zéro. Nada. Donc le circuit intégré produit un 1 logique en sortie, au point B.
Ce niveau de sortie durera jusqu’à ce que l’entrée s’inverse.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/onde-carree-1.png" /></p>

<p>Une bonne partie des électrons vont se bousculer vers la sortie OUT (un haut-parleur par exemple). Mais comme l’électricité aime
emprunter tout les chemins possibles, quelques électrons vont retourner au point A, via la résistance R1.
Arrivé au point A, ces électrons sont attirés par le ground comme des fourmis par le miel.
Mais ils n’atteindront jamais le ground, car ils vont se retrouver piégé à l’intérieur du condensateur C1.
Et pendant ce temps, la sortie du circuit intégré est toujours à 9 Volt.</p>

<p>Arrive fatalement le moment où le condensateur C1 est plein et ne peut plus
accueillir de nouveaux électrons. Mais ils arrivent toujours au point A par
l’intermédiaire de la résistance. Ils vont alors emprunter l’entrée du circuit
intégré. Et comme le CD40106 a maintenant un 1 logique en entrée il va produire
un 0 logique en sortie.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/onde-carree-2.png" /></p>

<p>Les électrons n’arrivent plus vers le point A via R1, puisque la sortie du
circuit intégré est dorénavant à zéro. Par contre, le condensateur commence
a libérer ses électrons, ce qui maintient l’entrée du CD40106 au niveau du
1 logique.</p>

<p>Et puis, quand le condensateur à épuisé toute sa réserve d’électrons, le point A
passe de nouveau au 0 logique et le cycle peut recommencer. Ce qui produit une
onde carrée.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/onde-carree-3.png" /></p>

<p>Tout ça est très simplifié, et c’est un peu le monde des bisousnours numériques.
Malgré tout, c’est un premier niveau de compréhension.</p>

<h2 id="entre-analogique-et-hystrsis">Entrée analogique et hystérésis</h2>

<p>Comme je l’ai laissé entendre dans l’introduction, la grande simplification de
l’explication précédente est de prétendre que le signal en entrée (point A) est
numérique. C’est à dire 0 Volt ou 9 Volt. À cause du condensateur (ou grâce à
lui, c’est selon le point de vue) le signal au point A est une onde de type plus ou moins
triangulaire.  Pendant une même période de temps, le condensateur en charge
attire plus d’électrons quand il est vide que quand il est déjà un peu rempli.
De même, il rejette plus d’électrons au début de sa décharge.</p>

<p>Pour cette raison, l’inverseur logique fonctionne avec un seuil. Quand le signal est
en dessous du seuil, l’entrée est à 0, et inversement. Mais pour pouvoir
réaliser un oscillateur, un seul et unique seuil ne va pas être suffisant.
Sitôt le seuil franchi, l’état va s’inverser. Ce qui fera aussitôt franchir le
seuil dans le sens inverse, et de nouveau inverser l’état. Etc. Le signal en
entrée resterait coincé sur le seuil, ni vraiment 0, ni vraiment 1.</p>

<p>Le CD40106 fonctionne grâce au principe
d’<a href="https://fr.wikipedia.org/wiki/Hyst%C3%A9r%C3%A9sis">hystérésis</a>, ou hystérèse.
En pratique il y a deux seuils, et seulement l’un de ces seuils est actif à un
instant donné. Le schéma suivant est extrait du <em>datasheet</em> et j’ai ajouté les
point en rouge, qui représentent des instants dans le temps.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/hysterisis.png" /></p>

<p>Au premier point rouge, la tension franchit le seuil <em>VT+</em>, qui est actif. Le circuit
considère donc l’entrée comme un 1 et produit une sortie à 0. À partir de ce
moment, le seuil <em>VT+</em> devient inactif, et c’est le seuil <em>VT-</em> qui prend le relai et devient actif.</p>

<p>Au second point rouge, bien qu’on ai franchi plusieurs fois le seuil <em>VT+</em> dans
un sens et dans l’autre rien ne change.</p>

<p>Au troisième et dernier point, le signal franchit <em>VT-</em>, le seuil actif, et
donc la sortie s’inverse.</p>

<p>C’est ça l’hystérésis, un changement d’état suivant un évènement externe <strong>et</strong> l’état actuel.
Et c’est bien utile pour faire un oscillateur avec un inverseur.</p>

<p>C’est fini pour aujourd’hui. Si vous avez repéré des erreurs dans cet article, n’hésitez pas à le signaler dans un commentaire. Merci et à bientôt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques oscillateurs très simples]]></title>
    <link href="http://lkdjiin.github.io/blog/2019/11/20/quelques-oscillateurs-tres-simples/"/>
    <updated>2019-11-20T17:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2019/11/20/quelques-oscillateurs-tres-simples</id>
    <content type="html"><![CDATA[<p>J’ai l’intention de fabriquer mon synthétiseur modulaire. Et comme il faut bien
commencer quelque part, un oscillateur semble un bon point de départ. Je
pourrais utiliser un Arduino, ou une plate-forme similaire, écrire quelques
lignes de code, et voilà. Mais ça aurait beaucoup moins de charme que de faire
un peu d’électronique en mode vintage. Je vais donc commencer par ce que
j’imagine être le plus simple : un oscillateur avec un seul composant principal
et quelques résistances et condensateurs.  Ça n’ira pas bien loin, ça fera
sûrement mal aux oreilles, mais au risque de me répéter «Il faut bien commencer
quelque part.»</p>

<!-- more -->

<h2 id="quest-ce-quun-oscillateur">Qu’est ce qu’un oscillateur</h2>

<p>Un oscillateur est un dispositif électronique qui produit un signal électrique
ayant la forme d’une onde.  Une onde électrique, c’est un motif, une forme, que
produit la sortie du dispositif en Volt, qui oscille entre un minimum et un
maximum, et qui se répète, encore et encore.  On rencontre couramment les types d’ondes
carrée, triangle, en dent de scie, et enfin, sinusoïdale.</p>

<p><a title="Omegatron translated by Roland Brierre [CC BY 3.0 (https://creativecommons.org/licenses/by/3.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Formes_d%27onde.png"><img width="512" alt="Formes d&#039;onde" src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/Formes_d%27onde.png/512px-Formes_d%27onde.png" /></a></p>

<p>Chaque forme d’onde particulière produit une sonorité particulière quand on la
passe dans un haut-parleur. Une répétition - on dit aussi un cycle - par
seconde donne par définition une fréquence de 1 Hertz. C’est la hauteur
(musicale) de la note produite. Dix cycles par seconde correspondent à 10 Hertz.
Deux cent trente quatre cycles par seconde correspondent à 234 Hertz, etc. Un
Hertz est une fréquence beaucoup trop basse pour être entendue par les humains.
Des oreilles jeunes, en bonne santé, pas trop fatiguées, peuvent entendre les
fréquences comprises entre 40 et 20 000 Hertz, en gros.</p>

<h2 id="onde-carre">Onde carrée</h2>

<h3 id="cd40106">CD40106</h3>

<p>Le premier oscillateur que j’ai testé à pour composant de base un CD40106, et produit une onde carrée.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/osc-40106.png" /></p>

<p>Si vous l’essayez, raccordez aussi les pins 3, 5, 9, 11 et 13 au ground. Et si
possible ajoutez lui un volume, la sortie pouvant être assez élevée. <em>(Dans
tous les cas, vous devriez toujours ajouter un contrôle de volume et mettre
votre ampli à zéro pour commencer ; ça vous évitera des mauvaises surprises.)</em></p>

<p>On obtient une belle onde carrée :</p>

<p><img class="center" src="http://lkdjiin.github.io/images/square-wave.jpg" /></p>

<h3 id="hc14">74HC14</h3>

<p>Le 74HC14, c’est la même chose qu’un CD40106 mais en 5 Volt, voire même moins.
Il est donc idéal si votre circuit doit fonctionner en 5 Volt ou moins.  Le
schéma est exactement le même que le précédent, pin pour pin. Pensez seulement
à bien utiliser du 5 Volt, sinon vous le grillerez.</p>

<h3 id="section">555</h3>

<p><img class="center" src="http://lkdjiin.github.io/images/osc-555.png" /></p>

<p>Le 555 est un grand classique. Un des composants électroniques les plus utilisés au monde.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/bread-555.jpg" /></p>

<h2 id="dents-de-scie">Dents de scie</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/osc-transistor.png" /></p>

<p>Je voulais aussi voir ce que je pouvais faire avec un transistor. Le résultat est
intéressant mais l’amplitude est un peu faible.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/sawtooth-wave.jpg" /></p>

<p>J’ai pu le faire fonctionner à 9 Volt avec un 2N2222A en
métal. Tout les autres types de transistors que j’ai essayé n’ont pas réussi à osciller. Je pense
que la plupart fonctionnerait avec 12 Volt. Il faudra que j’essaye plus tard
car je n’avais pas de 12 Volt sous la main.</p>

<h2 id="les-contrles">Les contrôles</h2>

<p>De manière générale, augmenter la résistance diminue la fréquence. C’est à dire
que ça produit une note plus basse.  De même, augmenter la valeur du condensateur diminue
aussi la fréquence. Il ne faut pas hésiter à tester les différentes valeurs
qu’on a sous la main.</p>

<h2 id="ce-qui-manque">Ce qui manque</h2>

<p>Laissez moi le répéter une fois encore : il faut commencer quelque part. Et là,
ça n’est clairement que le début. Tel quel, ces oscillateurs sont inutilisables
dans un synthé. Voyons rapidement ce qui manque :</p>

<ul>
  <li><strong>Plusieurs formes d’ondes</strong>. Il me manque encore triangle et sinus. Et l’idéal serait qu’un seul oscillateur puissent produire plusieurs formes d’ondes.</li>
  <li><strong>Un contrôle fin de la fréquence</strong>. Généralement les oscillateurs possèdent 2 contrôles de fréquence. Un grossier (<em>coarse</em>) qui balaye toute l’étendue du registre, et un plus fin de l’ordre d’un ou deux tons, qui permet de s’accorder précisément.</li>
  <li><strong>1V/oct</strong>. C’est LA fonctionnalité que j’attends avec le plus d’impatience. Je pense que ce sera aussi la plus complexe à mettre en place. En gros, c’est ce qui permettra à mes oscillateurs de jouer des notes précises, à partir d’un clavier ou d’un séquenceur, par exemple.</li>
  <li><strong>Pulse modulation</strong>. Un carré est aussi un rectangle. Pensez donc à une onde carrée comme à une onde rectangle, avec par exemples des «bosses» plus longues et des «creux» plus courts. Ça permet d’obtenir des nouvelles sonorités.</li>
  <li><strong>La synchro</strong>. Mais c’est un peu normal car pour cela il faut un deuxième oscillateur. En gros c’est quand on utilise deux oscillateurs en même temps. L’un s’occupant de la fréquence et l’autre de la forme d’onde.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le format Eurorack]]></title>
    <link href="http://lkdjiin.github.io/blog/2019/11/10/le-format-eurorack/"/>
    <updated>2019-11-10T10:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2019/11/10/le-format-eurorack</id>
    <content type="html"><![CDATA[<p>Eurorack est actuellement le format le plus populaire pour les synthétiseurs
modulaires.  C’est un standard de facto parmi la jungle des formats existants.
Du moins, c’est le standard «pas trop cher» car le format Moog Unit, plus
luxueux, est aussi assez populaire. Vous remarquerez que j’utilise des
guillemets autour de «pas trop cher» parce qu’un synthé modulaire, c’est de
toute manière onéreux.</p>

<p><a title="Nina Richards (who can be contacted via ZoeB). [CC BY 3.0 (https://creativecommons.org/licenses/by/3.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Doepfer_A-100.jpg"><img width="256" alt="Doepfer A-100" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Doepfer_A-100.jpg/256px-Doepfer_A-100.jpg" /></a></p>

<!-- more -->

<h2 id="synthtiseur-modulaire">Synthétiseur modulaire</h2>

<p>Un synthétiseur modulaire est un synthétiseur dont vous agencez vous même les
différents modules. Vous choisissez des oscillateurs, des filtres, des
générateurs d’enveloppes, des effets, des amplis, des mixeurs, des séquenceurs,
des portes logiques, des horloges, etc, et vous les relier dans l’ordre que
vous voulez avec des câbles pour produire des sonorités, voir des musiques
complètes.  Les seules limites sont votre imagination et votre porte-monnaie
(parce que à première vue, c’est quand même honteusement cher).</p>

<p>J’ai envie d’un synthé modulaire depuis que j’ai vu un documentaire sur les Who
dans lequel Pete Townshend recréait les sonorités de «Won’t get fooled again»
dans son home studio. En écrivant cet article j’ai recherché ce documentaire,
mais je n’ai pas réussi à le retrouver. Et ça n’était peut-être même pas
vraiment un synthé modulaire. Mais c’est toujours resté dans un coin de ma
tête.</p>

<h2 id="les-spcifications-du-format-eurorack">Les spécifications du format Eurorack</h2>

<p>Eurorack est un ensemble de spécifications plutôt laxistes, initiées par
l’entreprise Doepfer en 1996, pour définir la taille des modules, les
mécanismes de montage et les détails de l’alimentation électrique, des différents types de
connecteurs et du transport de l’information (audio, gate, trigger).</p>

<p>Ce que tout le monde peut voir facilement, c’est la taille des modules. On
donne généralement la hauteur des modules d’un synthé modulaire, comme de tout
matériel qui se monte en rack, en unité <strong>U</strong> (pour Rack Unit). On parle donc
d’une hauteur de 1U, de 2U, de 3U, 4U, 5U, etc. Le Rack Unit mesure 44,45 mm.
Donc 3U devrait faire 133,35 mm. Mais pas pour Eurorack. Pour EuroRack, 3U
mesure 128,5 mm. Pourquoi ? J’avoue que je n’ai pas tout compris.</p>

<p>Pour la largeur d’un module on parle de HP (pour Horizontal Pitch). Un HP
corresponds à 5,08 mm et les modules sont censés avoir une largeur qui est un
multiple de 1HP.</p>

<p>Pour l’anecdote, Doepfer défini aussi des spécifications pour la longueur et la
largeur des vis de montage.</p>

<p>Du côté de l’alimentation, un module utilise du +12 volt, du -12 volt et
nécessite un <em>ground</em> à 0 volt. Certains modules peuvent aussi avoir besoin de
+5 volt, une tension classique pour les Arduino &amp; Cie. Les modules sont
connectés à l’alimentation par une prise ruban à 16 broches (mais parfois seulement
10 broches, standard, vous avez dit standard).</p>

<p><a title="Heron 21:16, 22 Nov 2004 (UTC) [CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0/)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Flachbandkabel.jpg"><img width="128" alt="Flachbandkabel" src="https://upload.wikimedia.org/wikipedia/commons/6/65/Flachbandkabel.jpg" /></a></p>

<p>Les tensions de travail en interne (audio, CV, trigger, clock) sont définies de
manière assez laxistes. Un signal audio est censé se cantonner entre -5 volt et
+5 volt.  Un CV (control voltage) est normalement de 5 volt entre deux pics et
peut-être uni polaire ou bipolaire. En clair il peut se balader quelque part
entre -2,5 volt et +2,5 volt, jusqu’à entre 0 volt et +5 volt.
Trigger, gate et clock sont censés être des signaux numériques, 0 volt ou 5 volt.</p>

<p>Enfin, les connexions entre modules sont réalisées avec des petits jacks (3,5 mm).</p>

<h2 id="dautres-formats">D’autres formats</h2>

<p>Il existe d’autres formats (ou form factors) de synthé modulaires. Le format
Moog Unit est surement le plus populaire après Eurorack. Et le format FrackRack
est celui qui se rapproche le plus de Eurorack. Voici ces trois formats en résumé :</p>

<p><strong>Eurorack</strong>  <br />
Hauteur : 3U (moins de 13 cm)  <br />
Tensions : +/-12v +5v  <br />
Jack : petit    </p>

<p><strong>Moog Unit (MU)</strong>  <br />
Hauteur : 5U (environ 22 cm)  <br />
Tensions : +/-15v +5v  <br />
Jack : gros    </p>

<p><strong>FrackRack</strong>  <br />
Hauteur : 3U  <br />
Tensions : +/-15v  <br />
Jack : petit</p>

<p>Parmi tout les formats que j’ai exploré, la hauteur peut aller tout de même
jusqu’à 40cm (Technosaurus Selector).  Quant à l’alimentation, on trouve de
tout entre -18 volt et +24 volt.</p>

<h2 id="sources">Sources</h2>

<p>https://en.wikipedia.org/wiki/Eurorack</p>

<p>http://www.doepfer.de/a100_man/a100m_e.htm</p>

<p>http://www.doepfer.de/a100_man/a100t_e.htm</p>

<p>https://sdiy.info/wiki/Eurorack</p>

<p>https://sdiy.info/wiki/Eurorack_DIY_parts</p>

<p>https://www.synthesizers.com/formfactors.html</p>

<p>https://en.wikipedia.org/wiki/Rack_unit</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100 jours de synthé modulaire]]></title>
    <link href="http://lkdjiin.github.io/blog/2019/11/03/100-jours-de-synthe-modulaire/"/>
    <updated>2019-11-03T13:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2019/11/03/100-jours-de-synthe-modulaire</id>
    <content type="html"><![CDATA[<p>Pendant 100 jours je vais étudier les synthés modulaires selon les règles
suivantes, adaptées du site <a href="https://www.100daysofx.com/">100DaysOfX</a> :</p>

<h2 id="rgles">Règles</h2>

<ul>
  <li>1 heure par jour pendant les 100 prochains jours. (<em>Mais j’ai une famille,
des obligations, plusieurs autres passions et loisirs. Donc il est probable
que je ne puisse pas souvent trouver une heure entière. Pas grave, ce qui
compte c’est le coté journalier.)</em></li>
  <li>1 tweet quotidien sur mes progrès du jour (#100DaysOfMusic #ModularSynth).</li>
  <li>1 blog post par semaine minimum, pour aider d’autres personnes avec ce que
j’aurai appris.</li>
</ul>

<!-- more -->

<h2 id="objectifs">Objectif(s)</h2>

<p>L’objectif général est simplement de <em>faire quelque chose</em> avec un synthé
modulaire.  Cela devrait se concrétiser à travers les quatre directions
suivantes :</p>

<h3 id="fabriquer-un-synth-modulaire-hardware">Fabriquer un synthé modulaire hardware</h3>

<p>Un synthé modulaire revient vite très cher. Mais en le fabriquant moi-même, et
avec peu de modules, je devrais m’en sortir pour pas grand chose. Je pense
fabriquer des modules analogiques aussi bien que des numériques.</p>

<h3 id="crire-des-modules-software">Écrire des modules software</h3>

<p>Y a pas que le hardware dans la vie. J’ai découvert récemment le programme
<a href="https://vcvrack.com/">VCV Rack</a>, un synthé modulaire software, et j’ai
plusieurs modules en tête.</p>

<h3 id="produire-de-la-musique">Produire de la musique</h3>

<p>Parce que c’est quand le but d’un instrument de musique, quel qu’il soit !  Je
vais donc faire de la musique avec des synthés modulaires hardware et software.
Et je la diffuserai, parce qu’au final, la musique c’est quand même mieux quand
on l’écoute.</p>

<h3 id="comprendre-la-thorie-derrire-les-modules-des-synths-modulaires">Comprendre la théorie derrière les modules des synthés modulaires</h3>

<p>J’ai certaines lacunes que j’aimerai combler. Par exemple, comment faire de la
musique avec des <em>shift registers</em>, avec des portes logiques (or, xor, and),
comment peut bien fonctionner un séquenceur analogique, quelles sont les
différences entre un bruit blanc, un bruit rose, un bruit bleu, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparaison de deux expériences utilisateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2019/01/23/comparaison-de-deux-experiences-utilisateur/"/>
    <updated>2019-01-23T12:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2019/01/23/comparaison-de-deux-experiences-utilisateur</id>
    <content type="html"><![CDATA[<p>Mercredi 9 janvier était le premier jour des soldes d’hiver. J’ai acheté plusieurs schcromlungues
sur 2 sites différents et je voudrais vous parler un peu de l’expérience utilisateur.</p>

<p>L’objectif n’étant pas de pointer du
doigt un site en particulier,
je ne dévoilerai pas leurs identités.
Il suffit de savoir que ce sont deux sites qui sont là depuis longtemps, plus de
10 ans, et que tous deux vendent les mêmes produits.
 Et bien sûr, je n’ai pas
vraiment acheté des schcromlungues, mais ça n’a pas la
moindre importance ici. Donc, disons que c’était bien des schcromlungues. Le
site numéro 1 sera rebaptisé Alpha, et le numéro 2 prendra le nom de Bêta.</p>

<!-- more -->

<p>Sur le site Alpha je pouvais trier sur une centaine d’options et c’était très simple
de trouver ce que je voulais. Sur le site Bêta il n’y avait qu’une dizaine d’options pour trier.
Si j’avais vu le site Bêta tout seul, j’aurai sûrement pensé que les 10 options de tri étaient
suffisantes. Mais en réalité les 100 options du site Alpha m’ont été vraiment utiles pour trouver rapidement ce que je cherchais.</p>

<p>Sur les deux sites la taille des caractères du menu principal est de 13 pixels.
Trop petit à mon gout. Mais la police et le contraste utilisés rendent le menu
du site Alpha lisible et le menu du site Bêta pénible à utiliser.</p>

<p>Sur le site Alpha, l’index des articles affichait des photos de qualité, ni trop
grandes ni trop petites pour mon écran. Sur le site Bêta les photos sont
de moindre qualité et juste un peu trop petites pour être vraiment utiles.</p>

<p>Sur le site Alpha, passer le curseur au dessus d’un article me donne toutes les
informations nécessaires. Je peux sélectionner la couleur, la taille, et ajouter
l’article au panier sans quitter la page d’index. Au contraire, le site Bêta ne me
donne pas les informations suffisantes pour acheter un article et m’oblige à
cliquer dessus.</p>

<p>L’affichage d’un produit sur le site Alpha prend 2 secondes, c’est beaucoup. Mais sur
le site Bêta il prend 5 secondes !</p>

<p>Les pages produits du site Alpha ont des polices de caractères plus grandes que le
site Bêta, 26px contre 20px. Le bouton d’achat a plus de contraste sur le site Alpha.
Il y a plus d’informations sur le produit sur le site Alpha. Pour voir les
différentes photos du produit je dois cliquer sur le site Bêta, alors qu’il suffit
de passer le curseur au dessus sur le site Alpha.  La loupe agrandi 3 ou 4 fois
plus sur le site Alpha que sur le site Bêta, et a une surface 5 fois plus grande.</p>

<p>Ajouter un article au panier prend 2 fois plus de temps sur le site Bêta. Une fois
l’article ajouté, une popup s’ouvre sur le site Alpha, que je peux fermer en cliquant
n’importe où sur mon écran. Une popup s’ouvre aussi sur le site Bêta, mais je suis
obligé de cliquer sur un de ses petits boutons pour la fermer.</p>

<p>L’affichage du panier est instantané sur le site Alpha, il prend plusieurs
secondes sur le site Bêta</p>

<p>Sur le site Alpha j’ai le choix parmi de nombreux moyens de paiement. Sur
le site Bêta je ne peux payer qu’avec une carte bancaire. Au moment de payer sur
le site Bêta, je suis redirigé vers une plateforme de paiement dont je n’ai jamais
entendu parler et qui semble sortir tout droit des années 2000.</p>

<p>Les deux sites m’envoient un email de confirmation en quelques minutes. Il y a
plus d’informations dans l’email du site Alpha, il a aussi plus de «gueule».</p>

<p>J+1 : le site Alpha m’informe de l’avancement de ma commande. Dans l’après
midi il m’informe que ma commande est expédiée.</p>

<p>J+2 : j’ai un email du site Alpha qui me dit que mon colis sera livré le
lendemain. Pas de nouvelles du site Bêta.</p>

<p>J+3 : le colis du site Alpha est arrivé. Toujours pas de nouvelles du site Bêta.</p>

<p>J+4 : je passe une seconde commande sur le site Alpha. Toujours pas de nouvelles du site Bêta.</p>

<p>J+7 : j’ai reçu ma seconde commande du site Alpha. Le site Bêta m’envoie enfin
un mail, mais c’est pour m’informer qu’un article est en rupture de
stock. Je leur demande de m’envoyer le reste de la commande.</p>

<p>J+10 : Mail du site Bêta qui m’annonce que mon colis est en route.</p>

<p>J+12 : Je reçois finalement ma commande du site Bêta.</p>

<h2 id="bilan">Bilan</h2>

<p>J’ai dépensé 6 fois plus d’argent sur le site Alpha que sur le site Bêta.</p>

<p>Je compte retourner sur le site Alpha hors période de solde.</p>

<p>Je compte recommander le site Alpha à mes connaissances.</p>

<p>Je compte ne jamais retourner sur le site Bêta si je peux l’éviter.</p>

<p>Il est même possible que je recommande à mes connaissances de se tenir éloigné du site Bêta.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku, OVH, les naked domains, et les DNS]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/08/30/heroku-ovh-les-naked-domains-et-les-dns/"/>
    <updated>2018-08-30T17:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/08/30/heroku-ovh-les-naked-domains-et-les-dns</id>
    <content type="html"><![CDATA[<h2 id="la-situation">La situation</h2>

<p>J’ai un nom de domaine chez OVH, <em>stonervoice.com</em>.</p>

<p>J’ai un site chez Heroku, <em>foobarbaz.herokuapp.com</em>.</p>

<p>Je veux pouvoir accéder à mon site à l’aide des 2 URLs suivantes :</p>

<ul>
  <li><a href="https://stonervoice.com">stonervoice.com</a></li>
  <li><a href="https://www.stonervoice.com">www.stonervoice.com</a></li>
</ul>

<h2 id="comment-faire">Comment faire</h2>

<p>En configurant les <a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS</a>. Du moins, dans un monde idéal.</p>

<!-- more -->

<h2 id="le-www-facile">Le www facile</h2>

<p>Pointer l’adresse <em>www.stonervoice.com</em> sur le site chez Heroku est facile et
prend 30 secondes. La commande <code>heroku domains:add www.stonervoice.com</code>
s’occupe de la configuration chez Heroku et nous fournit l’adresse (de type
www.votre-site.com.herokudns.com) à utiliser dans le <a href="https://en.wikipedia.org/wiki/CNAME_record">CNAME</a> chez OVH (ou
même chez n’importe quel autre fournisseur).</p>

<h2 id="le-problme">Le problème</h2>

<p><strong>Mais pour l’adresse stonervoice.com, c’est une autre histoire.</strong></p>

<p>C’est ce qu’on appelle un domaine nu. En anglais on dit naked domain, ou bien
second-level domain.  Et pour enregistrer un domaine nu dans un serveur DNS il
faut une adresse IP (du genre 123.456.78.9), donc fixe, et pas une URL (genre
truc.machin.com.herokudns.blabla), donc qui pourrait utiliser n’importe quelle
IP.  Pour cela, on utilise le type d’enregistrement DNS <em>A</em>, et non pas <em>CNAME</em>
comme précédemment.</p>

<p>Sauf qu’avec Heroku, ça fonctionne pas. Parce qu’une application Heroku est
derrière un <a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)">load balancer</a> et n’a pas d’IP fixe. Vous pouvez le vérifier
vous-même :</p>

<pre><code>$ nslookup www.stonervoice.com
Address: 54.229.165.195
Address: 54.171.20.71
Address: 54.76.58.198
Address: 54.194.152.6
Address: 34.249.85.24
Address: 34.248.164.131
Address: 34.246.94.179
Address: 52.49.103.24
</code></pre>

<p>Certains fournisseurs de noms de domaine/DNS proposent le type d’enregistrement
<em>ALIAS</em> ou <em>ANAME</em> qui conviendrait. Mais pas OVH.</p>

<p>Dit autrement : il n’y a aucun moyen pour faire pointer <em>stonervoice.com</em> sur
mon application Heroku en utilisant la gestion des DNS d’OVH.</p>

<h2 id="quelques-solutions-rapides-mais">Quelques solutions rapides mais…</h2>

<p>La plus évidente : utiliser un autre fournisseur qu’OVH, qui propose un <em>ALIAS</em> ou un <em>ANAME</em>. Mais on n’a pas toujours le choix.</p>

<p>La plus hack : prendre une des IPs fournit par le load balancer de Heroku. Mais on y perd tous les avantages du load balancer, et on ne sait pas si cette IP
restera valable dans le temps.</p>

<p>La plus chère : On peut garder le nom de domaine chez OVH et utiliser un autre
gestionnaire de DNS, comme DNS Simple, DNS Made Easy, ou Cloud Flare. On
pourrait aussi utiliser un add-on chez Heroku pour avoir une IP fixe (j’ai pas
essayer, ça devrait logiquement marcher). C’est la solution que je préfère,
mais pour ce projet je ne veux pas commencer à payer des extras tant que je
peux éviter.</p>

<h2 id="la-solution-prconise-par-internet">La solution préconisée par Internet</h2>

<p>J’ai bien sûr posé la question à Internet, DuckDuckGo pour ma
part, mais j’ai entendu dire que Google marchait bien aussi ;)</p>

<p>On conseille souvent d’utiliser le service <em>wwwizer</em>. Vous enregistrez l’IP
que le service vous fournit gratuitement dans vos DNS avec un type <em>A</em>, et
chaque requête sur <em>stonervoice.com</em> est alors redirigée vers <em>www.stonervoice.com</em>.
J’ai essayé tout de suite, et ça fonctionne.</p>

<p>Mais en fait pas vraiment.</p>

<p>D’abord je n’aime pas trop l’idée d’un service qui peut s’arrêter à tout
moment sans me prévenir.  Mais surtout, ça ne fonctionne pas avec https. La requête
<em>https://stonervoice.com</em> n’est pas redirigée et échoue avec un <em>timeout</em>. (Je
crois que cette redirection https fait partie de leurs services payants).</p>

<h2 id="une-meilleure-solution-pour-moi--php">Une meilleure solution pour moi : PHP</h2>

<p>Utiliser une redirection <a href="https://en.wikipedia.org/wiki/HTTP_301">HTTP «301 Moved Permanently»</a> comme le fait le service wwwizer
est une bonne idée. Lorsque quelqu’un accède à <em>stonervoice.com</em>, cette
personne est redirigée vers <em>www.stonervoice.com</em> et le logiciel utilisé a
l’occasion de mettre à jour l’adresse ou de la mettre en cache de manière plus ou
moins permanente.</p>

<p>Puisque chez OVH on dispose d’un plan «web hosting» gratuit avec PHP pour l’achat
d’un nom de domaine, la solution est super simple : on fait une redirection
en PHP. Voici le contenu du fichier <code>index.php</code> à déposer chez OVH :</p>

<pre><code>&lt;?php
header("Location: https://www.stonervoice.com/", true, 301);
exit;
</code></pre>

<p>Avec en plus l’avantage de rediriger stonervoice.com vers <strong>https</strong>://www.stonervoice.com.</p>

<p>C’est pas idéal comme solution puisque chaque requête sur le <em>naked domain</em> ira
taper sur un serveur mutualisé, avec tous les problèmes qui ne manqueront pas
d’arriver… Mais en attendant que le besoin d’évoluer se fasse sentir, c’est la
solution la plus simple, la moins chère, la plus propre et la plus rapide à mettre
en place que j’ai trouvé (le plus long a été l’installation de Filezilla).</p>

<p>Si vous avez d’autres idées/solutions je suis preneur, laissez donc un commentaire.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment créer votre propre localisation sous Linux]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/08/21/comment-creer-votre-propre-localisation-sous-linux/"/>
    <updated>2018-08-21T13:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/08/21/comment-creer-votre-propre-localisation-sous-linux</id>
    <content type="html"><![CDATA[<p>Un article récent 
<a href="https://mayeu.me/blog/configurer-linux-pour-utiliser-une-representation-de-date-logique-iso-8601/">«Configurer Linux pour utiliser une représentation de date logique (ISO 8601)»</a> a retenu mon attention. L’auteur y parle de la configuration des
variables locales sur Linux. Des variables telles que <code>LANG</code>, <code>LC_NUMERIC</code>, et plus particulièrement <code>LC_TIME</code>.
Ça m’a fait penser qu’après 21 ans d’utilisation de Linux, je n’avais jamais
pris le temps de regarder comment fonctionnent ces variables de configuration.
Quand tu écris <code>LANG=fr_FR</code>, qu’est ce qu’il se passe vraiment ?</p>

<!-- more -->

<h2 id="introduction">Introduction</h2>

<p>Pour celles et ceux qui découvrent ces variables de configuration, voici une
introduction rapide. Très rapide…</p>

<p>Pour connaitre votre configuration actuelle, utilisez <code>locale</code> :</p>

<pre><code>$ locale
LANG=fr_FR.UTF-8
LANGUAGE=
LC_CTYPE="fr_FR.UTF-8"
LC_NUMERIC="fr_FR.UTF-8"
LC_TIME="fr_FR.UTF-8"
[...]
</code></pre>

<p>Toutes les variables ne sont pas forcement renseignées, c’est normal.</p>

<p>Pour connaitre les valeurs des <em>locales</em> qui sont à votre disposition,
utilisez <code>locale -a</code> :</p>

<pre><code>$ locale -a
C
C.UTF-8
en_AG
en_AG.utf8
en_AU.utf8
en_BW.utf8
en_CA.utf8
en_DK.utf8
en_GB.utf8
[...]
fr_FR.utf8
</code></pre>

<p>Ce ne sont pas <strong>toutes les valeurs existantes</strong>, mais seulement celles que
vous pouvez utiliser tout de suite sans rien compiler. Par exemple, la
commande <code>date</code> utilise la variable <code>LC_TIME</code> pour savoir ce qu’elle doit afficher.
Par défaut, c’est la valeur <code>fr_FR</code> qui est utilisée chez moi (voir la
sortie de <code>locale</code>) :</p>

<pre><code>$ date
lundi 20 août 2018, 17:20:53 (UTC+0200)
</code></pre>

<p>Mais je peux utiliser une autre valeur, par exemple <code>en_DK</code>, ou encore
<code>en_GB</code> :</p>

<pre><code>$ LC_TIME=en_DK.utf8 date
Mon Aug 20 17:19:16 CEST 2018
$ LC_TIME=en_GB.utf8 date
Mon 20 Aug 17:19:47 CEST 2018
</code></pre>

<p>Pour connaître les autres valeurs de locales auxquelles vous avez droit,
consulter le fichier <code>/etc/locale.gen</code> :</p>

<pre><code>$ cat /etc/locale.gen
[...]
# fr_CH.UTF-8 UTF-8
# fr_FR ISO-8859-1
fr_FR.UTF-8 UTF-8
[...]
</code></pre>

<p>Les lignes qui débutent par un <code>#</code> sont les valeurs que vous pouvez compiler
(en utilisant la commande <code>locale-gen</code>).</p>

<h2 id="comment-a-marche-">Comment ça marche ?</h2>

<p>Chaque localisation possède son propre fichier de configuration. Ces fichiers
se trouvent dans <code>/usr/share/i18n/locales/</code>.</p>

<pre><code>$ cat /usr/share/i18n/locales/fr_FR
</code></pre>

<p>Dans ces fichiers chaque variable de configuration est décrite dans sa propre section,
comme <code>LC_TIME</code> à laquelle je m’intéresse ici :</p>

<pre><code>LC_TIME
[...]
END LC_TIME
</code></pre>

<p>À l’intérieur des sections on trouve des chaînes de formatage en Unicode pour
la libc. Voici la partie du fichier <code>/usr/share/i18n/locales/fr_FR</code> dont se
servira la commande <code>date</code> :</p>

<pre><code>date_fmt "&lt;U0025&gt;&lt;U0041&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U002D&gt;&lt;U0065&gt;&lt;U0020&gt;/
&lt;U0025&gt;&lt;U0042&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U0059&gt;&lt;U002C&gt;&lt;U0020&gt;/
&lt;U0025&gt;&lt;U0048&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U004D&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U0053&gt;&lt;U0020&gt;/
&lt;U0028&gt;&lt;U0055&gt;&lt;U0054&gt;&lt;U0043&gt;&lt;U0025&gt;&lt;U007A&gt;&lt;U0029&gt;"
</code></pre>

<p>Si on traduit cette chaîne Unicode (voir par ex. <a href="https://unicode-table.com/en/">cette table</a>), on obtient ce qui suit :</p>

<pre><code>%A %-e %B %Y, %H:%M:%S (UTC%z)
</code></pre>

<p>On retrouve bien le format de la sortie de <code>date</code> (<em>lundi 20 août 2018, 20:26:17 (UTC+0200)</em>).
Si vous n’êtes pas familier de cette notation, jetez un œil sur la fonction <a href="http://www.faximum.com/manual.d/client.server.d/manpages.23.html">strftime</a>
du langage C.</p>

<h2 id="je-veux-ma-propre-locale">Je veux ma propre locale</h2>

<p>Plutôt que <em>lundi 20 août 2018, 20:26:17 (UTC+0200)</em>, je veux que la date
s’affiche sous cette forme : <strong>A:2018 M:08 J:20</strong>.
Pourquoi ? Simplement parce que c’est possible !</p>

<p>Je pars d’un fichier de configuration existant que je copie dans mon répertoire
de travail :</p>

<pre><code>$ cp /usr/share/i18n/locales/fr_FR ./fr_FR@test
</code></pre>

<p>Je l’ai appelé <code>fr_FR@test</code>. J’aurais aussi pu utiliser un des nombreux codes
de régionalisation réservés pour les utilisateurs, comme <code>AA</code>, <code>OO</code>, <code>XX</code> ou
<code>ZZ</code> (voir <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1
alpha-2</a>). Donc j’aurais pu
nommer mon fichier <code>fr_ZZ</code>.</p>

<p>Pour obtenir une date de la forme <em>A:2018 M:08 J:20</em>, il faut la chaîne de
formatage suivante : <strong>A:%Y M:%m J:%d</strong>. Traduit (si on peut dire) en Unicode,
cela donne :</p>

<pre><code>"&lt;U0041&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U0059&gt;&lt;U0020&gt;/
&lt;U004D&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U006D&gt;&lt;U0020&gt;/
&lt;U004A&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U0064&gt;"
</code></pre>

<p>Une fois que j’ai mis ça dans mon fichier <code>fr_FR@test</code>, je l’envoie dans le dossier <code>/usr/share/i18n/locales/</code> :</p>

<pre><code>$ sudo cp fr_FR@foobar /usr/share/i18n/locales/
</code></pre>

<p>Et je le compile pour qu’il soit utilisable par la libc :</p>

<pre><code>$ sudo localedef -i fr_FR@foobar -c -f UTF-8 fr_FR@test
</code></pre>

<p>Je peux maintenant utiliser ma propre locale :</p>

<pre><code>$ LANG=fr_FR.utf8@test date
A:2018 M:08 J:20
</code></pre>

<p>Et voilà.</p>

<h2 id="quelle-utilit-">Quelle utilité ?</h2>

<p>Comprendre un peu mieux Linux…</p>

<p>Si mon quartier fait sécession et devient un pays autonome, je suis prêt à
créer une nouvelle traduction…</p>

<p>Si vous avez une autre idée, laissez donc un commentaire…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gopher : Récupérer le menu principal]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/07/27/gopher-recuperer-le-menu-principal/"/>
    <updated>2018-07-27T10:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/07/27/gopher-recuperer-le-menu-principal</id>
    <content type="html"><![CDATA[<p>Pour aller plus loin dans la compréhension du protocole Gopher nous pouvons écrire un
petit client texte, sans prétention.</p>

<p>Mais avant toutes choses, il faut pouvoir se connecter à un serveur, lui envoyer un
sélecteur, et récupérer les informations que va envoyer le serveur.
Il nous faut un langage qui
permet de créer et d’utiliser des sockets facilement. Beaucoup de langages
répondront à cette contrainte, donc en gros, choisissez celui avec lequel vous êtes le
plus à l’aise.</p>

<!-- more -->

<p>Voir l’article précédent : <a href="http://lkdjiin.github.io/blog/2018/07/21/presentation-de-gopher/">Présentation de Gopher</a></p>

<h2 id="ruby">Ruby</h2>

<p>Voyons comment faire en Ruby.</p>

<p>D’abord on crée la connexion (1). Rappelez-vous,
le protocole Gopher prévoit que le serveur n’envoie rien du tout après une
connexion réussie.</p>

<p>Ensuite (2) nous envoyons un sélecteur vide au serveur.
Ce qui correspond en quelque sorte à demander le menu principal. Le
protocole Gopher explique qu’un sélecteur doit être terminé avec les caractères
de retour à la ligne CR suivi de LF. Ce qu’on écrira <code>"\r\n"</code> dans beaucoup de
langages.</p>

<p>Puis (3) nous consommons et affichons chaque ligne de la réponse du
serveur. Le protocole Gopher nous dit que le serveur termine lui aussi ses
lignes par CR + LF. Ruby gère cette situation, avec <code>gets</code>, en supprimant les
fin de ligne, c’est pourquoi nous devons utiliser <code>puts</code> ensuite pour afficher
<code>line</code> avec un retour à la ligne.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Fichier gopher.rb</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 1</span>
</span><span class="line"><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;gopher.quux.org&#39;</span><span class="p">,</span> <span class="mi">70</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 2</span>
</span><span class="line"><span class="n">socket</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 3</span>
</span><span class="line"><span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">gets</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">line</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">socket</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lancez le programme avec <code>ruby gopher.rb</code>.</p>

<h2 id="d">D</h2>

<p>On pourra préférer un langage qui produira un binaire pour distribuer le programme plus
facilement. <em>(Ici les performances ne rentrent pas en ligne de compte.)</em> J’ai un
faible pour le langage D en ce moment, alors voici le même programme en D.
Vous le compilerez avec <code>dmd gopher.d</code> et le lancerez avec <code>./gopher</code>.</p>

<p>Ce programme D suit exactement le même principe que le programme Ruby. On
crée une connexion (1) ; on envoie un sélecteur vide (2) ; et on affiche la
réponse (3).</p>

<p>Pour ce qui est de la lecture, D est plus <em>low-level</em> que Ruby, et
on doit lire par tranche de X caractères, et non pas par lignes. Ici on lit
la réponse par tranches de 1024 caractères et les retours à la ligne ne sont
pas supprimés comme en Ruby, d’où l’utilisation de <code>write</code> et non pas <code>writeln</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="d"><span class="line"><span class="c1">// Fichier gopher.d</span>
</span><span class="line"><span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">stdio</span><span class="p">;</span>
</span><span class="line"><span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">socket</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// 1</span>
</span><span class="line">    <span class="k">auto</span> <span class="n">socket</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TcpSocket</span><span class="p">(</span><span class="k">new</span> <span class="n">InternetAddress</span><span class="p">(</span><span class="s">&quot;gopher.quux.org&quot;</span><span class="p">,</span> <span class="mi">70</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 2</span>
</span><span class="line">    <span class="n">socket</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;\r\n&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kt">char</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class="line">    <span class="n">ptrdiff_t</span> <span class="n">amountRead</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 3</span>
</span><span class="line">    <span class="k">while</span><span class="p">((</span><span class="n">amountRead</span> <span class="p">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">receive</span><span class="p">(</span><span class="n">buffer</span><span class="p">))</span> <span class="p">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">write</span><span class="p">(</span><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span> <span class="p">..</span> <span class="n">amountRead</span><span class="p">]);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">socket</span><span class="p">.</span><span class="n">close</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="un-point-sur-le-point">Un point sur le point</h2>

<p>Comme beaucoup de protocoles de la même époque et avant lui, Gopher indique
qu’une réponse du serveur doit se terminer par un point (le caractère <code>.</code>)
isolé sur une ligne. Dans les faits, très peu de serveurs se complique la
vie avec ça.</p>

<p>N’hésitez pas à poster dans un commentaire ce petit programme traduit dans votre
langage favori. À bientôt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Présentation de Gopher]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/07/21/presentation-de-gopher/"/>
    <updated>2018-07-21T09:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/07/21/presentation-de-gopher</id>
    <content type="html"><![CDATA[<p>En 1997, ma maigre connexion internet était facturée chèrement à la seconde.
J’utilisai encore beaucoup Gopher qui était plus rapide que le web pour
chercher des documents purement textuels. À cette époque je ne m’intéressais
pas au fonctionnement de Gopher, je voulais seulement que ça aille vite.  21
ans après, alors que je redécouvre cette partie d’internet que j’avais oublié,
je vais prendre le temps de voir comment Gopher fonctionne.</p>

<!-- more -->

<ul>
  <li>Présentation de Gopher</li>
  <li><a href="http://lkdjiin.github.io/blog/2018/07/27/gopher-recuperer-le-menu-principal/">Gopher : Récupérer le menu principal</a></li>
</ul>

<p>Le protocole Gopher est très simple <em>“by design”</em>. D’abord un client contacte
un serveur, qui ne répond rien. Puis le client envoie l’identifiant d’une
ressource au serveur (un <em>selecteur</em> dans le jargon Gopher), qui envoie en
réponse le document ou le menu correspondant et ferme la connexion.
Et c’est presque tout. Un document est un fichier quelconque et un menu est un
fichier texte avec une structure minimale, voir même minimaliste.</p>

<p>Pour explorer Gopher, nous pourrions utiliser un client texte (<code>apt-get install
gopher</code>), ou un plugin pour notre navigateur. Mais pour voir un peu ce qu’il se
passe sous le capot, utilisons plutôt l’utilitaire <code>netcat</code> pour simuler un
client. Gopher écoute le port 70 par défaut :</p>

<pre><code>$ netcat gopher.quux.org 70
</code></pre>

<p>À ce moment la connexion est établie et le serveur attend que vous lui envoyiez
un sélecteur. Appuyez directement sur la touche Entrée pour envoyer un
sélecteur vide, ce qui a pour effet de selectionner le dossier courant sur le
serveur distant. Le serveur répond immédiatement avec quelques lignes
représentant un menu. En voici une sélection (j’ai remplacé les tabulations par
des <code>|</code>) :</p>

<pre><code>0About This Server|/About This Server.txt|gopher.quux.org|70
1Archives|/Archives|gopher.quux.org|70
</code></pre>

<p>Chaque ligne contient 5 zones séparées par une tabulation, à l’exception des
deux premières zones qui sont accollées :</p>

<ol>
  <li>Le type de document. Un 0 pour un document texte, un 1 pour un dossier. Il existe plusieurs autres types.</li>
  <li>La description du document. C’est une sorte de titre. Par exemple <code>About This Server</code>.</li>
  <li>Le sélecteur, qui identifie une ressource sur un serveur. Par exemple <code>/About This Server.txt</code>.</li>
  <li>L’adresse du serveur où se trouve la ressource.</li>
  <li>Le port utilisé par Gopher sur le serveur de la ressource.</li>
</ol>

<p>On voit à cette description que Gopher est une espèce de système de fichier distribué.</p>

<p>Pour suivre un lien du menu, on ouvre une nouvelle connexion :</p>

<pre><code>$ netcat gopher.quux.org 70
</code></pre>

<p>Et cette fois on envoie un sélecteur :</p>

<pre><code>/About This Server.txt
</code></pre>

<p>Le serveur envoie le document correspondant au sélecteur avant de fermer la connexion :</p>

<pre><code>Welcome to the gopher server at quux.org!

This is one of the world's few maintained, modern gopher servers.  On it,
you will find a huge collection of information, files, software, archives,
[...]
</code></pre>

<p>Les menus sont donc tout simplement des hyper-liens, comme dans le web. La
grande différence, c’est que dans le web les hyper-liens sont internes aux
documents, ce qui nécessite un langage (le HTML) pour écrire ces documents.
Alors qu’avec Gopher les liens sont externes aux documents, dans des menus ;
ils peuvent donc être dans n’importe quel format et écrit par n’importe qui, en
théorie.</p>

<p>Connaissiez vous Gopher ? L’avez vous déjà utilisé ? L’utiliser vous encore ?</p>

<p>À bientôt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lister un dossier tout en nettoyant l'écran]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran/"/>
    <updated>2018-02-14T10:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran</id>
    <content type="html"><![CDATA[<p>Deux ou trois fois dans l’année j’analyse mon usage du clavier pour tenter
d’augmenter mon confort quotidien. Lisez : Je regarde de près ce que je
tape pour faire en sorte de taper toujours moins.</p>

<p>J’ai remarqué récemment que j’aimais de plus en plus avoir un écran vide avant
d’entreprendre une série de commande. Pour effacer l’écran, on utilise la commande
<code>clear</code> ou son raccourci <code>Ctrl+L</code>. Et depuis quelques temps je me suis habitué
à systématiquement vider l’écran avant de lister le contenu d’un répertoire.
Autrement dit je répète très souvent la séquence de touche suivante :</p>

<center><b>Ctrl + l + l + s + Enter</b></center>

<p>Soit 5 touches.</p>

<p>Donc, beaucoup trop.</p>

<!-- more -->

<h2 id="alias-s">Alias S</h2>

<p>Un petit alias sera la solution pour prendre soin de mes poignets fragiles ;)
Je vais utiliser la lettre <code>s</code> parce que sa touche tombe particulièrement bien
sous mes doigts.</p>

<center><b>s + Enter</b></center>

<p>Soit 2 touches.</p>

<p>Donc, je suis content :)</p>

<h2 id="bash">Bash</h2>

<p>Avec Bash, que j’utilise essentiellement sur serveurs distants, voici comment
procéder :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">alias </span><span class="nv">s</span><span class="o">=</span><span class="s1">&#39;clear;ls&#39;</span> <span class="c"># List directory on a clean screen</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je place mes alias Bash dans un fichier <code>~/.bash_aliases</code> que j’inclus depuis
le fichier <code>~/.bashrc</code> comme ceci :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Alias definitions.</span>
</span><span class="line"><span class="c"># You may want to put all your additions into a separate file like</span>
</span><span class="line"><span class="c"># ~/.bash_aliases, instead of adding them here directly.</span>
</span><span class="line"><span class="c"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -f ~/.bash_aliases <span class="o">]</span>; <span class="k">then</span>
</span><span class="line">    . ~/.bash_aliases
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="fish">Fish</h2>

<p>Avec Fish, que j’utilise sur mes machines perso, c’est un peu différent. Fish
n’a pas de commande <code>alias</code>, il suffit d’écrire une fonction au bon endroit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Fichier ~/.config/fish/functions/s.fish</span>
</span><span class="line"><span class="k">function </span>s --description <span class="s1">&#39;List directory on a clean, cleared screen&#39;</span>
</span><span class="line">  	clear
</span><span class="line">    ls
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Je ne sais pas si je vais beaucoup me servir de cette commande <code>s</code>.
J’ai toujours eu du mal à m’habituer aux commandes d’une seule lettre, je sais
pas pourquoi. On verra bien…</p>

<p>Si vous avez des astuces dans le même genre, faites moi en part dans un
commentaire, ça pourrait servir ;)</p>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish/">Changer de shell, de Bash à Fish</a></li><li><a href="http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois/">Fish : complétion puis exécution en une seule fois</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh/">De meilleurs alias avec zsh</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fish : complétion puis exécution en une seule fois]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois/"/>
    <updated>2017-02-28T14:46:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois</id>
    <content type="html"><![CDATA[<p>Voici une astuce pour le <a href="https://fishshell.com/">shell Fish</a>, qui vous
permettra de compléter une commande et de la lancer en même temps.</p>

<h2 id="comportement-par-dfaut--compltion-puis-excution">Comportement par défaut : complétion puis exécution</h2>

<p>Fish propose une complétion automatique au fur et à mesure que vous saisissez
une commande. Dans la capture d’écran qui suit, la partie en grisée n’a pas
été saisie, elle est seulement proposée par Fish.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/fish-shell-before-completion.png" /></p>

<!-- more -->

<p>Pour accepter la complétion proposée il faut utiliser le raccourci clavier <code>Ctrl+F</code>.
Le curseur se déplace à la fin de la ligne.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/fish-shell-after-completion.png" /></p>

<p>On peut alors appuyer sur la touche <code>Entrée</code> pour exécuter la commande.</p>

<h2 id="et-maintenant-tout-en-un-seul-raccourci">Et maintenant tout en un seul raccourci</h2>

<p>La complétion automatique de Fish est vraiment très bonne. Mais ce comportement
en deux temps, <code>Ctrl+F</code> suivi de <code>Entrée</code>, m’a rapidement exaspéré. J’ai
donc voulu le réduire à un seul raccourci : <code>Ctrl+G</code>. Vous pouvez bien sûr choisir celui
qui vous plaira le plus (j’ai choisi <code>G</code> parce que ça me fait penser à <strong>Go !</strong>).</p>

<p>Il vous faut créer une fonction <code>fish_user_key_bindings</code>, ou bien lui ajouter le
code suivant si elle existe déjà. Placez là dans le fichier
<code>~/.config/fish/functions/fish_user_key_bindings.fish</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function fish_user_key_bindings
</span><span class="line">
</span><span class="line">    # Ctrl+g (Go!). Like Ctrl+f Enter in one go.
</span><span class="line">    bind \cg accept-autosuggestion execute
</span><span class="line">
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà, ça n’est qu’une ligne de code mais je ne pourrais plus m’en passer.</p>

<p>Si vous aussi vous avez une astuce sur Fish, n’hésitez pas à la partager dans
un commentaire, et merci d’avance.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran/">Lister un dossier tout en nettoyant l&#8217;écran</a></li><li><a href="http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish/">Changer de shell, de Bash à Fish</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh/">De meilleurs alias avec zsh</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure, tests et couleurs]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/02/26/clojure-tests-et-couleurs/"/>
    <updated>2017-02-26T10:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/02/26/clojure-tests-et-couleurs</id>
    <content type="html"><![CDATA[<p>En ce moment je regarde le langage Clojure de plus près.  J’utilise Leiningen
pour gérer les projets, et je voudrais maintenant utiliser la technique du
<em>Test Driven Development</em> pour faire quelques projets.</p>

<p><strong>Problème</strong> : la sortie de <code>lein test</code> n’est pas en couleur. Quand on fait du TDD
avoir une sortie rouge en cas d’échec et verte en cas de succès est vraiment
confortable, ça évite d’avoir à lire. (<em>Notez que Fish m’indique indirectement
l’échec en colorant le <code>$</code> de mon prompt en rouge. C’est déjà ça, mais j’en
voudrais un peu plus.</em>)</p>

<p>J’ai donc cherché et trouvé <a href="https://github.com/venantius/ultra">Ultra</a>, un
plugin pour Leiningen. Il fait bien le boulot, et même plus.</p>

<p><strong>Nouveau problème</strong> : Je passe de 3 secondes d’attente sans le plugin à 7 secondes
avec le plugin. Ce qui a évidemment tendance à <em>casser</em> le flot du TDD, pour le dire
gentiment.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ time lein test
</span><span class="line">#...
</span><span class="line">Ran 1 tests containing 1 assertions.
</span><span class="line">#...
</span><span class="line">
</span><span class="line">#=&gt; Sans couleurs 2.76 secondes
</span><span class="line">#=&gt; Avec couleurs 6.81 secondes</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>D’où ma question pour ceux/celles qui savent : avez vous une solution pour avoir
une sortie couleur des tests <em>et à la fois</em> un temps de réponse acceptable ?</strong></p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/">Comment écrire un framework de test pour Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/29/coco-version-0-dot-13-dot-0/">Coco version 0.13.0</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/">Comportement inattendu de Rspec</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oui la documentation est utile]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/01/25/oui-la-documentation-est-utile/"/>
    <updated>2017-01-25T11:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/01/25/oui-la-documentation-est-utile</id>
    <content type="html"><![CDATA[<p>J’ai lu récemment un article de blog intitulé
<a href="https://blog.nathanaelcherrier.com/2017/01/11/les-meilleurs-commentaires-ne-secrivent-pas/">Les meilleurs commentaires ne s’écrivent pas</a>.
Le titre est bon. Le sujet est intéressant. Les
intentions de l’auteur sont louables.</p>

<p>Malgré cela, cet article m’a laissé perplexe. Je pense que l’auteur se méprend.
Et comme le sujet m’est important et qu’on ne peut pas laisser de commentaires
sur son blog, j’ai eu envie d’écrire un article pour lui répondre.</p>

<p>Je reprendrai les même titres de partie que l’article original pour vous
permettre de vous repérer plus facilement si besoin.</p>

<!-- more -->

<h2 id="self-documenting-code">Self Documenting Code</h2>

<p>L’article commence par comparer deux bouts de code qui ont le même objectif. Le
premier est mauvais, avec un commentaire nécessaire pour expliquer l’objectif.
Le second est meilleur, et se passe donc d’un commentaire.</p>

<p><em>code 1</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// Get the extension off the image filename</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">imageName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">extension</span> <span class="o">=</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>code 2</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">let</span> <span class="nx">extension</span> <span class="o">=</span> <span class="nx">getFileExtension</span><span class="p">(</span><span class="nx">imageName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je suis entièrement d’accord avec la conclusion de cette première partie de
l’article :</p>

<blockquote>
  <p>Le nom d’une fonction est déjà censé répondre à la question de ce que fait
une portion de code. Pourquoi ne pas utiliser cette possibilité ?</p>
</blockquote>

<p>Oui le nommage des fonctions/variables/classes/toussa est très important. À tel
point que je pense que c’est une des premières compétences à acquérir pour un/e
débutant/e.</p>

<p>Bref, jusqu’ici je suis entièrement d’accord. C’est après que ça se gâte.</p>

<h2 id="trop-de-commentaires-touffe-le-code">Trop de commentaires étouffe le code</h2>

<p>Dans cette partie de l’article l’auteur prend le code suivant comme exemple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Get the extension of the file</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * @param {string} filename - The filename</span>
</span><span class="line"><span class="cm"> * @return {string} the extension of the file  </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">getFileExtension</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">let</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dès le début de cette seconde partie,
un truc me gène beaucoup : l’auteur continue d’appeler ça du
«commentaire» alors qu’il s’agit de «documentation». Certain(e)s diront que je
pinaille, mais pour moi il s’agit d’une différence très importante. Voyons ce
qu’en pense le Larousse par exemple:</p>

<p><strong>Commentaire</strong>: <em>Exposé par lequel on explique, on interprète, on juge un
texte ; notes et éclaircissements destinés à faciliter l’intelligence d’un
texte.</em></p>

<p><strong>Documentation</strong>: <em>Ensemble de documents fournis avec un appareil, un jeu, un
programme informatique, etc., et donnant des renseignements sur leur structure,
leur fonctionnement, leur utilisation, etc.</em></p>

<p>Un commentaire sert donc à faciliter la compréhension d’un texte (pour nous un
bout de code informatique), alors qu’une documentation explique comment ça
marche. Peu importe si on pense que ces définitions ne s’appliquent pas
parfaitement à notre métier, ce qui compte c’est de comprendre que leurs
objectifs sont différents.</p>

<p>J’ai gardé ce sentiment dérangeant jusqu’au bout de l’article, qui entretient un flou
artistique autour du duo commentaire/documentation.</p>

<p>L’auteur se plaint ensuite que, dans un projet en cours:</p>

<blockquote>
  <p>[…] la plupart des commentaires écrits sont des commentaires qui n’existent
que pour passer les tests. Ils sont redondants &amp; inutiles.</p>
</blockquote>

<p>En voyant le code donné plus haut en exemple, on peut comprendre sa position.
<em>Je</em> peux aisément comprendre. Mais la plainte ne me semble pas clairement formulée. Qui est
responsable, selon l’auteur ? L’outil ?
Des collègues qui ne jouent pas le jeu ?
Le management qui impose un process trop strict ?
Ça m’intéresserais beaucoup de connaître le sentiment de l’auteur à ce sujet,
car j’ai l’impression que l’article blâme la documentation alors que le
problème est ailleurs.</p>

<p>L’article continue ainsi:</p>

<blockquote>
  <p>Dites moi qu’il y a une information dans ce commentaire que vous n’aviez pas
en lisant le code !</p>
</blockquote>

<p>Oui je le dis ;) J’en ai une. Et même deux ! Une première sur les types, ce qui
est toujours bon à prendre avec un langage dynamique. Je vois que ça
fonctionne avec une chaîne de caractère, et pas avec un objet File ou Path ou
autre chose encore qui aurait du sens dans mon langage, dans mon framework, etc.
Et j’ai une
seconde information sur l’importance relative de cette méthode : si elle mérite une telle
documentation c’est sûrement qu’elle est destinée à être utilisée par d’autres
objets appartenant à d’autres classes. Autrement dit elle est publique et son
usage n’est pas réservé à une utilisation interne.</p>

<p>Il faut bien avouer que l’exemple donné est assez déprimant. Comme l’auteur le
souligne il y a une certaine redondance, c’est le moins qu’on puisse dire.
Si je devais écrire ce genre de choses
toute la journée j’aurai vite besoin de vacances. Et je comprends que ça le rende
marteau, et qu’il ne puisse plus voir ce genre particulier de documentation en peinture.</p>

<p>Mais ce qui me dérange ici, c’est que ça à tout l’air d’un exemple factice.
Ce code n’est pas destiné à aller en production. Par exemple, il se passe quoi
si le nom du fichier est <code>.bashrc</code>, ou <code>foobar</code> ? Bin ça marche pas.
Tirer une conclusion générale d’un exemple factice, c’est pour le moins
hasardeux.</p>

<p>Surtout que même en l’état actuel de la fonction, cette documentation
pourrait être largement améliorée. J’ai pris la liberté de modifier le
style pour un que je trouve plus léger, mais l’important est dans la
reformulation, pas dans le style.  Je me suis inspiré des documentations de
méthodes similaires trouvées dans d’autres langages:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// Get the extension (the portion of filename starting from the last period).</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// filename - The filename (as a string) to retrieve the extension of.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// Returns the extension of the file as a string. Or the filename itself</span>
</span><span class="line"><span class="c1">// if it has no dots. Or the filename without the dot if it starts with </span>
</span><span class="line"><span class="c1">// a dot and don&#39;t have another one.</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">getFileExtension</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">let</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bon d’accord, je me suis un peu amusé à la fin. Mais
on voit qu’il y a de quoi dire. Il y a moins de redondance. Et on a bien
plus d’informations, sans avoir besoin d’aller les extraire du code.</p>

<p>L’auteur conclu cette partie en disant qu’on fini par ne plus voir les
commentaires (<em>je rappelle qu’on parle en fait de documentation</em>) dans les projets
où il y en a de trop. Mais je ne pense pas que ça soit un problème, bien au
contraire. Je dirais même qu’avec une bonne coloration syntaxique, la documentation est
encore moins <em>présente</em>, je peux l’oublier encore plus facilement. <strong>Et c’est très bien ainsi.</strong>
La documentation est très utile, mais seulement de temps en temps. Dans ces
moments là, elle permet de gagner un temps précieux. Le reste du temps, elle doit
savoir se faire oublier. Et si j’en ai envie, mon éditeur de texte, ou mon IDE,
doit même pouvoir la faire disparaitre et réapparaitre à ma guise.</p>

<h2 id="la-couverture-par-la-documentation">La couverture par la documentation</h2>

<p>L’article évoque ensuite des outils qui calculent le taux de couverture de la documentation.
Et comme quoi la course aux 100% est problématique.</p>

<p>C’est un tout autre débat, qui mériterait au moins un second article en réponse ;)
Mais qu’on soit d’accord ou pas, là, on blâme clairement l’outil plutôt que l’utilisateur.</p>

<p>Plus loin l’auteur poursuit :</p>

<blockquote>
  <p>pour la documentation un haut taux de couverture est contre-productif et étouffe le code</p>
</blockquote>

<p>???</p>

<p><em>Contre productif</em> ? Permettre aux utilisateurs de votre code, ou à vous même dans
1 an, dans 3 ans, de comprendre le code en un claquement de doigt serait
<em>contre productif</em> ? On écrit le code (et sa documentation) <strong>une fois</strong>, et on les
lit <strong>des dizaines de fois</strong>. Et ça serait <em>contre productif</em> de faciliter cette
lecture ?</p>

<p><em>Étouffe le code</em> ? L’auteur nous a expliqué dans la partie précédente qu’il ne
les voyait plus, ces commentaires/documentation, qu’ils devenaient invisibles
pour lui. Je ne comprend pas comment ça peut-être à la fois invisible et étouffant.
 Mais dans tout les cas, même si je rate quelque chose et au risque de me répéter :
votre éditeur/IDE doit être capable de masquer la documentation si celle-ci vous
gène, sinon il faut changer d’éditeur.</p>

<blockquote>
  <p>Là où le code est propre le commentaire ne sera qu’une redondance sans grand intérêt</p>
</blockquote>

<p>J’ai démontré le contraire.</p>

<blockquote>
  <p>Là où le code est sale le développeur pourra utiliser le commentaire comme une
excuse pour laisser le code sale</p>
</blockquote>

<p>Mais WHAT ?</p>

<p>D’après ce que j’ai saisi, l’auteur travaille au sein d’une équipe. Et l’équipe
fait des <em>code reviews</em>, non ? Si oui, c’est de la responsabilité de <em>l’équipe</em>
de ne pas laisser passer de code sale. Ça n’est en rien la faute de la documentation, ou d’un commentaire,
ou d’un outil quelconque.
Si non, et bien comment dire, c’est juste que j’arrive pas à imaginer un endroit où on ne fait
pas de <em>code review</em>. Je sais que ça existe, j’ai même du y bosser, mais je ne me
souviens plus comment c’est. Plus sérieusement, si il n’y a pas de <em>code review</em> c’est pas
d’écrire ou non de la doc qui va changer grand chose à la <em>propreté</em> du code.
Et dans ce cas la responsabilité irait à l’auteur du code, pas à la documentation.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/05/03/trois-centieme-article-aujourdhui-slash/">Trois-centième article aujourd&#8217;hui !</a></li><li><a href="http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby/">Un badge pour la documentation pour vos projets Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/">Aidez-vous : traduisez !</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour sur le MOOC Programmer en C]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/01/20/retour-sur-le-mooc-programmer-en-c/"/>
    <updated>2017-01-20T14:20:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/01/20/retour-sur-le-mooc-programmer-en-c</id>
    <content type="html"><![CDATA[<p>Je me suis retrouvé dans ce MOOC pour débutant en C par hasard
(<a href="https://www.fun-mooc.fr/courses/MinesTelecom/04020S02/session02/about">Programmer en C</a>).
 Je pensais au
départ qu’il serait d’un niveau plus élévé. Malgré tout je suis resté car j’ai
été surpris par les outils mis en place par l’équipe. On sent que
ce MOOC a été très bien préparé, ça a bossé dur. Et c’est vraiment réussi.</p>

<!-- more -->

<p>Deux outils m’ont marqué : WebLINUX et le Codecast.</p>

<h2 id="weblinux">WebLINUX</h2>

<p>C’est un Linux dans le navigateur. Vous pouvez tester ça ici :
https://remisharrock.github.io/sysbuild/#/VM</p>

<p>Ceux qui me connaissent savent ce que je pense du «tout dans le navigateur»
(beaucoup de mal) mais j’ai le sentiment que dans ce cas c’est une bonne chose.
Plusieurs personnes n’auraientt peut-être pas utilisé d’outils plus lourds
parce que trop intimidant quand on débute. Là, du coup, il y a zéro
installation, tu ouvres une page web et tu as un Linux qui fonctionne (enfin la
plupart du temps, y a encore pas mal de ratés).</p>

<h2 id="codecast">Codecast</h2>

<p>Cet outil (là encore dans le navigateur) mélange vidéo, éditeur de code,
compilateur, entrée standard, sortie standard, débuggeur, visualisation de la
mémoire. Tu peux mettre la vidéo en pause et modifier le code. C’est très
intéressant et très prometteur comme outil d’apprentissage.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Pour pinailler (parce que j’aime bien) je dirais que l’énergie passée à
développer WebLINUX et Codecast aurait pu être utilisée différement. À faire
plusieurs semaines de cours en plus, à corriger les petits couacs (inévitables)
dans certaines vidéos, etc. Parce que au final, une VM sous Ubuntu (ou
n’importe quel Linux d’ailleurs) et quelques séances bien dirigées dans un
débugger auraient pu faire l’affaire. Mais c’est vraiment pour pinailler.</p>

<p>Malgré ce que je viens de dire juste avant, si vous programmez un peu et que
vous souhaitez apprendre le langage C, allez y les yeux fermés. Vous trouverez
difficilement mieux pour débuter en C.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour du MOOC Designer dans un fablab]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/12/20/retour-du-mooc-designer-dans-un-fablab/"/>
    <updated>2016-12-20T16:25:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/12/20/retour-du-mooc-designer-dans-un-fablab</id>
    <content type="html"><![CDATA[<p>L’idée est excellente. Et originale. Je n’ai trouvé ça nulle part ailleurs.
Le potentiel est indéniable.</p>

<p>Le résultat est d’autant plus décevant. Ça aurait pu être un MOOC fabuleux
dont on se souvient pendant des années, à l’instar de
<a href="https://www.edx.org/course/electronic-interfaces-bridging-physical-uc-berkeleyx-ee40lx-0">BerkeleyX: EE40LX Electronic Interfaces</a>
ou de
<a href="https://www.coursera.org/learn/build-a-computer">Build a Modern Computer from First Principles: From Nand to Tetris</a>.
C’est finalement un MOOC baclé.</p>

<!-- more -->

<p>Le sujet avait de quoi m’intérésser : conception 2D et 3D, utilisation de
fraiseuse numérique, découpeuse laser et imprimante 3D. Malheureusement le
contenu pédagogique est quasi inexistant. Vous voulez faire de la 2D ? Regardez
notre unique vidéo sur Inkscape dans laquelle nous vous montrons, en accéléré, sans
expliquer quoi que ce soit, comment utiliser 2 ou 3 outils.
Vous voulez faire de la 3D ? Pareil, mais en plus court.
Vous voulez imprimer en 3D ou utiliser une découpeuse ? Regardez donc ces
quelques vidéos réalisées par d’autres et disponibles sur youtube depuis des
années.</p>

<p>Ce MOOC est la suite de 
<a href="https://www.fun-mooc.fr/courses/MinesTelecom/04018S02/session02/about">Fabriquer un objet connecté</a>
en pire. J’ai suivi <em>Fabriquer un objet connecté</em> qui lui aussi partait d’une
excellente et originale idée. Lui aussi était une première session. On sentait
que les types en voulaient vraiment, qu’ils avaient envie de bien faire et
qu’ils faisaient ce qu’ils pouvaient. Ça n’était pas abouti (par manque de
moyens ou de temps ?) et on restait sur sa faim. Mais on pardonnait aisément
parceque c’était une première édition et qu’on sentait vraiment la volonté de
bien faire (je me répète).  Dans cette suite on a l’impression qu’ils n’en
peuvent plus et qu’ils l’on fait parce qu’il fallait le faire, pour s’en
débarasser le plus vite possible.</p>

<h2 id="conclusion">Conclusion</h2>

<p>J’espère de tout coeur qu’il y aura une seconde édition dans
laquelle les auteurs auront retravaillé leur sujet. Parce que ça le mérite.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changer de shell, de Bash à Fish]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish/"/>
    <updated>2016-12-13T19:34:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish</id>
    <content type="html"><![CDATA[<p>J’avais remarqué le shell Fish il y a plusieurs années. Mais l’accroche de son
site web m’avais plutôt fait penser à une blague :</p>

<blockquote>
  <p>Finally, a command line shell for the 90s</p>
</blockquote>

<p>Heureusement pour moi, j’y suis repassé il y a quelques mois. Et cette fois
j’ai compris que c’était du sérieux. Je me suis promis de revenir dès que
possible pour essayer ce shell.</p>

<p>On est le week end. J’ai quelques heures devant moi. C’est parti pour
un test. Et comme directement c’est l’effet WAO, je me dis que je
vais y aller <em>à la dure</em>, en l’installant sur l’ordinateur du boulot.</p>

<p>Voici mes premières impressions après deux jours d’utilisation.</p>

<!-- more -->

<h2 id="auto-compltion">Auto complétion</h2>

<p>La première chose qui me saute aux yeux, c’est l’auto complétion, qui va de pair
avec les suggestions faites par le shell.</p>

<p>L’auto complétion par la touche TAB semble bien plus performante qu’en Bash. Un
coup d’œil dans la doc me dit qu’il sera aussi plus simple de fournir les
auto complétions pour mes propres programmes.</p>

<p>Ensuite, des suggestions apparaissent au fur et à mesure que l’on entre des
caractères et c’est puissant. Ça n’existe tout simplement pas dans Bash. Ctrl+F
permet d’accepter toute la ligne, alors que Alt+F accepte un seul mot.</p>

<h2 id="coloration-syntaxique">Coloration syntaxique</h2>

<p>Fish colore votre ligne de commande en temps réel. Y a pas à dire, ça change de
Bash. Et c’est utile : une commande inconnue ou mal orthographiée apparait en
rouge, on repère une variable au milieu d’une chaîne de caractères, etc.</p>

<h2 id="retrouver-les-anciennes-commandes">Retrouver les anciennes commandes</h2>

<p>Avec Bash, j’ai une configuration qui me permet de taper les premières lettres
d’une commande, et de faire défiler (avec les touches fléchées) toutes les
commandes historiques qui commencent par ces quelques lettres.</p>

<p>Avec Fish, pas besoin de configurer quoi que ce soit. Ça existe d’emblée, mais
en plus puissant.</p>

<h2 id="raccourcis-clavier">Raccourcis clavier</h2>

<p>Pour l’instant je ne retrouve pas tous mes raccourcis (ou astuces).
<del>Par exemple avec Bash <code>Esc+.</code> affiche l’argument de la dernière commande. Ça
me manque avec Fish.</del> (Edit: à partir de la version 2.3 <code>Esc+.</code> fonctionne)
Mais comme un principe de Fish est «<em>on peut faire tous ce que peuvent faire
les autres shells</em>», j’attends de voir.</p>

<h2 id="ruby"> Ruby</h2>

<p>J’utilise <code>chruby</code> depuis un certain temps comme <em>version manager</em> et j’ai eu
une petite frayeur en constatant que plus rien ne fonctionnait avec Fish.
Pour mon premier jour sous Fish au boulot, ça a donc été mitigé, même si j’utilise
moins Ruby ces temps ci. Je repassais sous Bash quand il fallait faire du Ruby.</p>

<p>Dans l’après midi je me suis décidé à chercher, et j’ai trouvé ça:
<a href="https://github.com/JeanMertz/chruby-fish">chruby-fish</a>. Sans ce projet j’aurais
certainement cesser là mon utilisation de Fish. Donc un grand merci à son
créateur.</p>

<p>Ça fait très bien le boulot, avec un petit bug tout de même:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ chruby 2.3.1
</span><span class="line">mkdir: cannot create directory ‘/opt/rubies/ruby-2.3.1/lib/ruby/gems/2.3.0/bin’: Permission denied</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour chaque version de Ruby, il faudra donc créer ce dossier à la main:</p>

<pre><code>sudo mkdir /opt/rubies/ruby-2.3.1/lib/ruby/gems/2.3.0/bin
</code></pre>

<h2 id="prompt-thmes">Prompt, thèmes</h2>

<p>Je ne vais pas m’étendre sur le sujet, y a tout ce qu’il faut pour
personnaliser son terminal à grands coups de variables et de fonctions.</p>

<h2 id="alias-et-fonctions">Alias et fonctions</h2>

<p>Un truc qui m’a fort surpris au tout début : Fish n’a pas d’alias, il faut
utiliser des fonctions à la place. À la fin du deuxième jour d’utilisation
c’était adopté et validé. Voici un classique pour l’exemple, je veux pouvoir
taper <code>la</code> à la place de <code>ls -A</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function la --description 'Like ls with hidden file'
</span><span class="line">    ls -A $argv
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Un excellent point à propos des fonctions dans Fish : elles sont chargées
<em>paresseusement</em>. C’est à dire qu’une fonction est chargée automatiquement la
première fois qu’on l’utilise.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Le truc avec Fish, c’est que <em>ça juste marche</em> ™. Avec Bash, il faut des
années de configuration pour obtenir quelque chose de valable. Avec Fish, ton
premier fichier de configuration est vide, inexistant, parce que pas besoin. Et
pourtant ça fonctionne, tout simplement.</p>

<p>Maintenant ça ne fait que deux jours que je suis dessus… C’est le début, tout
est beau. Je verrai à l’usage.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran/">Lister un dossier tout en nettoyant l&#8217;écran</a></li><li><a href="http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois/">Fish : complétion puis exécution en une seule fois</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/06/utiliser-bash-pour-supprimer-les-encodages-magiques-de-ruby-1-dot-9/">Utiliser Bash pour supprimer les encodages magiques de Ruby 1.9</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug de la version graphique de Vim sur Debian Sid]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/11/11/bug-de-la-version-graphique-de-vim-sur-debian-sid/"/>
    <updated>2016-11-11T09:46:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/11/11/bug-de-la-version-graphique-de-vim-sur-debian-sid</id>
    <content type="html"><![CDATA[<p>Depuis une mise à jour récente de la bibliothèque gtk3 un
bug affecte la version graphique de Vim (<code>gvim</code>) sur Debian Sid. Ce bug est
important puisqu’il rend <code>gvim</code> tout simplement inutilisable. Lorsqu’on lance
le programme on obtient le message suivant, qui se répète plusieurs fois :</p>

<pre><code>$ gvim

(gvim:6054): Gtk-CRITICAL **: gtk_widget_set_size_request: assertion 'width &gt;= -1' failed
*** BUG ***
In pixman_region32_init_rect: Invalid rectangle passed
Set a breakpoint on '_pixman_log_error' to debug
.
.
.
</code></pre>

<p>Des discussions sont en cours pour savoir si le bug est de la responsabilité
de Vim ou de Gtk3, mais en attendant on fait quoi ?</p>

<!-- more -->

<p>On peut d’abord regarder où est placée la commande <code>gvim</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>which gvim
</span><span class="line">/usr/bin/gvim
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut maintenant regarder quel programme est en réalité appelé par cette
commande (j’ai tronqué la sortie pour laisser seulement ce qui est
intéressant).  On voit que <code>gvim</code> est un lien symbolique qui pointe sur
<code>/etc/alternatives/gvim</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls -l /usr/bin/gvim
</span><span class="line"><span class="o">[</span>...<span class="o">]</span> /usr/bin/gvim -&gt; /etc/alternatives/gvim*
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Allons voir sur quel programme est <em>branché</em> l’alternative :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls -l /etc/alternatives/gvim
</span><span class="line"><span class="o">[</span>...<span class="o">]</span> /etc/alternatives/gvim -&gt; /usr/bin/vim.gtk3*
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fait sens. Regardons quelles <em>versions</em> de vim sont disponibles en tapant
<code>vim</code> + tab :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vim
</span><span class="line">vim        vim.basic  vimdiff    vim.gtk    vim.gtk3   vim.tiny   vimtutor
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’ancienne version (<code>vim.gtk</code>) m’intéresse. Si vous ne l’avez pas/plus, vous
pouvez l’installer avec <code>apt-get install vim-gtk</code>.</p>

<h2 id="solution-n1">Solution n°1</h2>

<p>Un tour dans l’aide de <code>vim.gtk</code> montrera qu’on peut le lancer avec l’option <code>-g</code>
pour avoir l’interface graphique. En attendant que le bug soit réparé on peut
donc utiliser <code>vim.gtk -g</code> à la place de <code>gvim</code>.</p>

<h2 id="solution-n2">Solution n°2</h2>

<p>Le programme <code>update-alternatives</code> permet de gérer ce genre de problème
facilement. Utilisez le pour choisir ce que lancera la commande <code>gvim</code> :</p>

<pre><code>$ sudo update-alternatives --config gvim
[sudo] Mot de passe de xavier : 
Il existe 2 choix pour l'alternative gvim (qui fournit /usr/bin/gvim).

  Sélection   Chemin             Priorité  État
------------------------------------------------------------
* 0            /usr/bin/vim.gtk3   50        mode automatique
  1            /usr/bin/vim.gtk    50        mode manuel
  2            /usr/bin/vim.gtk3   50        mode manuel

Appuyez sur &lt;Entrée&gt; pour conserver la valeur par défaut[*] ou choisissez le numéro sélectionné :1
</code></pre>

<p>Vous pourriez préférer la version graphique <code>galternatives</code>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/02/vim-pourquoi-les-touches-hjkl/">Vim : Pourquoi les touches HJKL ?</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/28/un-nouveau-depot-pour-les-plugins-vim/">Un nouveau dépot pour les plugins Vim</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/08/trois-bibliotheques-de-fonctions-pour-ecrire-vos-plugins-vim/">Trois bibliothèques de fonctions pour écrire vos plugins Vim</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un framework de test pour Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/"/>
    <updated>2016-11-02T09:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby</id>
    <content type="html"><![CDATA[<p>Si vous souhaitez comprendre le fonctionnement d’un framework de test, si vous
voulez écrire votre propre framework et que vous ressentiez le besoin d’un coup
de pouce, cet article est fait pour vous. Nous verrons étape par étape comment écrire
une telle chose. Le framework que nous réaliserons tiendra en quelques dizaines de
lignes de Ruby et pourra être utilisé comme une base pour vos futures
réalisations.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/colorful-test-tubes.jpg" /></p>

<!-- more -->

<h2 id="par-o-commencer-">Par où commencer ?</h2>

<p>Pour ce genre de problématique, je trouve qu’il est plus simple de partir d’un
exemple concret du <strong>langage</strong>, de l’<strong>API</strong>, que l’on souhaite obtenir. Dans notre
cas, nous pouvons déjà écrire quelques tests même si nous ne pouvons pas encore
les faire tourner.</p>

<p>Voici 3 tests pour une classe Rover. Classe qui aura une position x,y et une
direction :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb final.</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_given_direction</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’ai cherché à faire au plus simple. Tout se passe à l’intérieur d’une classe.
Ça nous permettra d’hériter facilement de certains comportements, comme la
méthode <code>assert</code> qui sera définit dans la classe <code>Tasty::Unit</code>.</p>

<p>Chaque méthode qui commence par <code>test_</code> représente un test, et <code>assert</code> se
contente de vérifier si son argument est vrai ou faux.</p>

<p>On lancera le programme avec le nom d’un fichier de test, par exemple
<code>tasty test_rover.rb</code>. Mais par souci de simplicité, nous nous contenterons
d’utiliser directement l’interpréteur Ruby de cette manière :
<code>ruby tasty.rb test_rover.rb</code>.</p>

<p>Voici ce que j’imagine en terme d’affichage :</p>

<pre><code>$ ruby tasty.rb test_rover.rb
ok - test_it_has_a_position
not ok - test_it_has_a_given_direction
&lt;&lt; ERROR REPORT GOES HERE &gt;&gt;
ok - test_it_has_a_direction_by_default
</code></pre>

<p>Le nom d’un test est précédé de “ok” si il a réussi, ou de “not ok” si il a
échoué. Le rapport d’erreur est affiché aussitôt après une ligne “not ok”.</p>

<h2 id="retrouver-la-classe-de-test">Retrouver la classe de test</h2>

<p>Commençons par le plus simple, définissons une classe Rover dans un fichier
<code>rover.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis définissons notre premier test, dans un fichier <code>test_rover.rb</code>. Ce
premier test va nous guider pendant un bout de temps :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant, dans un fichier <code>tasty.rb</code>, définissons le namespace Tasty et une
classe principale. Nous initialiserons cette classe avec le nom de fichier
passé en argument sur la ligne de commande. Nous afficherons un message
temporaire pour nous assurer que nous sommes sur la bonne voie :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Testing </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’essai est concluant :</p>

<pre><code>$ ruby tasty.rb test_rover.rb
Testing test_rover.rb
</code></pre>

<p>Tant qu’on y est, mieux vaut définir tout de suite la classe <code>Tasty::Unit</code>,
voici à quoi devrait ressembler votre fichier <code>tasty.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Testing </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Passons maintenant au sujet principal de cette section : nous devons retrouver
le nom de la classe de test, à savoir <code>TestRover</code>, depuis la classe
<code>Tasty::Main</code>. Pour ce faire nous pourrions écrire un parser qui
analyserait le contenu du fichier passé en argument. Ou bien nous pouvons
compter sur les facilités d’introspection du langage Ruby. Je parie volontiers
sur cette seconde solution. Nous laisserons Ruby charger et parser le fichier de
test pour nous. Nous chargerons le fichier de la même manière qu’un autre, avec
un <code>require</code>. Puis nous utilerons <code>Object.constants</code> pour accéder à toutes les
constantes définies jusqu’ici (une classe est représentée par une constante) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous lancez ce programme, vous verrez une liste de toutes les constantes
définies, dont celle que nous cherchons, <code>TestRover</code> :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
Object
Module
Class
BasicObject
...
SimpleDelegator
Tasty
Rover
TestRover # &lt;============================
RUBYGEMS_ACTIVATION_MONITOR
</code></pre>

<p>Attention, il s’agit d’un tableau de symboles. Vous pouvez vous en convaincre
en changeant de méthode d’affichage. Remplacez <code>puts</code> par <code>p</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">  <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">  <span class="nb">p</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous pouvez voir qu’il s’agit de symboles :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
[:Object, :Module, :Class, :BasicObject, :Kernel, :NilClass, :NIL, :Data,
...
:SimpleDelegator, :Tasty, :Rover, :TestRover, :RUBYGEMS_ACTIVATION_MONITOR]
</code></pre>

<p>Nous pouvons sélectionner uniquement les classes commençant par <code>Test</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">p</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous avons réduit le tableau aux seules classes de test. Nous en avons une
seule ici, mais nous pourrions très bien en avoir plusieurs :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
[:TestRover]
</code></pre>

<p>Il y a une convention qui est à l’oeuvre : seule une classe de test peut
commencer par <code>Test</code>. Ça n’est pas un bien grand sacrifice, et nous pourrions
y remédier si besoin.</p>

<h2 id="les-mthodes-de-test">Les méthodes de test</h2>

<p>La prochaine étape consistera à récupérer les méthodes qui sont dans la classe
de test, et à les lancer.</p>

<p>Un peu de recherche, dans une session irb et avec la <a href="http://ruby-doc.org/">documentation Ruby</a>,
nous montrera que nous pouvons transformer un symbole en une classe, et aussi
instancier cette classe, à l’aide de <code>Object.const_get</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="ss">:Module</span>
</span><span class="line"><span class="go">:Module</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="ss">:Module</span><span class="p">)</span>
</span><span class="line"><span class="go">Module &lt; Object</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="ss">:Module</span><span class="p">)</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="go">#&lt;Module:0x0055e0036e5580&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>On peut donc transformer notre tableau de symboles selon cette méthode :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="n">classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="n">classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Retournons dans une session irb pour voir comment obtenir les méthodes d’une
classe quelconque.  Définissons une classe <code>C</code> avec une méthode
<code>method_in_class_c</code> pour les besoins de la cause :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">C</span>
</span><span class="line"><span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">method_in_class_c</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La méthode <code>instance_methods</code> appliquée sur une classe liste les méthodes de
cette classe. Nous retrouvons notre méthode <code>method_in_class_c</code>, parmi plein
d’autres :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">instance_methods</span>
</span><span class="line"><span class="go">method_in_class_c # &lt;--------------------</span>
</span><span class="line"><span class="go">methods</span>
</span><span class="line"><span class="go">singleton_methods</span>
</span><span class="line"><span class="go">protected_methods</span>
</span><span class="line"><span class="go">private_methods</span>
</span><span class="line"><span class="go">public_methods</span>
</span><span class="line"><span class="go">instance_of?</span>
</span><span class="line"><span class="go">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>D’où viennent ces autres méthodes ? Ce sont les méthodes héritées ou incluses.
Pour restreindre les méthodes à celles définies dans la classe C, nous devons
utiliser un artifice :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class="line"><span class="go">method_in_class_c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons nous servir de ce nouveau savoir pour lister les méthodes de test :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="n">classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="n">classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="n">classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class="line">        <span class="n">c</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="nb">puts</span> <span class="n">m</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous l’avons trouvé :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_it_has_a_position
</code></pre>

<p>Il reste à lancer chaque test en se servant de la méthode <a href="http://ruby-doc.org/core-2.3.1/Object.html#method-i-send">send</a> sur une
instance de la classe de test. Nous ferons cela ailleurs que dans le
constructeur de la classe Tasty::Main. Dans une méthode <code>run</code> par exemple, ça
sera plus propre :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">class_under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">class_under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">class_under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">main</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alors, et si on lançait les tests :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:6:in `initialize':
  wrong number of arguments (given 2, expected 0) (ArgumentError)
  from test_rover.rb:6:in `new'
  from test_rover.rb:6:in `test_it_has_a_position'
</code></pre>

<p>Déçu ? Vous ne devriez pas, ça a parfaitement fonctionné. Le programme nous dit
qu’en ligne 6 du fichier <code>test_rover.rb</code> nous tentons d’initialiser un rover
avec 2 arguments alors que la méthode <code>initialize</code> de rover attends 0
arguments. Voyons cette fameuse ligne 6, dans le test nous cherchons à
initialiser un rover avec des coordonnées x et y :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et comme notre classe <code>Rover</code> est déséspérement vide, il est normal que Ruby
crashe.</p>

<h2 id="passons-le-premier-test">Passons le premier test</h2>

<p>Dotons la méthode <code>Rover#initialize</code> de deux arguments, comme attendu :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et le programme nous emmène au prochain problème :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_position': undefined method `position'
for #&lt;Rover:0x0055778cf43a90&gt; (NoMethodError)
</code></pre>

<p>On en vient facilement à bout en ajoutant la méthode <code>Rover#position</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’erreur suivante est beaucoup plus intéressante :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_position': undefined method `assert'
for #&lt;TestRover:0x00558edbe7a828&gt; (NoMethodError)
</code></pre>

<p>Nous devons coder <code>assert</code> de telle manière qu’elle produise une erreur si son
argument est différent de <code>true</code>.  Et pour que les classes de test puissent y
accéder, nous la placerons dans <code>Tasty::Unit</code>. Nous utiliserons aussi une erreur
custom, <code>AssertionError</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">AssertionError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">boolean</span><span class="p">)</span>
</span><span class="line">      <span class="k">raise</span> <span class="no">AssertionError</span> <span class="k">unless</span> <span class="n">boolean</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous y sommes presque. La méthode <code>assert</code> est codée et produit l’erreur attendue :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
tasty.rb:8:in `assert': Tasty::AssertionError (Tasty::AssertionError)
  from test_rover.rb:7:in `test_it_has_a_position'
</code></pre>

<p>Que se passerait-il si nous implémentions <code>Rover</code> de telle manière qu’elle
passe le test ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">    <span class="o">[</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et bien rien. Il ne se passe rien.</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
$ # &lt;---- Cruelle absence d'affichage
</code></pre>

<p>En l’occurence, ce rien signifie quand même que nous avons réussi cette
partie !  Le test est passé ! Ajoutons un petit quelque chose pour être tenu au
courant :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">class_under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">class_under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">class_under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">          <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="n">m</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># &lt;---------------</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et c’est la victoire :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">ruby</span> <span class="n">tasty</span><span class="o">.</span><span class="n">rb</span> <span class="n">test_rover</span><span class="o">.</span><span class="n">rb</span>
</span><span class="line"><span class="n">ok</span> <span class="o">-</span> <span class="n">test_it_has_a_position</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="les-autres-tests">Les autres tests</h2>

<p>Ajoutons le second test, mais plaçons le avant le premier (!) pour observer un
phénomène curieux :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le programme reporte bien le nouveau problème qui se trouve dans la méthode
<code>test_it_has_a_direction_by_default</code> mais il n’y a aucune mention de
<code>test_it_has_a_position</code> qui fonctionnait pourtant bien.</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_direction_by_default': undefined method
`direction' for #&lt;Rover:0x0055a03b444db0 @x=3, @y=2&gt; (NoMethodError)
</code></pre>

<p>Lorsqu’une erreur se produit dans <code>Tasty::Main#run</code>, le programme s’arrête
purement et simplement. Ce n’est pas du tout ce que nous voulons. Nous voulons
qu’une erreur soit rapportée, et que le programme continue en traitant le test
suivant. Commençons par remanier un peu la méthode <code>run</code> en la splittant en
deux parties :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">under_test</span><span class="o">|</span>
</span><span class="line">      <span class="n">instance</span> <span class="o">=</span> <span class="n">under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">      <span class="n">under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="n">m</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons alors <em>attraper</em> les erreurs facilement dans la méthode <code>run_test</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;not ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">inspect</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà le résultat, nous affichons à la fois les tests qui passent et ceux
qui échouent :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
not ok - test_it_has_a_direction_by_default
#&lt;NoMethodError: undefined method `direction' for #&lt;Rover:0x0055a7709c03c0 @x=3, @y=2&gt;&gt;
test_rover.rb:7:in `test_it_has_a_direction_by_default'
...
ok - test_it_has_a_position
</code></pre>

<p>En dotant <code>Rover</code> de la méthode <code>position</code> qui suit, les tests passent :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">position</span>
</span><span class="line">  <span class="s1">&#39;north&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ ruby tasty.rb test_rover.rb 
ok - test_it_has_a_direction_by_default
ok - test_it_has_a_position
</code></pre>

<p>Faire passer le 3ème test implique seulement d’implémenter la classe <code>Rover</code> de
façon correcte. Il n’y a rien à ajouter ou à modifier dans notre framework
<code>Tasty</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Nous venons d’écrire un framework de test en quelques dizaines de lignes de
code grâce aux facultés d’introspection de Ruby. C’est maintenant à votre tour
de jouer en l’améliorant.  Voici quelques idées :</p>

<ul>
  <li>Faire jouer les tests dans un ordre aléatoire</li>
  <li>Afficher une ligne de résultat final : <code>X tests, Y errors</code></li>
  <li>La sortie console devrait se faire en couleur, les lignes “ok” en vert, les
lignes “not ok” en rouges, et le reste en normal</li>
  <li>Écrire <code>ok - it has a position</code> plutôt que <code>ok - test_it_has_a_position</code></li>
  <li>Faire en sorte que des classes autres que celles de test puissent commencer par <code>Test</code>.</li>
  <li>Le must pour un compilateur, c’est d’être écrit dans son langage. Faire
pareil ici : tester Tasty avec Tasty</li>
</ul>

<p>Pour finir, voici le code complet :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">direction</span><span class="o">=</span><span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">    <span class="vi">@direction</span> <span class="o">=</span> <span class="n">direction</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">    <span class="o">[</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:direction</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_given_direction</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">AssertionError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">boolean</span><span class="p">)</span>
</span><span class="line">      <span class="k">raise</span> <span class="no">AssertionError</span> <span class="k">unless</span> <span class="n">boolean</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">      <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;not ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span><span class="line">      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">main</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bons tests ! À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/09/16/commencer-le-developpement-web-en-ruby/">Commencer le développement web en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/29/coco-version-0-dot-13-dot-0/">Coco version 0.13.0</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/">Comportement inattendu de Rspec</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment mettre à jour un package R]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/08/04/comment-mettre-a-jour-un-package-r/"/>
    <updated>2016-08-04T08:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/08/04/comment-mettre-a-jour-un-package-r</id>
    <content type="html"><![CDATA[<p>Comment faire pour mettre à jour un seul package en R ? Pas deux, pas trois,
pas cinquante, non juste un. Allez, “ggplot2” par exemple. Ça devrait être
simple…</p>

<!-- more -->

<p>Je tape <code>?update&lt;TAB&gt;</code> et je vois qu’il existe une fonction <code>update.packages()</code>
Cette fonction semble prometteuse, n’est-ce-pas ?</p>

<p>Oubliez la ! Elle (<code>update.packages()</code>) va mettre à jour <strong>tous</strong> vos packages.
Et selon leur nombre cela peut prendre beaucoup de temps.</p>

<p>Pour mettre à jour un seul package on doit utiliser <code>install.packages()</code> comme ceci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">install.packages<span class="p">(</span><span class="s">&quot;ggplot2&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Intuitif, non ? Il n’y a pas de différences entre l’installation et la mise à
jour.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/">Un quine en R - Le retour</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12 points pour rater la conception d'un MOOC]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/08/02/12-points-pour-rater-la-conception-dun-mooc/"/>
    <updated>2016-08-02T16:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/08/02/12-points-pour-rater-la-conception-dun-mooc</id>
    <content type="html"><![CDATA[<p><em>Ça fait maintenant quelques temps que je pratique les MOOCs. J’adore ça.  J’en
ai suivi environ 40. Ça fait de moi un serial MOOCer, non ? Là dedans j’en ai
réussi 26 avec succès.  Et j’en ai suivi à peu près 11 seulement pour voir, ou
pour glaner un concept ou deux par ci par là. Je commence à bien cerner les
conceptions qui fonctionnent, et celles qui ne fonctionnent pas.  Voici donc
une liste de 12 points à suivre aveuglément si vous souhaitez rater à coup sûr
la conception de votre MOOC.</em></p>

<!-- more -->

<ol>
  <li>
    <p>Ne dites surtout pas quel niveau minimum est requis pour suivre votre MOOC.
Cachez le. Laissez donc l’étudiant le découvrir à ses dépends, au fur et à
mesure de son investissement.</p>
  </li>
  <li>
    <p>Réalisez des slides les plus denses possible. Plus vous en mettrez, plus vous
serez ennuyeux. Ne laissez pas de vide. Remplissez et remplissez encore.</p>
  </li>
  <li>
    <p>Lisez vos slides mots pour mots et du ton le plus morne possible.</p>
  </li>
  <li>
    <p>Ne faites apparaître aucun humain dans vos vidéos. Juste des slides.</p>
  </li>
  <li>
    <p>Évitez de sourire. Sourire pourrait faire croire que vous êtes heureux de faire
ce que vous faites. N’hésitez donc pas à avoir l’air de vous ennuyer lorsque
vous enregistrez les vidéos.</p>
  </li>
  <li>
    <p>Comme enseignant, choisissez quelqu’un qui maîtrise mal la langue d’enseignement.</p>
  </li>
  <li>
    <p>Réalisez les vidéos quelques jours seulement avant leurs diffusions. La loi de
Murphy c’est pour les faibles. Vous êtes bien au-dessus de ça, et vous savez
que tout se passera bien.</p>
  </li>
  <li>
    <p>Abusez de liaisons comme «il est évident que …», «il découle évidemment que …»,
«donc comme nous le savons tous depuis l’école maternelle …», etc. Et ceci tout
particulièrement si votre sujet est difficile.</p>
  </li>
  <li>
    <p>Faites en sorte que l’équipe enseignante ne participe pas aux forums de
discussion. Sous aucun prétexte.</p>
  </li>
  <li>
    <p>Proposez un maximum de quizzs et de devoirs sans aucun rapport avec le
contenu de la semaine.</p>
  </li>
  <li>
    <p>Faites comme si donner un MOOC était exactement la même chose que donner un
cours dans la vie réelle. Surtout ne changez rien. Surtout ne vous adaptez pas.</p>
  </li>
  <li>
    <p>En ce qui concerne (encore une fois) les vidéos et les slides, veillez bien à
ce que leur qualité les rendent illisibles. Et pour parfaire le tout, assurez
vous qu’on ne puisse pas les télécharger.</p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
