<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2018-08-30T19:20:31+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Heroku, OVH, les naked domains, et les DNS]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/08/30/heroku-ovh-les-naked-domains-et-les-dns/"/>
    <updated>2018-08-30T17:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/08/30/heroku-ovh-les-naked-domains-et-les-dns</id>
    <content type="html"><![CDATA[<h2 id="la-situation">La situation</h2>

<p>J’ai un nom de domaine chez OVH, <em>stonervoice.com</em>.</p>

<p>J’ai un site chez Heroku, <em>foobarbaz.herokuapp.com</em>.</p>

<p>Je veux pouvoir accéder à mon site à l’aide des 2 URLs suivantes :</p>

<ul>
  <li><a href="https://stonervoice.com">stonervoice.com</a></li>
  <li><a href="https://www.stonervoice.com">www.stonervoice.com</a></li>
</ul>

<h2 id="comment-faire">Comment faire</h2>

<p>En configurant les <a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS</a>. Du moins, dans un monde idéal.</p>

<!-- more -->

<h2 id="le-www-facile">Le www facile</h2>

<p>Pointer l’adresse <em>www.stonervoice.com</em> sur le site chez Heroku est facile et
prend 30 secondes. La commande <code>heroku domains:add www.stonervoice.com</code>
s’occupe de la configuration chez Heroku et nous fournit l’adresse (de type
www.votre-site.com.herokudns.com) à utiliser dans le <a href="https://en.wikipedia.org/wiki/CNAME_record">CNAME</a> chez OVH (ou
même chez n’importe quel autre fournisseur).</p>

<h2 id="le-problme">Le problème</h2>

<p><strong>Mais pour l’adresse stonervoice.com, c’est une autre histoire.</strong></p>

<p>C’est ce qu’on appelle un domaine nu. En anglais on dit naked domain, ou bien
second-level domain.  Et pour enregistrer un domaine nu dans un serveur DNS il
faut une adresse IP (du genre 123.456.78.9), donc fixe, et pas une URL (genre
truc.machin.com.herokudns.blabla), donc qui pourrait utiliser n’importe quelle
IP.  Pour cela, on utilise le type d’enregistrement DNS <em>A</em>, et non pas <em>CNAME</em>
comme précédemment.</p>

<p>Sauf qu’avec Heroku, ça fonctionne pas. Parce qu’une application Heroku est
derrière un <a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)">load balancer</a> et n’a pas d’IP fixe. Vous pouvez le vérifier
vous-même :</p>

<pre><code>$ nslookup www.stonervoice.com
Address: 54.229.165.195
Address: 54.171.20.71
Address: 54.76.58.198
Address: 54.194.152.6
Address: 34.249.85.24
Address: 34.248.164.131
Address: 34.246.94.179
Address: 52.49.103.24
</code></pre>

<p>Certains fournisseurs de noms de domaine/DNS proposent le type d’enregistrement
<em>ALIAS</em> ou <em>ANAME</em> qui conviendrait. Mais pas OVH.</p>

<p>Dit autrement : il n’y a aucun moyen pour faire pointer <em>stonervoice.com</em> sur
mon application Heroku en utilisant la gestion des DNS d’OVH.</p>

<h2 id="quelques-solutions-rapides-mais">Quelques solutions rapides mais…</h2>

<p>La plus évidente : utiliser un autre fournisseur qu’OVH, qui propose un <em>ALIAS</em> ou un <em>ANAME</em>. Mais on n’a pas toujours le choix.</p>

<p>La plus hack : prendre une des IPs fournit par le load balancer de Heroku. Mais on y perd tous les avantages du load balancer, et on ne sait pas si cette IP
restera valable dans le temps.</p>

<p>La plus chère : On peut garder le nom de domaine chez OVH et utiliser un autre
gestionnaire de DNS, comme DNS Simple, DNS Made Easy, ou Cloud Flare. On
pourrait aussi utiliser un add-on chez Heroku pour avoir une IP fixe (j’ai pas
essayer, ça devrait logiquement marcher). C’est la solution que je préfère,
mais pour ce projet je ne veux pas commencer à payer des extras tant que je
peux éviter.</p>

<h2 id="la-solution-prconise-par-internet">La solution préconisée par Internet</h2>

<p>J’ai bien sûr posé la question à Internet, DuckDuckGo pour ma
part, mais j’ai entendu dire que Google marchait bien aussi ;)</p>

<p>On conseille souvent d’utiliser le service <em>wwwizer</em>. Vous enregistrez l’IP
que le service vous fournit gratuitement dans vos DNS avec un type <em>A</em>, et
chaque requête sur <em>stonervoice.com</em> est alors redirigée vers <em>www.stonervoice.com</em>.
J’ai essayé tout de suite, et ça fonctionne.</p>

<p>Mais en fait pas vraiment.</p>

<p>D’abord je n’aime pas trop l’idée d’un service qui peut s’arrêter à tout
moment sans me prévenir.  Mais surtout, ça ne fonctionne pas avec https. La requête
<em>https://stonervoice.com</em> n’est pas redirigée et échoue avec un <em>timeout</em>. (Je
crois que cette redirection https fait partie de leurs services payants).</p>

<h2 id="une-meilleure-solution-pour-moi--php">Une meilleure solution pour moi : PHP</h2>

<p>Utiliser une redirection <a href="https://en.wikipedia.org/wiki/HTTP_301">HTTP «301 Moved Permanently»</a> comme le fait le service wwwizer
est une bonne idée. Lorsque quelqu’un accède à <em>stonervoice.com</em>, cette
personne est redirigée vers <em>www.stonervoice.com</em> et le logiciel utilisé a
l’occasion de mettre à jour l’adresse ou de la mettre en cache de manière plus ou
moins permanente.</p>

<p>Puisque chez OVH on dispose d’un plan «web hosting» gratuit avec PHP pour l’achat
d’un nom de domaine, la solution est super simple : on fait une redirection
en PHP. Voici le contenu du fichier <code>index.php</code> à déposer chez OVH :</p>

<pre><code>&lt;?php
header("Location: https://www.stonervoice.com/", true, 301);
exit;
</code></pre>

<p>Avec en plus l’avantage de rediriger stonervoice.com vers <strong>https</strong>://www.stonervoice.com.</p>

<p>C’est pas idéal comme solution puisque chaque requête sur le <em>naked domain</em> ira
taper sur un serveur mutualisé, avec tous les problèmes qui ne manqueront pas
d’arriver… Mais en attendant que le besoin d’évoluer se fasse sentir, c’est la
solution la plus simple, la moins chère, la plus propre et la plus rapide à mettre
en place que j’ai trouvé (le plus long a été l’installation de Filezilla).</p>

<p>Si vous avez d’autres idées/solutions je suis preneur, laissez donc un commentaire.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment créer votre propre localisation sous Linux]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/08/21/comment-creer-votre-propre-localisation-sous-linux/"/>
    <updated>2018-08-21T13:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/08/21/comment-creer-votre-propre-localisation-sous-linux</id>
    <content type="html"><![CDATA[<p>Un article récent 
<a href="https://mayeu.me/blog/configurer-linux-pour-utiliser-une-representation-de-date-logique-iso-8601/">«Configurer Linux pour utiliser une représentation de date logique (ISO 8601)»</a> a retenu mon attention. L’auteur y parle de la configuration des
variables locales sur Linux. Des variables telles que <code>LANG</code>, <code>LC_NUMERIC</code>, et plus particulièrement <code>LC_TIME</code>.
Ça m’a fait penser qu’après 21 ans d’utilisation de Linux, je n’avais jamais
pris le temps de regarder comment fonctionnent ces variables de configuration.
Quand tu écris <code>LANG=fr_FR</code>, qu’est ce qu’il se passe vraiment ?</p>

<!-- more -->

<h2 id="introduction">Introduction</h2>

<p>Pour celles et ceux qui découvrent ces variables de configuration, voici une
introduction rapide. Très rapide…</p>

<p>Pour connaitre votre configuration actuelle, utilisez <code>locale</code> :</p>

<pre><code>$ locale
LANG=fr_FR.UTF-8
LANGUAGE=
LC_CTYPE="fr_FR.UTF-8"
LC_NUMERIC="fr_FR.UTF-8"
LC_TIME="fr_FR.UTF-8"
[...]
</code></pre>

<p>Toutes les variables ne sont pas forcement renseignées, c’est normal.</p>

<p>Pour connaitre les valeurs des <em>locales</em> qui sont à votre disposition,
utilisez <code>locale -a</code> :</p>

<pre><code>$ locale -a
C
C.UTF-8
en_AG
en_AG.utf8
en_AU.utf8
en_BW.utf8
en_CA.utf8
en_DK.utf8
en_GB.utf8
[...]
fr_FR.utf8
</code></pre>

<p>Ce ne sont pas <strong>toutes les valeurs existantes</strong>, mais seulement celles que
vous pouvez utiliser tout de suite sans rien compiler. Par exemple, la
commande <code>date</code> utilise la variable <code>LC_TIME</code> pour savoir ce qu’elle doit afficher.
Par défaut, c’est la valeur <code>fr_FR</code> qui est utilisée chez moi (voir la
sortie de <code>locale</code>) :</p>

<pre><code>$ date
lundi 20 août 2018, 17:20:53 (UTC+0200)
</code></pre>

<p>Mais je peux utiliser une autre valeur, par exemple <code>en_DK</code>, ou encore
<code>en_GB</code> :</p>

<pre><code>$ LC_TIME=en_DK.utf8 date
Mon Aug 20 17:19:16 CEST 2018
$ LC_TIME=en_GB.utf8 date
Mon 20 Aug 17:19:47 CEST 2018
</code></pre>

<p>Pour connaître les autres valeurs de locales auxquelles vous avez droit,
consulter le fichier <code>/etc/locale.gen</code> :</p>

<pre><code>$ cat /etc/locale.gen
[...]
# fr_CH.UTF-8 UTF-8
# fr_FR ISO-8859-1
fr_FR.UTF-8 UTF-8
[...]
</code></pre>

<p>Les lignes qui débutent par un <code>#</code> sont les valeurs que vous pouvez compiler
(en utilisant la commande <code>locale-gen</code>).</p>

<h2 id="comment-a-marche-">Comment ça marche ?</h2>

<p>Chaque localisation possède son propre fichier de configuration. Ces fichiers
se trouvent dans <code>/usr/share/i18n/locales/</code>.</p>

<pre><code>$ cat /usr/share/i18n/locales/fr_FR
</code></pre>

<p>Dans ces fichiers chaque variable de configuration est décrite dans sa propre section,
comme <code>LC_TIME</code> à laquelle je m’intéresse ici :</p>

<pre><code>LC_TIME
[...]
END LC_TIME
</code></pre>

<p>À l’intérieur des sections on trouve des chaînes de formatage en Unicode pour
la libc. Voici la partie du fichier <code>/usr/share/i18n/locales/fr_FR</code> dont se
servira la commande <code>date</code> :</p>

<pre><code>date_fmt "&lt;U0025&gt;&lt;U0041&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U002D&gt;&lt;U0065&gt;&lt;U0020&gt;/
&lt;U0025&gt;&lt;U0042&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U0059&gt;&lt;U002C&gt;&lt;U0020&gt;/
&lt;U0025&gt;&lt;U0048&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U004D&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U0053&gt;&lt;U0020&gt;/
&lt;U0028&gt;&lt;U0055&gt;&lt;U0054&gt;&lt;U0043&gt;&lt;U0025&gt;&lt;U007A&gt;&lt;U0029&gt;"
</code></pre>

<p>Si on traduit cette chaîne Unicode (voir par ex. <a href="https://unicode-table.com/en/">cette table</a>), on obtient ce qui suit :</p>

<pre><code>%A %-e %B %Y, %H:%M:%S (UTC%z)
</code></pre>

<p>On retrouve bien le format de la sortie de <code>date</code> (<em>lundi 20 août 2018, 20:26:17 (UTC+0200)</em>).
Si vous n’êtes pas familier de cette notation, jetez un œil sur la fonction <a href="http://www.faximum.com/manual.d/client.server.d/manpages.23.html">strftime</a>
du langage C.</p>

<h2 id="je-veux-ma-propre-locale">Je veux ma propre locale</h2>

<p>Plutôt que <em>lundi 20 août 2018, 20:26:17 (UTC+0200)</em>, je veux que la date
s’affiche sous cette forme : <strong>A:2018 M:08 J:20</strong>.
Pourquoi ? Simplement parce que c’est possible !</p>

<p>Je pars d’un fichier de configuration existant que je copie dans mon répertoire
de travail :</p>

<pre><code>$ cp /usr/share/i18n/locales/fr_FR ./fr_FR@test
</code></pre>

<p>Je l’ai appelé <code>fr_FR@test</code>. J’aurais aussi pu utiliser un des nombreux codes
de régionalisation réservés pour les utilisateurs, comme <code>AA</code>, <code>OO</code>, <code>XX</code> ou
<code>ZZ</code> (voir <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1
alpha-2</a>). Donc j’aurais pu
nommer mon fichier <code>fr_ZZ</code>.</p>

<p>Pour obtenir une date de la forme <em>A:2018 M:08 J:20</em>, il faut la chaîne de
formatage suivante : <strong>A:%Y M:%m J:%d</strong>. Traduit (si on peut dire) en Unicode,
cela donne :</p>

<pre><code>"&lt;U0041&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U0059&gt;&lt;U0020&gt;/
&lt;U004D&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U006D&gt;&lt;U0020&gt;/
&lt;U004A&gt;&lt;U003A&gt;&lt;U0025&gt;&lt;U0064&gt;"
</code></pre>

<p>Une fois que j’ai mis ça dans mon fichier <code>fr_FR@test</code>, je l’envoie dans le dossier <code>/usr/share/i18n/locales/</code> :</p>

<pre><code>$ sudo cp fr_FR@foobar /usr/share/i18n/locales/
</code></pre>

<p>Et je le compile pour qu’il soit utilisable par la libc :</p>

<pre><code>$ sudo localedef -i fr_FR@foobar -c -f UTF-8 fr_FR@test
</code></pre>

<p>Je peux maintenant utiliser ma propre locale :</p>

<pre><code>$ LANG=fr_FR.utf8@test date
A:2018 M:08 J:20
</code></pre>

<p>Et voilà.</p>

<h2 id="quelle-utilit-">Quelle utilité ?</h2>

<p>Comprendre un peu mieux Linux…</p>

<p>Si mon quartier fait sécession et devient un pays autonome, je suis prêt à
créer une nouvelle traduction…</p>

<p>Si vous avez une autre idée, laissez donc un commentaire…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gopher : Récupérer le menu principal]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/07/27/gopher-recuperer-le-menu-principal/"/>
    <updated>2018-07-27T10:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/07/27/gopher-recuperer-le-menu-principal</id>
    <content type="html"><![CDATA[<p>Pour aller plus loin dans la compréhension du protocole Gopher nous pouvons écrire un
petit client texte, sans prétention.</p>

<p>Mais avant toutes choses, il faut pouvoir se connecter à un serveur, lui envoyer un
sélecteur, et récupérer les informations que va envoyer le serveur.
Il nous faut un langage qui
permet de créer et d’utiliser des sockets facilement. Beaucoup de langages
répondront à cette contrainte, donc en gros, choisissez celui avec lequel vous êtes le
plus à l’aise.</p>

<!-- more -->

<p>Voir l’article précédent : <a href="http://lkdjiin.github.io/blog/2018/07/21/presentation-de-gopher/">Présentation de Gopher</a></p>

<h2 id="ruby">Ruby</h2>

<p>Voyons comment faire en Ruby.</p>

<p>D’abord on crée la connexion (1). Rappelez-vous,
le protocole Gopher prévoit que le serveur n’envoie rien du tout après une
connexion réussie.</p>

<p>Ensuite (2) nous envoyons un sélecteur vide au serveur.
Ce qui correspond en quelque sorte à demander le menu principal. Le
protocole Gopher explique qu’un sélecteur doit être terminé avec les caractères
de retour à la ligne CR suivi de LF. Ce qu’on écrira <code>"\r\n"</code> dans beaucoup de
langages.</p>

<p>Puis (3) nous consommons et affichons chaque ligne de la réponse du
serveur. Le protocole Gopher nous dit que le serveur termine lui aussi ses
lignes par CR + LF. Ruby gère cette situation, avec <code>gets</code>, en supprimant les
fin de ligne, c’est pourquoi nous devons utiliser <code>puts</code> ensuite pour afficher
<code>line</code> avec un retour à la ligne.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Fichier gopher.rb</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 1</span>
</span><span class="line"><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;gopher.quux.org&#39;</span><span class="p">,</span> <span class="mi">70</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 2</span>
</span><span class="line"><span class="n">socket</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 3</span>
</span><span class="line"><span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">gets</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">line</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">socket</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lancez le programme avec <code>ruby gopher.rb</code>.</p>

<h2 id="d">D</h2>

<p>On pourra préférer un langage qui produira un binaire pour distribuer le programme plus
facilement. <em>(Ici les performances ne rentrent pas en ligne de compte.)</em> J’ai un
faible pour le langage D en ce moment, alors voici le même programme en D.
Vous le compilerez avec <code>dmd gopher.d</code> et le lancerez avec <code>./gopher</code>.</p>

<p>Ce programme D suit exactement le même principe que le programme Ruby. On
crée une connexion (1) ; on envoie un sélecteur vide (2) ; et on affiche la
réponse (3).</p>

<p>Pour ce qui est de la lecture, D est plus <em>low-level</em> que Ruby, et
on doit lire par tranche de X caractères, et non pas par lignes. Ici on lit
la réponse par tranches de 1024 caractères et les retours à la ligne ne sont
pas supprimés comme en Ruby, d’où l’utilisation de <code>write</code> et non pas <code>writeln</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="d"><span class="line"><span class="c1">// Fichier gopher.d</span>
</span><span class="line"><span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">stdio</span><span class="p">;</span>
</span><span class="line"><span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">socket</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// 1</span>
</span><span class="line">    <span class="k">auto</span> <span class="n">socket</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TcpSocket</span><span class="p">(</span><span class="k">new</span> <span class="n">InternetAddress</span><span class="p">(</span><span class="s">&quot;gopher.quux.org&quot;</span><span class="p">,</span> <span class="mi">70</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 2</span>
</span><span class="line">    <span class="n">socket</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;\r\n&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kt">char</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class="line">    <span class="n">ptrdiff_t</span> <span class="n">amountRead</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 3</span>
</span><span class="line">    <span class="k">while</span><span class="p">((</span><span class="n">amountRead</span> <span class="p">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">receive</span><span class="p">(</span><span class="n">buffer</span><span class="p">))</span> <span class="p">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">write</span><span class="p">(</span><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span> <span class="p">..</span> <span class="n">amountRead</span><span class="p">]);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">socket</span><span class="p">.</span><span class="n">close</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="un-point-sur-le-point">Un point sur le point</h2>

<p>Comme beaucoup de protocoles de la même époque et avant lui, Gopher indique
qu’une réponse du serveur doit se terminer par un point (le caractère <code>.</code>)
isolé sur une ligne. Dans les faits, très peu de serveurs se complique la
vie avec ça.</p>

<p>N’hésitez pas à poster dans un commentaire ce petit programme traduit dans votre
langage favori. À bientôt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Présentation de Gopher]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/07/21/presentation-de-gopher/"/>
    <updated>2018-07-21T09:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/07/21/presentation-de-gopher</id>
    <content type="html"><![CDATA[<p>En 1997, ma maigre connexion internet était facturée chèrement à la seconde.
J’utilisai encore beaucoup Gopher qui était plus rapide que le web pour
chercher des documents purement textuels. À cette époque je ne m’intéressais
pas au fonctionnement de Gopher, je voulais seulement que ça aille vite.  21
ans après, alors que je redécouvre cette partie d’internet que j’avais oublié,
je vais prendre le temps de voir comment Gopher fonctionne.</p>

<!-- more -->

<ul>
  <li>Présentation de Gopher</li>
  <li><a href="http://lkdjiin.github.io/blog/2018/07/27/gopher-recuperer-le-menu-principal/">Gopher : Récupérer le menu principal</a></li>
</ul>

<p>Le protocole Gopher est très simple <em>“by design”</em>. D’abord un client contacte
un serveur, qui ne répond rien. Puis le client envoie l’identifiant d’une
ressource au serveur (un <em>selecteur</em> dans le jargon Gopher), qui envoie en
réponse le document ou le menu correspondant et ferme la connexion.
Et c’est presque tout. Un document est un fichier quelconque et un menu est un
fichier texte avec une structure minimale, voir même minimaliste.</p>

<p>Pour explorer Gopher, nous pourrions utiliser un client texte (<code>apt-get install
gopher</code>), ou un plugin pour notre navigateur. Mais pour voir un peu ce qu’il se
passe sous le capot, utilisons plutôt l’utilitaire <code>netcat</code> pour simuler un
client. Gopher écoute le port 70 par défaut :</p>

<pre><code>$ netcat gopher.quux.org 70
</code></pre>

<p>À ce moment la connexion est établie et le serveur attend que vous lui envoyiez
un sélecteur. Appuyez directement sur la touche Entrée pour envoyer un
sélecteur vide, ce qui a pour effet de selectionner le dossier courant sur le
serveur distant. Le serveur répond immédiatement avec quelques lignes
représentant un menu. En voici une sélection (j’ai remplacé les tabulations par
des <code>|</code>) :</p>

<pre><code>0About This Server|/About This Server.txt|gopher.quux.org|70
1Archives|/Archives|gopher.quux.org|70
</code></pre>

<p>Chaque ligne contient 5 zones séparées par une tabulation, à l’exception des
deux premières zones qui sont accollées :</p>

<ol>
  <li>Le type de document. Un 0 pour un document texte, un 1 pour un dossier. Il existe plusieurs autres types.</li>
  <li>La description du document. C’est une sorte de titre. Par exemple <code>About This Server</code>.</li>
  <li>Le sélecteur, qui identifie une ressource sur un serveur. Par exemple <code>/About This Server.txt</code>.</li>
  <li>L’adresse du serveur où se trouve la ressource.</li>
  <li>Le port utilisé par Gopher sur le serveur de la ressource.</li>
</ol>

<p>On voit à cette description que Gopher est une espèce de système de fichier distribué.</p>

<p>Pour suivre un lien du menu, on ouvre une nouvelle connexion :</p>

<pre><code>$ netcat gopher.quux.org 70
</code></pre>

<p>Et cette fois on envoie un sélecteur :</p>

<pre><code>/About This Server.txt
</code></pre>

<p>Le serveur envoie le document correspondant au sélecteur avant de fermer la connexion :</p>

<pre><code>Welcome to the gopher server at quux.org!

This is one of the world's few maintained, modern gopher servers.  On it,
you will find a huge collection of information, files, software, archives,
[...]
</code></pre>

<p>Les menus sont donc tout simplement des hyper-liens, comme dans le web. La
grande différence, c’est que dans le web les hyper-liens sont internes aux
documents, ce qui nécessite un langage (le HTML) pour écrire ces documents.
Alors qu’avec Gopher les liens sont externes aux documents, dans des menus ;
ils peuvent donc être dans n’importe quel format et écrit par n’importe qui, en
théorie.</p>

<p>Connaissiez vous Gopher ? L’avez vous déjà utilisé ? L’utiliser vous encore ?</p>

<p>À bientôt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lister un dossier tout en nettoyant l'écran]]></title>
    <link href="http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran/"/>
    <updated>2018-02-14T10:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran</id>
    <content type="html"><![CDATA[<p>Deux ou trois fois dans l’année j’analyse mon usage du clavier pour tenter
d’augmenter mon confort quotidien. Lisez : Je regarde de près ce que je
tape pour faire en sorte de taper toujours moins.</p>

<p>J’ai remarqué récemment que j’aimais de plus en plus avoir un écran vide avant
d’entreprendre une série de commande. Pour effacer l’écran, on utilise la commande
<code>clear</code> ou son raccourci <code>Ctrl+L</code>. Et depuis quelques temps je me suis habitué
à systématiquement vider l’écran avant de lister le contenu d’un répertoire.
Autrement dit je répète très souvent la séquence de touche suivante :</p>

<center><b>Ctrl + l + l + s + Enter</b></center>

<p>Soit 5 touches.</p>

<p>Donc, beaucoup trop.</p>

<!-- more -->

<h2 id="alias-s">Alias S</h2>

<p>Un petit alias sera la solution pour prendre soin de mes poignets fragiles ;)
Je vais utiliser la lettre <code>s</code> parce que sa touche tombe particulièrement bien
sous mes doigts.</p>

<center><b>s + Enter</b></center>

<p>Soit 2 touches.</p>

<p>Donc, je suis content :)</p>

<h2 id="bash">Bash</h2>

<p>Avec Bash, que j’utilise essentiellement sur serveurs distants, voici comment
procéder :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">alias </span><span class="nv">s</span><span class="o">=</span><span class="s1">&#39;clear;ls&#39;</span> <span class="c"># List directory on a clean screen</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je place mes alias Bash dans un fichier <code>~/.bash_aliases</code> que j’inclus depuis
le fichier <code>~/.bashrc</code> comme ceci :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Alias definitions.</span>
</span><span class="line"><span class="c"># You may want to put all your additions into a separate file like</span>
</span><span class="line"><span class="c"># ~/.bash_aliases, instead of adding them here directly.</span>
</span><span class="line"><span class="c"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -f ~/.bash_aliases <span class="o">]</span>; <span class="k">then</span>
</span><span class="line">    . ~/.bash_aliases
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="fish">Fish</h2>

<p>Avec Fish, que j’utilise sur mes machines perso, c’est un peu différent. Fish
n’a pas de commande <code>alias</code>, il suffit d’écrire une fonction au bon endroit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Fichier ~/.config/fish/functions/s.fish</span>
</span><span class="line"><span class="k">function </span>s --description <span class="s1">&#39;List directory on a clean, cleared screen&#39;</span>
</span><span class="line">  	clear
</span><span class="line">    ls
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Je ne sais pas si je vais beaucoup me servir de cette commande <code>s</code>.
J’ai toujours eu du mal à m’habituer aux commandes d’une seule lettre, je sais
pas pourquoi. On verra bien…</p>

<p>Si vous avez des astuces dans le même genre, faites moi en part dans un
commentaire, ça pourrait servir ;)</p>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish/">Changer de shell, de Bash à Fish</a></li><li><a href="http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois/">Fish : complétion puis exécution en une seule fois</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh/">De meilleurs alias avec zsh</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fish : complétion puis exécution en une seule fois]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois/"/>
    <updated>2017-02-28T14:46:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois</id>
    <content type="html"><![CDATA[<p>Voici une astuce pour le <a href="https://fishshell.com/">shell Fish</a>, qui vous
permettra de compléter une commande et de la lancer en même temps.</p>

<h2 id="comportement-par-dfaut--compltion-puis-excution">Comportement par défaut : complétion puis exécution</h2>

<p>Fish propose une complétion automatique au fur et à mesure que vous saisissez
une commande. Dans la capture d’écran qui suit, la partie en grisée n’a pas
été saisie, elle est seulement proposée par Fish.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/fish-shell-before-completion.png" /></p>

<!-- more -->

<p>Pour accepter la complétion proposée il faut utiliser le raccourci clavier <code>Ctrl+F</code>.
Le curseur se déplace à la fin de la ligne.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/fish-shell-after-completion.png" /></p>

<p>On peut alors appuyer sur la touche <code>Entrée</code> pour exécuter la commande.</p>

<h2 id="et-maintenant-tout-en-un-seul-raccourci">Et maintenant tout en un seul raccourci</h2>

<p>La complétion automatique de Fish est vraiment très bonne. Mais ce comportement
en deux temps, <code>Ctrl+F</code> suivi de <code>Entrée</code>, m’a rapidement exaspéré. J’ai
donc voulu le réduire à un seul raccourci : <code>Ctrl+G</code>. Vous pouvez bien sûr choisir celui
qui vous plaira le plus (j’ai choisi <code>G</code> parce que ça me fait penser à <strong>Go !</strong>).</p>

<p>Il vous faut créer une fonction <code>fish_user_key_bindings</code>, ou bien lui ajouter le
code suivant si elle existe déjà. Placez là dans le fichier
<code>~/.config/fish/functions/fish_user_key_bindings.fish</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function fish_user_key_bindings
</span><span class="line">
</span><span class="line">    # Ctrl+g (Go!). Like Ctrl+f Enter in one go.
</span><span class="line">    bind \cg accept-autosuggestion execute
</span><span class="line">
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà, ça n’est qu’une ligne de code mais je ne pourrais plus m’en passer.</p>

<p>Si vous aussi vous avez une astuce sur Fish, n’hésitez pas à la partager dans
un commentaire, et merci d’avance.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran/">Lister un dossier tout en nettoyant l&#8217;écran</a></li><li><a href="http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish/">Changer de shell, de Bash à Fish</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh/">De meilleurs alias avec zsh</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure, tests et couleurs]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/02/26/clojure-tests-et-couleurs/"/>
    <updated>2017-02-26T10:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/02/26/clojure-tests-et-couleurs</id>
    <content type="html"><![CDATA[<p>En ce moment je regarde le langage Clojure de plus près.  J’utilise Leiningen
pour gérer les projets, et je voudrais maintenant utiliser la technique du
<em>Test Driven Development</em> pour faire quelques projets.</p>

<p><strong>Problème</strong> : la sortie de <code>lein test</code> n’est pas en couleur. Quand on fait du TDD
avoir une sortie rouge en cas d’échec et verte en cas de succès est vraiment
confortable, ça évite d’avoir à lire. (<em>Notez que Fish m’indique indirectement
l’échec en colorant le <code>$</code> de mon prompt en rouge. C’est déjà ça, mais j’en
voudrais un peu plus.</em>)</p>

<p>J’ai donc cherché et trouvé <a href="https://github.com/venantius/ultra">Ultra</a>, un
plugin pour Leiningen. Il fait bien le boulot, et même plus.</p>

<p><strong>Nouveau problème</strong> : Je passe de 3 secondes d’attente sans le plugin à 7 secondes
avec le plugin. Ce qui a évidemment tendance à <em>casser</em> le flot du TDD, pour le dire
gentiment.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ time lein test
</span><span class="line">#...
</span><span class="line">Ran 1 tests containing 1 assertions.
</span><span class="line">#...
</span><span class="line">
</span><span class="line">#=&gt; Sans couleurs 2.76 secondes
</span><span class="line">#=&gt; Avec couleurs 6.81 secondes</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>D’où ma question pour ceux/celles qui savent : avez vous une solution pour avoir
une sortie couleur des tests <em>et à la fois</em> un temps de réponse acceptable ?</strong></p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/">Comment écrire un framework de test pour Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/29/coco-version-0-dot-13-dot-0/">Coco version 0.13.0</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/">Comportement inattendu de Rspec</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oui la documentation est utile]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/01/25/oui-la-documentation-est-utile/"/>
    <updated>2017-01-25T11:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/01/25/oui-la-documentation-est-utile</id>
    <content type="html"><![CDATA[<p>J’ai lu récemment un article de blog intitulé
<a href="https://blog.nathanaelcherrier.com/2017/01/11/les-meilleurs-commentaires-ne-secrivent-pas/">Les meilleurs commentaires ne s’écrivent pas</a>.
Le titre est bon. Le sujet est intéressant. Les
intentions de l’auteur sont louables.</p>

<p>Malgré cela, cet article m’a laissé perplexe. Je pense que l’auteur se méprend.
Et comme le sujet m’est important et qu’on ne peut pas laisser de commentaires
sur son blog, j’ai eu envie d’écrire un article pour lui répondre.</p>

<p>Je reprendrai les même titres de partie que l’article original pour vous
permettre de vous repérer plus facilement si besoin.</p>

<!-- more -->

<h2 id="self-documenting-code">Self Documenting Code</h2>

<p>L’article commence par comparer deux bouts de code qui ont le même objectif. Le
premier est mauvais, avec un commentaire nécessaire pour expliquer l’objectif.
Le second est meilleur, et se passe donc d’un commentaire.</p>

<p><em>code 1</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// Get the extension off the image filename</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">imageName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">extension</span> <span class="o">=</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>code 2</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">let</span> <span class="nx">extension</span> <span class="o">=</span> <span class="nx">getFileExtension</span><span class="p">(</span><span class="nx">imageName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je suis entièrement d’accord avec la conclusion de cette première partie de
l’article :</p>

<blockquote>
  <p>Le nom d’une fonction est déjà censé répondre à la question de ce que fait
une portion de code. Pourquoi ne pas utiliser cette possibilité ?</p>
</blockquote>

<p>Oui le nommage des fonctions/variables/classes/toussa est très important. À tel
point que je pense que c’est une des premières compétences à acquérir pour un/e
débutant/e.</p>

<p>Bref, jusqu’ici je suis entièrement d’accord. C’est après que ça se gâte.</p>

<h2 id="trop-de-commentaires-touffe-le-code">Trop de commentaires étouffe le code</h2>

<p>Dans cette partie de l’article l’auteur prend le code suivant comme exemple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Get the extension of the file</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * @param {string} filename - The filename</span>
</span><span class="line"><span class="cm"> * @return {string} the extension of the file  </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">getFileExtension</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">let</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dès le début de cette seconde partie,
un truc me gène beaucoup : l’auteur continue d’appeler ça du
«commentaire» alors qu’il s’agit de «documentation». Certain(e)s diront que je
pinaille, mais pour moi il s’agit d’une différence très importante. Voyons ce
qu’en pense le Larousse par exemple:</p>

<p><strong>Commentaire</strong>: <em>Exposé par lequel on explique, on interprète, on juge un
texte ; notes et éclaircissements destinés à faciliter l’intelligence d’un
texte.</em></p>

<p><strong>Documentation</strong>: <em>Ensemble de documents fournis avec un appareil, un jeu, un
programme informatique, etc., et donnant des renseignements sur leur structure,
leur fonctionnement, leur utilisation, etc.</em></p>

<p>Un commentaire sert donc à faciliter la compréhension d’un texte (pour nous un
bout de code informatique), alors qu’une documentation explique comment ça
marche. Peu importe si on pense que ces définitions ne s’appliquent pas
parfaitement à notre métier, ce qui compte c’est de comprendre que leurs
objectifs sont différents.</p>

<p>J’ai gardé ce sentiment dérangeant jusqu’au bout de l’article, qui entretient un flou
artistique autour du duo commentaire/documentation.</p>

<p>L’auteur se plaint ensuite que, dans un projet en cours:</p>

<blockquote>
  <p>[…] la plupart des commentaires écrits sont des commentaires qui n’existent
que pour passer les tests. Ils sont redondants &amp; inutiles.</p>
</blockquote>

<p>En voyant le code donné plus haut en exemple, on peut comprendre sa position.
<em>Je</em> peux aisément comprendre. Mais la plainte ne me semble pas clairement formulée. Qui est
responsable, selon l’auteur ? L’outil ?
Des collègues qui ne jouent pas le jeu ?
Le management qui impose un process trop strict ?
Ça m’intéresserais beaucoup de connaître le sentiment de l’auteur à ce sujet,
car j’ai l’impression que l’article blâme la documentation alors que le
problème est ailleurs.</p>

<p>L’article continue ainsi:</p>

<blockquote>
  <p>Dites moi qu’il y a une information dans ce commentaire que vous n’aviez pas
en lisant le code !</p>
</blockquote>

<p>Oui je le dis ;) J’en ai une. Et même deux ! Une première sur les types, ce qui
est toujours bon à prendre avec un langage dynamique. Je vois que ça
fonctionne avec une chaîne de caractère, et pas avec un objet File ou Path ou
autre chose encore qui aurait du sens dans mon langage, dans mon framework, etc.
Et j’ai une
seconde information sur l’importance relative de cette méthode : si elle mérite une telle
documentation c’est sûrement qu’elle est destinée à être utilisée par d’autres
objets appartenant à d’autres classes. Autrement dit elle est publique et son
usage n’est pas réservé à une utilisation interne.</p>

<p>Il faut bien avouer que l’exemple donné est assez déprimant. Comme l’auteur le
souligne il y a une certaine redondance, c’est le moins qu’on puisse dire.
Si je devais écrire ce genre de choses
toute la journée j’aurai vite besoin de vacances. Et je comprends que ça le rende
marteau, et qu’il ne puisse plus voir ce genre particulier de documentation en peinture.</p>

<p>Mais ce qui me dérange ici, c’est que ça à tout l’air d’un exemple factice.
Ce code n’est pas destiné à aller en production. Par exemple, il se passe quoi
si le nom du fichier est <code>.bashrc</code>, ou <code>foobar</code> ? Bin ça marche pas.
Tirer une conclusion générale d’un exemple factice, c’est pour le moins
hasardeux.</p>

<p>Surtout que même en l’état actuel de la fonction, cette documentation
pourrait être largement améliorée. J’ai pris la liberté de modifier le
style pour un que je trouve plus léger, mais l’important est dans la
reformulation, pas dans le style.  Je me suis inspiré des documentations de
méthodes similaires trouvées dans d’autres langages:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// Get the extension (the portion of filename starting from the last period).</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// filename - The filename (as a string) to retrieve the extension of.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// Returns the extension of the file as a string. Or the filename itself</span>
</span><span class="line"><span class="c1">// if it has no dots. Or the filename without the dot if it starts with </span>
</span><span class="line"><span class="c1">// a dot and don&#39;t have another one.</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">getFileExtension</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">let</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bon d’accord, je me suis un peu amusé à la fin. Mais
on voit qu’il y a de quoi dire. Il y a moins de redondance. Et on a bien
plus d’informations, sans avoir besoin d’aller les extraire du code.</p>

<p>L’auteur conclu cette partie en disant qu’on fini par ne plus voir les
commentaires (<em>je rappelle qu’on parle en fait de documentation</em>) dans les projets
où il y en a de trop. Mais je ne pense pas que ça soit un problème, bien au
contraire. Je dirais même qu’avec une bonne coloration syntaxique, la documentation est
encore moins <em>présente</em>, je peux l’oublier encore plus facilement. <strong>Et c’est très bien ainsi.</strong>
La documentation est très utile, mais seulement de temps en temps. Dans ces
moments là, elle permet de gagner un temps précieux. Le reste du temps, elle doit
savoir se faire oublier. Et si j’en ai envie, mon éditeur de texte, ou mon IDE,
doit même pouvoir la faire disparaitre et réapparaitre à ma guise.</p>

<h2 id="la-couverture-par-la-documentation">La couverture par la documentation</h2>

<p>L’article évoque ensuite des outils qui calculent le taux de couverture de la documentation.
Et comme quoi la course aux 100% est problématique.</p>

<p>C’est un tout autre débat, qui mériterait au moins un second article en réponse ;)
Mais qu’on soit d’accord ou pas, là, on blâme clairement l’outil plutôt que l’utilisateur.</p>

<p>Plus loin l’auteur poursuit :</p>

<blockquote>
  <p>pour la documentation un haut taux de couverture est contre-productif et étouffe le code</p>
</blockquote>

<p>???</p>

<p><em>Contre productif</em> ? Permettre aux utilisateurs de votre code, ou à vous même dans
1 an, dans 3 ans, de comprendre le code en un claquement de doigt serait
<em>contre productif</em> ? On écrit le code (et sa documentation) <strong>une fois</strong>, et on les
lit <strong>des dizaines de fois</strong>. Et ça serait <em>contre productif</em> de faciliter cette
lecture ?</p>

<p><em>Étouffe le code</em> ? L’auteur nous a expliqué dans la partie précédente qu’il ne
les voyait plus, ces commentaires/documentation, qu’ils devenaient invisibles
pour lui. Je ne comprend pas comment ça peut-être à la fois invisible et étouffant.
 Mais dans tout les cas, même si je rate quelque chose et au risque de me répéter :
votre éditeur/IDE doit être capable de masquer la documentation si celle-ci vous
gène, sinon il faut changer d’éditeur.</p>

<blockquote>
  <p>Là où le code est propre le commentaire ne sera qu’une redondance sans grand intérêt</p>
</blockquote>

<p>J’ai démontré le contraire.</p>

<blockquote>
  <p>Là où le code est sale le développeur pourra utiliser le commentaire comme une
excuse pour laisser le code sale</p>
</blockquote>

<p>Mais WHAT ?</p>

<p>D’après ce que j’ai saisi, l’auteur travaille au sein d’une équipe. Et l’équipe
fait des <em>code reviews</em>, non ? Si oui, c’est de la responsabilité de <em>l’équipe</em>
de ne pas laisser passer de code sale. Ça n’est en rien la faute de la documentation, ou d’un commentaire,
ou d’un outil quelconque.
Si non, et bien comment dire, c’est juste que j’arrive pas à imaginer un endroit où on ne fait
pas de <em>code review</em>. Je sais que ça existe, j’ai même du y bosser, mais je ne me
souviens plus comment c’est. Plus sérieusement, si il n’y a pas de <em>code review</em> c’est pas
d’écrire ou non de la doc qui va changer grand chose à la <em>propreté</em> du code.
Et dans ce cas la responsabilité irait à l’auteur du code, pas à la documentation.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/05/03/trois-centieme-article-aujourdhui-slash/">Trois-centième article aujourd&#8217;hui !</a></li><li><a href="http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby/">Un badge pour la documentation pour vos projets Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/">Aidez-vous : traduisez !</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour sur le MOOC Programmer en C]]></title>
    <link href="http://lkdjiin.github.io/blog/2017/01/20/retour-sur-le-mooc-programmer-en-c/"/>
    <updated>2017-01-20T14:20:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2017/01/20/retour-sur-le-mooc-programmer-en-c</id>
    <content type="html"><![CDATA[<p>Je me suis retrouvé dans ce MOOC pour débutant en C par hasard
(<a href="https://www.fun-mooc.fr/courses/MinesTelecom/04020S02/session02/about">Programmer en C</a>).
 Je pensais au
départ qu’il serait d’un niveau plus élévé. Malgré tout je suis resté car j’ai
été surpris par les outils mis en place par l’équipe. On sent que
ce MOOC a été très bien préparé, ça a bossé dur. Et c’est vraiment réussi.</p>

<!-- more -->

<p>Deux outils m’ont marqué : WebLINUX et le Codecast.</p>

<h2 id="weblinux">WebLINUX</h2>

<p>C’est un Linux dans le navigateur. Vous pouvez tester ça ici :
https://remisharrock.github.io/sysbuild/#/VM</p>

<p>Ceux qui me connaissent savent ce que je pense du «tout dans le navigateur»
(beaucoup de mal) mais j’ai le sentiment que dans ce cas c’est une bonne chose.
Plusieurs personnes n’auraientt peut-être pas utilisé d’outils plus lourds
parce que trop intimidant quand on débute. Là, du coup, il y a zéro
installation, tu ouvres une page web et tu as un Linux qui fonctionne (enfin la
plupart du temps, y a encore pas mal de ratés).</p>

<h2 id="codecast">Codecast</h2>

<p>Cet outil (là encore dans le navigateur) mélange vidéo, éditeur de code,
compilateur, entrée standard, sortie standard, débuggeur, visualisation de la
mémoire. Tu peux mettre la vidéo en pause et modifier le code. C’est très
intéressant et très prometteur comme outil d’apprentissage.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Pour pinailler (parce que j’aime bien) je dirais que l’énergie passée à
développer WebLINUX et Codecast aurait pu être utilisée différement. À faire
plusieurs semaines de cours en plus, à corriger les petits couacs (inévitables)
dans certaines vidéos, etc. Parce que au final, une VM sous Ubuntu (ou
n’importe quel Linux d’ailleurs) et quelques séances bien dirigées dans un
débugger auraient pu faire l’affaire. Mais c’est vraiment pour pinailler.</p>

<p>Malgré ce que je viens de dire juste avant, si vous programmez un peu et que
vous souhaitez apprendre le langage C, allez y les yeux fermés. Vous trouverez
difficilement mieux pour débuter en C.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour du MOOC Designer dans un fablab]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/12/20/retour-du-mooc-designer-dans-un-fablab/"/>
    <updated>2016-12-20T16:25:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/12/20/retour-du-mooc-designer-dans-un-fablab</id>
    <content type="html"><![CDATA[<p>L’idée est excellente. Et originale. Je n’ai trouvé ça nulle part ailleurs.
Le potentiel est indéniable.</p>

<p>Le résultat est d’autant plus décevant. Ça aurait pu être un MOOC fabuleux
dont on se souvient pendant des années, à l’instar de
<a href="https://www.edx.org/course/electronic-interfaces-bridging-physical-uc-berkeleyx-ee40lx-0">BerkeleyX: EE40LX Electronic Interfaces</a>
ou de
<a href="https://www.coursera.org/learn/build-a-computer">Build a Modern Computer from First Principles: From Nand to Tetris</a>.
C’est finalement un MOOC baclé.</p>

<!-- more -->

<p>Le sujet avait de quoi m’intérésser : conception 2D et 3D, utilisation de
fraiseuse numérique, découpeuse laser et imprimante 3D. Malheureusement le
contenu pédagogique est quasi inexistant. Vous voulez faire de la 2D ? Regardez
notre unique vidéo sur Inkscape dans laquelle nous vous montrons, en accéléré, sans
expliquer quoi que ce soit, comment utiliser 2 ou 3 outils.
Vous voulez faire de la 3D ? Pareil, mais en plus court.
Vous voulez imprimer en 3D ou utiliser une découpeuse ? Regardez donc ces
quelques vidéos réalisées par d’autres et disponibles sur youtube depuis des
années.</p>

<p>Ce MOOC est la suite de 
<a href="https://www.fun-mooc.fr/courses/MinesTelecom/04018S02/session02/about">Fabriquer un objet connecté</a>
en pire. J’ai suivi <em>Fabriquer un objet connecté</em> qui lui aussi partait d’une
excellente et originale idée. Lui aussi était une première session. On sentait
que les types en voulaient vraiment, qu’ils avaient envie de bien faire et
qu’ils faisaient ce qu’ils pouvaient. Ça n’était pas abouti (par manque de
moyens ou de temps ?) et on restait sur sa faim. Mais on pardonnait aisément
parceque c’était une première édition et qu’on sentait vraiment la volonté de
bien faire (je me répète).  Dans cette suite on a l’impression qu’ils n’en
peuvent plus et qu’ils l’on fait parce qu’il fallait le faire, pour s’en
débarasser le plus vite possible.</p>

<h2 id="conclusion">Conclusion</h2>

<p>J’espère de tout coeur qu’il y aura une seconde édition dans
laquelle les auteurs auront retravaillé leur sujet. Parce que ça le mérite.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changer de shell, de Bash à Fish]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish/"/>
    <updated>2016-12-13T19:34:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/12/13/changer-de-shell-de-bash-a-fish</id>
    <content type="html"><![CDATA[<p>J’avais remarqué le shell Fish il y a plusieurs années. Mais l’accroche de son
site web m’avais plutôt fait penser à une blague :</p>

<blockquote>
  <p>Finally, a command line shell for the 90s</p>
</blockquote>

<p>Heureusement pour moi, j’y suis repassé il y a quelques mois. Et cette fois
j’ai compris que c’était du sérieux. Je me suis promis de revenir dès que
possible pour essayer ce shell.</p>

<p>On est le week end. J’ai quelques heures devant moi. C’est parti pour
un test. Et comme directement c’est l’effet WAO, je me dis que je
vais y aller <em>à la dure</em>, en l’installant sur l’ordinateur du boulot.</p>

<p>Voici mes premières impressions après deux jours d’utilisation.</p>

<!-- more -->

<h2 id="auto-compltion">Auto complétion</h2>

<p>La première chose qui me saute aux yeux, c’est l’auto complétion, qui va de pair
avec les suggestions faites par le shell.</p>

<p>L’auto complétion par la touche TAB semble bien plus performante qu’en Bash. Un
coup d’œil dans la doc me dit qu’il sera aussi plus simple de fournir les
auto complétions pour mes propres programmes.</p>

<p>Ensuite, des suggestions apparaissent au fur et à mesure que l’on entre des
caractères et c’est puissant. Ça n’existe tout simplement pas dans Bash. Ctrl+F
permet d’accepter toute la ligne, alors que Alt+F accepte un seul mot.</p>

<h2 id="coloration-syntaxique">Coloration syntaxique</h2>

<p>Fish colore votre ligne de commande en temps réel. Y a pas à dire, ça change de
Bash. Et c’est utile : une commande inconnue ou mal orthographiée apparait en
rouge, on repère une variable au milieu d’une chaîne de caractères, etc.</p>

<h2 id="retrouver-les-anciennes-commandes">Retrouver les anciennes commandes</h2>

<p>Avec Bash, j’ai une configuration qui me permet de taper les premières lettres
d’une commande, et de faire défiler (avec les touches fléchées) toutes les
commandes historiques qui commencent par ces quelques lettres.</p>

<p>Avec Fish, pas besoin de configurer quoi que ce soit. Ça existe d’emblée, mais
en plus puissant.</p>

<h2 id="raccourcis-clavier">Raccourcis clavier</h2>

<p>Pour l’instant je ne retrouve pas tous mes raccourcis (ou astuces).
<del>Par exemple avec Bash <code>Esc+.</code> affiche l’argument de la dernière commande. Ça
me manque avec Fish.</del> (Edit: à partir de la version 2.3 <code>Esc+.</code> fonctionne)
Mais comme un principe de Fish est «<em>on peut faire tous ce que peuvent faire
les autres shells</em>», j’attends de voir.</p>

<h2 id="ruby"> Ruby</h2>

<p>J’utilise <code>chruby</code> depuis un certain temps comme <em>version manager</em> et j’ai eu
une petite frayeur en constatant que plus rien ne fonctionnait avec Fish.
Pour mon premier jour sous Fish au boulot, ça a donc été mitigé, même si j’utilise
moins Ruby ces temps ci. Je repassais sous Bash quand il fallait faire du Ruby.</p>

<p>Dans l’après midi je me suis décidé à chercher, et j’ai trouvé ça:
<a href="https://github.com/JeanMertz/chruby-fish">chruby-fish</a>. Sans ce projet j’aurais
certainement cesser là mon utilisation de Fish. Donc un grand merci à son
créateur.</p>

<p>Ça fait très bien le boulot, avec un petit bug tout de même:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ chruby 2.3.1
</span><span class="line">mkdir: cannot create directory ‘/opt/rubies/ruby-2.3.1/lib/ruby/gems/2.3.0/bin’: Permission denied</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour chaque version de Ruby, il faudra donc créer ce dossier à la main:</p>

<pre><code>sudo mkdir /opt/rubies/ruby-2.3.1/lib/ruby/gems/2.3.0/bin
</code></pre>

<h2 id="prompt-thmes">Prompt, thèmes</h2>

<p>Je ne vais pas m’étendre sur le sujet, y a tout ce qu’il faut pour
personnaliser son terminal à grands coups de variables et de fonctions.</p>

<h2 id="alias-et-fonctions">Alias et fonctions</h2>

<p>Un truc qui m’a fort surpris au tout début : Fish n’a pas d’alias, il faut
utiliser des fonctions à la place. À la fin du deuxième jour d’utilisation
c’était adopté et validé. Voici un classique pour l’exemple, je veux pouvoir
taper <code>la</code> à la place de <code>ls -A</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function la --description 'Like ls with hidden file'
</span><span class="line">    ls -A $argv
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Un excellent point à propos des fonctions dans Fish : elles sont chargées
<em>paresseusement</em>. C’est à dire qu’une fonction est chargée automatiquement la
première fois qu’on l’utilise.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Le truc avec Fish, c’est que <em>ça juste marche</em> ™. Avec Bash, il faut des
années de configuration pour obtenir quelque chose de valable. Avec Fish, ton
premier fichier de configuration est vide, inexistant, parce que pas besoin. Et
pourtant ça fonctionne, tout simplement.</p>

<p>Maintenant ça ne fait que deux jours que je suis dessus… C’est le début, tout
est beau. Je verrai à l’usage.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2018/02/14/lister-un-dossier-tout-en-nettoyant-lecran/">Lister un dossier tout en nettoyant l&#8217;écran</a></li><li><a href="http://lkdjiin.github.io/blog/2017/02/28/fish-completion-puis-execution-en-une-seule-fois/">Fish : complétion puis exécution en une seule fois</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/06/utiliser-bash-pour-supprimer-les-encodages-magiques-de-ruby-1-dot-9/">Utiliser Bash pour supprimer les encodages magiques de Ruby 1.9</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug de la version graphique de Vim sur Debian Sid]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/11/11/bug-de-la-version-graphique-de-vim-sur-debian-sid/"/>
    <updated>2016-11-11T09:46:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/11/11/bug-de-la-version-graphique-de-vim-sur-debian-sid</id>
    <content type="html"><![CDATA[<p>Depuis une mise à jour récente de la bibliothèque gtk3 un
bug affecte la version graphique de Vim (<code>gvim</code>) sur Debian Sid. Ce bug est
important puisqu’il rend <code>gvim</code> tout simplement inutilisable. Lorsqu’on lance
le programme on obtient le message suivant, qui se répète plusieurs fois :</p>

<pre><code>$ gvim

(gvim:6054): Gtk-CRITICAL **: gtk_widget_set_size_request: assertion 'width &gt;= -1' failed
*** BUG ***
In pixman_region32_init_rect: Invalid rectangle passed
Set a breakpoint on '_pixman_log_error' to debug
.
.
.
</code></pre>

<p>Des discussions sont en cours pour savoir si le bug est de la responsabilité
de Vim ou de Gtk3, mais en attendant on fait quoi ?</p>

<!-- more -->

<p>On peut d’abord regarder où est placée la commande <code>gvim</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>which gvim
</span><span class="line">/usr/bin/gvim
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut maintenant regarder quel programme est en réalité appelé par cette
commande (j’ai tronqué la sortie pour laisser seulement ce qui est
intéressant).  On voit que <code>gvim</code> est un lien symbolique qui pointe sur
<code>/etc/alternatives/gvim</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls -l /usr/bin/gvim
</span><span class="line"><span class="o">[</span>...<span class="o">]</span> /usr/bin/gvim -&gt; /etc/alternatives/gvim*
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Allons voir sur quel programme est <em>branché</em> l’alternative :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls -l /etc/alternatives/gvim
</span><span class="line"><span class="o">[</span>...<span class="o">]</span> /etc/alternatives/gvim -&gt; /usr/bin/vim.gtk3*
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fait sens. Regardons quelles <em>versions</em> de vim sont disponibles en tapant
<code>vim</code> + tab :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vim
</span><span class="line">vim        vim.basic  vimdiff    vim.gtk    vim.gtk3   vim.tiny   vimtutor
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’ancienne version (<code>vim.gtk</code>) m’intéresse. Si vous ne l’avez pas/plus, vous
pouvez l’installer avec <code>apt-get install vim-gtk</code>.</p>

<h2 id="solution-n1">Solution n°1</h2>

<p>Un tour dans l’aide de <code>vim.gtk</code> montrera qu’on peut le lancer avec l’option <code>-g</code>
pour avoir l’interface graphique. En attendant que le bug soit réparé on peut
donc utiliser <code>vim.gtk -g</code> à la place de <code>gvim</code>.</p>

<h2 id="solution-n2">Solution n°2</h2>

<p>Le programme <code>update-alternatives</code> permet de gérer ce genre de problème
facilement. Utilisez le pour choisir ce que lancera la commande <code>gvim</code> :</p>

<pre><code>$ sudo update-alternatives --config gvim
[sudo] Mot de passe de xavier : 
Il existe 2 choix pour l'alternative gvim (qui fournit /usr/bin/gvim).

  Sélection   Chemin             Priorité  État
------------------------------------------------------------
* 0            /usr/bin/vim.gtk3   50        mode automatique
  1            /usr/bin/vim.gtk    50        mode manuel
  2            /usr/bin/vim.gtk3   50        mode manuel

Appuyez sur &lt;Entrée&gt; pour conserver la valeur par défaut[*] ou choisissez le numéro sélectionné :1
</code></pre>

<p>Vous pourriez préférer la version graphique <code>galternatives</code>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/02/vim-pourquoi-les-touches-hjkl/">Vim : Pourquoi les touches HJKL ?</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/28/un-nouveau-depot-pour-les-plugins-vim/">Un nouveau dépot pour les plugins Vim</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/08/trois-bibliotheques-de-fonctions-pour-ecrire-vos-plugins-vim/">Trois bibliothèques de fonctions pour écrire vos plugins Vim</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un framework de test pour Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/"/>
    <updated>2016-11-02T09:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby</id>
    <content type="html"><![CDATA[<p>Si vous souhaitez comprendre le fonctionnement d’un framework de test, si vous
voulez écrire votre propre framework et que vous ressentiez le besoin d’un coup
de pouce, cet article est fait pour vous. Nous verrons étape par étape comment écrire
une telle chose. Le framework que nous réaliserons tiendra en quelques dizaines de
lignes de Ruby et pourra être utilisé comme une base pour vos futures
réalisations.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/colorful-test-tubes.jpg" /></p>

<!-- more -->

<h2 id="par-o-commencer-">Par où commencer ?</h2>

<p>Pour ce genre de problématique, je trouve qu’il est plus simple de partir d’un
exemple concret du <strong>langage</strong>, de l’<strong>API</strong>, que l’on souhaite obtenir. Dans notre
cas, nous pouvons déjà écrire quelques tests même si nous ne pouvons pas encore
les faire tourner.</p>

<p>Voici 3 tests pour une classe Rover. Classe qui aura une position x,y et une
direction :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb final.</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_given_direction</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’ai cherché à faire au plus simple. Tout se passe à l’intérieur d’une classe.
Ça nous permettra d’hériter facilement de certains comportements, comme la
méthode <code>assert</code> qui sera définit dans la classe <code>Tasty::Unit</code>.</p>

<p>Chaque méthode qui commence par <code>test_</code> représente un test, et <code>assert</code> se
contente de vérifier si son argument est vrai ou faux.</p>

<p>On lancera le programme avec le nom d’un fichier de test, par exemple
<code>tasty test_rover.rb</code>. Mais par souci de simplicité, nous nous contenterons
d’utiliser directement l’interpréteur Ruby de cette manière :
<code>ruby tasty.rb test_rover.rb</code>.</p>

<p>Voici ce que j’imagine en terme d’affichage :</p>

<pre><code>$ ruby tasty.rb test_rover.rb
ok - test_it_has_a_position
not ok - test_it_has_a_given_direction
&lt;&lt; ERROR REPORT GOES HERE &gt;&gt;
ok - test_it_has_a_direction_by_default
</code></pre>

<p>Le nom d’un test est précédé de “ok” si il a réussi, ou de “not ok” si il a
échoué. Le rapport d’erreur est affiché aussitôt après une ligne “not ok”.</p>

<h2 id="retrouver-la-classe-de-test">Retrouver la classe de test</h2>

<p>Commençons par le plus simple, définissons une classe Rover dans un fichier
<code>rover.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis définissons notre premier test, dans un fichier <code>test_rover.rb</code>. Ce
premier test va nous guider pendant un bout de temps :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant, dans un fichier <code>tasty.rb</code>, définissons le namespace Tasty et une
classe principale. Nous initialiserons cette classe avec le nom de fichier
passé en argument sur la ligne de commande. Nous afficherons un message
temporaire pour nous assurer que nous sommes sur la bonne voie :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Testing </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’essai est concluant :</p>

<pre><code>$ ruby tasty.rb test_rover.rb
Testing test_rover.rb
</code></pre>

<p>Tant qu’on y est, mieux vaut définir tout de suite la classe <code>Tasty::Unit</code>,
voici à quoi devrait ressembler votre fichier <code>tasty.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Testing </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Passons maintenant au sujet principal de cette section : nous devons retrouver
le nom de la classe de test, à savoir <code>TestRover</code>, depuis la classe
<code>Tasty::Main</code>. Pour ce faire nous pourrions écrire un parser qui
analyserait le contenu du fichier passé en argument. Ou bien nous pouvons
compter sur les facilités d’introspection du langage Ruby. Je parie volontiers
sur cette seconde solution. Nous laisserons Ruby charger et parser le fichier de
test pour nous. Nous chargerons le fichier de la même manière qu’un autre, avec
un <code>require</code>. Puis nous utilerons <code>Object.constants</code> pour accéder à toutes les
constantes définies jusqu’ici (une classe est représentée par une constante) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous lancez ce programme, vous verrez une liste de toutes les constantes
définies, dont celle que nous cherchons, <code>TestRover</code> :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
Object
Module
Class
BasicObject
...
SimpleDelegator
Tasty
Rover
TestRover # &lt;============================
RUBYGEMS_ACTIVATION_MONITOR
</code></pre>

<p>Attention, il s’agit d’un tableau de symboles. Vous pouvez vous en convaincre
en changeant de méthode d’affichage. Remplacez <code>puts</code> par <code>p</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">  <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">  <span class="nb">p</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous pouvez voir qu’il s’agit de symboles :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
[:Object, :Module, :Class, :BasicObject, :Kernel, :NilClass, :NIL, :Data,
...
:SimpleDelegator, :Tasty, :Rover, :TestRover, :RUBYGEMS_ACTIVATION_MONITOR]
</code></pre>

<p>Nous pouvons sélectionner uniquement les classes commençant par <code>Test</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">p</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous avons réduit le tableau aux seules classes de test. Nous en avons une
seule ici, mais nous pourrions très bien en avoir plusieurs :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
[:TestRover]
</code></pre>

<p>Il y a une convention qui est à l’oeuvre : seule une classe de test peut
commencer par <code>Test</code>. Ça n’est pas un bien grand sacrifice, et nous pourrions
y remédier si besoin.</p>

<h2 id="les-mthodes-de-test">Les méthodes de test</h2>

<p>La prochaine étape consistera à récupérer les méthodes qui sont dans la classe
de test, et à les lancer.</p>

<p>Un peu de recherche, dans une session irb et avec la <a href="http://ruby-doc.org/">documentation Ruby</a>,
nous montrera que nous pouvons transformer un symbole en une classe, et aussi
instancier cette classe, à l’aide de <code>Object.const_get</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="ss">:Module</span>
</span><span class="line"><span class="go">:Module</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="ss">:Module</span><span class="p">)</span>
</span><span class="line"><span class="go">Module &lt; Object</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="ss">:Module</span><span class="p">)</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="go">#&lt;Module:0x0055e0036e5580&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>On peut donc transformer notre tableau de symboles selon cette méthode :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="n">classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="n">classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Retournons dans une session irb pour voir comment obtenir les méthodes d’une
classe quelconque.  Définissons une classe <code>C</code> avec une méthode
<code>method_in_class_c</code> pour les besoins de la cause :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">C</span>
</span><span class="line"><span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">method_in_class_c</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La méthode <code>instance_methods</code> appliquée sur une classe liste les méthodes de
cette classe. Nous retrouvons notre méthode <code>method_in_class_c</code>, parmi plein
d’autres :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">instance_methods</span>
</span><span class="line"><span class="go">method_in_class_c # &lt;--------------------</span>
</span><span class="line"><span class="go">methods</span>
</span><span class="line"><span class="go">singleton_methods</span>
</span><span class="line"><span class="go">protected_methods</span>
</span><span class="line"><span class="go">private_methods</span>
</span><span class="line"><span class="go">public_methods</span>
</span><span class="line"><span class="go">instance_of?</span>
</span><span class="line"><span class="go">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>D’où viennent ces autres méthodes ? Ce sont les méthodes héritées ou incluses.
Pour restreindre les méthodes à celles définies dans la classe C, nous devons
utiliser un artifice :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class="line"><span class="go">method_in_class_c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons nous servir de ce nouveau savoir pour lister les méthodes de test :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="n">classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="n">classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="n">classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class="line">        <span class="n">c</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="nb">puts</span> <span class="n">m</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous l’avons trouvé :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_it_has_a_position
</code></pre>

<p>Il reste à lancer chaque test en se servant de la méthode <a href="http://ruby-doc.org/core-2.3.1/Object.html#method-i-send">send</a> sur une
instance de la classe de test. Nous ferons cela ailleurs que dans le
constructeur de la classe Tasty::Main. Dans une méthode <code>run</code> par exemple, ça
sera plus propre :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">class_under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">class_under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">class_under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">main</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alors, et si on lançait les tests :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:6:in `initialize':
  wrong number of arguments (given 2, expected 0) (ArgumentError)
  from test_rover.rb:6:in `new'
  from test_rover.rb:6:in `test_it_has_a_position'
</code></pre>

<p>Déçu ? Vous ne devriez pas, ça a parfaitement fonctionné. Le programme nous dit
qu’en ligne 6 du fichier <code>test_rover.rb</code> nous tentons d’initialiser un rover
avec 2 arguments alors que la méthode <code>initialize</code> de rover attends 0
arguments. Voyons cette fameuse ligne 6, dans le test nous cherchons à
initialiser un rover avec des coordonnées x et y :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et comme notre classe <code>Rover</code> est déséspérement vide, il est normal que Ruby
crashe.</p>

<h2 id="passons-le-premier-test">Passons le premier test</h2>

<p>Dotons la méthode <code>Rover#initialize</code> de deux arguments, comme attendu :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et le programme nous emmène au prochain problème :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_position': undefined method `position'
for #&lt;Rover:0x0055778cf43a90&gt; (NoMethodError)
</code></pre>

<p>On en vient facilement à bout en ajoutant la méthode <code>Rover#position</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’erreur suivante est beaucoup plus intéressante :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_position': undefined method `assert'
for #&lt;TestRover:0x00558edbe7a828&gt; (NoMethodError)
</code></pre>

<p>Nous devons coder <code>assert</code> de telle manière qu’elle produise une erreur si son
argument est différent de <code>true</code>.  Et pour que les classes de test puissent y
accéder, nous la placerons dans <code>Tasty::Unit</code>. Nous utiliserons aussi une erreur
custom, <code>AssertionError</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">AssertionError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">boolean</span><span class="p">)</span>
</span><span class="line">      <span class="k">raise</span> <span class="no">AssertionError</span> <span class="k">unless</span> <span class="n">boolean</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous y sommes presque. La méthode <code>assert</code> est codée et produit l’erreur attendue :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
tasty.rb:8:in `assert': Tasty::AssertionError (Tasty::AssertionError)
  from test_rover.rb:7:in `test_it_has_a_position'
</code></pre>

<p>Que se passerait-il si nous implémentions <code>Rover</code> de telle manière qu’elle
passe le test ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">    <span class="o">[</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et bien rien. Il ne se passe rien.</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
$ # &lt;---- Cruelle absence d'affichage
</code></pre>

<p>En l’occurence, ce rien signifie quand même que nous avons réussi cette
partie !  Le test est passé ! Ajoutons un petit quelque chose pour être tenu au
courant :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">class_under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">class_under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">class_under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">          <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="n">m</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># &lt;---------------</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et c’est la victoire :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">ruby</span> <span class="n">tasty</span><span class="o">.</span><span class="n">rb</span> <span class="n">test_rover</span><span class="o">.</span><span class="n">rb</span>
</span><span class="line"><span class="n">ok</span> <span class="o">-</span> <span class="n">test_it_has_a_position</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="les-autres-tests">Les autres tests</h2>

<p>Ajoutons le second test, mais plaçons le avant le premier (!) pour observer un
phénomène curieux :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le programme reporte bien le nouveau problème qui se trouve dans la méthode
<code>test_it_has_a_direction_by_default</code> mais il n’y a aucune mention de
<code>test_it_has_a_position</code> qui fonctionnait pourtant bien.</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_direction_by_default': undefined method
`direction' for #&lt;Rover:0x0055a03b444db0 @x=3, @y=2&gt; (NoMethodError)
</code></pre>

<p>Lorsqu’une erreur se produit dans <code>Tasty::Main#run</code>, le programme s’arrête
purement et simplement. Ce n’est pas du tout ce que nous voulons. Nous voulons
qu’une erreur soit rapportée, et que le programme continue en traitant le test
suivant. Commençons par remanier un peu la méthode <code>run</code> en la splittant en
deux parties :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">under_test</span><span class="o">|</span>
</span><span class="line">      <span class="n">instance</span> <span class="o">=</span> <span class="n">under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">      <span class="n">under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="n">m</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons alors <em>attraper</em> les erreurs facilement dans la méthode <code>run_test</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;not ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">inspect</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà le résultat, nous affichons à la fois les tests qui passent et ceux
qui échouent :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
not ok - test_it_has_a_direction_by_default
#&lt;NoMethodError: undefined method `direction' for #&lt;Rover:0x0055a7709c03c0 @x=3, @y=2&gt;&gt;
test_rover.rb:7:in `test_it_has_a_direction_by_default'
...
ok - test_it_has_a_position
</code></pre>

<p>En dotant <code>Rover</code> de la méthode <code>position</code> qui suit, les tests passent :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">position</span>
</span><span class="line">  <span class="s1">&#39;north&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ ruby tasty.rb test_rover.rb 
ok - test_it_has_a_direction_by_default
ok - test_it_has_a_position
</code></pre>

<p>Faire passer le 3ème test implique seulement d’implémenter la classe <code>Rover</code> de
façon correcte. Il n’y a rien à ajouter ou à modifier dans notre framework
<code>Tasty</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Nous venons d’écrire un framework de test en quelques dizaines de lignes de
code grâce aux facultés d’introspection de Ruby. C’est maintenant à votre tour
de jouer en l’améliorant.  Voici quelques idées :</p>

<ul>
  <li>Faire jouer les tests dans un ordre aléatoire</li>
  <li>Afficher une ligne de résultat final : <code>X tests, Y errors</code></li>
  <li>La sortie console devrait se faire en couleur, les lignes “ok” en vert, les
lignes “not ok” en rouges, et le reste en normal</li>
  <li>Écrire <code>ok - it has a position</code> plutôt que <code>ok - test_it_has_a_position</code></li>
  <li>Faire en sorte que des classes autres que celles de test puissent commencer par <code>Test</code>.</li>
  <li>Le must pour un compilateur, c’est d’être écrit dans son langage. Faire
pareil ici : tester Tasty avec Tasty</li>
</ul>

<p>Pour finir, voici le code complet :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">direction</span><span class="o">=</span><span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">    <span class="vi">@direction</span> <span class="o">=</span> <span class="n">direction</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">    <span class="o">[</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:direction</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_given_direction</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">AssertionError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">boolean</span><span class="p">)</span>
</span><span class="line">      <span class="k">raise</span> <span class="no">AssertionError</span> <span class="k">unless</span> <span class="n">boolean</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">      <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;not ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span><span class="line">      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">main</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bons tests ! À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/09/16/commencer-le-developpement-web-en-ruby/">Commencer le développement web en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/29/coco-version-0-dot-13-dot-0/">Coco version 0.13.0</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/">Comportement inattendu de Rspec</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment mettre à jour un package R]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/08/04/comment-mettre-a-jour-un-package-r/"/>
    <updated>2016-08-04T08:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/08/04/comment-mettre-a-jour-un-package-r</id>
    <content type="html"><![CDATA[<p>Comment faire pour mettre à jour un seul package en R ? Pas deux, pas trois,
pas cinquante, non juste un. Allez, “ggplot2” par exemple. Ça devrait être
simple…</p>

<!-- more -->

<p>Je tape <code>?update&lt;TAB&gt;</code> et je vois qu’il existe une fonction <code>update.packages()</code>
Cette fonction semble prometteuse, n’est-ce-pas ?</p>

<p>Oubliez la ! Elle (<code>update.packages()</code>) va mettre à jour <strong>tous</strong> vos packages.
Et selon leur nombre cela peut prendre beaucoup de temps.</p>

<p>Pour mettre à jour un seul package on doit utiliser <code>install.packages()</code> comme ceci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">install.packages<span class="p">(</span><span class="s">&quot;ggplot2&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Intuitif, non ? Il n’y a pas de différences entre l’installation et la mise à
jour.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/">Un quine en R - Le retour</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12 points pour rater la conception d'un MOOC]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/08/02/12-points-pour-rater-la-conception-dun-mooc/"/>
    <updated>2016-08-02T16:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/08/02/12-points-pour-rater-la-conception-dun-mooc</id>
    <content type="html"><![CDATA[<p><em>Ça fait maintenant quelques temps que je pratique les MOOCs. J’adore ça.  J’en
ai suivi environ 40. Ça fait de moi un serial MOOCer, non ? Là dedans j’en ai
réussi 26 avec succès.  Et j’en ai suivi à peu près 11 seulement pour voir, ou
pour glaner un concept ou deux par ci par là. Je commence à bien cerner les
conceptions qui fonctionnent, et celles qui ne fonctionnent pas.  Voici donc
une liste de 12 points à suivre aveuglément si vous souhaitez rater à coup sûr
la conception de votre MOOC.</em></p>

<!-- more -->

<ol>
  <li>
    <p>Ne dites surtout pas quel niveau minimum est requis pour suivre votre MOOC.
Cachez le. Laissez donc l’étudiant le découvrir à ses dépends, au fur et à
mesure de son investissement.</p>
  </li>
  <li>
    <p>Réalisez des slides les plus denses possible. Plus vous en mettrez, plus vous
serez ennuyeux. Ne laissez pas de vide. Remplissez et remplissez encore.</p>
  </li>
  <li>
    <p>Lisez vos slides mots pour mots et du ton le plus morne possible.</p>
  </li>
  <li>
    <p>Ne faites apparaître aucun humain dans vos vidéos. Juste des slides.</p>
  </li>
  <li>
    <p>Évitez de sourire. Sourire pourrait faire croire que vous êtes heureux de faire
ce que vous faites. N’hésitez donc pas à avoir l’air de vous ennuyer lorsque
vous enregistrez les vidéos.</p>
  </li>
  <li>
    <p>Comme enseignant, choisissez quelqu’un qui maîtrise mal la langue d’enseignement.</p>
  </li>
  <li>
    <p>Réalisez les vidéos quelques jours seulement avant leurs diffusions. La loi de
Murphy c’est pour les faibles. Vous êtes bien au-dessus de ça, et vous savez
que tout se passera bien.</p>
  </li>
  <li>
    <p>Abusez de liaisons comme «il est évident que …», «il découle évidemment que …»,
«donc comme nous le savons tous depuis l’école maternelle …», etc. Et ceci tout
particulièrement si votre sujet est difficile.</p>
  </li>
  <li>
    <p>Faites en sorte que l’équipe enseignante ne participe pas aux forums de
discussion. Sous aucun prétexte.</p>
  </li>
  <li>
    <p>Proposez un maximum de quizzs et de devoirs sans aucun rapport avec le
contenu de la semaine.</p>
  </li>
  <li>
    <p>Faites comme si donner un MOOC était exactement la même chose que donner un
cours dans la vie réelle. Surtout ne changez rien. Surtout ne vous adaptez pas.</p>
  </li>
  <li>
    <p>En ce qui concerne (encore une fois) les vidéos et les slides, veillez bien à
ce que leur qualité les rendent illisibles. Et pour parfaire le tout, assurez
vous qu’on ne puisse pas les télécharger.</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/05/08/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-8/"/>
    <updated>2016-05-08T19:54:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/05/08/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-8</id>
    <content type="html"><![CDATA[<p>Dans ce 8ème article de la série consacrée à la création d’un jeu en 2d avec
Ruby et Gosu, nous allons mettre en place les niveaux.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu9.png" /></p>

<!-- more -->

<h2 id="juste-la-mcanique">Juste la mécanique</h2>

<p>Dans un premier temps, nous allons mettre en place un mécanisme qui permettra
d’avoir facilement des niveaux, mais nous garderons le jeu tel qu’il est
actuellement. J’ai décidé que les niveaux du jeu seraient configurés dans un
fichier YAML.  Voici donc un fichier de niveaux minimum :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>levels.yaml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="p-Indicator">-</span>
</span><span class="line">  <span class="l-Scalar-Plain">song</span><span class="p-Indicator">:</span> <span class="s">&quot;assets/songs/Around</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">Bend.ogg&quot;</span>
</span><span class="line">  <span class="l-Scalar-Plain">goal</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">15</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span>
</span><span class="line">  <span class="l-Scalar-Plain">song</span><span class="p-Indicator">:</span> <span class="s">&quot;assets/songs/Catch</span><span class="nv"> </span><span class="s">The</span><span class="nv"> </span><span class="s">Mystery.ogg&quot;</span>
</span><span class="line">  <span class="l-Scalar-Plain">goal</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">25</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Chaque entrée dans le fichier YAML (donc chaque niveau dans le jeu) comporte
une musique et un objectif (<em>goal</em>).  Cet objectif est le nombre de sourires à
collecter pour terminer le niveau. On ajoutera bien sûr un tas d’autres choses
plus tard, mais c’est tout à fait suffisant pour la mise en place des niveaux
dans notre jeu.</p>

<p>Le chargement de ces niveaux peut se faire dans une classe <code>Level</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>level.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@levels</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;levels.yaml&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le fichier de niveaux <code>levels.yaml</code> rend inutile le module <code>Song</code> développé
dans le dernier article. On peut donc le supprimer :</p>

<pre><code>rm song.rb
</code></pre>

<blockquote>
  <p>On voit ici que le développement d’un jeu, comme toute application, n’est pas
une simple ligne droite. 
On ne se contente pas d’ajouter du code, on en supprime aussi.
Une structure (ici notre module Song) peut être rendue obsolète après
l’introduction d’une nouvelle structure, d’un nouveau design ou d’une
nouvelle fonctionnalité. Il ne faut pas hésiter à se débarrasser d’un code qui
n’est plus utile.</p>
</blockquote>

<p>La musique pour l’état <em>game over</em> ne s’insère pas dans le schéma du fichier de
niveau. Nous pouvons créer une nouvelle méthode dans la classe SongPlayer et
l’utiliser là où il faut dans la classe Window :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>song_player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">SongPlayer</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">play_game_over</span>
</span><span class="line">    <span class="n">play</span><span class="p">(</span><span class="s2">&quot;assets/songs/In early time.ogg&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update_game_over</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play_game_over</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour que cela fonctionne, il faut mettre en place notre <code>Level</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="no">Level</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@song_player</span> <span class="o">=</span> <span class="no">SongPlayer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span> <span class="c1"># &lt;---- Cette méthode n&#39;existe pas encore !</span>
</span><span class="line">    <span class="c1">#...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span> <span class="c1"># &lt;----- Idem !</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous notez que j’utilise une méthode <code>Level#song</code> qui n’est pas encore codée.
Cette méthode devra retourner le nom de la musique du niveau actuel. Comme nous
n’avons pas encore cette notion de niveau actuel, trichons provisoirement et
retournons invariablement la musique du premier niveau :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">song</span>
</span><span class="line">    <span class="vi">@levels</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;song&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà, le jeu tourne exactement comme dans la version précédente, pourtant la
mécanique des niveaux est en place.</p>

<h2 id="affichage-des-sourires-collects">Affichage des sourires collectés</h2>

<p>Un bon premier pas serait de savoir où on en est dans la réalisation de
l’objectif du niveau. Autrement dit, on veut savoir combien de sourires on a
collecté depuis le début du niveau.
Comme première tentative, on peut simplement afficher ce chiffre sur la console à
chaque update de Gosu. Et quelle classe sera la mieux placée pour connaitre
le nombre de sourires collectés pendant le niveau actuel ? La classe <code>Level</code>
bien entendu. Il nous faut deux nouvelles méthodes, <code>collected</code> qui retourne le
nombre de sourires collectés jusqu’à présent et <code>collect</code>, qui incrémente le
nombre de sourires collectés :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:collected</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@levels</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;levels.yaml&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La classe Player a maintenant besoin de pouvoir parler à l’objet de type Level
pour lui passer le message <code>collect</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">      <span class="vi">@level</span><span class="o">.</span><span class="n">collect</span> <span class="c1"># &lt;------- Un sourire collecté !</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le code qui précède est quelque chose que je n’aime pas faire. <code>Player</code> a
désormais connaissance d’un objet de type <code>Level</code> et peut faire ce qu’il veut
avec. Même si aujourd’hui je <em>sais</em> qu’il ne faut rien faire d’autre que
<code>@level.collect</code>, dans 6 mois ça sera une toute autre histoire. J’aurais oublié
tout ça et quand je verrai cet objet <code>@level</code> je penserai sûrement que je peux
faire ce que je veux avec (<em>c’est à dire modifier tout et n’importe quoi</em>). Et
tout ce que ça pourra produire, c’est un maximum de confusion.</p>

<p>Il y a plusieurs façons de gérer ça et on va en examiner quelques unes dans un
petit moment. Mais terminons d’abord ce que nous étions en train de faire,
c’est à dire l’affichage du nombre de sourires collectés :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="no">Level</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@level</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="nb">puts</span> <span class="vi">@level</span><span class="o">.</span><span class="n">collected</span> <span class="c1"># &lt;--- On log sur la console pour vérifier</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous lancer le jeu vous verrez le nombre d’objet collectés qui s’affiche à chaque
update de Gosu.</p>

<p>Maintenant parlons de quelques méthodes possibles pour éviter de se trainer un
objet de type <code>Level</code> dans la classe <code>Player</code>.</p>

<ol>
  <li>On pourrait se contenter de mettre un commentaire, encore faudra-t-il le
  voir, le lire et le maintenir.</li>
  <li>On pourrait utiliser un <a href="https://en.wikipedia.org/wiki/Observer_pattern">observer</a>, mais je trouve ça un peu trop,
vu que l’on n’a qu’un seul évènement à déclencher.</li>
  <li>J’imagine qu’on pourrait aussi utiliser un <a href="https://en.wikipedia.org/wiki/Mediator_pattern">mediator</a> entre les classes
<code>Player</code> et <code>Level</code>. Mais là encore je trouve ça trop avec seulement deux
classes.</li>
</ol>

<p>Alors quoi ? Un <a href="https://en.wikipedia.org/wiki/Proxy_pattern">proxy</a> qui sera restreint à la seule méthode <code>collect</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>collector_proxy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CollectorProxy</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span>
</span><span class="line">    <span class="vi">@level</span><span class="o">.</span><span class="n">collect</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="no">Level</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">CollectorProxy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@level</span><span class="p">))</span>
</span><span class="line">    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>De cette manière, un <code>Player</code> ne pourra rien faire d’autre qu’appeler la 
méthode <code>collect</code> sur ce fameux <code>@level</code>.</p>

<h2 id="visualisation-de-ltat-davancement-du-niveau">Visualisation de l’état d’avancement du niveau</h2>

<p>On va afficher le numéro du niveau en haut à droite, et une petite barre
d’avancement sous les pieds du joueur pour savoir où on en est dans la collecte
des sourires.</p>

<p>La majeure partie des modifications se situe dans la classe <code>UI</code>, n’hésitez pas
à remplacer les nombres magiques restants par des constantes :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="no">Yellow</span> <span class="o">=</span> <span class="mh">0xff_ffff00</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="n">draw_level</span><span class="p">(</span><span class="n">game</span><span class="o">[</span><span class="ss">:level</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_level</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:draw_rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">477</span><span class="p">,</span> <span class="n">achieved_part</span><span class="p">(</span><span class="n">level</span><span class="p">),</span> <span class="mi">3</span><span class="p">,</span> <span class="no">Yellow</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Level: </span><span class="si">#{</span><span class="n">level</span><span class="o">[</span><span class="ss">:number</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">550</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class="line">               <span class="no">Yellow</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">achieved_part</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="no">WindowWidth</span> <span class="o">/</span> <span class="n">level</span><span class="o">[</span><span class="ss">:goal</span><span class="o">]</span> <span class="o">*</span> <span class="n">level</span><span class="o">[</span><span class="ss">:collected</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour pouvoir utiliser le code précédent, il faut ajouter quelques informations
au <em>game state</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">game_state</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="ss">score</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">score</span><span class="p">,</span>
</span><span class="line">      <span class="ss">lives</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span><span class="p">,</span>
</span><span class="line">      <span class="n">game_over</span><span class="p">:</span> <span class="vi">@game_over</span><span class="p">,</span>
</span><span class="line">      <span class="ss">level</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="ss">goal</span><span class="p">:</span> <span class="vi">@level</span><span class="o">.</span><span class="n">goal</span><span class="p">,</span>
</span><span class="line">        <span class="ss">number</span><span class="p">:</span> <span class="vi">@level</span><span class="o">.</span><span class="n">number</span><span class="p">,</span>
</span><span class="line">        <span class="ss">collected</span><span class="p">:</span> <span class="vi">@level</span><span class="o">.</span><span class="n">collected</span><span class="p">,</span>
</span><span class="line">      <span class="p">},</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et pour tester tout de suite, on triche un peu avec les méthodes <code>Level#goal</code> et
<code>Level#number</code> pour qu’elles retourne toujours une même chose qu’on contrôle
bien :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">goal</span>
</span><span class="line">    <span class="vi">@levels</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;goal&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">number</span>
</span><span class="line">    <span class="s2">&quot;1&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous pouvez tester le jeu maintenant pour voir l’affichage du niveau et de
son état d’avancement.</p>

<h2 id="des-niveaux-enfin-">Des niveaux, enfin !</h2>

<p>On veut maintenant les faire fonctionner, ces niveaux ! Le gros du travail se
passe dans la classe <code>Level</code>. Notamment avec les méthodes <code>song</code>, <code>goal</code> et
<code>number</code> qui doivent désormais retourner des informations pertinentes sur le
niveau actuel.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:collected</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@levels</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;levels.yaml&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">song</span>
</span><span class="line">    <span class="n">current</span> <span class="s1">&#39;song&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">goal</span>
</span><span class="line">    <span class="n">current</span> <span class="s1">&#39;goal&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">number</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">completed?</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">==</span> <span class="n">goal</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="vi">@index</span> <span class="sx">%= @levels.size</span>
</span><span class="line"><span class="sx">    @collected =</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">current</span><span class="p">(</span><span class="n">property</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@levels</span><span class="o">[</span><span class="vi">@index</span><span class="o">][</span><span class="n">property</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans la méthode <code>Level#next</code>, le modulo permet de boucler sur les niveaux. Pas
très réaliste, mais ça permet de différer la gestion de la fin du jeu
(il se passe quoi quand on a terminé tout les niveaux ?).</p>

<p>Voici le code pour passer au niveau suivant :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="n">reset</span> <span class="k">if</span> <span class="n">new_game?</span>
</span><span class="line">    <span class="n">next_level</span> <span class="k">if</span> <span class="vi">@level</span><span class="o">.</span><span class="n">completed?</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next_level</span>
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="vi">@level</span><span class="o">.</span><span class="n">next</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il faut aussi s’assurer qu’une nouvelle partie débute bien sur le premier
niveau :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">reset</span>
</span><span class="line">    <span class="vi">@level</span><span class="o">.</span><span class="n">reset</span> <span class="c1"># &lt;----------------- C&#39;est ici que ça se passe !</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis pour obtenir une transition moins abrupte entre les niveaux, on ajoute un
petit son :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_next_level</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/next-level.wav&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_next_level</span><span class="o">.</span><span class="n">play</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà, nous avons maintenant des niveaux exploitables.
La prochaine fois nous étofferons ces niveaux, avec des bonus, des malus, etc.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   ├── Around the Bend.ogg
│   │   ├── Catch The Mystery.ogg
│   │   └── In early time.ogg
│   └── sound
│       ├── collect.wav
│       ├── life-lost.wav
│       └── next-level.wav
├── button.rb
├── collector_proxy.rb
├── level.rb
├── levels.yaml
├── main.rb
├── player.rb
├── smiley.rb
├── song_player.rb
├── ui.rb
├── window.rb
└── z_order.rb

6 directories, 24 files
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.8.0">version 0.8.0</a>.</p>

<section><h1>Articles connexes</h1><ul /></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/"/>
    <updated>2016-05-01T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7</id>
    <content type="html"><![CDATA[<p>Ça fait plus de 2 mois que je dois terminer ce jeu et cette série d’article, alors au boulot !</p>

<p>Pour cette nouvelle version je voudrais ajouter une musique différente pour le
game over.  Et aussi pouvoir enfin recommencer une nouvelle partie après
un <em>game over</em>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu8.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li>Plusieurs musiques et reset de la partie</li>
</ol>

<h2 id="plusieurs-musiques">Plusieurs musiques</h2>

<p>Nous allons devoir gérer plusieurs musiques. Donnons leur des noms plus simple
à manipuler que leurs <em>paths</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>song.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Song</span>
</span><span class="line">  <span class="no">GameOver</span> <span class="o">=</span> <span class="s2">&quot;assets/songs/In early time.ogg&quot;</span>
</span><span class="line">  <span class="no">Level1</span>   <span class="o">=</span> <span class="s2">&quot;assets/songs/Around the Bend.ogg&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et avec quoi écoute-t-on de la musique ? Avec un <em>song player</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>song_player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">SongPlayer</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">play</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">stop</span> <span class="k">if</span> <span class="vi">@song</span>
</span><span class="line">    <span class="vi">@song</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">volume</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">25</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans la classe <code>Window</code> on remplace l’ancienne manière de jouer une musique :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@song</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/songs/Around the Bend.ogg&quot;</span><span class="p">)</span>
</span><span class="line"><span class="vi">@song</span><span class="o">.</span><span class="n">volume</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">25</span>
</span><span class="line"><span class="vi">@song</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>par notre nouvelle abstraction :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@song_player</span> <span class="o">=</span> <span class="no">SongPlayer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:Level1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>N’oubliez pas d’ajouter les require qui vont bien dans le fichier <code>main.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;song&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;song_player&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trouver un bon endroit où mettre le code pour changer la musique après un
<em>game over</em> n’est pas si 
évident que ça. Le moment où l’on capte que le jeu est dans l’état game over est
la méthode <code>update_player</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">  <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et il semblerait vraiment bizarre de modifier la musique alors qu’on est
sensé mettre à jour le joueur. Autrement dit, le code suivant ne me plait pas :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">  <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:GameOver</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À bien y réfléchir, le problème vient d’avant. On ne devrait pas changer l’état
de <code>@game_over</code> ici, mais plutôt dans la méthode <code>update</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Changer la musique se fera donc de cette manière :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:GameOver</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">update_items</span>
</span><span class="line">  <span class="n">update_player</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Après extraction d’une nouvelle méthode, nous obtenons un code plus clair :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">  <span class="n">update_game_over</span>
</span><span class="line">  <span class="n">update_items</span>
</span><span class="line">  <span class="n">update_player</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_game_over</span>
</span><span class="line">  <span class="k">return</span> <span class="k">unless</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">  <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">  <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:GameOver</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="nouvelle-partie">Nouvelle partie</h2>

<p>Ok, il est temps maintenant de pouvoir jouer une nouvelle partie après un
game over. Pour cela, il faut regarder si le joueur appuie sur la touche
espace pendant l’état game over, et dans ce cas faire un reset :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="n">reset</span> <span class="k">if</span> <span class="vi">@game_over</span> <span class="o">&amp;&amp;</span> <span class="no">Button</span><span class="o">.</span><span class="n">space?</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">  <span class="n">update_game_over</span>
</span><span class="line">  <span class="n">update_items</span>
</span><span class="line">  <span class="n">update_player</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut tout de suite extraire une méthode <code>new_game?</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="n">reset</span> <span class="k">if</span> <span class="n">new_game?</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">new_game?</span>
</span><span class="line">  <span class="vi">@game_over</span> <span class="o">&amp;&amp;</span> <span class="no">Button</span><span class="o">.</span><span class="n">space?</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut maintenant réfléchir à la méthode <code>reset</code>, qui a son tour appellera
la méthode <code>reset</code> du joueur. Ces deux méthodes sont évidentes :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">reset</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:Level1</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@lives</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour terminer cette version, on va ajouter un message «press space to start»
qui bouge pour attirer l’attention. Pour ça, on varie régulièrement d’une
petite quantité la coordonnée <strong>y</strong> du message.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">  <span class="no">PressSpaceLow</span> <span class="o">=</span> <span class="mi">210</span>
</span><span class="line">  <span class="no">PressSpaceHigh</span> <span class="o">=</span> <span class="mi">270</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">240</span>
</span><span class="line">    <span class="vi">@y_velocity</span> <span class="o">=</span> <span class="o">-</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_game_over</span>
</span><span class="line">    <span class="vi">@big_font</span><span class="o">.</span><span class="n">draw_rel</span><span class="p">(</span><span class="s2">&quot;Game Over&quot;</span><span class="p">,</span> <span class="no">WindowWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="no">WindowHeight</span> <span class="o">/</span> <span class="mi">3</span><span class="p">,</span>
</span><span class="line">                       <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@big_font</span><span class="o">.</span><span class="n">draw_rel</span><span class="p">(</span><span class="s2">&quot;Press Space To Start&quot;</span><span class="p">,</span> <span class="no">WindowWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span>
</span><span class="line">                       <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">+=</span> <span class="n">y_velocity</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_velocity</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@y</span> <span class="o">&lt;</span> <span class="no">PressSpaceLow</span> <span class="o">||</span> <span class="vi">@y</span> <span class="o">&gt;</span> <span class="no">PressSpaceHigh</span>
</span><span class="line">      <span class="vi">@y_velocity</span> <span class="o">=</span> <span class="o">-</span><span class="vi">@y_velocity</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="vi">@y_velocity</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   ├── Around the Bend.ogg
│   │   └── In early time.ogg
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── button.rb
├── main.rb
├── player.rb
├── smiley.rb
├── song_player.rb
├── song.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.7.0">version 0.7.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">Écrire un jeu en 2d avec Ruby et Gosu - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/"/>
    <updated>2016-02-25T11:37:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6</id>
    <content type="html"><![CDATA[<p>Pour augmenter l’effet dramatique lorsque le joueur perd une vie, je voudrais
que celui-ci se mette à tourner sur lui-même. Pour ça, on affichera l’image du
joueur selon un certain angle, et cet angle sera mis à jour à chaque appel de
<code>update</code>. Voyons cela pas à pas.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu7.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li>Affichage selon un angle</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="affichage-selon-un-angle">Affichage selon un angle</h2>

<p>Il nous faut d’abord un angle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ensuite nous ajoutons une méthode <code>update</code> à la classe Player. Quand le joueur
vient de perdre une vie, la seule chose à mettre à jour est l’angle. Dans les
autres cas, on fait la même mise à jour qu’avant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">just_lost_a_life?</span> <span class="p">?</span> <span class="n">update_angle</span> <span class="p">:</span> <span class="n">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La mise à jour de l’angle d’affichage de l’image du joueur ne demande pas
d’explications:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update_angle</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En ce qui concerne la mise à jour générale, j’ai effectué un petit refactoring
pour passer dans la classe Player du code venant de la classe Window, et qui
n’avait pas à s’y trouver. Au passage j’ai aussi créé le module <code>Button</code> qu’on
verra plus tard:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">go_left</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">left?</span>
</span><span class="line">    <span class="n">go_right</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">right?</span>
</span><span class="line">    <span class="n">move</span>
</span><span class="line">    <span class="n">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut maintenant regarder l’affichage. Pour afficher une image selon un
certain angle, Gosu propose la méthode <code>draw_rot</code>. L’image sera orientée par
rapport à un point précis, ici je choisi le centre de l’image:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="k">if</span> <span class="n">just_lost_a_life?</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw_rot</span><span class="p">(</span><span class="n">x_middle</span><span class="p">,</span> <span class="n">y_middle</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">,</span> <span class="vi">@angle</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:x_middle</span><span class="p">,</span> <span class="ss">:x_center_of_mass</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_middle</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici tout ce qui change dans la classe <code>Player</code> en un coup d’œil:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">just_lost_a_life?</span> <span class="p">?</span> <span class="n">update_angle</span> <span class="p">:</span> <span class="n">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="k">if</span> <span class="n">just_lost_a_life?</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw_rot</span><span class="p">(</span><span class="n">x_middle</span><span class="p">,</span> <span class="n">y_middle</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">,</span> <span class="vi">@angle</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:x_middle</span><span class="p">,</span> <span class="ss">:x_center_of_mass</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_middle</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_angle</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">go_left</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">left?</span>
</span><span class="line">    <span class="n">go_right</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">right?</span>
</span><span class="line">    <span class="n">move</span>
</span><span class="line">    <span class="n">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici maintenant le contenu du module <code>Button</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Button</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">left?</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">right?</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut légitimement se demander «Mais pourquoi ajouter un tel module ?».
Simplement parce que je préfère 100 fois lire ceci:</p>

<pre><code>do_this if Button.left?
</code></pre>

<p>… plutôt que cela:</p>

<pre><code>do_this if Gosu::button_down?(Gosu::KbLeft)
</code></pre>

<p>Voyons enfin ce qui change dans la classe Window.
J’ai déplacé la ligne <code>return if @player.just_lost_a_life?</code> de la méthode
<code>update</code> vers la méthode <code>update_items</code>. Ainsi la méthode <code>update_player</code> est
toujours appelée et peut changer l’angle d’affichage du joueur:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_items</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">just_lost_a_life?</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   └── Around the Bend.ogg
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── button.rb
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.6.0">version 0.6.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">Écrire un jeu en 2d avec Ruby et Gosu - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/"/>
    <updated>2016-02-15T09:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5</id>
    <content type="html"><![CDATA[<p>Aujourd’hui on ajoute de la musique de fond, on s’intéresse à ce qui se passe
quand on perd une vie, et on écrit un beau «Game Over» quand on a perdu toutes
les vies.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu6.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li>Musique et game over</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="de-la-musique">De la musique</h2>

<p>Ajouter une musique de fond est très simple avec Gosu. On crée la ressource
comme on a créé des sons ou des images. Ensuite on règle le volume entre
0 et 1. Et enfin on appuie sur <code>play</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@song</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/songs/Around the Bend.ogg&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">volume</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">25</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le paramètre <code>true</code> passé à la méthode <code>play</code> lui indique qu’on veut jouer la
musique en boucle.</p>

<blockquote>
  <p>Un paramètre booléen est ce que j’appelle un «paramètre de contrôle»
(Martin Fowler appelle ça un <a href="http://martinfowler.com/bliki/FlagArgument.html">Flag argument</a>.
C’est un bon vieux code smell et je suis un peu déçu de trouver ça dans Gosu.
Surtout qu’il est ici facile de s’en débarrasser en proposant deux méthodes sans paramètres,
par exemple <code>play</code> et <code>loop</code>.</p>
</blockquote>

<h2 id="petite-pause-quand-on-perd-une-vie">Petite pause quand on perd une vie</h2>

<p>Pour marquer le coup, je voudrais que le jeu <em>pause</em> pendant un certain temps
(ici une seconde et demi) quand le joueur perd une vie. Voici d’abord le code,
puis les explications:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">  <span class="no">LifeLostPause</span> <span class="o">=</span> <span class="mi">1500</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@lost_life_at</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20_000</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">just_lost_a_life?</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:milliseconds</span> <span class="o">-</span> <span class="vi">@lost_life_at</span> <span class="o">&lt;</span> <span class="no">LifeLostPause</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_down</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">      <span class="vi">@lost_life_at</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:milliseconds</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Commençons par ce qui change dans <code>collision</code>. Lorsque le joueur entre en
collision avec un smiley à l’envers, j’enregistre l’instant de cette collision.
<code>Gosu::milliseconds</code> retourne le nombre de millisecondes écoulées depuis le
début du jeu.</p>

<p>Pour savoir si le joueur vient de perdre une vie, la méthode <code>just_lost_a_life?</code>
compare le temps présent (<code>Gosu::milliseconds</code>) avec l’instant où le joueur a
perdu une vie (<code>@lost_life_at</code>). Si la différence est de moins de 1500
millisecondes (une seconde et demi) <code>just_lost_a_life?</code> retournera <code>true</code>.</p>

<p>Lors de l’initialisation on trouve cette ligne:</p>

<pre><code>@lost_life_at = -20_000
</code></pre>

<p>… qui est nécessaire pour que <code>@lost_life_at</code> ne soit pas <code>nil</code> au début
du jeu, ce qui provoquerait une erreur dans <code>just_lost_a_life?</code>. Mais pourquoi
-20,000 ? Essayez de la définir à zéro pour voir… En fait -20,000 est une
valeur arbitraire, qui aurait aussi bien pu être -10,000 ou -9999, etc.
Une autre solution aurait été d’écrire <code>just_lost_a_life?</code> comme ceci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">just_lost_a_life?</span>
</span><span class="line">  <span class="k">if</span> <span class="vi">@lost_life_at</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:milliseconds</span> <span class="o">-</span> <span class="vi">@lost_life_at</span> <span class="o">&lt;</span> <span class="no">LifeLostPause</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais j’aime moins cette solution, pour deux raisons, 1) c’est moins performant
puisqu’on a un test de plus à chaque update (ok c’est pas grand chose, mais ça
plus ça plus ça…, et là c’est très facilement évitable pour rien) et 2) je préfère que toutes les variables d’objets soient
définies dans le constructeur (peut-être un vieux reste de mon passé de
javaïste, ou un truc comme ça).</p>

<p>Quoiqu’il en soit, la ligne <code>@lost_life_at = -20_000</code> mérite un commentaire
expliquant la raison de cette valeur arbitraire. J’espère que ce sera
compréhensible:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># It&#39;s important to note that this value is necessary for the game</span>
</span><span class="line"><span class="c1"># to avoid to freeze at startup.</span>
</span><span class="line"><span class="c1"># −20_000 is an arbitrary value. One can use -9999 or -5000 instead.</span>
</span><span class="line"><span class="vi">@lost_life_at</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20_000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour que tout ceci fonctionne, il suffit maintenant d’esquiver les updates au
bon moment:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">just_lost_a_life?</span>
</span><span class="line">
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="game-over-quand-0-vies">Game over quand 0 vies</h2>

<p>Vous avez maintenant compris que j’avance par petites itérations successives,
qui ne sont d’ailleurs pas toujours des fonctionnalités complètes.
Cette fois on va afficher «Game Over» et geler le jeu quand le joueur atteint
zéro vies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">just_lost_a_life?</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">game_state</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">game_state</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="ss">score</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">score</span><span class="p">,</span>
</span><span class="line">      <span class="ss">lives</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span><span class="p">,</span>
</span><span class="line">      <span class="n">game_over</span><span class="p">:</span> <span class="vi">@game_over</span><span class="p">,</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce qui mérite des explications c’est ce nouveau <code>game_state</code>. Plutôt que
d’envoyer les informations à l’UI sous la forme <code>@ui.draw(@player, @game_over)</code>
je préfère envoyer un <em>état</em> du jeu. Tout d’abord je n’envoie que le nécessaire
et ensuite on a un seul paramètre et non pas une liste de paramètres condamnée
à enfler.</p>

<p>Reste à refléter ça dans la classe UI:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@big_font</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Font</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;assets/fonts/VT323/VT323-Regular.ttf&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_score</span><span class="p">(</span><span class="n">game</span><span class="o">[</span><span class="ss">:score</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_lives</span><span class="p">(</span><span class="n">game</span><span class="o">[</span><span class="ss">:lives</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_game_over</span> <span class="k">if</span> <span class="n">game</span><span class="o">[</span><span class="ss">:game_over</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_game_over</span>
</span><span class="line">    <span class="vi">@big_font</span><span class="o">.</span><span class="n">draw_rel</span><span class="p">(</span><span class="s2">&quot;Game Over&quot;</span><span class="p">,</span>
</span><span class="line">                       <span class="no">WindowWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="no">WindowHeight</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class="line">                       <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span>
</span><span class="line">                       <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La nouveauté est la méthode <code>draw_rel</code>, qui va écrire son texte
<em>relativement</em> à lui-même. Oui je sais, ça sonne bizarre. Mais si vous
essayez les valeurs 0 et/ou 1 à la place de 0.5, vous devriez vite comprendre.
Là on va centrer le texte autour du milieu de l’écran, à la fois
horizontalement et verticalement.</p>

<blockquote>
  <p>Le fait que <code>draw_rel</code> soit l’abréviation de <code>draw_relative</code> ne sautera pas
forcement aux yeux de tout le monde. Alors pourquoi avoir utilisé une
abréviation ?</p>
</blockquote>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   └── Around the Bend.ogg
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.5.0">version 0.5.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">Écrire un jeu en 2d avec Ruby et Gosu - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/"/>
    <updated>2016-02-13T16:19:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4</id>
    <content type="html"><![CDATA[<p>Dans cet article on va s’occuper de gérer les vies de notre joueur.
On va les afficher et les perdre.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu5.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li>On s’occupe des vies</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="sourire--lenvers--autre-son-et-pas-de-points">Sourire à l’envers : autre son et pas de points</h2>

<p>Pour l’instant notre joueur collecte tout les smileys. Quel qu’ils soient.
Or, si les smiley oranges (sourire à l’endroit) doivent rapporter des points, les
smileys verts (sourire à l’envers) doivent eux faire perdre une vie à notre joueur.</p>

<p>On va commencer simplement par ne pas augmenter le score et jouer un son
différent quand le joueur entre en collision avec un smiley vert.
Dans la classe Player on charge le nouveau son (<code>life-lost.wav</code>) et on
modifie la méthode <code>collision</code> pour qu’elle réagisse au type du smiley:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_life_lost</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/life-lost.wav&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">?</span> <span class="n">collision</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">type</span><span class="p">)</span> <span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="vi">@score</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">      <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_down</span>
</span><span class="line">      <span class="vi">@sound_life_lost</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il ne faut pas oublier d’ajouter une méthode <code>type</code> à la classe Smiley:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Smiley</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:type</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Avouez que c’était simple…</p>

<h2 id="afficher-les-vies">Afficher les vies</h2>

<p>L’objectif de cet article est de gérer les vies du joueur. Pour cela,
commençons par lui en donner 3:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:lives</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@lives</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Les vies seront affichées au niveau de l’UI, c’est donc dans la classe du même
nom que cela va se passer. Jusqu’ici l’UI n’affichait que le score, et c’était
ce score que recevait en paramètre la méthode <code>draw</code>. On va modifier cela pour
pouvoir afficher le score et les vies.</p>

<p>On charge une nouvelle image, <code>heart.gif</code>, qui va symboliser une vie.
Puis dans <code>draw_lives</code> on affiche autant de <code>heart.gif</code> qu’il y a de vies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ui.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="no">ScoreX</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">  <span class="no">ScoreY</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">  <span class="no">ScoreColor</span> <span class="o">=</span> <span class="mh">0xff_ffff00</span>
</span><span class="line">
</span><span class="line">  <span class="no">LivesX</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">  <span class="no">LivesXShift</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class="line">  <span class="no">LivesY</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@font</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Font</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;assets/fonts/VT323/VT323-Regular.ttf&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@heart</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/heart.gif&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_score</span><span class="p">(</span><span class="n">player</span><span class="o">.</span><span class="n">score</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_lives</span><span class="p">(</span><span class="n">player</span><span class="o">.</span><span class="n">lives</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_score</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Score: </span><span class="si">#{</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="no">ScoreX</span><span class="p">,</span> <span class="no">ScoreY</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class="line">               <span class="no">ScoreColor</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_lives</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class="line">    <span class="n">number</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class="line">      <span class="vi">@heart</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="no">LivesXShift</span> <span class="o">*</span> <span class="n">index</span> <span class="o">+</span> <span class="no">LivesX</span><span class="p">,</span> <span class="no">LivesY</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’affichage des vies commence à la coordonnée x <code>LiveX</code> (soit 10), et se
poursuit en étant décalé à chaque fois de <code>LivesXShift</code> pixels vers la droite (soit 20).</p>

<p>Pour finir, il faut modifier l’appel à <code>UI#draw</code> depuis la classe <code>Window</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@player</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="perdre-une-vie">Perdre une vie</h2>

<p>Maintenant qu’on peut comptabiliser et afficher les vies du joueur, on est
prêt à lui en faire perdre. Il n’y a qu’une seule ligne à ajouter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="vi">@score</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">      <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_down</span>
</span><span class="line">      <span class="vi">@lives</span> <span class="o">-=</span> <span class="mi">1</span>                <span class="c1"># &lt;----------------- Ici</span>
</span><span class="line">      <span class="vi">@sound_life_lost</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette méthode <code>collision</code> est déjà trop longue à mon goût, mais je préfère
attendre qu’elle enfle encore avant d’y remédier. Je veux être certain que
même les plus débutant(e)s d’entre vous puissent voir cette méthode devenir
hors de contrôle avant de proposer une solution qui pourrait être vue comme
trop compliquée dans cette version.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.4.0">version 0.4.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li></ul></section>
]]></content>
  </entry>
  
</feed>
