<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-04-13T21:52:43+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - Et si on écrivait un ORM ? - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/13/ruby-et-si-on-ecrivait-un-orm-partie-1/"/>
    <updated>2014-04-13T21:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/13/ruby-et-si-on-ecrivait-un-orm-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Les derniers articles sur la méta programmation m&#8217;ont donnés envie d&#8217;écrire
un <a href="http://fr.wikipedia.org/wiki/Mapping_objet-relationnel">ORM</a>.
Un truc simple, basé sur la base de données <a href="https://www.sqlite.org/sqlite.html">Sqlite</a>.
D&#8217;ailleurs on va l&#8217;appeller SORM, pour <em>Simple Object Relational Mapping</em> ;)</p>

<!-- more -->


<p>Dans ce premier article, on va prendre contact avec Sqlite. Une fois ce dernier
installé sur votre machine, le client console est <code>sqlite3</code>.
Pour créer une nouvelle base de données, <code>test1.db</code>, il suffit de:</p>

<pre><code>$ sqlite3 test1.db
Enter SQL statements terminated with a ";"
</code></pre>

<p>Pour créer une table article:</p>

<pre><code>sqlite&gt; create table article(id int, name varchar(100));
</code></pre>

<p>Pour enregistrer quelques articles:</p>

<pre><code>sqlite&gt; insert into article values(1, 'foo');
sqlite&gt; insert into article values(2, 'bar');
sqlite&gt; insert into article values(3, 'baz');
</code></pre>

<p>Pour faire une requête:</p>

<pre><code>sqlite&gt; select * from article;
1|foo
2|bar
3|baz
</code></pre>

<p>Enfin pour sortir du programme, tapez Control+D.</p>

<p>Passons maintenant à la partie Ruby. J&#8217;avais pensé dans un premier temps à
écrire le driver pour communiquer avec Sqlite, mais ça nous entrainerait trop
loin. On va donc utiliser la gem <a href="https://github.com/sparklemotion/sqlite3-ruby">sqlite3-ruby</a>:</p>

<pre><code>gem install sqlite3
</code></pre>

<p>L&#8217;utilisation est fort simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">open</span> <span class="s2">&quot;test1.db&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">db</span><span class="o">.</span><span class="n">execute</span> <span class="s1">&#39;select * from article;&#39;</span>
</span><span class='line'><span class="go">[[1, &quot;foo&quot;], [2, &quot;bar&quot;], [3, &quot;baz&quot;]]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>To be continued</em></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/12/la-meta-programmation-en-ruby-partie-3/'>La méta programmation en Ruby &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/11/la-meta-programmation-en-ruby-partie-2/'>La méta programmation en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/10/introduction-a-la-meta-programmation-en-ruby/'>Introduction à la meta-programmation en Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méta programmation en Ruby - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/12/la-meta-programmation-en-ruby-partie-3/"/>
    <updated>2014-04-12T19:30:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/12/la-meta-programmation-en-ruby-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui une explication de <code>method_missing</code>, utilisée hier pour
écrire le constructeur de requête.</p>

<!-- more -->


<p>Tout d&#8217;abord un peu de pratique:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">met</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Inside method_missing ---&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">met</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foobarbaz</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ ruby meta3.rb 
Inside method_missing ---
foo
Inside method_missing ---
foobarbaz
</code></pre>

<p>Et maintenant la théorie. Lorsque vous passez un message a un objet, comme
<code>Foo.new.foo</code> et que ce message (cette méthode) n&#8217;existe pas, Ruby regarde
si l&#8217;objet possède la méthode <code>method_missing</code> et dans ce cas, l&#8217;appelle.
L&#8217;argument passé à <code>method_missing</code> est le nom de la <em>méthode manquante</em>.</p>

<p>Maintenant on ajoute un argument à <code>method_missing</code>, c&#8217;est l&#8217;argument de
la <em>méthode manquante</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">met</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Inside method_missing ---&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">met</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ ruby meta3.rb 
Inside method_missing ---
foo
bar
</code></pre>

<p>Alors que ce passe-t-il si on passe plusieurs arguments ? Essayons:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>meta3.rb:13:in `method_missing': wrong number of arguments (3 for 2) 
</code></pre>

<p>Et oui, ça ne fonctionne pas. Comme on ne peut pas connaître à l&#8217;avance
le nombre d&#8217;arguments de la <em>méthode manquante</em>, il est bon de tous les
récupérer dans un tableau:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">met</span><span class="p">,</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Inside method_missing ---&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">met</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">arg</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et dans ce cas là, il n&#8217;y a plus de problèmes, on peut gérer n&#8217;importe
quel nombre d&#8217;arguments:</p>

<pre><code>$ ruby meta3.rb 
Inside method_missing ---
foo
[]
Inside method_missing ---
foo
["bar"]
Inside method_missing ---
foo
["bar", "baz"]
</code></pre>

<p>Pour finir, il faut noter qu&#8217;on peut comme toujours passer un bloc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">met</span><span class="p">,</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Inside method_missing ---&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">met</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">arg</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="s1">&#39;return from a block&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ ruby meta3.rb 
Inside method_missing ---
foo
["bar"]
return from a block
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/11/la-meta-programmation-en-ruby-partie-2/'>La méta programmation en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/10/introduction-a-la-meta-programmation-en-ruby/'>Introduction à la meta-programmation en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/'>Ruby Timecop &ndash; Comment ça marche ?</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méta programmation en Ruby - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/11/la-meta-programmation-en-ruby-partie-2/"/>
    <updated>2014-04-11T21:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/11/la-meta-programmation-en-ruby-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier j&#8217;ai écris une <a href="http://lkdjiin.github.io/blog/2014/04/10/introduction-a-la-meta-programmation-en-ruby/">introduction à la méta programmation</a>.
Aujourd&#8217;hui j&#8217;approfondis un peu plus le sujet avec l&#8217;écriture d&#8217;un
<em>query builder</em> sommaire.</p>

<!-- more -->


<p>On va commencer avec une classe <code>Article</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Article</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut pas faire plus simple ;) Cette classe ne sera pas très importante
pour la démonstration, c&#8217;est juste un support pour la pensée.
Ce que je veux, c&#8217;est écrire un <em>fabricant de requête SQL</em>. Je me limite
à un simple SELECT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">QueryBuilder</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">column</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;SELECT * from </span><span class="si">#{</span><span class="n">table</span><span class="si">}</span><span class="s2"> where </span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">QueryBuilder</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;article&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;Foo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Résultat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby meta2.rb
</span><span class='line'>SELECT * from article where <span class="nv">name</span> <span class="o">=</span> Foo;
</span></code></pre></td></tr></table></div></figure>


<p>Notre <code>QueryBuilder</code> fait son travail. Il peut servir quelle que soit la
table (et la colonne) recherchée. Mais j&#8217;aime pas :( Trop d&#8217;arguments et
la classe <code>Article</code> ne sert à rien…</p>

<p>On va donc réécrire le <code>QueryBuilder</code> pour qu&#8217;il trouve tout seul comme
un grand le nom de la table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">QueryBuilder</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;SELECT * from </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2"> where </span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Article</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">QueryBuilder</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Article</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;Foo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est bien mieux ! Maintenant le nom de la table est déduit du nom de la
classe. Bien sûr ça nécessite de suivre une convention. Ici la convention
est «Un objet <code>Article</code> = une table <code>article</code>». Ça donne ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby meta2.rb
</span><span class='line'>SELECT * from article where <span class="nv">name</span> <span class="o">=</span> Foo;
</span></code></pre></td></tr></table></div></figure>


<p>Ça marche bien et je pourrais vivre avec ça. Mais Ruby permet de faire
encore mieux, en tous cas il permet d&#8217;ajouter de la <em>magie</em> comme on
entend souvent. Voyons cela, on va à nouveau réécrire le <code>QueryBuilder</code>
pour n&#8217;avoir à passer qu&#8217;un seul argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">QueryBuilder</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">column</span> <span class="o">=</span> <span class="nb">method</span><span class="o">.</span><span class="n">id2name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/find_by_/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;SELECT * from </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2"> where </span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Article</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">QueryBuilder</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Article</span><span class="o">.</span><span class="n">find_by_price</span><span class="p">(</span><span class="mi">12</span><span class="o">.</span><span class="mi">34</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et c&#8217;est magique, on a maintenant autant de méthode <code>find_by_*</code> que
l&#8217;on veut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby meta2.rb
</span><span class='line'><span class="s2">&quot;SELECT * from article where id = 123;&quot;</span>
</span><span class='line'><span class="s2">&quot;SELECT * from article where name = Foo;&quot;</span>
</span><span class='line'><span class="s2">&quot;SELECT * from article where price = 12.34;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vous laisse méditer là-dessus et j&#8217;expliquerais <code>method_missing</code>
dans le prochain article car il est déjà tard…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/12/la-meta-programmation-en-ruby-partie-3/'>La méta programmation en Ruby &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/10/introduction-a-la-meta-programmation-en-ruby/'>Introduction à la meta-programmation en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/'>Ruby Timecop &ndash; Comment ça marche ?</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction à la meta-programmation en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/10/introduction-a-la-meta-programmation-en-ruby/"/>
    <updated>2014-04-10T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/10/introduction-a-la-meta-programmation-en-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La méta programmation, qu&#8217;est-ce que c&#8217;est ? C&#8217;est le fait
de <em>modifier</em> le code au moment de l&#8217;exécution d&#8217;un
programme. Par modifier, il faut aussi entendre créer et
supprimer. C&#8217;est un peu le pendant naturel de
<a href="http://lkdjiin.github.io/blog/2014/04/08/introduction-a-lintrospection-en-ruby/">l&#8217;introspection</a> dont j&#8217;ai parlé récemment.</p>

<!-- more -->


<p>Pour cette introduction au concept de méta programmation, on
va y aller en douceur. Prenons la bête classe suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeting</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">alphonse</span>
</span><span class='line'>    <span class="s1">&#39;Hello Alphonse&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Greeting</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">alphonse</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; Hello Alphonse</span>
</span></code></pre></td></tr></table></div></figure>


<p>On définit la méthode <code>alphonse</code> de manière classique:</p>

<pre><code>def alphonse
  'Hello Alphonse'
end
</code></pre>

<p>C&#8217;est comme ça qu&#8217;on fait tous les jours ;) En fait cette
façon de définir la méthode <code>alphonse</code> est du
<a href="http://fr.wikipedia.org/wiki/Sucre_syntaxique">sucre syntaxique</a>. Ruby est bourré de sucre syntaxique.
Pour définir notre méthode <code>alphonse</code> on pourrait utiliser…
une méthode ! Voyons l&#8217;exemple suivant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeting</span>
</span><span class='line'>  <span class="n">define_method</span><span class="p">(</span><span class="s1">&#39;alphonse&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;Hello Alphonse&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Greeting</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">alphonse</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; Hello Alphonse</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat est identique, et pour cause: c&#8217;est la même
méthode, on l&#8217;a simplement définit autrement.</p>

<p>On a donc:</p>

<pre><code>def alphonse
  'Hello Alphonse'
end
</code></pre>

<p>qui est identique à:</p>

<pre><code>define_method('alphonse') { 'Hello Alphonse' }
</code></pre>

<p>Alors ça nous fait une belle jambe ! Parce que honnêtement,
qu&#8217;est-ce qu&#8217;on y gagne ? Pas en lisibilité en tous cas.
Alors quoi ? Un indice: <strong>on a utilisé une méthode pour
définir une méthode</strong>. Ce qui nous permet de faire ce qui
suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeting</span>
</span><span class='line'>  <span class="o">[</span><span class="s1">&#39;alphonse&#39;</span><span class="p">,</span> <span class="s1">&#39;charlotte&#39;</span><span class="p">,</span> <span class="s1">&#39;marcel&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">method</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Greeting</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">alphonse</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Greeting</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">charlotte</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Greeting</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">marcel</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; Hello Alphonse</span>
</span><span class='line'><span class="c1">#=&gt; Hello Charlotte</span>
</span><span class='line'><span class="c1">#=&gt; Hello Marcel</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon, on a toujours pas gagné en lisibilité. Par contre on
gagne en compacité, imaginez un peu si il y avait 20
méthodes.</p>

<p>Et sinon, concrètement, ça sert à quoi ? Sans cette
capacité de méta programmation, comment feriez vous si,
mettons, les noms des méthodes à implémenter ne sont pas
connus au lancement du programme ? C&#8217;est par exemple une
grande par de la <em>magie</em> de Rails. Dans Rails vous pouvez
chercher <code>User.find_by_name('charlotte')</code> alors même que
vous n&#8217;avez nulle-part définit cette méthode. C&#8217;est grâce
à la méta programmation.</p>

<p>Ça me donne l&#8217;idée de faire quelques prochains articles sur
ce sujet.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/12/la-meta-programmation-en-ruby-partie-3/'>La méta programmation en Ruby &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/11/la-meta-programmation-en-ruby-partie-2/'>La méta programmation en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/'>Ruby Timecop &ndash; Comment ça marche ?</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Projet de client Twitter en console]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/09/projet-de-client-twitter-en-console/"/>
    <updated>2014-04-09T21:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/09/projet-de-client-twitter-en-console</id>
    <content type="html"><![CDATA[<p>J&#8217;ai envie d&#8217;écrire un client Twitter qui tournerait sur la
console, avec une interface totalement en mode texte.</p>

<!-- more -->


<p>Ça pourrait faire une bonne série d&#8217;articles pour ce blog,
non ? Si je voulais l&#8217;écrire vite j&#8217;utiliserais Ruby…
Mais j&#8217;en profiterais bien aussi pour pour apprendre
un nouveau langage (ou améliorer mon niveau avec un que
j&#8217;ai déja un peu pratiqué). Ça serait une bonne occasion de
se plonger dans un peu de nouveauté. Vous en pensez quoi ?
<em>-si vous en pensez quelque chose bien sûr ;)&ndash;</em></p>

<p>Comme langages à utiliser, et sans ordre de préference pour
l&#8217;instant, je pense à:</p>

<ul>
<li><a href="http://racket-lang.org/">Racket</a></li>
<li><a href="http://julialang.org/">Julia</a></li>
<li><a href="http://elixir-lang.org/">Elixir</a></li>
</ul>


<p>Voilà, on verra si ce projet démarre, en tous cas j&#8217;en ai
bien envie…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/11/sortie-de-coco-0-dot-9/'>Sortie de coco 0.9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/08/6-mois-darticles-non-stop/'>6 mois d&#8217;articles non-stop</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/06/premier-jour-de-mon-nouveau-boulot/'>Premier jour de mon nouveau boulot</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction à l'introspection en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/08/introduction-a-lintrospection-en-ruby/"/>
    <updated>2014-04-08T21:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/08/introduction-a-lintrospection-en-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>L&#8217;introspection consiste à obtenir des informations sur un objet au
moment de l&#8217;exécution d&#8217;un programme. Voyons à quoi ça ressemble.</p>

<!-- more -->


<p>Créons une classe <code>Inspector</code> qui va extraire certaines informations
des objets qu&#8217;on lui donnera:</p>

<figure class='code'><figcaption><span>introspection.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Inspector</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">classname</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>
</span><span class='line'>      <span class="n">o</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">methods</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parameters</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>      <span class="n">o</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="o">.</span><span class="n">parameters</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans cet exemple nous allons récupérer le nom de la classe, le nom des
méthodes et certaines informations sur les arguments des méthodes.</p>

<p>Voyons comment ça marche en récupérant le nom de la classe <code>Object</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">load</span> <span class="s1">&#39;./introspection.rb&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">p</span> <span class="no">Inspector</span><span class="o">.</span><span class="n">classname</span><span class="p">(</span><span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="go">&quot;Object&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant ajoutons une classe <code>C</code> avec quelques méthodes:</p>

<figure class='code'><figcaption><span>introspection.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Inspector</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">classname</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>
</span><span class='line'>      <span class="n">o</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">methods</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parameters</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>      <span class="n">o</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="o">.</span><span class="n">parameters</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">baz</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les méthodes de la classe <code>C</code> ne font rien. C&#8217;est normal, ce qui nous
intéresse ici c&#8217;est leur signature. D&#8217;abord le nom de la classe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">load</span> <span class="s1">&#39;./introspection.rb&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">p</span> <span class="no">Inspector</span><span class="o">.</span><span class="n">classname</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="go">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Facile. Maintenant récupérons les méthodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">p</span> <span class="no">Inspector</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>
</span><span class='line'><span class="go">[:foo, :bar, :baz]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas mal. Encore plus fort, inspectons les arguments de chacune des
méthodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Inspector</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="n">C</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'><span class="gp">?&gt; </span>  <span class="nb">p</span> <span class="no">Inspector</span><span class="o">.</span><span class="n">parameters</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">[]</span>
</span><span class='line'><span class="go">[[:req, :arg1], [:req, :arg2]]</span>
</span><span class='line'><span class="go">[[:req, :arg1], [:rest, :args], [:block, :block]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, c&#8217;était une rapide mise en bouche du <em>comment faire ?</em>.
Pour le <em>à quoi ça sert ?</em>, il faudra attendre un prochain article ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/07/le-duck-typing-avec-ruby/'>Le duck typing avec Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le duck typing avec Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/07/le-duck-typing-avec-ruby/"/>
    <updated>2014-04-07T21:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/07/le-duck-typing-avec-ruby</id>
    <content type="html"><![CDATA[<p>Vous faites du Ruby depuis peu ? Vous venez d&#8217;un langage
orienté objet plus <em>classique</em>, comme par exemple Java ?
Vous entendez parler de <strong>duck typing</strong> régulièrement sans
trop voir de quoi il retourne ?
Aujourd&#8217;hui on voit ce qu&#8217;est le duck typing.</p>

<!-- more -->


<p>Pour la petite histoire, nous allons faire marcher (<em>walk</em>) des
rats (<em>Rat</em>) et des souris (<em>Mice</em>). Rat et souris étants des
mammifères (<em>Mammal</em>).</p>

<p>En mimant un langage comme Java, nous allons d&#8217;abord créer
une classe de base qui implémente une méthode <code>walk</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mammal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Mammal</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">walk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous remarquez que cette méthode <code>walk</code> soulève une
exception si elle est appelée. Elle n&#8217;est ici que pour nous
rappeler que les classes filles devront l&#8217;implémenter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">$ ruby duck.rb </span>
</span><span class='line'><span class="err">duck.rb:3:in `walk&#39;: NotImplementedError (NotImplementedError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Poursuivons le mimétisme Java en créant les classes <code>Rat</code> et
<code>Mice</code> qui héritent de <code>Mammal</code>, et qui donc implémentent
conciencieusement la méthode <code>walk</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mammal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Rat</span> <span class="o">&lt;</span> <span class="no">Mammal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;I am a Rat and I walk&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mice</span> <span class="o">&lt;</span> <span class="no">Mammal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;I am a Mice and I walk&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Rat</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">walk</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Mice</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">walk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat est celui qu&#8217;on attend:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">$ ruby duck.rb </span>
</span><span class='line'><span class="err">I am a Rat and I walk</span>
</span><span class='line'><span class="err">I am a Mice and I walk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant ajoutons une classe <code>Laboratory</code> qui a pour rôle
de manipuler nos animaux, en les faisant marcher à la
demande:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mammal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Rat</span> <span class="o">&lt;</span> <span class="no">Mammal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;I am a Rat and I walk&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mice</span> <span class="o">&lt;</span> <span class="no">Mammal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;I am a Mice and I walk&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Laboratory</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">make_walk</span><span class="p">(</span><span class="n">pet</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pet</span><span class="o">.</span><span class="n">walk</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Laboratory</span><span class="o">.</span><span class="n">make_walk</span><span class="p">(</span><span class="no">Rat</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Laboratory</span><span class="o">.</span><span class="n">make_walk</span><span class="p">(</span><span class="no">Mice</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">$ ruby duck.rb </span>
</span><span class='line'><span class="err">I am a Rat and I walk</span>
</span><span class='line'><span class="err">I am a Mice and I walk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et là, si vous venez d&#8217;un langage orienté objet dit
<em>classique</em>, vous devriez avoir tiqué, fait la grimace,
vous être gratté la barbe, etc. Et oui, la classe
<code>Laboratory</code> n&#8217;a <em>aucune connaissance</em> de la classe
<code>Mammal</code>. Et pourtant la ligne <code>pet.walk</code> fonctionne
comme un charme. C&#8217;est parce que nous sommes en Ruby,
un langage <em>dynamique</em>. On pourrait dire un langage qui
n&#8217;a que faire des <em>types</em> (bon c&#8217;est exagéré, hein).</p>

<p>Si <code>Laboratory</code> n&#8217;utilise pas <code>Mammal</code>, on pourrait
peut-être carrément la supprimer ?
On essaye :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Rat</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;I am a Rat and I walk&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mice</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="s2">&quot;I am a Mice and I walk&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Laboratory</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">make_walk</span><span class="p">(</span><span class="n">pet</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pet</span><span class="o">.</span><span class="n">walk</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Laboratory</span><span class="o">.</span><span class="n">make_walk</span><span class="p">(</span><span class="no">Rat</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Laboratory</span><span class="o">.</span><span class="n">make_walk</span><span class="p">(</span><span class="no">Mice</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">$ ruby duck.rb </span>
</span><span class='line'><span class="err">I am a Rat and I walk</span>
</span><span class='line'><span class="err">I am a Mice and I walk</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est ça le duck typing. On ne s&#8217;intéresse pas à ce
<strong>qu&#8217;est</strong> l&#8217;objet mais à ce <strong>qu&#8217;il sait faire</strong>.</p>

<p>Alors ça ne veut pas dire pour autant que l&#8217;héritage est
inutile ou inutilisé avec Ruby. Mais simplement qu&#8217;on
va l&#8217;utiliser moins qu&#8217;ailleurs parce que 1) on peut le
faire et 2) parce qu&#8217;on va se concentrer sur le
comportement et pas sur l&#8217;être.</p>

<p>Voilà, c&#8217;était une explication parmi d&#8217;autres du
duck typing.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment réduire les erreurs de frappe dans la console]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/06/comment-reduire-les-erreurs-de-frappe-dans-la-console/"/>
    <updated>2014-04-06T20:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/06/comment-reduire-les-erreurs-de-frappe-dans-la-console</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Régulièrement j&#8217;analyse mon fichier <code>~/.bash_history</code>.
Régulièrement ça veut dire 2 ou 3 fois par an. Et je regarde ce qui revient
le plus pour voir si je peux en transformer certaines en alias.
Quel rapport avec les fautes de frappe ?</p>

<!-- more -->


<p>La dernière fois que je l&#8217;ai regardé, ce fameux fichier <code>~/.bash_history</code>,
j&#8217;ai trouvé un nombre non négligeable de lignes qui débutaient par <code>gti</code>.
Et oui, j&#8217;écris souvent <code>gti</code> au lieu de <code>git</code> ! On a tous des petits
défauts de ce type, non ?</p>

<p>J&#8217;imagine que nombre d&#8217;entre vous ont déjà ce genre de choses dans
leur fichier <code>~/.bashrc</code> (ou <code>~/.bash_profile</code>), mais pour ceux qui n&#8217;y
avait pas encore pensé, la solution consiste à faire un alias:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">gti</span><span class="o">=</span><span class="s1">&#39;git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors d&#8217;accord, le titre de cet article ment un peu ;) Ça ne réduit pas
mes fautes de frappes, mais ça les rend transparentes, c&#8217;est déjà très bien.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/'>Astuce Bash &ndash; Améliorer l&#8217;historique</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/17/afficher-larborescence-dun-dossier-dans-le-terminal/'>Afficher l&#8217;arborescence d&#8217;un dossier dans le terminal</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/'>Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ce qui vous manque dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/05/ce-qui-vous-manque-dans-vim/"/>
    <updated>2014-04-05T21:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/05/ce-qui-vous-manque-dans-vim</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui pas d&#8217;article technique. Pas de code. Pas de truc ni
d&#8217;astuce. Aujourd&#8217;hui je vous pose une question si vous utilisez Vim :
qu&#8217;est ce qui vous manque ?</p>

<!-- more -->


<p>Qu&#8217;est-ce que vous aimeriez voir dans Vim qui n&#8217;existe pas (encore) ?
Que ce soit un plugin ou une fonctionnalité du programme…</p>

<p>Moi je me lance : j&#8217;aimerais avoir une fonction pour mettre à jour les
syntaxes/ftplugins des langages, par exemple une commande
<code>:UpdateLanguage('ruby')</code> qui irait chercher la dernière version
<em>officielle</em> sur un serveur distant, où elles seraient toutes centralisées,
un peu sur le principe des gem ruby.</p>

<p>Et vous ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/"/>
    <updated>2014-04-04T21:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je voudrais maintenant tester que ma fonction pour passer un mot en
italique fonctionne sur le dernier mot de la phrase, lorsque celui-ci
n&#8217;a qu&#8217;un seul caractère…</p>

<!-- more -->


<p>Voilà le test Vader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (a line whose the last word is of length 1):</span>
</span><span class='line'><span class="err">  abc def ghi j</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting at the end of the last word who is of length 1):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fj&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (last word in italic):</span>
</span><span class='line'><span class="err">  abc def ghi *j*</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et malheureusement, il échoue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">(4/4) [  GIVEN] a line whose the last word is of length 1</span>
</span><span class='line'><span class="err">(4/4) [EXECUTE] starting at the end of the last word who is of length 1</span>
</span><span class='line'><span class="err">(4/4) [ EXPECT] (X) last word in italic</span>
</span><span class='line'><span class="err">  - Expected:</span>
</span><span class='line'><span class="err">      abc def ghi *j*</span>
</span><span class='line'><span class="err">  - Got:</span>
</span><span class='line'><span class="err">      abc def ghi j</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je m&#8217;attendais à un échec, mais pas à celui-ci ! Je pensais obtenir ceci:</p>

<pre><code>abc def *ghi* j
</code></pre>

<p>Donc je trouve ça assez bizarre et j&#8217;écris deux autres tests sur le dernier
mot d&#8217;une phrase, quand ce mot est d&#8217;une longueur correcte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (from the beginning of the last word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fm&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (last word in italic):</span>
</span><span class='line'><span class="err">  abc def ghi jkl *mno*</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (from the end of the last word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fo&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (last word in italic):</span>
</span><span class='line'><span class="err">  abc def ghi jkl *mno*</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là encore le test qui débute sur le dernier caractère échoue de la même
manière, c&#8217;est à dire sans avoir ajouter aucun <code>*</code>.</p>

<p>J&#8217;ai déjà entendu dire que Vim pouvait faire des choses bizarres quand
on se trouve à la fin d&#8217;une phrase. Je ne sais pas si c&#8217;est cela ou la
logique de ma fonction qui est en cause, c&#8217;est toujours un mystère et
j&#8217;espère avoir le temps ce week-end pour investiguer.</p>

<p>En attendant que je m&#8217;y mette, si vous avez des pistes, je suis preneur ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord - Voir la requête SQL pendant l'écriture des tests]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/"/>
    <updated>2014-04-03T20:58:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Cet après-midi, avec un collègue, on écrivait des tests pour une requête
en base de données avec ActiveRecord. Et on a eu besoin d&#8217;étudier le
code SQL qui était généré.</p>

<!-- more -->


<p>On aurait pu lancer une console et jouer avec ActiveRecord dedans, mais
le setup nécessaire pour accéder à l&#8217;objet sur lequel on travaillait est
assez long à mettre en place. On voulait plutôt faire rapidement:</p>

<ol>
<li>On bidouille la requête ActiveRecord.</li>
<li>On lance le test.</li>
<li>On examine le code SQL.</li>
<li>On recommence tant que ça ne nous convient pas.</li>
</ol>


<p>Pour ça, placez la ligne suivante dans votre fichier de test et le tour
est joué.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque/'>ActiveRecord &ndash; Executer une commande SQL quelconque</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/08/introduction-a-lintrospection-en-ruby/'>Introduction à l&#8217;introspection en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/07/le-duck-typing-avec-ruby/'>Le duck typing avec Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Timecop - Comment ça marche ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/"/>
    <updated>2014-04-02T21:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier je vous parlais de Timecop, une gem Ruby qui <em>arrête le
temps</em>, très utile pour tester les dates. J&#8217;y ai repensé un
peu aujourd&#8217;hui sur le mode : «j&#8217;aurais pu y penser avant !».</p>

<p>Alors justement, si j&#8217;avais eu cette idée, comment j&#8217;aurais
fait ? C&#8217;est l&#8217;occasion de parler de méta-programmation.
Allez j&#8217;essaye d&#8217;écrire ma propre méthode
<code>Time.freeze</code>, on verra bien…</p>

<!-- more -->


<p>Voilà les étapes qui me semble nécessaires:</p>

<ol>
<li>Geler le temps et le retenir.</li>
<li>Faire un backup de Time.now.</li>
<li>Définir une nouvelle méthode Time.now qui renvoie toujours
le même temps.</li>
<li>Appeler le block passé à la méthode.</li>
<li>Restaurer la méthode Time.now originale.</li>
</ol>


<p>Avant de coder, j&#8217;écris un test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time before </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">freeze</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time after </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je veux donc obtenir un affichage du genre:</p>

<pre><code>Time before hh:mm:00
hh:mm:03
hh:mm:03
Time after hh:mm:09
</code></pre>

<p>Ok ? C&#8217;est parti.</p>

<h2>Ouvrir la classe Time</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Premier truc à savoir, une classe Ruby est toujours ouverte
à la modification. Même si il s&#8217;agit d&#8217;une classe du coeur
du langage, comme Object ou Kernel. <em>Si vous êtes perdus,
faites une recherche sur «ruby open class».</em></p>

<h2>Arrêter le temps</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas grand chose à dire. On pourra renvoyer l&#8217;objet <code>freezed</code>
chaque fois qu&#8217;on nous demandera <code>Time.now</code>.</p>

<h2>Sauvegarder Time.now original</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là il y a beaucoup à dire. On rentre dans la
méta-programmation et je n&#8217;ai pas la place (ni le temps) dans
cet article pour parler du modêle objet de Ruby.
N&#8217;hésitez pas à faire une recherche sur «ruby object model» ou
«ruby eigenclass».</p>

<p>On dit à la classe <code>Time</code> de créer un alias de la méthode de
classe <code>now</code> avec le nom <code>old_now</code>.</p>

<h2>Un nouveau Time.now</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois, je dis à la classe <code>Time</code> de créer une méthode de
classe qui s&#8217;appelle <code>now</code> et qui renvoie notre objet
<code>freezed</code>.</p>

<h2>Appeler le block</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon, ça c&#8217;était facile ;)</p>

<h2>Restaurer Time.now</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:now</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça me semble tout bon. On teste ?</p>

<h2>Le test</h2>

<figure class='code'><figcaption><span>freeze.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:now</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># singleton_class.send(:remove_method, :old_now)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time before </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">freeze</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time after </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby freeze.rb
</span><span class='line'>Time before 2014-04-02 21:40:57 +0200
</span><span class='line'>2014-04-02 21:41:00 +0200
</span><span class='line'>2014-04-02 21:41:00 +0200
</span><span class='line'>Time after 2014-04-02 21:41:06 +0200
</span></code></pre></td></tr></table></div></figure>


<p>Excellent !</p>

<p>Il reste un léger problème : la méthode <code>Time.old_now</code>
existe toujours, ce qui n&#8217;est pas très propre. On pourra
la supprimer ainsi:</p>

<pre><code>singleton_class.send(:remove_method, :old_now)
</code></pre>

<p>Voilà, j&#8217;aurais quand même pu y penser avant… J&#8217;espère
trouver du temps une prochaine fois pour jeter un coup
d&#8217;oeil au code de Timecop pour comparer avec le code
d&#8217;aujourd&#8217;hui.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/12/la-meta-programmation-en-ruby-partie-3/'>La méta programmation en Ruby &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/11/la-meta-programmation-en-ruby-partie-2/'>La méta programmation en Ruby &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tester facilement vos dates avec Timecop]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/"/>
    <updated>2014-04-01T21:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><a href="https://github.com/travisjeffery/timecop">Timecop</a>
n&#8217;est pas une nouvelle gem. Mais je ne la découvre qu&#8217;aujourd&#8217;hui.
Ça fait pourtant 4 ans que je travaille quotidiennement avec Ruby
et/ou Rails… Et je ne me suis jamais sentis très à l&#8217;aise pour tester
les dates. Avec Timecop, ça devient un jeu d&#8217;enfant.</p>

<!-- more -->


<p>Pour voir un souci possible, prenons la classe suivante qui représente
un article:</p>

<figure class='code'><figcaption><span>article.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Article</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@created_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:created_at</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le monde réel, ce serait surement un ActiveRecord, mais pour
l&#8217;exemple on se contentera bien de cette classe ;)</p>

<p>Maintenant testons la création d&#8217;un article:</p>

<figure class='code'><figcaption><span>tc_article.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;article&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestArticle</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_creation</span>
</span><span class='line'>    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s1">&#39;Foo&#39;</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà le souci, à quelques nano-secondes près ça pète:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby tc_article.rb
</span><span class='line'>Run options:
</span><span class='line'>
</span><span class='line'><span class="c"># Running tests:</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>1/1<span class="o">]</span> TestArticle#test_creation <span class="o">=</span> 0.00 s
</span><span class='line'>  1<span class="o">)</span> Failure:
</span><span class='line'>TestArticle#test_creation <span class="o">[</span>tc_article.rb:8<span class="o">]</span>:
</span><span class='line'>&lt;2014-04-01 21:05:10 +0200&gt; <span class="o">(</span>204201<span class="o">[</span>ns<span class="o">])</span> expected but was
</span><span class='line'>&lt;2014-04-01 21:05:10 +0200&gt; <span class="o">(</span>176685<span class="o">[</span>ns<span class="o">])</span>.
</span><span class='line'>
</span><span class='line'>Finished tests in 0.009979s, 100.2062 tests/s, 200.4125 assertions/s.
</span><span class='line'>1 tests, 2 assertions, 1 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<p>Timecop est la meilleure solution que j&#8217;ai vu jusqu&#8217;ici pour régler
ce type de problème. La gem propose tout simplement (entre autres)
<em>de geler le temps</em>:</p>

<figure class='code'><figcaption><span>tc_article.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;article&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;timecop&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestArticle</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_creation</span>
</span><span class='line'>    <span class="no">Timecop</span><span class="o">.</span><span class="n">freeze</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="s1">&#39;Foo&#39;</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà le résultat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby tc_article.rb
</span><span class='line'>Run options:
</span><span class='line'>
</span><span class='line'><span class="c"># Running tests:</span>
</span><span class='line'>
</span><span class='line'>Finished tests in 0.010756s, 92.9747 tests/s, 185.9494 assertions/s.
</span><span class='line'>1 tests, 2 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;aimerais bien savoir quelles solutions vous avez adoptés pour
régler ce genre de soucis…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/'>Ruby Timecop &ndash; Comment ça marche ?</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/'>Quelques trucs pour lancer Rspec</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/"/>
    <updated>2014-03-31T20:58:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>On continue d&#8217;implémenter <a href="http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/">la fonctionnalité commencée hier</a>
en testant deux cas exceptionnels, toujours à l&#8217;aide de Vader.</p>

<!-- more -->


<p>Revoici le fichier de test d&#8217;hier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting in middle of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fe&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais ajouter deux tests. L&#8217;un pour voir ce qu&#8217;il se passe quand le
curseur se trouve au début d&#8217;un mot, et idem pour la fin d&#8217;un mot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting in middle of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fe&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting at beginning of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fd&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting at the end of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! ff&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et avec l&#8217;implémentation de la dernière fois:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! bi*\&lt;Esc&gt;ea*\&lt;Esc&gt;&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>… le test où le curseur se trouve au début d&#8217;un mot échoue
misérablement.</p>

<p>Pour le faire passer, on doit d&#8217;abord déplacer le curseur d&#8217;un cran
vers la droite:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! lbi*\&lt;Esc&gt;ea*\&lt;Esc&gt;&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on continue avec d&#8217;autres cas exceptionnels.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/"/>
    <updated>2014-03-30T21:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour mon plugin Vim qui aide à écrire du markdown, j&#8217;ai envie d&#8217;une
fonctionnalité pour mettre un mot en italique (et aussi en gras).
Si j&#8217;ai le texte suivant:</p>

<pre><code>foo bar baz
</code></pre>

<p>et que le curseur est dans le mot <code>bar</code>, je veux que la combinaison de
touches <code>&lt;Leader&gt;qi</code> donne ceci:</p>

<pre><code>foo *bar* baz
</code></pre>

<p>Pour implémenter ça, j&#8217;utiliserais encore le framework de test Vader.</p>

<!-- more -->


<p>Voici un premier test, pour le cas général:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting in middle of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fe&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le bloc <code>Execute</code> place d&#8217;abord le curseur sur le caractêre <code>e</code>,
autrement dit <em>à l&#8217;intérieur</em> du mot <code>def</code>. Il lance ensuite la fonction
<code>QuickMarkdownItalic</code> qui devra faire le travail.</p>

<p>Dans le fichier <code>plugin/quickmarkdown.vim</code>, j&#8217;ajoute la nouvelle
fonction:</p>

<figure class='code'><figcaption><span>plugin/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownItalic <span class="k">call</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis j&#8217;implémente la fonction de la manière la plus simple à laquelle
je puisse penser:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! bi*\&lt;Esc&gt;ea*\&lt;Esc&gt;&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Décodage: <code>b</code> place le curseur au début du mot. <code>i*\&lt;Esc&gt;</code> passe en
mode insertion, ajoute un <code>*</code> et revient en mode normal. <code>e</code> place le
curseur à la fin du mot. <code>a*\&lt;Esc&gt;</code> passe en mode insertion <em>derrière</em>
le mot et ajoute un <code>*</code> puis revient encore en mode normal.</p>

<p>Cette fonction sera amenée à bouger une fois qu&#8217;on se sera occupé des
cas particuliers. Ce sera pour une prochaine fois.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exemple de test pour Vim avec le framework Vader]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader/"/>
    <updated>2014-03-29T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour mon plugin <a href="https://github.com/lkdjiin/quickmarkdown">QuickMarkdown</a>, je vais ajouter une petite fonction
qui insère la ligne <code>&lt;!-- more --&gt;</code> quand je tape la combinaison de
touche <code>&lt;Leader&gt;qm</code>. Ça devrait m&#8217;être utile vu que j&#8217;écris du markdown
pour Octopress tous les jours ;) Si on est pas obligé de passer par un
plugin pour ce genre de chose, ça va aussi me permettre de parler un peu
de Vader. Voici donc un exemple simple de TDD pour
Vim, avec le framework de test Vader.</p>

<!-- more -->


<p>Tout d&#8217;abord, j&#8217;écris le test:</p>

<figure class='code'><figcaption><span>test/more.vader</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  Last line</span>
</span><span class='line'>
</span><span class='line'><span class="err">Do (insert more marker in normal mode):</span>
</span><span class='line'><span class="err">  gg</span>
</span><span class='line'><span class="err">  :QuickMarkdownMore\&lt;Enter&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (marker inserted):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  &lt;!-- more --&gt;</span>
</span><span class='line'><span class="err">  Last line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici comment il fonctionne. La directive <code>Given</code> produit un buffer (=~ fichier)
utilisé dans les directives suivante, qui contient 2 lignes, respectivement
<code>First line</code> et <code>Last line</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  Last line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ensuite, la directive <code>Do</code> joue des commandes en mode normal. Tout d&#8217;abord
<code>gg</code>, pour s&#8217;assurer qu&#8217;on est sur la première ligne, puis la commande
<code>QuickMarkdownMore</code>, qui est celle qui est censée faire le travail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Do (insert more marker in normal mode):</span>
</span><span class='line'><span class="err">  gg</span>
</span><span class='line'><span class="err">  :QuickMarkdownMore\&lt;Enter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, la directive <code>Expect</code> s&#8217;assure que le buffer de test a été
transformé comme je le voulais:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Expect (marker inserted):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  &lt;!-- more --&gt;</span>
</span><span class='line'><span class="err">  Last line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il reste à lancer le test (avec <code>:Vader</code>) pour s&#8217;assurer qu&#8217;il ne passe
pas, puis à écrire la fonction, et relancer le test en s&#8217;assurant qu&#8217;il
passe bien cette fois-ci.</p>

<p>Et voici pour finir le code d&#8217;implémentation:</p>

<figure class='code'><figcaption><span>plugin/markdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownMore <span class="k">call</span> quickmarkdown#<span class="nb">more</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>autoload/markdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">more</span><span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="s2">&quot;&lt;!-- more --&gt;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim/'>Vader, un framework de test pour Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - extend self]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/"/>
    <updated>2014-03-28T21:16:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous débutez en Ruby et vous vous demandez ce que peut bien signifier
ce <code>extend self</code> qu&#8217;on rencontre parfois dans un module utilitaire ?</p>

<!-- more -->


<p>Voici un exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="c1">#=&gt; foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne <code>extend self</code> nous permet de définir toutes les méthodes du
module comme étant des méthodes de classe. C&#8217;est pas plus compliqué que
ça.</p>

<p>On aurait pu écrire à la place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou bien encore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a quand même une subtilité qui fait toute la différence !
Sinon ça ne serait pas drôle. En utilisant la syntaxe <code>extend self</code>,
<strong>toutes les méthodes sont des méthodes de classe</strong>, ou de module si
vous préférez ;) La différence est importante puisqu&#8217;ainsi on ne pourra
pas mélanger méthodes utilitaires et méthodes à inclure dans une classe.
Ce qui est parfois tentant, mais c&#8217;est mal. Mais tentant. Mais mal…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/07/le-duck-typing-avec-ruby/'>Le duck typing avec Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord - Executer une commande SQL quelconque]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque/"/>
    <updated>2014-03-27T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Chaque SGBD (Systême de Gestion de Base de Données), comme postgresql ou
mysql par exemple, définissent des tables avec des infos très
intéressantes (appelées meta-data, shéma, catalogue, etc.).</p>

<p>Ces <em>méta-données</em> ne sont pas reliées à un modèle ActiveRecord, alors
comment y accéder si vous en avez besoin ?</p>

<!-- more -->


<p>En utilisant la méthode <code>execute</code> sur la méthode <code>connection</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;ma requete SQL&quot;</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>result</code> possède maintenant les lignes dont vous aviez tant besoin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">row</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/13/ruby-et-si-on-ecrivait-un-orm-partie-1/'>Ruby &ndash; Et si on écrivait un ORM ? &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/12/la-meta-programmation-en-ruby-partie-3/'>La méta programmation en Ruby &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Comment ouvrir la fenêtre courante dans un nouvel onglet]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/"/>
    <updated>2014-03-26T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous avez un écran bien large ? Vous travaillez régulierement avec 4 ou 5
fenêtres dans le même onglet, voir plus ?
Parfois vous aimeriez bien ouvrir rapidement une de ces fenêtres dans un
nouvel onglet ?</p>

<!-- more -->


<p>Alors ça va peut-être bien être l&#8217;article le plus court de l&#8217;histoire de ce
blog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">tab</span> <span class="k">sp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et la fenêtre courante s&#8217;ouvre dans un nouvel onglet (<code>sp</code> est l&#8217;abréviation
de <code>split</code>).</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/"/>
    <updated>2014-03-25T19:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Comme me le faisait remarquer ce matin un lecteur, il manque un cas à
mon article d&#8217;hier sur l&#8217;utilisation de <code>super</code> en Ruby. C&#8217;est d&#8217;autant
plus impardonnable que c&#8217;est un cas où, pour une fois, les parenthèses
sont <strong>obligatoires</strong> à la fin d&#8217;une méthode.</p>

<!-- more -->


<p>Voici donc une classe de base et une classe fille:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Base#foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Child#foo with </span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant on essaye le tout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="c1">#=&gt; ArgumentError: wrong number of arguments (0 for 1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boum ! Comme on l&#8217;a vu hier, <code>super</code> passe automatiquement tous les
paramètres de la méthode dans laquelle il est appelé vers la classe
de base. Et là, notre méthode <code>foo</code> dans la classe de base est sans
argument.</p>

<p>Pour résoudre ce problème, on est obligé de mettre des parenthèses
à la suite de <code>super</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Child#foo with </span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;ok&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Base</span><span class="c1">#foo</span>
</span><span class='line'><span class="no">Child</span><span class="c1">#foo with ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, oubli réparé.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/07/le-duck-typing-avec-ruby/'>Le duck typing avec Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
