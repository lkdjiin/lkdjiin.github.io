<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-12-09T21:07:53+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/"/>
    <updated>2013-12-09T20:36:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Il est temps de se passer d&#8217;un fichier pour notre script… Lorsque celui-ci
est suffisament court, on peut l&#8217;écrire directement sur la ligne de
commande.</p>

<!-- more -->


<p>Si on reprend l&#8217;exemple tout simple du <a href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/">dernier article</a>,
nous avions le fichier de données suivant à transformer <em>en place</em> en
majuscule:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">alice</span>
</span><span class='line'><span class="err">bob</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qu&#8217;on a fait à l&#8217;aide du script suivant:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span><span class="o">.</span><span class="n">upcase!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autrement une seule ligne ! Est-ce que ça vaut vraiment la peine d&#8217;écrire
un fichier pour ça ? Bien sûr que non. On va donc se passer du fichier
script en donnant le code sur la ligne de commande grâce à l&#8217;option <code>-e</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -p -i.2 -e <span class="s1">&#39;$_.upcase!&#39;</span> data.txt
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, vous êtes maintenant prêts à écrire des <em>one liners</em>. Notez
quand même qu&#8217;il vaut mieux utiliser les guillemets simples (<code>'</code>) autour
du code plutôt que les doubles (<code>"</code>), pour empêcher Bash d&#8217;interpréter
certains caractères (comme ici le <code>!</code>).</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/'>Remplacer Sed et Awk par Ruby 5: Accéder aux champs/colonnes</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/"/>
    <updated>2013-12-08T19:30:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Parfois on veut analyser un fichier, et parfois on veut le modifier.
Si on suit la logique de <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">cette série d&#8217;articles</a>, Ruby devrait offrir
un switch permettant de modifier un fichier sans avoir à l&#8217;enregistrer
explicitement. Et je ne vais pas vous surprendre
en vous apprenant qu&#8217;un tel switch existe, il s&#8217;agit de l&#8217;option
<code>-i</code>, qui permet aussi de sauvegarder l&#8217;ancien fichier.</p>

<!-- more -->


<p>L&#8217;exemple d&#8217;aujourd&#8217;hui est encore plus trivial que d&#8217;habitude ;) Voici
le fichier de données:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">alice</span>
</span><span class='line'><span class="err">bob</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce que je voudrais, c&#8217;est simplement tout mettre en majuscule. Ce que
permet le script suivant:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span><span class="o">.</span><span class="n">upcase!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on lance le script comme on sait le faire maintenant
(voir par exemple <a href="http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/">l&#8217;article précédant</a>), on obtient un bel
affichage:</p>

<pre><code>[~/test]⇒ ruby -p test.rb data.txt 
ALICE
BOB
</code></pre>

<p>Mais le fichier lui-même n&#8217;a pas changé:</p>

<pre><code>[~/test]⇒ cat data.txt
alice
bob
</code></pre>

<p>Si on veut modifier le fichier, on doit se servir de l&#8217;option <code>-i</code> en
spécifiant l&#8217;extension qui sera ajouter au fichier original sauvegardé,
ici <code>.2</code>:</p>

<pre><code>[~/test]⇒ ruby -p -i.2 test.rb data.txt 
</code></pre>

<p>Et voilà, on a bien les deux fichiers attendus:</p>

<pre><code>[~/test]⇒ ls data*
data.txt  data.txt.2
</code></pre>

<p>Notre fichier est bien modifié:</p>

<pre><code>[~/test]⇒ cat data.txt
ALICE
BOB
</code></pre>

<p>Et il est bien sauvegardé:</p>

<pre><code>[~/test]⇒ cat data.txt.2
alice
bob
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/'>Remplacer Sed et Awk par Ruby 5: Accéder aux champs/colonnes</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 6: Séparateur de champ]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/"/>
    <updated>2013-12-07T20:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui on voit comment changer le séparateur de champ à l&#8217;aide de
l&#8217;option <code>-F</code>.</p>

<!-- more -->


<p>Reprenons le fichier de données du <a href="http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/">dernier article</a>,
ajoutons un séparateur de champ, par exemple la virgule (<code>,</code>) et
<em>salissons-le</em> quelque peu:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1, a</span>
</span><span class='line'><span class="err">2, a</span>
</span><span class='line'><span class="err">3, b</span>
</span><span class='line'><span class="err">4 , a</span>
</span><span class='line'><span class="err">5 ,a</span>
</span><span class='line'><span class="err">6 ,b</span>
</span><span class='line'><span class="err">7,b</span>
</span><span class='line'><span class="err">8,b</span>
</span><span class='line'><span class="err">9,b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le script du dernier article ne fonctionnera plus, puisque jusqu&#8217;ici nous
supposions que les champs étaient séparés par des espaces, ce qui n&#8217;est plus
le cas.</p>

<p>En admettant que les champs seront séparés par des virgules, il faut effectuer
un petit changement dans notre script, pour nettoyer le second champ:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="o">+=</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_i</span> <span class="k">if</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">strip</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Total: </span><span class="si">#{</span><span class="n">total</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et pour que Ruby sépare bien les champs en tenant compte des virgules, il faut
lui passer l&#8217;option <code>-F</code>, suivie d&#8217;une <em>regex</em> (sans les <code>//</code>) décrivant
le séparateur:</p>

<pre><code>[~]⇒ ruby -an -F, test.rb &lt; data.txt 
Total: 12
</code></pre>

<p>Et voilà.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/'>Remplacer Sed et Awk par Ruby 5: Accéder aux champs/colonnes</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aidez-vous : traduisez !]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/"/>
    <updated>2013-12-06T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>D&#8217;aussi loin que je me souvienne,
j&#8217;ai toujours traduit de la documentation technique anglaise en français.
J&#8217;ai commencé par traduire des tutoriaux sur l&#8217;assembleur, juste pour moi.
Plus tard, j&#8217;ai traduis des pages de documentation sur Netbeans.
C&#8217;était un autre temps, un temps où je n&#8217;utilisais pas encore Vim, où je
programmais en Java… Et j&#8217;ai énormement appris en faisant des traductions.</p>

<!-- more -->


<p>Tous les développeurs ne lisent pas l&#8217;anglais, même technique. Certains ont
des problèmes avec la langue de Shakespeare et ont besoin de documentation
en français. On peut toujours se dire que, quand même, ils devraient s&#8217;y
mettre, mais en attendant, ils font comment ?</p>

<p>Même quand vous maitrisez assez l&#8217;anglais pour lire la documentation dans
la langue originale, il est toujours plaisant de pouvoir
lire dans sa langue, surtout pour une première approche du produit.</p>

<p><strong>Aidez-vous, traduisez de la documentation open-source !</strong> J&#8217;y vois trois
avantages:</p>

<ol>
<li>Quel que soit votre niveau en anglais, vous allez vous améliorer en
en faisant des traductions. Apprendre du nouveau vocabulaire, des
nouvelles tournures, etc.</li>
<li>En traduisant des documentations, vous allez en apprendre plus sur
le produit, quel qu&#8217;il soit, puisque vous serez dans l&#8217;obligation
de comprendre chaque détail du produit.</li>
<li>Ça peut être un avantage pour votre CV. S&#8217;il est vrai que certains
employeur ne s&#8217;intéressent pas à votre anglais, je n&#8217;en ai jamais vu
qui considèrent un bon niveau d&#8217;anglais comme un point négatif ;)</li>
</ol>


<p>Même si vous pensez ne pas avoir un niveau suffisant, lancez-vous ! Vous
en retirerez toujours un bénéfice.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 5: Accéder aux champs/colonnes]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/"/>
    <updated>2013-12-05T19:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Toujours dans l&#8217;optique de remplacer Sed et Awk par Ruby,
et après avoir vu <a href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/">les options -p et -l</a>, on voit
comment accéder facilement aux différentes colonnes
d&#8217;un fichier.</p>

<!-- more -->


<p>Voici le fichier de données tout simple qui va nous servir aujourd&#8217;hui:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1 a</span>
</span><span class='line'><span class="err">2 a</span>
</span><span class='line'><span class="err">3 b</span>
</span><span class='line'><span class="err">4 a</span>
</span><span class='line'><span class="err">5 a</span>
</span><span class='line'><span class="err">6 b</span>
</span><span class='line'><span class="err">7 b</span>
</span><span class='line'><span class="err">8 b</span>
</span><span class='line'><span class="err">9 b</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;objectif est de calculer la somme des valeurs de la 1ère colonne,
uniquement quand la 2e colonne affiche <code>a</code>. On pourrait bien sûr splitter
la ligne (<code>$_</code>) pour obtenir nos champs, mais il y a plus rapide.
En activant l&#8217;option <code>-a</code> de la ligne de commande, Ruby va automatiquement
splitter chaque lignes du fichier de données dans la variable prédéfinie
<code>$F</code> (pour <em>Fields</em>). On n&#8217;a donc rien à faire ;) et on peut se concentrer
sur les calculs:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="o">+=</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_i</span> <span class="k">if</span> <span class="vg">$F</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Total: </span><span class="si">#{</span><span class="n">total</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby -an test.rb &lt; data.txt 
Total: 12
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 4: Les options -p et -l]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/"/>
    <updated>2013-12-04T21:21:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Les options -p et -l de la ligne de commande de Ruby permettent de se
rapprocher encore un peu plus du comportement de Sed et Awk.  On reprend notre
fichier tout simple:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">4</span>
</span><span class='line'><span class="err">5</span>
</span><span class='line'><span class="err">6</span>
</span><span class='line'><span class="err">7</span>
</span><span class='line'><span class="err">8</span>
</span><span class='line'><span class="err">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aujourd&#8217;hui l&#8217;objectif est d&#8217;ajouter une nouvelle colonne, qui nous dit si
le nombre est pair (p) ou impair (i). C&#8217;est un exemple trivial, mais
suffisant pour ce que je veux montrer.</p>

<!-- more -->


<h2>Un premier script déjà concis</h2>

<p>Voici un premier code possible, avec ce que nous connaissons déjà, c&#8217;est
à dire l&#8217;option -n:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span> <span class="o">=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">chomp</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">even?</span> <span class="p">?</span> <span class="s2">&quot; p&quot;</span> <span class="p">:</span> <span class="s2">&quot; i&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$_</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby -n test1.rb &lt; data.txt 
1 i
2 p
3 i
4 p
5 i
6 p
7 i
8 p
9 i
</code></pre>

<p>On peut noter que:</p>

<ul>
<li>contrairement à l&#8217;exemple précédent, on n&#8217;utilise pas les blocs BEGIN et
END (voir <a href="http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/">Premiers pas</a>
et <a href="http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end/">BEGIN et END</a>).</li>
<li>la variable prédéfinie <code>$_</code> est <strong>accessible en écriture</strong>.</li>
<li>la variable prédéfinie <code>$_</code> contient le caractère de fin de ligne, il a
fallu le supprimer avec <code>chomp</code>. C&#8217;est agaçant.</li>
<li>on écrit chaque nouvelle ligne avec <code>puts</code>. C&#8217;est un pattern classique,
il doit bien y avoir un truc pour nous éviter cela.</li>
</ul>


<h2>La même chose en plus court</h2>

<p>Voici maintenant une réécriture du script ci-dessus, qui tire parti
des options -p et -l:</p>

<figure class='code'><figcaption><span>test2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$_</span> <span class="o">+=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">even?</span> <span class="p">?</span> <span class="s2">&quot; p&quot;</span> <span class="p">:</span> <span class="s2">&quot; i&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby -pl test2.rb &lt; data.txt 
1 i
2 p
3 i
4 p
5 i
6 p
7 i
8 p
9 i
</code></pre>

<h2>Les explications de -p et -l</h2>

<p>L&#8217;option -p fonctionne comme l&#8217;option -n, mais en plus, affiche automatiquement
le contenu de la variable <code>$_</code> à la fin de la boucle de traitement.</p>

<p>L&#8217;option -l, quant à elle, s&#8217;occupe automatiquement du caractère de fin
de ligne en le supprimant.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le ventilo de mon alimentation fait un bruit d'enfer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer/"/>
    <updated>2013-12-03T20:20:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer</id>
    <content type="html"><![CDATA[<p>Juste avant d&#8217;écrire cet article, le ventilo de l&#8217;alimentation de mon pc
c&#8217;est mis a faire un bruit d&#8217;enfer. Le pc tremble de partout.</p>

<!-- more -->


<p>Je vais tenter un truc pour prolonger un peu sa vie. Si ça rate, je ne
pourrais peut-être pas publié d&#8217;article demain :(</p>

<p>Quand ce genre de chose arrive, on peut tenter de démonter le ventilo, puis
de mettre une goutte d&#8217;huile sur le palier, le truc qui se trouve sous
une pastille autocollante. Voilà, j&#8217;espère que ça va fonctionner…</p>

<p>À demain ?</p>

<p><strong>Edit du jour même</strong> <em>Je ne l&#8217;ai jamais trouvé ce foutu palier ! Sous la
pastille autocollante il y avait… du plastique moulé ! Quoiqu&#8217;il en soit,
il semblerait qu&#8217;un bon coup d&#8217;aspirateur ai suffit à rendre le sourire
au ventilo ;) Je touche du bois…</em></p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires/'>Un plugin Vim pour replier/folder les commentaires</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme/'>Je vais apprendre Scheme</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/'>Couverture de code pour Ruby avec coco</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un plugin Vim pour replier/folder les commentaires]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires/"/>
    <updated>2013-12-02T18:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires</id>
    <content type="html"><![CDATA[<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédent</a>, je montrai comment écrire une fonction pour
folder les commentaires de style Unix dans un fichier. Cette solution avait
plusieurs limites alors j&#8217;ai eu envie d&#8217;en faire un plugin plus
intéressant. Je vous présente donc vim-foldcomments, mon premier plugin
pour Vim.</p>

<!-- more -->


<p>Pouvoir folder/replier tous les commentaires d&#8217;un fichier peut être
utile quand vous étudiez un tout nouveau code, ou au contraire, quand vous
travaillez sur un code bien connu.
Vous pouvez trouver le plugin sur Github: <a href="https://github.com/lkdjiin/vim-foldcomments">vim-foldcomments</a>.
Une fois installé, avec <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> par exemple,
vous pouvez taper la commande:</p>

<pre><code>:FoldComments
</code></pre>

<p>pour replier les commentaires du fichier. Personnelement j&#8217;ai mappé cette
commande sur la touche F5 en mettant ceci dans mon .vimrc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map<span class="p">&lt;</span>F5<span class="p">&gt;</span> FoldComments<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le plugin est en version béta et ne gère pour l&#8217;instant que quelques
langages: Ruby, Haskell, Java, C, Javascript, Logo, Racket, Scheme, Vim,
ainsi que tous commentaires de style Unix (<code>#</code>). Les commentaires
multilignes (<code>/* … */</code> en C ou encore <code>=begin … =end</code> en Ruby) sont aussi
pris en compte.</p>

<p>N&#8217;hésitez pas à le tester et à me donner votre opinion. Vous pouvez aussi
bien sûr participer au code sur Github.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses/'>Vim: Coloration syntaxique des parenthèses</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer/'>Le ventilo de mon alimentation fait un bruit d&#8217;enfer</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/'>Vim: Plier (folder) les commentaires de style Unix</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 3: BEGIN et END]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end/"/>
    <updated>2013-12-01T21:23:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Les blocs BEGIN et END du langage Ruby paraissent étranges pour beaucoup
de personnes. Ils sont inutiles (et certainement néfastes) pour des
programmes dit <em>classiques</em>. Ils peuvent être utiles pour un script.
Il sont indispensables pour remplacer Sed et Awk et on va donc les
regarder plus en détail.</p>

<!-- more -->


<p>Un exemple simple vaut mieux qu&#8217;un long discours:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;avant&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;après&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;au milieu&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby test1.rb 
avant
au milieu
après
</code></pre>

<p><code>BEGIN</code> est donc l&#8217;endroit où on initialisera les variables et <code>END</code>
permettra de faire les calculs et l&#8217;affichage en fin de traitement.</p>

<p>Il faut savoir qu&#8217;on peut avoir plusieurs blocs
<code>BEGIN</code> et <code>END</code>. Les blocs <code>BEGIN</code> seront interprétés dans l&#8217;ordre
d&#8217;apparition, tandis que les blocs <code>END</code> seront interprétés dans l&#8217;ordre
inverse d&#8217;apparition:</p>

<figure class='code'><figcaption><span>test2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;end 1&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;end 2&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;end 3&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;begin 1&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;begin 2&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;begin 3&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby test2.rb
begin 1
begin 2
begin 3
end 3
end 2
end 1
</code></pre>

<p>Enfin, pour être exhaustif, on ne peut pas remplacer les <code>{}</code> par <code>do</code>
et <code>end</code>, comme on pourrait s&#8217;y attendre:</p>

<figure class='code'><figcaption><span>test3.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;avant&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ ruby test3.rb
test3.rb:1: syntax error, unexpected keyword_do, expecting '{'
test3.rb:3: syntax error, unexpected keyword_end, expecting end-of-input
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 2: Premiers pas]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/"/>
    <updated>2013-11-30T16:29:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous avez décidé de <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">remplacer Sed et Awk par Ruby</a> ? C&#8217;est parti.
L&#8217;objectif de cet article sera de calculer et d&#8217;afficher la somme des
valeurs contenues dans un fichier.</p>

<p>Prenons le simple fichier de données (data.txt) suivant:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">4</span>
</span><span class='line'><span class="err">5</span>
</span><span class='line'><span class="err">6</span>
</span><span class='line'><span class="err">7</span>
</span><span class='line'><span class="err">8</span>
</span><span class='line'><span class="err">9</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Hello world!</h2>

<p>Le premier pas sera d&#8217;afficher chaque ligne du fichier de données. Voici le
script Ruby qui va faire ça:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="vg">$_</span>
</span></code></pre></td></tr></table></div></figure>


<p>La variable <code>$_</code> est une variable prédéfinie qui contient la ligne en cours
de traitement. Dans <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">l&#8217;article précédent</a>, j&#8217;évoquai la boucle de traitement
implicite. Pour dire à Ruby d&#8217;utiliser cette boucle implicite, on doit
utiliser l&#8217;option <code>-n</code> sur la ligne de commande:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n test1.rb &lt; data.txt
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>6
</span><span class='line'>7
</span><span class='line'>8
</span><span class='line'>9
</span></code></pre></td></tr></table></div></figure>


<h2>BEGIN et END</h2>

<p>Pour calculer la somme des valeurs du fichier, il va falloir initialiser
une variable <em>avant</em> la boucle de traitement et l&#8217;afficher <em>après</em> la
boucle de traitement. Pour ça, Ruby reprend ce que fait Awk avec les
blocs <code>BEGIN {}</code> et <code>END {}</code>:</p>

<figure class='code'><figcaption><span>one_shot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="o">+=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">total</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code placé dans un bloc <code>BEGIN</code> est executé avant tout autre code du
fichier. Celui placé dans un bloc <code>END</code> est executé après tout autre code
du fichier. Objectif atteint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n one_shot.rb &lt; data.txt
</span><span class='line'>45
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter qu&#8217;on a réussi notre objectif sans avoir explicitement à ouvrir
le fichier et à lire chaque ligne.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/"/>
    <updated>2013-11-29T18:31:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Sed et Awk sont deux petits langages spécialisés dans l&#8217;édition, le
traitement, l&#8217;analyse, le filtrage, etc, des fichiers texte.
Ce que peuvent faire ces deux langages, Ruby peut le faire.</p>

<!-- more -->


<p>Dans mon <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédant</a>
j&#8217;ai écrit:</p>

<blockquote><p>le fichier https://github.com/ruby/ruby/blob/trunk/lib/csv.rb de<br/>Ruby contient à ce jour 46% de lignes qui sont des commentaires.</p></blockquote>


<p>Je n&#8217;ai bien sûr pas compté chaque commentaire du fichier. J&#8217;ai écrit pour
cela un petit script Ruby.</p>

<p>Un algorithme standard pour ce type de tâche serait:</p>

<pre><code>ouvrir le fichier
initialiser des variables

pour chaque ligne du fichier
    mettre à jour des variables
fin

fermer le fichier
calculer le résultat
afficher le résultat
</code></pre>

<p>En fait, quand on traite/édite/analyse/filtre un fichier texte, un pattern
basique apparait:</p>

<pre><code>ouvrir le fichier
pour chaque ligne du fichier
    # faire un truc
fin
fermer le fichier
</code></pre>

<p>Avec Sed et Awk, l&#8217;ouverture du fichier, sa fermeture et la boucle de
traitement sont <em>implicites</em>. Autrement dit, on n&#8217;écrit jamais ce code.
On écrit seulement le code du traitement.</p>

<p>Ruby peut faire cela.</p>

<p>Une question se pose alors :
si Sed et Awk sont faits pour ça, pourquoi utiliser Ruby à la place ?
Il y a plusieurs raisons possibles:</p>

<ul>
<li>Vous ne connaissez ni Sed, ni Awk mais vous connaissez déjà Ruby,
même un peu. Pourquoi apprendre un nouveau langage ?</li>
<li>Vous pratiquez Sed et Awk et vous trouvez la syntaxe … comment dire …
ésotérique (surtout celle de Sed).</li>
<li>Utiliser Ruby permet d&#8217;avoir accès à toutes ses bibliothèques.</li>
</ul>


<p>Convaincu ? Dans ce cas surveillez ce blog, je vais rapidement écrire
quelques articles sur ce sujet.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/'>Remplacer Sed et Awk par Ruby 7: Modifier/sauvegarder les données</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/'>Remplacer Sed et Awk par Ruby 6: Séparateur de champ</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Plier (folder) les commentaires de style Unix]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/"/>
    <updated>2013-11-28T16:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Certains fichiers sources contiennent une proportion non négligeable de
commentaires, ou documentation interne. Par exemple, le fichier
<a href="https://github.com/ruby/ruby/blob/trunk/lib/csv.rb">ruby/lib/csv.rb</a> de
Ruby contient à ce jour 46% de lignes qui sont des commentaires. Quand on
cherche à étudier ces sources  pour la première fois, le nombre
important de commentaire est un frein pour naviguer ou se repérer dans
un tel fichier. Aujourd&#8217;hui je montre comment replier facilement les
ensembles de lignes commençant par <code>#</code>.</p>

<!-- more -->


<h2>Présentation</h2>

<p>Les fonctions de Vim qu&#8217;on va utiliser sont les suivantes:</p>

<pre><code>Fonction      Raccourci
=======================
foldmethod    fdm
foldexpr      fde
</code></pre>

<p>Vim comporte plusieurs méthodes de pliage (<em>folding</em>) de code, qu&#8217;on
spécifie avec <code>foldmethod</code>. Ici on va utiliser la méthode <code>expr</code>, qui
permet de faire à peu près tout ce qu&#8217;on veut. L&#8217;expression sera
spécifiée avec <code>foldexpr</code>.</p>

<h2>Essai en direct</h2>

<p>On va d&#8217;abord voir comment ça marche en entrant les commandes en direct live.
Ouvrez le fichier
<a href="https://github.com/ruby/ruby/blob/trunk/lib/csv.rb">ruby/lib/csv.rb</a>
(ou un autre avec beaucoup de commentaires de style Unix) et entrez ce qui
suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">fdm</span><span class="p">=</span>expr
</span><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">fde</span><span class="p">=</span>getline<span class="p">(</span><span class="k">v</span>:lnum<span class="p">)=~</span><span class="s1">&#39;^\\s*#&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Badaboum ! Tout les commentaires sont pliés. Explications:</p>

<pre><code>getline(v:lnum)
</code></pre>

<p>Cette fonction retrouve une ligne du fichier. <code>v:lnum</code> est une variable
prédéfinie qui contient le numéro de la ligne courante.</p>

<pre><code>=~
</code></pre>

<p>Cet opérateur a le même sens qu&#8217;en Ruby, par exemple. Autrement dit,
est-ce que la chaîne à ma gauche correspond à la regex à ma droite ?</p>

<pre><code>'^\\s*#'
</code></pre>

<p>C&#8217;est notre regex: début de ligne (<code>^</code>), suivi par un nombre quelconque
de blancs (<code>\\s*</code>), suivi par le caractère <code>#</code>.</p>

<p>L&#8217;expression spécifiée dans <code>foldexpr</code> (ou comme ici <code>fde</code>) sera appelée
par Vim sur chaque ligne du fichier.</p>

<h2>Embarqué dans le fichier</h2>

<p>Maintenant qu&#8217;on sait comment ça marche, voyons comment faire pour ne pas
avoir à taper ces 2 lignes à chaque fois.</p>

<p>Si vous écrivez la ligne suivante dans un fichier, typiquement à la fin, les
commandes seront executées automatiquement à l&#8217;ouverture du fichier.
C&#8217;est un truc utile à connaitre.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'># <span class="k">vim</span>:<span class="nb">fdm</span><span class="p">=</span>expr:<span class="nb">fde</span><span class="p">=</span>getline<span class="p">(</span><span class="k">v</span>\:lnum<span class="p">)=~</span><span class="s1">&#39;^\\s*#&#39;</span>:
</span></code></pre></td></tr></table></div></figure>


<p>Notez qu&#8217;il a fallu échapper le <code>:</code> de <code>v:lnum</code> pour que ça fonctionne.</p>

<h2>Une fonction</h2>

<p>Une fonction dans le <code>.vimrc</code> sera plus intéressante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> FoldUnixComments<span class="p">()</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">foldmethod</span><span class="p">=</span>expr
</span><span class='line'>  <span class="k">set</span> <span class="nb">foldexpr</span><span class="p">=</span>getline<span class="p">(</span><span class="k">v</span>:lnum<span class="p">)=~</span><span class="s1">&#39;^\\s*#&#39;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour l&#8217;executer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">call</span> FoldUnixComments<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>La méthode présentée ici n&#8217;est pas parfaite. En effet <code>foldmethod=expr</code>
<em>écrase</em> votre ancienne méthode. Néanmoins, elle me semble suffisante
quand il s&#8217;agit juste d&#8217;étudier un fichier.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/04/ecrire-une-fonction-vim-avec-ruby/'>Écrire une fonction Vim avec Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires/'>Un plugin Vim pour replier/folder les commentaires</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque/'>Utiliser Vim comme un tableur sur Linux (enfin presque)</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Argument nommé et requis]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/"/>
    <updated>2013-11-27T18:14:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ruby 2.0 a introduit les arguments nommés, appelés <em>keyword argument</em>
dans la langue de Shakespeare, soit: «argument mot-clé». Ruby 2.1 ajoute
la notion d&#8217;argument nommé <strong>et</strong> requis.</p>

<p>Voilà à quoi ça ressemble, un argument nommé:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">arg</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="c1">#=&gt; &quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avant Ruby 2.1</h2>

<p>Mais en Ruby 2.0, vous êtes obligé de donner une valeur par défaut:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">arg</span><span class="p">:)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">SyntaxError: (irb):10: syntax error, unexpected &#39;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Imaginez que ça soit pareil avec les arguments dit
<em>normaux</em>. On ne pourrait pas écrire:</p>

<pre><code>def foo(arg)
</code></pre>

<p>On serait obligé d&#8217;écrire à la place:</p>

<pre><code>def foo(arg="hello")
</code></pre>

<p>Un peu bizarre, non ?</p>

<h2>Avec Ruby 2.1</h2>

<p>On peut maintenant définir un argument nommé sans valeur par défaut, et
donc faire en sorte qu&#8217;il soit requis:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">arg</span><span class="p">:)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">=&gt; :foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span>
</span><span class='line'><span class="go">ArgumentError: missing keyword: arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="go">ArgumentError: missing keyword: arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="ss">arg</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="go">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/'>Du nouveau dans Ruby 2.1: Le suffixe r</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/"/>
    <updated>2013-11-26T20:33:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui c&#8217;est au tour du nouveau suffixe <code>f</code> (comme frozen) d&#8217;être passé
en revue.</p>

<!-- more -->


<h2>Avant Ruby 2.1</h2>

<p>Les chaînes de caractères en Ruby sont des objets <em>mutables</em>. Ce qui
signifie qu&#8217;à chaque fois que l&#8217;interpréteur rencontre <code>"foo"</code>, il crée
un nouvel objet:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; "foo".object_id
74667700
&gt;&gt; "foo".object_id
74664050
</code></pre>

<p>Ce qui peut influer sur les performances d&#8217;un programme quand on compare
beaucoup de chaînes. Voici un exemple trivial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">foo</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">==</span> <span class="n">foo</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Encore une fois, on peut constater qu&#8217;un nouvel objet est créé à chaque
appel de la méthode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bépo&quot;</span>
</span><span class='line'><span class="go">76675080</span>
</span><span class='line'><span class="go">false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="go">76669680</span>
</span><span class='line'><span class="go">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et géler (<em>freeze</em>) l&#8217;objet n&#8217;empêchera pas sa création à chaque appel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">freeze</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">foo</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">nil</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span>
</span><span class='line'><span class="go">82081130</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span>
</span><span class='line'><span class="go">82079520</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avec Ruby 2.1</h2>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<p>Le suffixe <code>f</code> permet de géler (<em>freeze</em>) les chaînes de
caractères:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="n">f</span>
</span><span class='line'><span class="go">=&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">reverse!</span>
</span><span class='line'><span class="go">RuntimeError: can&#39;t modify frozen String</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et surtout, le suffixe <code>f</code> les gèlent une fois pour toutes.
L&#8217;exemple précédent donne ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="n">f</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">p</span> <span class="n">foo</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">string</span> <span class="o">==</span> <span class="n">foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">=&gt; :foo?</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bépo&quot;</span>
</span><span class='line'><span class="go">79029020</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="go">79029020</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p><strong>Edit du 1er décembre 2013</strong> Cette fonctionnalité a été supprimé dans
la version <a href="https://www.ruby-lang.org/en/news/2013/11/22/ruby-2-1-0-preview2-is-released/">2.1.0-preview2</a>.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/'>Du nouveau dans Ruby 2.1: Le suffixe r</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe r]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/"/>
    <updated>2013-11-25T23:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui on voit une nouvelle façon d&#8217;écrire un nombre rationnel dans
Ruby 2.1.</p>

<!-- more -->


<p>Jusqu&#8217;ici pour écrire un nombre rationnel, on devait faire ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rational</span><span class="p">(</span><span class="s1">&#39;1/3&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui est loin d&#8217;être concis:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; Rational('1/3') + Rational('1/9')
4/9
</code></pre>

<p>Désormais, avec Ruby 2.1, on pourra se servir du suffixe <code>r</code>:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
&gt;&gt; 1/3r + 1/9r
=&gt; (4/9)
</code></pre>

<p>Encore un peu plus de sucre dans notre langage ;)</p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser Vim comme un tableur sur Linux (enfin presque)]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque/"/>
    <updated>2013-11-24T20:55:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p><a href="http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github/">Hier</a> j&#8217;ai donné une liste des rapports issues/nombre de dépots
par langages sur Github. Aujourd&#8217;hui je montre comment j&#8217;ai utilisé
Vim (sur linux) pour calculer ce rapport et formater la liste.</p>

<!-- more -->


<p>Voici la liste de départ, à récupérer <a href="http://hubreports.yougeezer.co.uk/languages">ici</a>, il s&#8217;agit juste d&#8217;un
copier/coller de la page web et je n&#8217;ai pris ici que les 5 premiers,
c&#8217;est suffisant pour la démonstration:</p>

<pre><code>1   JavaScript .js  560,116 891,531 319,537 4,951   1,147   343,483
2   Ruby .rb    466,411 469,913 175,577 2,726   607 147,339
3   Java .java  388,610 376,683 231,186 4,185   825 161,136
4   Python .py  281,835 323,858 130,034 2,538   685 184,908
5   PHP .php    275,411 289,899 155,941 2,331   454 150,024
</code></pre>

<p>Alors on n&#8217;y comprend rien puisque les colonnes sont invisibles. On va
former de belles colonnes à l&#8217;aide de l&#8217;utilitaire unix <strong>column</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> column <span class="p">-</span><span class="k">t</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le résultat:</p>

<pre><code>1  JavaScript  .js    560,116  891,531  319,537  4,951  1,147  343,483
2  Ruby        .rb    466,411  469,913  175,577  2,726  607    147,339
3  Java        .java  388,610  376,683  231,186  4,185  825    161,136
4  Python      .py    281,835  323,858  130,034  2,538  685    184,908
5  PHP         .php   275,411  289,899  155,941  2,331  454    150,024
</code></pre>

<p>Les colonnes qui m&#8217;intéresse sont la 1 (rang), la 2 (langage), la 4
(nombre de dépots) et la dernière (nombre d&#8217;issues actives).
Je vais donc sélectionner la 3ème colonne à l&#8217;aide de <code>Ctrl-v</code> et la
supprimer (avec <code>d</code>). Voici ce que donne la sélection d&#8217;une colonne en
image si vous n&#8217;êtes pas familier de Vim:</p>

<p><img src="http://lkdjiin.github.io/images/vim-column.png"></p>

<p>Je répète ensuite la sélection/suppression pour les autres colonnes et
j&#8217;obtiens:</p>

<pre><code>1  JavaScript  560,116  343,483
2  Ruby        466,411  147,339
3  Java        388,610  161,136
4  Python      281,835  184,908
5  PHP         275,411  150,024
</code></pre>

<p>Il faut maintenant ajouter une colonne de chiffre qui contiendras le rapport
d&#8217;issues par dépots en pourcentage. C&#8217;est à dire la 4ème colonne divisée par
la 3ème colonne, le tout multiplié par 100. C&#8217;est classiquement un boulot
qu&#8217;on confierai au langage Awk, mais j&#8217;ai décidé il y a quelques temps de
faire le plus possible de choses avec Ruby, voici donc ce que j&#8217;ai écrit
dans Vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> <span class="k">ruby</span> <span class="p">-</span>aple <span class="s1">&#39;$_ += &quot; \#{(($F[3].to_f/$F[2].to_f)*100).to_i}&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un peu cryptique ? Je l&#8217;avoue bien volontiers, mais les one-shots sont
rarement fait pour (peuvent rarement) être lisible… Je ferais certainement
un article sur les switchs a, p, l et e de <code>ruby</code>. Quoiqu&#8217;il en soit, voici
le résultat:</p>

<pre><code>1  JavaScript  560,116  343,483 61
2  Ruby        466,411  147,339 31
3  Java        388,610  161,136 41
4  Python      281,835  184,908 65
5  PHP         275,411  150,024 54
</code></pre>

<p>Il reste à trier cette liste sur la 5ème et dernière colonne, un jeu d&#8217;enfant
avec l&#8217;utilitaire unix <code>sort</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> <span class="k">sort</span> <span class="p">-</span>k5nr
</span></code></pre></td></tr></table></div></figure>


<pre><code>4  Python      281,835  184,908 65
1  JavaScript  560,116  343,483 61
5  PHP         275,411  150,024 54
3  Java        388,610  161,136 41
2  Ruby        466,411  147,339 31
</code></pre>

<p>Voilà, ça prend un certain temps à décrire mais c&#8217;est rapide à faire quand
vous avez sous le coude une paire d&#8217;utilitaires qui déchirent !</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/04/ecrire-une-fonction-vim-avec-ruby/'>Écrire une fonction Vim avec Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/'>Vim: Créez des présentations avec Vimdeck</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/'>Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourcentage des issues par langages sur Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github/"/>
    <updated>2013-11-23T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github</id>
    <content type="html"><![CDATA[<p>Sur hubReports, on peut avoir plusieurs statistiques concernants les dépots de
code et les utilisateurs de GitHub.
<a href="http://hubreports.yougeezer.co.uk/languages">Cette page</a> montre par exemple
le nombre de dépots et d&#8217;issues actives par langages.</p>

<p>Voici les 21 premiers langages (ceux qui ont plus de 10 000 dépots),
triés par nombre de dépots:</p>

<!-- more -->


<pre><code>Rank  Language      Repos    Issues
1     JavaScript    559,445  342,695
2     Ruby          465,960  147,376
3     Java          387,956  161,071
4     Python        281,468  184,744
5     PHP           275,014  149,927
6     C             147,403  64,353 
7     C++           142,090  71,020 
8     C#            94,122   42,112 
9     Objective-C   89,588   36,593 
10    Shell         82,228   21,300 
11    Perl          69,301   20,146 
12    VimL          40,771   6,281  
13    Scala         21,889   11,542 
14    CoffeeScript  20,668   13,930 
15    Haskell       18,171   7,825  
16    Go            17,890   7,378  
17    EmacsLisp     15,671   4,553  
18    Clojure       14,729   5,933  
19    Lua           13,667   5,896  
20    ActionScript  12,221   5,533  
21    R             10,117   4,504  
</code></pre>

<p>En voyant ça, je me suis demandé quel était le pourcentage d&#8217;issues par
rapport au nombre de dépots. Le voici dans la liste qui suit. Cette fois
la liste est triée sur le dernier champ:</p>

<pre><code>Rank  Language      Repos    Issues   % Issues/Repos
12    VimL          40,771   6,281    15
10    Shell         82,228   21,300   25
17    EmacsLisp     15,671   4,553    26
11    Perl          69,301   20,146   28
2     Ruby          465,960  147,376  31
18    Clojure       14,729   5,933    35
15    Haskell       18,171   7,825    38
19    Lua           13,667   5,896    38
21    R             10,117   4,504    40
9     Objective-C   89,588   36,593   40
16    Go            17,890   7,378    41
20    ActionScript  12,221   5,533    41
3     Java          387,956  161,071  41
6     C             147,403  64,353   43
8     C#            94,122   42,112   44
7     C++           142,090  71,020   50
13    Scala         21,889   11,542   52
5     PHP           275,014  149,927  54
1     JavaScript    559,445  342,695  61
14    CoffeeScript  20,668   13,930   65
4     Python        281,468  184,744  65
</code></pre>

<p>Alors je n&#8217;en tire aucunes conclusions puisque ce rapport n&#8217;est pas
très <em>scientifique</em>. Mais c&#8217;est toutefois marrant de voir VimL et Perl
parmi les bons élèves (selon ce critère bien sûr) et de voir CoffeeScript
et Python en queue de peloton (toujours selon ce critère évidement).</p>

<p>Est-ce que ça vous interpèle ?</p>

<p>Demain je montrerais comment je suis passé d&#8217;une liste à l&#8217;autre à l&#8217;aide
de Vim.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Définition de méthode]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/22/du-nouveau-dans-ruby-2-dot-1-definition-de-methode/"/>
    <updated>2013-11-22T17:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/22/du-nouveau-dans-ruby-2-dot-1-definition-de-methode</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Ruby 2.1 devrait être là dans pas longtemps, il est temps de regarder
ce que cette nouvelle version nous offre. Aujourd&#8217;hui on va voir un petit
changement dans la définition des méthodes.</p>

<!-- more -->


<h2>Ce qui change avec def</h2>

<p>Jusqu&#8217;ici, <code>def</code> renvoyait <code>nil</code>:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; def foo;end
nil
</code></pre>

<p>Dans Ruby 2.1, <code>def</code> va renvoyer le nom de la méthode (en tant que symbole):</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
&gt;&gt; def foo;end
=&gt; :foo
</code></pre>

<h2>Un cas d&#8217;utilisation</h2>

<p>Pour l&#8217;instant je ne connais qu&#8217;un seul cas d&#8217;utilisation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut utiliser Ruby pendant très longtemps avant de se rendre compte que
<code>private</code> est une méthode et non un mot-clé. Avant Ruby 2.1, l&#8217;utilisation
typique de <code>private</code> est celle-ci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bar</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autrement dit: les méthodes publiques avant <code>private</code> et les méthodes privées
après. Une autre possibilité intéressante est la suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo_helper</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="kp">private</span> <span class="ss">:bar</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Moins utilisée mais pourtant cool, cette façon de faire permet de garder,
par exemple, une méthode helper sous la méthode appellante.</p>

<p>Avec Ruby 2.1 nous aurons donc la possibilité d&#8217;écrire ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="n">foo_helper</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà. Si vous connaissez un autre cas d&#8217;utilisation, laissez donc un
commentaire.</p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/'>Du nouveau dans Ruby 2.1: Le suffixe r</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: première approche de lambda]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/21/racket-premiere-approche-de-lambda/"/>
    <updated>2013-11-21T19:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/21/racket-premiere-approche-de-lambda</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/">article précédent</a>, j&#8217;ai écrit une fonction Racket pour calculer
les diviseurs d&#8217;un nombre n:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; Is i a divisor of n?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor?</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="nv">divisor?</span> <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">divisors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on a vu comment <a href="http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/">faire des tests unitaires</a>.
Il est temps maintenant de faire un peu de refactoring.</p>

<!-- more -->


<p>Tout d&#8217;abord, le plus simple, on va extraire une fonction qui calcule
un <em>range</em> de 1 à n inclus:</p>

<figure class='code'><figcaption><span>number.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; divisors : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Get divisors of a number n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; Is i a divisor of n?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor?</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="nv">divisor?</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; range-inclusive : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Build a list from 1 to n inclusive.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">divisors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous noterez au passage que j&#8217;ai commencé à documenter mes fonctions en
spécifiant les types de données en entrée et en sortie. Vous remarquez aussi
que <code>range-inclusive</code> ne fait pas partie de l&#8217;API du module:
<code>(provide divisors)</code>.</p>

<p>Maintenant il nous faut extraire la fonction qui regarde si un nombre <em>i</em> est
un diviseur de <em>n</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="c1">; divisor-of? : integer integer -&gt; boolean</span>
</span><span class='line'><span class="c1">; Tells if i is a divisor of n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le nom de la fonction a changé au passage pour <code>divisor-of?</code>. Mais surtout
nous avons du inclure <em>n</em> dans les arguments de la fonction.</p>

<p>On doit maintenant <em>insérer</em> cette fonction dans le code de la fonction
principale <code>divisors</code>. Voici une première tentative un peu naive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="c1">; Attention, ce code ne fonctionne pas.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Évidemment ça ne marche pas, puisque Racket ne connait pas <em>i</em>, mais
ça nous donne une orientation. Pour que Racket sache ce que nous voulons
placer dans <em>i</em>, à savoir l&#8217;élément en cours de traitement par la fonction
<code>filter</code>, on va passer par une fonction anonyme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">))</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une fonction anonyme (lambda) prend un argument (ou plusieurs) et une
expression. À chaque itération, <code>filter</code> passe un élément tiré de
<code>(range-inclusive n)</code> à la fonction anonyme <code>(lambda (i) (divisors-of? n i))</code>.</p>

<p>Voilà donc notre module, après refactoring:</p>

<figure class='code'><figcaption><span>number.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; divisors : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Get divisors of a number n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">))</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; divisor-of? : integer integer -&gt; boolean</span>
</span><span class='line'><span class="c1">; Tells if i is a divisor of n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; range-inclusive : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Build a list from 1 to n inclusive.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">divisors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On aurait aussi pu écrire ce qui suit, à la place des trois fonctions ci-dessus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="c1">; divisors : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Get divisors of a number n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span> <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça fait bien sûr beaucoup moins de code… Peut-être est-ce parceque je ne suis
pas encore habitué à Racket, mais je trouve aussi cela bien moins lisible.
Si on doit réutiliser les fonctions <code>divisor-of?</code> et <code>range-inclusive</code>, il
n&#8217;y a pas de question à se poser. Sinon…? Si vous connaissez bien
Racket/Scheme/Lisp laissez donc un commentaire pour me dire quelle version
est la plus idiomatique de ce type de langages.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/'>Racket pour les Rubyists 8: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quand internet m'énerve (ou mes principes à la con]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/20/quand-internet-menerve-ou-mes-principes-a-la-con/"/>
    <updated>2013-11-20T21:11:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/20/quand-internet-menerve-ou-mes-principes-a-la-con</id>
    <content type="html"><![CDATA[<p>Bonjour à tous, rien de technique aujourd&#8217;hui, seulement sept
petits coups de gueule à propos de ce qu&#8217;on trouve parfois sur internet.</p>

<!-- more -->


<h2>numéro 1</h2>

<p>Le site web <strong>qui affiche directement une boite modale</strong> du style
«Recevez notre newsletter». Avant même de me dire bonjour,
avant même de savoir de quoi on va me parler,
on me met ça en pleine tronche !
Ce que ça me dis de votre site web c&#8217;est:
«tu est juste là pour augmenter mon carnet d&#8217;adresse».
Non merci, je ferme l&#8217;onglet sans me poser de questions…</p>

<h2>numéro 2</h2>

<p>Les sites dans le genre de Quora: «<strong>You must sign in to read past the
first answer.</strong>» Pourquoi devrais je m&#8217;inscrire ? C&#8217;est trop demander que de
me l&#8217;expliquer en une phrase ?
Je ferme l&#8217;onglet sans me poser de questions…</p>

<h2>numéro 3</h2>

<p><strong>Les issues désactivées sur Github.</strong> Vous ne voulez pas savoir ce qui
cloche dans votre programme ? Pas grave, j&#8217;en trouverais un autre…</p>

<h2>numéro 4</h2>

<p>Les sites web affichant <strong>une police de caractères de 12 pixels</strong>, voir moins.
Alors oui, je peux toujours zoomer, mais quel est l&#8217;intérêt de m&#8217;obliger
à le faire ?</p>

<h2>numéro 5</h2>

<p><strong>Les articles de blogs qu&#8217;on ne peut pas commenter.</strong> Tu as peur de quoi ?
C&#8217;est dommage car j&#8217;avais une question intéressante pour nous deux, et
peut-être aussi pour d&#8217;autres. Tant pis, je ne viendrais plus…</p>

<h2>numéro 6</h2>

<p><strong>Les questions obligatoires dans les sondages.</strong> Voilà comment je vois les
choses: je te <em>donne</em> de <em>mon temps</em> pour t&#8217;aider, pour t&#8217;être agréable, et toi
tu veux <em>m&#8217;obliger</em> à répondre. Ben non, tu n&#8217;auras pas mes réponses…</p>

<h2>numéro 7</h2>

<p><strong>Les projets open-source sans documentation.</strong> Et comment je fais pour
l&#8217;utiliser, moi ? Je suis censé lire les sources, sans rire ? Tant pis,
je trouverais mon bonheur ailleurs…</p>

<p>Voilà, c&#8217;est tout pour aujourd&#8217;hui. Ça fait du bien de s&#8217;exprimer un peu.
Et vous, qu&#8217;est-ce qui vous met de mauvaise humeur sur le net ? Lâchez vous,
c&#8217;est le moment…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/'>Aidez-vous : traduisez !</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/27/vim-pour-ecrire-un-livre/'>Vim pour écrire un livre ?</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/09/un-mois-darticles-quotidiens-le-bilan/'>Un mois d&#8217;articles quotidiens: le bilan</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
