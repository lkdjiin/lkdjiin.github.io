<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-11-11T10:02:26+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bug de la version graphique de Vim sur Debian Sid]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/11/11/bug-de-la-version-graphique-de-vim-sur-debian-sid/"/>
    <updated>2016-11-11T09:46:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/11/11/bug-de-la-version-graphique-de-vim-sur-debian-sid</id>
    <content type="html"><![CDATA[<p>Depuis une mise à jour récente de la bibliothèque gtk3 un
bug affecte la version graphique de Vim (<code>gvim</code>) sur Debian Sid. Ce bug est
important puisqu’il rend <code>gvim</code> tout simplement inutilisable. Lorsqu’on lance
le programme on obtient le message suivant, qui se répète plusieurs fois :</p>

<pre><code>$ gvim

(gvim:6054): Gtk-CRITICAL **: gtk_widget_set_size_request: assertion 'width &gt;= -1' failed
*** BUG ***
In pixman_region32_init_rect: Invalid rectangle passed
Set a breakpoint on '_pixman_log_error' to debug
.
.
.
</code></pre>

<p>Des discussions sont en cours pour savoir si le bug est de la responsabilité
de Vim ou de Gtk3, mais en attendant on fait quoi ?</p>

<!-- more -->

<p>On peut d’abord regarder où est placée la commande <code>gvim</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>which gvim
</span><span class="line">/usr/bin/gvim
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut maintenant regarder quel programme est en réalité appelé par cette
commande (j’ai tronqué la sortie pour laisser seulement ce qui est
intéressant).  On voit que <code>gvim</code> est un lien symbolique qui pointe sur
<code>/etc/alternatives/gvim</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls -l /usr/bin/gvim
</span><span class="line"><span class="o">[</span>...<span class="o">]</span> /usr/bin/gvim -&gt; /etc/alternatives/gvim*
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Allons voir sur quel programme est <em>branché</em> l’alternative :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ls -l /etc/alternatives/gvim
</span><span class="line"><span class="o">[</span>...<span class="o">]</span> /etc/alternatives/gvim -&gt; /usr/bin/vim.gtk3*
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fait sens. Regardons quelles <em>versions</em> de vim sont disponibles en tapant
<code>vim</code> + tab :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vim
</span><span class="line">vim        vim.basic  vimdiff    vim.gtk    vim.gtk3   vim.tiny   vimtutor
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’ancienne version (<code>vim.gtk</code>) m’intéresse. Si vous ne l’avez pas/plus, vous
pouvez l’installer avec <code>apt-get install vim-gtk</code>.</p>

<h2 id="solution-n1">Solution n°1</h2>

<p>Un tour dans l’aide de <code>vim.gtk</code> montrera qu’on peut le lancer avec l’option <code>-g</code>
pour avoir l’interface graphique. En attendant que le bug soit réparé on peut
donc utiliser <code>vim.gtk -g</code> à la place de <code>gvim</code>.</p>

<h2 id="solution-n2">Solution n°2</h2>

<p>Le programme <code>update-alternatives</code> permet de gérer ce genre de problème
facilement. Utilisez le pour choisir ce que lancera la commande <code>gvim</code> :</p>

<pre><code>$ sudo update-alternatives --config gvim
[sudo] Mot de passe de xavier : 
Il existe 2 choix pour l'alternative gvim (qui fournit /usr/bin/gvim).

  Sélection   Chemin             Priorité  État
------------------------------------------------------------
* 0            /usr/bin/vim.gtk3   50        mode automatique
  1            /usr/bin/vim.gtk    50        mode manuel
  2            /usr/bin/vim.gtk3   50        mode manuel

Appuyez sur &lt;Entrée&gt; pour conserver la valeur par défaut[*] ou choisissez le numéro sélectionné :1
</code></pre>

<p>Vous pourriez préférer la version graphique <code>galternatives</code>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/02/vim-pourquoi-les-touches-hjkl/">Vim : Pourquoi les touches HJKL ?</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/28/un-nouveau-depot-pour-les-plugins-vim/">Un nouveau dépot pour les plugins Vim</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/08/trois-bibliotheques-de-fonctions-pour-ecrire-vos-plugins-vim/">Trois bibliothèques de fonctions pour écrire vos plugins Vim</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un framework de test pour Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/"/>
    <updated>2016-11-02T09:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby</id>
    <content type="html"><![CDATA[<p>Si vous souhaitez comprendre le fonctionnement d’un framework de test, si vous
voulez écrire votre propre framework et que vous ressentiez le besoin d’un coup
de pouce, cet article est fait pour vous. Nous verrons étape par étape comment écrire
une telle chose. Le framework que nous réaliserons tiendra en quelques dizaines de
lignes de Ruby et pourra être utilisé comme une base pour vos futures
réalisations.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/colorful-test-tubes.jpg" /></p>

<!-- more -->

<h2 id="par-o-commencer-">Par où commencer ?</h2>

<p>Pour ce genre de problématique, je trouve qu’il est plus simple de partir d’un
exemple concret du <strong>langage</strong>, de l’<strong>API</strong>, que l’on souhaite obtenir. Dans notre
cas, nous pouvons déjà écrire quelques tests même si nous ne pouvons pas encore
les faire tourner.</p>

<p>Voici 3 tests pour une classe Rover. Classe qui aura une position x,y et une
direction :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb final.</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_given_direction</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’ai cherché à faire au plus simple. Tout se passe à l’intérieur d’une classe.
Ça nous permettra d’hériter facilement de certains comportements, comme la
méthode <code>assert</code> qui sera définit dans la classe <code>Tasty::Unit</code>.</p>

<p>Chaque méthode qui commence par <code>test_</code> représente un test, et <code>assert</code> se
contente de vérifier si son argument est vrai ou faux.</p>

<p>On lancera le programme avec le nom d’un fichier de test, par exemple
<code>tasty test_rover.rb</code>. Mais par souci de simplicité, nous nous contenterons
d’utiliser directement l’interpréteur Ruby de cette manière :
<code>ruby tasty.rb test_rover.rb</code>.</p>

<p>Voici ce que j’imagine en terme d’affichage :</p>

<pre><code>$ ruby tasty.rb test_rover.rb
ok - test_it_has_a_position
not ok - test_it_has_a_given_direction
&lt;&lt; ERROR REPORT GOES HERE &gt;&gt;
ok - test_it_has_a_direction_by_default
</code></pre>

<p>Le nom d’un test est précédé de “ok” si il a réussi, ou de “not ok” si il a
échoué. Le rapport d’erreur est affiché aussitôt après une ligne “not ok”.</p>

<h2 id="retrouver-la-classe-de-test">Retrouver la classe de test</h2>

<p>Commençons par le plus simple, définissons une classe Rover dans un fichier
<code>rover.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis définissons notre premier test, dans un fichier <code>test_rover.rb</code>. Ce
premier test va nous guider pendant un bout de temps :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant, dans un fichier <code>tasty.rb</code>, définissons le namespace Tasty et une
classe principale. Nous initialiserons cette classe avec le nom de fichier
passé en argument sur la ligne de commande. Nous afficherons un message
temporaire pour nous assurer que nous sommes sur la bonne voie :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Testing </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’essai est concluant :</p>

<pre><code>$ ruby tasty.rb test_rover.rb
Testing test_rover.rb
</code></pre>

<p>Tant qu’on y est, mieux vaut définir tout de suite la classe <code>Tasty::Unit</code>,
voici à quoi devrait ressembler votre fichier <code>tasty.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Testing </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Passons maintenant au sujet principal de cette section : nous devons retrouver
le nom de la classe de test, à savoir <code>TestRover</code>, depuis la classe
<code>Tasty::Main</code>. Pour ce faire nous pourrions écrire un parser qui
analyserait le contenu du fichier passé en argument. Ou bien nous pouvons
compter sur les facilités d’introspection du langage Ruby. Je parie volontiers
sur cette seconde solution. Nous laisserons Ruby charger et parser le fichier de
test pour nous. Nous chargerons le fichier de la même manière qu’un autre, avec
un <code>require</code>. Puis nous utilerons <code>Object.constants</code> pour accéder à toutes les
constantes définies jusqu’ici (une classe est représentée par une constante) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous lancez ce programme, vous verrez une liste de toutes les constantes
définies, dont celle que nous cherchons, <code>TestRover</code> :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
Object
Module
Class
BasicObject
...
SimpleDelegator
Tasty
Rover
TestRover # &lt;============================
RUBYGEMS_ACTIVATION_MONITOR
</code></pre>

<p>Attention, il s’agit d’un tableau de symboles. Vous pouvez vous en convaincre
en changeant de méthode d’affichage. Remplacez <code>puts</code> par <code>p</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">  <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">  <span class="nb">p</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous pouvez voir qu’il s’agit de symboles :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
[:Object, :Module, :Class, :BasicObject, :Kernel, :NilClass, :NIL, :Data,
...
:SimpleDelegator, :Tasty, :Rover, :TestRover, :RUBYGEMS_ACTIVATION_MONITOR]
</code></pre>

<p>Nous pouvons sélectionner uniquement les classes commençant par <code>Test</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">p</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous avons réduit le tableau aux seules classes de test. Nous en avons une
seule ici, mais nous pourrions très bien en avoir plusieurs :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
[:TestRover]
</code></pre>

<p>Il y a une convention qui est à l’oeuvre : seule une classe de test peut
commencer par <code>Test</code>. Ça n’est pas un bien grand sacrifice, et nous pourrions
y remédier si besoin.</p>

<h2 id="les-mthodes-de-test">Les méthodes de test</h2>

<p>La prochaine étape consistera à récupérer les méthodes qui sont dans la classe
de test, et à les lancer.</p>

<p>Un peu de recherche, dans une session irb et avec la <a href="http://ruby-doc.org/">documentation Ruby</a>,
nous montrera que nous pouvons transformer un symbole en une classe, et aussi
instancier cette classe, à l’aide de <code>Object.const_get</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="ss">:Module</span>
</span><span class="line"><span class="go">:Module</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="ss">:Module</span><span class="p">)</span>
</span><span class="line"><span class="go">Module &lt; Object</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="ss">:Module</span><span class="p">)</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="go">#&lt;Module:0x0055e0036e5580&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>On peut donc transformer notre tableau de symboles selon cette méthode :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="n">classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="n">classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Retournons dans une session irb pour voir comment obtenir les méthodes d’une
classe quelconque.  Définissons une classe <code>C</code> avec une méthode
<code>method_in_class_c</code> pour les besoins de la cause :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">C</span>
</span><span class="line"><span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">method_in_class_c</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La méthode <code>instance_methods</code> appliquée sur une classe liste les méthodes de
cette classe. Nous retrouvons notre méthode <code>method_in_class_c</code>, parmi plein
d’autres :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">instance_methods</span>
</span><span class="line"><span class="go">method_in_class_c # &lt;--------------------</span>
</span><span class="line"><span class="go">methods</span>
</span><span class="line"><span class="go">singleton_methods</span>
</span><span class="line"><span class="go">protected_methods</span>
</span><span class="line"><span class="go">private_methods</span>
</span><span class="line"><span class="go">public_methods</span>
</span><span class="line"><span class="go">instance_of?</span>
</span><span class="line"><span class="go">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>D’où viennent ces autres méthodes ? Ce sont les méthodes héritées ou incluses.
Pour restreindre les méthodes à celles définies dans la classe C, nous devons
utiliser un artifice :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class="line"><span class="go">method_in_class_c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons nous servir de ce nouveau savoir pour lister les méthodes de test :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="n">classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="n">classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="n">classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class="line">        <span class="n">c</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="nb">puts</span> <span class="n">m</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous l’avons trouvé :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_it_has_a_position
</code></pre>

<p>Il reste à lancer chaque test en se servant de la méthode <a href="http://ruby-doc.org/core-2.3.1/Object.html#method-i-send">send</a> sur une
instance de la classe de test. Nous ferons cela ailleurs que dans le
constructeur de la classe Tasty::Main. Dans une méthode <code>run</code> par exemple, ça
sera plus propre :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">class_under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">class_under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">class_under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">main</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alors, et si on lançait les tests :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:6:in `initialize':
  wrong number of arguments (given 2, expected 0) (ArgumentError)
  from test_rover.rb:6:in `new'
  from test_rover.rb:6:in `test_it_has_a_position'
</code></pre>

<p>Déçu ? Vous ne devriez pas, ça a parfaitement fonctionné. Le programme nous dit
qu’en ligne 6 du fichier <code>test_rover.rb</code> nous tentons d’initialiser un rover
avec 2 arguments alors que la méthode <code>initialize</code> de rover attends 0
arguments. Voyons cette fameuse ligne 6, dans le test nous cherchons à
initialiser un rover avec des coordonnées x et y :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et comme notre classe <code>Rover</code> est déséspérement vide, il est normal que Ruby
crashe.</p>

<h2 id="passons-le-premier-test">Passons le premier test</h2>

<p>Dotons la méthode <code>Rover#initialize</code> de deux arguments, comme attendu :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et le programme nous emmène au prochain problème :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_position': undefined method `position'
for #&lt;Rover:0x0055778cf43a90&gt; (NoMethodError)
</code></pre>

<p>On en vient facilement à bout en ajoutant la méthode <code>Rover#position</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’erreur suivante est beaucoup plus intéressante :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_position': undefined method `assert'
for #&lt;TestRover:0x00558edbe7a828&gt; (NoMethodError)
</code></pre>

<p>Nous devons coder <code>assert</code> de telle manière qu’elle produise une erreur si son
argument est différent de <code>true</code>.  Et pour que les classes de test puissent y
accéder, nous la placerons dans <code>Tasty::Unit</code>. Nous utiliserons aussi une erreur
custom, <code>AssertionError</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">AssertionError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">boolean</span><span class="p">)</span>
</span><span class="line">      <span class="k">raise</span> <span class="no">AssertionError</span> <span class="k">unless</span> <span class="n">boolean</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous y sommes presque. La méthode <code>assert</code> est codée et produit l’erreur attendue :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
tasty.rb:8:in `assert': Tasty::AssertionError (Tasty::AssertionError)
  from test_rover.rb:7:in `test_it_has_a_position'
</code></pre>

<p>Que se passerait-il si nous implémentions <code>Rover</code> de telle manière qu’elle
passe le test ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">    <span class="o">[</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et bien rien. Il ne se passe rien.</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
$ # &lt;---- Cruelle absence d'affichage
</code></pre>

<p>En l’occurence, ce rien signifie quand même que nous avons réussi cette
partie !  Le test est passé ! Ajoutons un petit quelque chose pour être tenu au
courant :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">class_under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">class_under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">class_under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">          <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">          <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="n">m</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># &lt;---------------</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et c’est la victoire :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">ruby</span> <span class="n">tasty</span><span class="o">.</span><span class="n">rb</span> <span class="n">test_rover</span><span class="o">.</span><span class="n">rb</span>
</span><span class="line"><span class="n">ok</span> <span class="o">-</span> <span class="n">test_it_has_a_position</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="les-autres-tests">Les autres tests</h2>

<p>Ajoutons le second test, mais plaçons le avant le premier (!) pour observer un
phénomène curieux :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le programme reporte bien le nouveau problème qui se trouve dans la méthode
<code>test_it_has_a_direction_by_default</code> mais il n’y a aucune mention de
<code>test_it_has_a_position</code> qui fonctionnait pourtant bien.</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
test_rover.rb:7:in `test_it_has_a_direction_by_default': undefined method
`direction' for #&lt;Rover:0x0055a03b444db0 @x=3, @y=2&gt; (NoMethodError)
</code></pre>

<p>Lorsqu’une erreur se produit dans <code>Tasty::Main#run</code>, le programme s’arrête
purement et simplement. Ce n’est pas du tout ce que nous voulons. Nous voulons
qu’une erreur soit rapportée, et que le programme continue en traitant le test
suivant. Commençons par remanier un peu la méthode <code>run</code> en la splittant en
deux parties :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">under_test</span><span class="o">|</span>
</span><span class="line">      <span class="n">instance</span> <span class="o">=</span> <span class="n">under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">      <span class="n">under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="n">m</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons alors <em>attraper</em> les erreurs facilement dans la méthode <code>run_test</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;not ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">inspect</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà le résultat, nous affichons à la fois les tests qui passent et ceux
qui échouent :</p>

<pre><code>$ ruby tasty.rb test_rover.rb 
not ok - test_it_has_a_direction_by_default
#&lt;NoMethodError: undefined method `direction' for #&lt;Rover:0x0055a7709c03c0 @x=3, @y=2&gt;&gt;
test_rover.rb:7:in `test_it_has_a_direction_by_default'
...
ok - test_it_has_a_position
</code></pre>

<p>En dotant <code>Rover</code> de la méthode <code>position</code> qui suit, les tests passent :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">position</span>
</span><span class="line">  <span class="s1">&#39;north&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ ruby tasty.rb test_rover.rb 
ok - test_it_has_a_direction_by_default
ok - test_it_has_a_position
</code></pre>

<p>Faire passer le 3ème test implique seulement d’implémenter la classe <code>Rover</code> de
façon correcte. Il n’y a rien à ajouter ou à modifier dans notre framework
<code>Tasty</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Nous venons d’écrire un framework de test en quelques dizaines de lignes de
code grâce aux facultés d’introspection de Ruby. C’est maintenant à votre tour
de jouer en l’améliorant.  Voici quelques idées :</p>

<ul>
  <li>Faire jouer les tests dans un ordre aléatoire</li>
  <li>Afficher une ligne de résultat final : <code>X tests, Y errors</code></li>
  <li>La sortie console devrait se faire en couleur, les lignes “ok” en vert, les
lignes “not ok” en rouges, et le reste en normal</li>
  <li>Écrire <code>ok - it has a position</code> plutôt que <code>ok - test_it_has_a_position</code></li>
  <li>Faire en sorte que des classes autres que celles de test puissent commencer par <code>Test</code>.</li>
  <li>Le must pour un compilateur, c’est d’être écrit dans son langage. Faire
pareil ici : tester Tasty avec Tasty</li>
</ul>

<p>Pour finir, voici le code complet :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier rover.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Rover</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">direction</span><span class="o">=</span><span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">    <span class="vi">@direction</span> <span class="o">=</span> <span class="n">direction</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">position</span>
</span><span class="line">    <span class="o">[</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:direction</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier test_rover.rb</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;rover&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestRover</span> <span class="o">&lt;</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Unit</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_direction_by_default</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_position</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_it_has_a_given_direction</span>
</span><span class="line">    <span class="n">rover</span> <span class="o">=</span> <span class="no">Rover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rover</span><span class="o">.</span><span class="n">direction</span> <span class="o">==</span> <span class="s1">&#39;west&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># fichier tasty.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Tasty</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">AssertionError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Unit</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">boolean</span><span class="p">)</span>
</span><span class="line">      <span class="k">raise</span> <span class="no">AssertionError</span> <span class="k">unless</span> <span class="n">boolean</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Main</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@classes</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">      <span class="vi">@classes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">under_test</span><span class="o">|</span>
</span><span class="line">        <span class="n">instance</span> <span class="o">=</span> <span class="n">under_test</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">        <span class="n">under_test</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">run_test</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class="line">      <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;not ok - </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span><span class="line">      <span class="nb">puts</span> <span class="n">ex</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span> <span class="o">=</span> <span class="ss">Tasty</span><span class="p">:</span><span class="ss">:Main</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">main</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bons tests ! À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/09/16/commencer-le-developpement-web-en-ruby/">Commencer le développement web en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/29/coco-version-0-dot-13-dot-0/">Coco version 0.13.0</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/">Comportement inattendu de Rspec</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment mettre à jour un package R]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/08/04/comment-mettre-a-jour-un-package-r/"/>
    <updated>2016-08-04T08:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/08/04/comment-mettre-a-jour-un-package-r</id>
    <content type="html"><![CDATA[<p>Comment faire pour mettre à jour un seul package en R ? Pas deux, pas trois,
pas cinquante, non juste un. Allez, “ggplot2” par exemple. Ça devrait être
simple…</p>

<!-- more -->

<p>Je tape <code>?update&lt;TAB&gt;</code> et je vois qu’il existe une fonction <code>update.packages()</code>
Cette fonction semble prometteuse, n’est-ce-pas ?</p>

<p>Oubliez la ! Elle (<code>update.packages()</code>) va mettre à jour <strong>tous</strong> vos packages.
Et selon leur nombre cela peut prendre beaucoup de temps.</p>

<p>Pour mettre à jour un seul package on doit utiliser <code>install.packages()</code> comme ceci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">install.packages<span class="p">(</span><span class="s">&quot;ggplot2&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Intuitif, non ? Il n’y a pas de différences entre l’installation et la mise à
jour.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/">Un quine en R - Le retour</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12 points pour rater la conception d'un MOOC]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/08/02/12-points-pour-rater-la-conception-dun-mooc/"/>
    <updated>2016-08-02T16:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/08/02/12-points-pour-rater-la-conception-dun-mooc</id>
    <content type="html"><![CDATA[<p><em>Ça fait maintenant quelques temps que je pratique les MOOCs. J’adore ça.  J’en
ai suivi environ 40. Ça fait de moi un serial MOOCer, non ? Là dedans j’en ai
réussi 26 avec succès.  Et j’en ai suivi à peu près 11 seulement pour voir, ou
pour glaner un concept ou deux par ci par là. Je commence à bien cerner les
conceptions qui fonctionnent, et celles qui ne fonctionnent pas.  Voici donc
une liste de 12 points à suivre aveuglément si vous souhaitez rater à coup sûr
la conception de votre MOOC.</em></p>

<!-- more -->

<ol>
  <li>
    <p>Ne dites surtout pas quel niveau minimum est requis pour suivre votre MOOC.
Cachez le. Laissez donc l’étudiant le découvrir à ses dépends, au fur et à
mesure de son investissement.</p>
  </li>
  <li>
    <p>Réalisez des slides les plus denses possible. Plus vous en mettrez, plus vous
serez ennuyeux. Ne laissez pas de vide. Remplissez et remplissez encore.</p>
  </li>
  <li>
    <p>Lisez vos slides mots pour mots et du ton le plus morne possible.</p>
  </li>
  <li>
    <p>Ne faites apparaître aucun humain dans vos vidéos. Juste des slides.</p>
  </li>
  <li>
    <p>Évitez de sourire. Sourire pourrait faire croire que vous êtes heureux de faire
ce que vous faites. N’hésitez donc pas à avoir l’air de vous ennuyer lorsque
vous enregistrez les vidéos.</p>
  </li>
  <li>
    <p>Comme enseignant, choisissez quelqu’un qui maîtrise mal la langue d’enseignement.</p>
  </li>
  <li>
    <p>Réalisez les vidéos quelques jours seulement avant leurs diffusions. La loi de
Murphy c’est pour les faibles. Vous êtes bien au-dessus de ça, et vous savez
que tout se passera bien.</p>
  </li>
  <li>
    <p>Abusez de liaisons comme «il est évident que …», «il découle évidemment que …»,
«donc comme nous le savons tous depuis l’école maternelle …», etc. Et ceci tout
particulièrement si votre sujet est difficile.</p>
  </li>
  <li>
    <p>Faites en sorte que l’équipe enseignante ne participe pas aux forums de
discussion. Sous aucun prétexte.</p>
  </li>
  <li>
    <p>Proposez un maximum de quizzs et de devoirs sans aucun rapport avec le
contenu de la semaine.</p>
  </li>
  <li>
    <p>Faites comme si donner un MOOC était exactement la même chose que donner un
cours dans la vie réelle. Surtout ne changez rien. Surtout ne vous adaptez pas.</p>
  </li>
  <li>
    <p>En ce qui concerne (encore une fois) les vidéos et les slides, veillez bien à
ce que leur qualité les rendent illisibles. Et pour parfaire le tout, assurez
vous qu’on ne puisse pas les télécharger.</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/05/08/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-8/"/>
    <updated>2016-05-08T19:54:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/05/08/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-8</id>
    <content type="html"><![CDATA[<p>Dans ce 8ème article de la série consacrée à la création d’un jeu en 2d avec
Ruby et Gosu, nous allons mettre en place les niveaux.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu9.png" /></p>

<!-- more -->

<h2 id="juste-la-mcanique">Juste la mécanique</h2>

<p>Dans un premier temps, nous allons mettre en place un mécanisme qui permettra
d’avoir facilement des niveaux, mais nous garderons le jeu tel qu’il est
actuellement. J’ai décidé que les niveaux du jeu seraient configurés dans un
fichier YAML.  Voici donc un fichier de niveaux minimum :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>levels.yaml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="p-Indicator">-</span>
</span><span class="line">  <span class="l-Scalar-Plain">song</span><span class="p-Indicator">:</span> <span class="s">&quot;assets/songs/Around</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">Bend.ogg&quot;</span>
</span><span class="line">  <span class="l-Scalar-Plain">goal</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">15</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span>
</span><span class="line">  <span class="l-Scalar-Plain">song</span><span class="p-Indicator">:</span> <span class="s">&quot;assets/songs/Catch</span><span class="nv"> </span><span class="s">The</span><span class="nv"> </span><span class="s">Mystery.ogg&quot;</span>
</span><span class="line">  <span class="l-Scalar-Plain">goal</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">25</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Chaque entrée dans le fichier YAML (donc chaque niveau dans le jeu) comporte
une musique et un objectif (<em>goal</em>).  Cet objectif est le nombre de sourires à
collecter pour terminer le niveau. On ajoutera bien sûr un tas d’autres choses
plus tard, mais c’est tout à fait suffisant pour la mise en place des niveaux
dans notre jeu.</p>

<p>Le chargement de ces niveaux peut se faire dans une classe <code>Level</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>level.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@levels</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;levels.yaml&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le fichier de niveaux <code>levels.yaml</code> rend inutile le module <code>Song</code> développé
dans le dernier article. On peut donc le supprimer :</p>

<pre><code>rm song.rb
</code></pre>

<blockquote>
  <p>On voit ici que le développement d’un jeu, comme toute application, n’est pas
une simple ligne droite. 
On ne se contente pas d’ajouter du code, on en supprime aussi.
Une structure (ici notre module Song) peut être rendue obsolète après
l’introduction d’une nouvelle structure, d’un nouveau design ou d’une
nouvelle fonctionnalité. Il ne faut pas hésiter à se débarrasser d’un code qui
n’est plus utile.</p>
</blockquote>

<p>La musique pour l’état <em>game over</em> ne s’insère pas dans le schéma du fichier de
niveau. Nous pouvons créer une nouvelle méthode dans la classe SongPlayer et
l’utiliser là où il faut dans la classe Window :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>song_player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">SongPlayer</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">play_game_over</span>
</span><span class="line">    <span class="n">play</span><span class="p">(</span><span class="s2">&quot;assets/songs/In early time.ogg&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update_game_over</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play_game_over</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour que cela fonctionne, il faut mettre en place notre <code>Level</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="no">Level</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@song_player</span> <span class="o">=</span> <span class="no">SongPlayer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span> <span class="c1"># &lt;---- Cette méthode n&#39;existe pas encore !</span>
</span><span class="line">    <span class="c1">#...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span> <span class="c1"># &lt;----- Idem !</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous notez que j’utilise une méthode <code>Level#song</code> qui n’est pas encore codée.
Cette méthode devra retourner le nom de la musique du niveau actuel. Comme nous
n’avons pas encore cette notion de niveau actuel, trichons provisoirement et
retournons invariablement la musique du premier niveau :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">song</span>
</span><span class="line">    <span class="vi">@levels</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;song&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà, le jeu tourne exactement comme dans la version précédente, pourtant la
mécanique des niveaux est en place.</p>

<h2 id="affichage-des-sourires-collects">Affichage des sourires collectés</h2>

<p>Un bon premier pas serait de savoir où on en est dans la réalisation de
l’objectif du niveau. Autrement dit, on veut savoir combien de sourires on a
collecté depuis le début du niveau.
Comme première tentative, on peut simplement afficher ce chiffre sur la console à
chaque update de Gosu. Et quelle classe sera la mieux placée pour connaitre
le nombre de sourires collectés pendant le niveau actuel ? La classe <code>Level</code>
bien entendu. Il nous faut deux nouvelles méthodes, <code>collected</code> qui retourne le
nombre de sourires collectés jusqu’à présent et <code>collect</code>, qui incrémente le
nombre de sourires collectés :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:collected</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@levels</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;levels.yaml&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La classe Player a maintenant besoin de pouvoir parler à l’objet de type Level
pour lui passer le message <code>collect</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">      <span class="vi">@level</span><span class="o">.</span><span class="n">collect</span> <span class="c1"># &lt;------- Un sourire collecté !</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le code qui précède est quelque chose que je n’aime pas faire. <code>Player</code> a
désormais connaissance d’un objet de type <code>Level</code> et peut faire ce qu’il veut
avec. Même si aujourd’hui je <em>sais</em> qu’il ne faut rien faire d’autre que
<code>@level.collect</code>, dans 6 mois ça sera une toute autre histoire. J’aurais oublié
tout ça et quand je verrai cet objet <code>@level</code> je penserai sûrement que je peux
faire ce que je veux avec (<em>c’est à dire modifier tout et n’importe quoi</em>). Et
tout ce que ça pourra produire, c’est un maximum de confusion.</p>

<p>Il y a plusieurs façons de gérer ça et on va en examiner quelques unes dans un
petit moment. Mais terminons d’abord ce que nous étions en train de faire,
c’est à dire l’affichage du nombre de sourires collectés :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="no">Level</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@level</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="nb">puts</span> <span class="vi">@level</span><span class="o">.</span><span class="n">collected</span> <span class="c1"># &lt;--- On log sur la console pour vérifier</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous lancer le jeu vous verrez le nombre d’objet collectés qui s’affiche à chaque
update de Gosu.</p>

<p>Maintenant parlons de quelques méthodes possibles pour éviter de se trainer un
objet de type <code>Level</code> dans la classe <code>Player</code>.</p>

<ol>
  <li>On pourrait se contenter de mettre un commentaire, encore faudra-t-il le
  voir, le lire et le maintenir.</li>
  <li>On pourrait utiliser un <a href="https://en.wikipedia.org/wiki/Observer_pattern">observer</a>, mais je trouve ça un peu trop,
vu que l’on n’a qu’un seul évènement à déclencher.</li>
  <li>J’imagine qu’on pourrait aussi utiliser un <a href="https://en.wikipedia.org/wiki/Mediator_pattern">mediator</a> entre les classes
<code>Player</code> et <code>Level</code>. Mais là encore je trouve ça trop avec seulement deux
classes.</li>
</ol>

<p>Alors quoi ? Un <a href="https://en.wikipedia.org/wiki/Proxy_pattern">proxy</a> qui sera restreint à la seule méthode <code>collect</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>collector_proxy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CollectorProxy</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span>
</span><span class="line">    <span class="vi">@level</span><span class="o">.</span><span class="n">collect</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@level</span> <span class="o">=</span> <span class="no">Level</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">CollectorProxy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@level</span><span class="p">))</span>
</span><span class="line">    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>De cette manière, un <code>Player</code> ne pourra rien faire d’autre qu’appeler la 
méthode <code>collect</code> sur ce fameux <code>@level</code>.</p>

<h2 id="visualisation-de-ltat-davancement-du-niveau">Visualisation de l’état d’avancement du niveau</h2>

<p>On va afficher le numéro du niveau en haut à droite, et une petite barre
d’avancement sous les pieds du joueur pour savoir où on en est dans la collecte
des sourires.</p>

<p>La majeure partie des modifications se situe dans la classe <code>UI</code>, n’hésitez pas
à remplacer les nombres magiques restants par des constantes :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="no">Yellow</span> <span class="o">=</span> <span class="mh">0xff_ffff00</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="n">draw_level</span><span class="p">(</span><span class="n">game</span><span class="o">[</span><span class="ss">:level</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_level</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:draw_rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">477</span><span class="p">,</span> <span class="n">achieved_part</span><span class="p">(</span><span class="n">level</span><span class="p">),</span> <span class="mi">3</span><span class="p">,</span> <span class="no">Yellow</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Level: </span><span class="si">#{</span><span class="n">level</span><span class="o">[</span><span class="ss">:number</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">550</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class="line">               <span class="no">Yellow</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">achieved_part</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class="line">    <span class="no">WindowWidth</span> <span class="o">/</span> <span class="n">level</span><span class="o">[</span><span class="ss">:goal</span><span class="o">]</span> <span class="o">*</span> <span class="n">level</span><span class="o">[</span><span class="ss">:collected</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour pouvoir utiliser le code précédent, il faut ajouter quelques informations
au <em>game state</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">game_state</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="ss">score</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">score</span><span class="p">,</span>
</span><span class="line">      <span class="ss">lives</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span><span class="p">,</span>
</span><span class="line">      <span class="n">game_over</span><span class="p">:</span> <span class="vi">@game_over</span><span class="p">,</span>
</span><span class="line">      <span class="ss">level</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="ss">goal</span><span class="p">:</span> <span class="vi">@level</span><span class="o">.</span><span class="n">goal</span><span class="p">,</span>
</span><span class="line">        <span class="ss">number</span><span class="p">:</span> <span class="vi">@level</span><span class="o">.</span><span class="n">number</span><span class="p">,</span>
</span><span class="line">        <span class="ss">collected</span><span class="p">:</span> <span class="vi">@level</span><span class="o">.</span><span class="n">collected</span><span class="p">,</span>
</span><span class="line">      <span class="p">},</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et pour tester tout de suite, on triche un peu avec les méthodes <code>Level#goal</code> et
<code>Level#number</code> pour qu’elles retourne toujours une même chose qu’on contrôle
bien :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">goal</span>
</span><span class="line">    <span class="vi">@levels</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;goal&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">number</span>
</span><span class="line">    <span class="s2">&quot;1&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous pouvez tester le jeu maintenant pour voir l’affichage du niveau et de
son état d’avancement.</p>

<h2 id="des-niveaux-enfin-">Des niveaux, enfin !</h2>

<p>On veut maintenant les faire fonctionner, ces niveaux ! Le gros du travail se
passe dans la classe <code>Level</code>. Notamment avec les méthodes <code>song</code>, <code>goal</code> et
<code>number</code> qui doivent désormais retourner des informations pertinentes sur le
niveau actuel.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:collected</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@levels</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;levels.yaml&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">song</span>
</span><span class="line">    <span class="n">current</span> <span class="s1">&#39;song&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">goal</span>
</span><span class="line">    <span class="n">current</span> <span class="s1">&#39;goal&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">number</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">completed?</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">==</span> <span class="n">goal</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="vi">@index</span> <span class="sx">%= @levels.size</span>
</span><span class="line"><span class="sx">    @collected =</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">current</span><span class="p">(</span><span class="n">property</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@levels</span><span class="o">[</span><span class="vi">@index</span><span class="o">][</span><span class="n">property</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans la méthode <code>Level#next</code>, le modulo permet de boucler sur les niveaux. Pas
très réaliste, mais ça permet de différer la gestion de la fin du jeu
(il se passe quoi quand on a terminé tout les niveaux ?).</p>

<p>Voici le code pour passer au niveau suivant :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="n">reset</span> <span class="k">if</span> <span class="n">new_game?</span>
</span><span class="line">    <span class="n">next_level</span> <span class="k">if</span> <span class="vi">@level</span><span class="o">.</span><span class="n">completed?</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next_level</span>
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="vi">@level</span><span class="o">.</span><span class="n">next</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il faut aussi s’assurer qu’une nouvelle partie débute bien sur le premier
niveau :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">reset</span>
</span><span class="line">    <span class="vi">@level</span><span class="o">.</span><span class="n">reset</span> <span class="c1"># &lt;----------------- C&#39;est ici que ça se passe !</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="vi">@level</span><span class="o">.</span><span class="n">song</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@collected</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis pour obtenir une transition moins abrupte entre les niveaux, on ajoute un
petit son :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Level</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_next_level</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/next-level.wav&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_next_level</span><span class="o">.</span><span class="n">play</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà, nous avons maintenant des niveaux exploitables.
La prochaine fois nous étofferons ces niveaux, avec des bonus, des malus, etc.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   ├── Around the Bend.ogg
│   │   ├── Catch The Mystery.ogg
│   │   └── In early time.ogg
│   └── sound
│       ├── collect.wav
│       ├── life-lost.wav
│       └── next-level.wav
├── button.rb
├── collector_proxy.rb
├── level.rb
├── levels.yaml
├── main.rb
├── player.rb
├── smiley.rb
├── song_player.rb
├── ui.rb
├── window.rb
└── z_order.rb

6 directories, 24 files
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.8.0">version 0.8.0</a>.</p>

<section><h1>Articles connexes</h1><ul /></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/"/>
    <updated>2016-05-01T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7</id>
    <content type="html"><![CDATA[<p>Ça fait plus de 2 mois que je dois terminer ce jeu et cette série d’article, alors au boulot !</p>

<p>Pour cette nouvelle version je voudrais ajouter une musique différente pour le
game over.  Et aussi pouvoir enfin recommencer une nouvelle partie après
un <em>game over</em>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu8.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li>Plusieurs musiques et reset de la partie</li>
</ol>

<h2 id="plusieurs-musiques">Plusieurs musiques</h2>

<p>Nous allons devoir gérer plusieurs musiques. Donnons leur des noms plus simple
à manipuler que leurs <em>paths</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>song.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Song</span>
</span><span class="line">  <span class="no">GameOver</span> <span class="o">=</span> <span class="s2">&quot;assets/songs/In early time.ogg&quot;</span>
</span><span class="line">  <span class="no">Level1</span>   <span class="o">=</span> <span class="s2">&quot;assets/songs/Around the Bend.ogg&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et avec quoi écoute-t-on de la musique ? Avec un <em>song player</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>song_player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">SongPlayer</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">play</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">stop</span> <span class="k">if</span> <span class="vi">@song</span>
</span><span class="line">    <span class="vi">@song</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">volume</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">25</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans la classe <code>Window</code> on remplace l’ancienne manière de jouer une musique :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@song</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/songs/Around the Bend.ogg&quot;</span><span class="p">)</span>
</span><span class="line"><span class="vi">@song</span><span class="o">.</span><span class="n">volume</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">25</span>
</span><span class="line"><span class="vi">@song</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>par notre nouvelle abstraction :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@song_player</span> <span class="o">=</span> <span class="no">SongPlayer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:Level1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>N’oubliez pas d’ajouter les require qui vont bien dans le fichier <code>main.rb</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;song&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;song_player&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trouver un bon endroit où mettre le code pour changer la musique après un
<em>game over</em> n’est pas si 
évident que ça. Le moment où l’on capte que le jeu est dans l’état game over est
la méthode <code>update_player</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">  <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et il semblerait vraiment bizarre de modifier la musique alors qu’on est
sensé mettre à jour le joueur. Autrement dit, le code suivant ne me plait pas :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">  <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:GameOver</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À bien y réfléchir, le problème vient d’avant. On ne devrait pas changer l’état
de <code>@game_over</code> ici, mais plutôt dans la méthode <code>update</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Changer la musique se fera donc de cette manière :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:GameOver</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">update_items</span>
</span><span class="line">  <span class="n">update_player</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Après extraction d’une nouvelle méthode, nous obtenons un code plus clair :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">  <span class="n">update_game_over</span>
</span><span class="line">  <span class="n">update_items</span>
</span><span class="line">  <span class="n">update_player</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_game_over</span>
</span><span class="line">  <span class="k">return</span> <span class="k">unless</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">  <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">  <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:GameOver</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="nouvelle-partie">Nouvelle partie</h2>

<p>Ok, il est temps maintenant de pouvoir jouer une nouvelle partie après un
game over. Pour cela, il faut regarder si le joueur appuie sur la touche
espace pendant l’état game over, et dans ce cas faire un reset :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="n">reset</span> <span class="k">if</span> <span class="vi">@game_over</span> <span class="o">&amp;&amp;</span> <span class="no">Button</span><span class="o">.</span><span class="n">space?</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">  <span class="n">update_game_over</span>
</span><span class="line">  <span class="n">update_items</span>
</span><span class="line">  <span class="n">update_player</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut tout de suite extraire une méthode <code>new_game?</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update</span>
</span><span class="line">  <span class="n">reset</span> <span class="k">if</span> <span class="n">new_game?</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">new_game?</span>
</span><span class="line">  <span class="vi">@game_over</span> <span class="o">&amp;&amp;</span> <span class="no">Button</span><span class="o">.</span><span class="n">space?</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut maintenant réfléchir à la méthode <code>reset</code>, qui a son tour appellera
la méthode <code>reset</code> du joueur. Ces deux méthodes sont évidentes :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">reset</span>
</span><span class="line">    <span class="vi">@song_player</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="ss">Song</span><span class="p">:</span><span class="ss">:Level1</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@lives</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour terminer cette version, on va ajouter un message «press space to start»
qui bouge pour attirer l’attention. Pour ça, on varie régulièrement d’une
petite quantité la coordonnée <strong>y</strong> du message.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">  <span class="no">PressSpaceLow</span> <span class="o">=</span> <span class="mi">210</span>
</span><span class="line">  <span class="no">PressSpaceHigh</span> <span class="o">=</span> <span class="mi">270</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">240</span>
</span><span class="line">    <span class="vi">@y_velocity</span> <span class="o">=</span> <span class="o">-</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_game_over</span>
</span><span class="line">    <span class="vi">@big_font</span><span class="o">.</span><span class="n">draw_rel</span><span class="p">(</span><span class="s2">&quot;Game Over&quot;</span><span class="p">,</span> <span class="no">WindowWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="no">WindowHeight</span> <span class="o">/</span> <span class="mi">3</span><span class="p">,</span>
</span><span class="line">                       <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@big_font</span><span class="o">.</span><span class="n">draw_rel</span><span class="p">(</span><span class="s2">&quot;Press Space To Start&quot;</span><span class="p">,</span> <span class="no">WindowWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span>
</span><span class="line">                       <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">+=</span> <span class="n">y_velocity</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_velocity</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@y</span> <span class="o">&lt;</span> <span class="no">PressSpaceLow</span> <span class="o">||</span> <span class="vi">@y</span> <span class="o">&gt;</span> <span class="no">PressSpaceHigh</span>
</span><span class="line">      <span class="vi">@y_velocity</span> <span class="o">=</span> <span class="o">-</span><span class="vi">@y_velocity</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="vi">@y_velocity</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   ├── Around the Bend.ogg
│   │   └── In early time.ogg
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── button.rb
├── main.rb
├── player.rb
├── smiley.rb
├── song_player.rb
├── song.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.7.0">version 0.7.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">Écrire un jeu en 2d avec Ruby et Gosu - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/"/>
    <updated>2016-02-25T11:37:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6</id>
    <content type="html"><![CDATA[<p>Pour augmenter l’effet dramatique lorsque le joueur perd une vie, je voudrais
que celui-ci se mette à tourner sur lui-même. Pour ça, on affichera l’image du
joueur selon un certain angle, et cet angle sera mis à jour à chaque appel de
<code>update</code>. Voyons cela pas à pas.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu7.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li>Affichage selon un angle</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="affichage-selon-un-angle">Affichage selon un angle</h2>

<p>Il nous faut d’abord un angle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ensuite nous ajoutons une méthode <code>update</code> à la classe Player. Quand le joueur
vient de perdre une vie, la seule chose à mettre à jour est l’angle. Dans les
autres cas, on fait la même mise à jour qu’avant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">just_lost_a_life?</span> <span class="p">?</span> <span class="n">update_angle</span> <span class="p">:</span> <span class="n">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La mise à jour de l’angle d’affichage de l’image du joueur ne demande pas
d’explications:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update_angle</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En ce qui concerne la mise à jour générale, j’ai effectué un petit refactoring
pour passer dans la classe Player du code venant de la classe Window, et qui
n’avait pas à s’y trouver. Au passage j’ai aussi créé le module <code>Button</code> qu’on
verra plus tard:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">go_left</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">left?</span>
</span><span class="line">    <span class="n">go_right</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">right?</span>
</span><span class="line">    <span class="n">move</span>
</span><span class="line">    <span class="n">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut maintenant regarder l’affichage. Pour afficher une image selon un
certain angle, Gosu propose la méthode <code>draw_rot</code>. L’image sera orientée par
rapport à un point précis, ici je choisi le centre de l’image:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="k">if</span> <span class="n">just_lost_a_life?</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw_rot</span><span class="p">(</span><span class="n">x_middle</span><span class="p">,</span> <span class="n">y_middle</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">,</span> <span class="vi">@angle</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:x_middle</span><span class="p">,</span> <span class="ss">:x_center_of_mass</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_middle</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici tout ce qui change dans la classe <code>Player</code> en un coup d’œil:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">just_lost_a_life?</span> <span class="p">?</span> <span class="n">update_angle</span> <span class="p">:</span> <span class="n">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="k">if</span> <span class="n">just_lost_a_life?</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw_rot</span><span class="p">(</span><span class="n">x_middle</span><span class="p">,</span> <span class="n">y_middle</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">,</span> <span class="vi">@angle</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:x_middle</span><span class="p">,</span> <span class="ss">:x_center_of_mass</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_middle</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_angle</span>
</span><span class="line">    <span class="vi">@angle</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_general</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">go_left</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">left?</span>
</span><span class="line">    <span class="n">go_right</span> <span class="k">if</span> <span class="no">Button</span><span class="o">.</span><span class="n">right?</span>
</span><span class="line">    <span class="n">move</span>
</span><span class="line">    <span class="n">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici maintenant le contenu du module <code>Button</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Button</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">left?</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">right?</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut légitimement se demander «Mais pourquoi ajouter un tel module ?».
Simplement parce que je préfère 100 fois lire ceci:</p>

<pre><code>do_this if Button.left?
</code></pre>

<p>… plutôt que cela:</p>

<pre><code>do_this if Gosu::button_down?(Gosu::KbLeft)
</code></pre>

<p>Voyons enfin ce qui change dans la classe Window.
J’ai déplacé la ligne <code>return if @player.just_lost_a_life?</code> de la méthode
<code>update</code> vers la méthode <code>update_items</code>. Ainsi la méthode <code>update_player</code> est
toujours appelée et peut changer l’angle d’affichage du joueur:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_items</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">just_lost_a_life?</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   └── Around the Bend.ogg
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── button.rb
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.6.0">version 0.6.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">Écrire un jeu en 2d avec Ruby et Gosu - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/"/>
    <updated>2016-02-15T09:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5</id>
    <content type="html"><![CDATA[<p>Aujourd’hui on ajoute de la musique de fond, on s’intéresse à ce qui se passe
quand on perd une vie, et on écrit un beau «Game Over» quand on a perdu toutes
les vies.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu6.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li>Musique et game over</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="de-la-musique">De la musique</h2>

<p>Ajouter une musique de fond est très simple avec Gosu. On crée la ressource
comme on a créé des sons ou des images. Ensuite on règle le volume entre
0 et 1. Et enfin on appuie sur <code>play</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@song</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/songs/Around the Bend.ogg&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">volume</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">25</span>
</span><span class="line">    <span class="vi">@song</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le paramètre <code>true</code> passé à la méthode <code>play</code> lui indique qu’on veut jouer la
musique en boucle.</p>

<blockquote>
  <p>Un paramètre booléen est ce que j’appelle un «paramètre de contrôle»
(Martin Fowler appelle ça un <a href="http://martinfowler.com/bliki/FlagArgument.html">Flag argument</a>.
C’est un bon vieux code smell et je suis un peu déçu de trouver ça dans Gosu.
Surtout qu’il est ici facile de s’en débarrasser en proposant deux méthodes sans paramètres,
par exemple <code>play</code> et <code>loop</code>.</p>
</blockquote>

<h2 id="petite-pause-quand-on-perd-une-vie">Petite pause quand on perd une vie</h2>

<p>Pour marquer le coup, je voudrais que le jeu <em>pause</em> pendant un certain temps
(ici une seconde et demi) quand le joueur perd une vie. Voici d’abord le code,
puis les explications:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">  <span class="no">LifeLostPause</span> <span class="o">=</span> <span class="mi">1500</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@lost_life_at</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20_000</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">just_lost_a_life?</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:milliseconds</span> <span class="o">-</span> <span class="vi">@lost_life_at</span> <span class="o">&lt;</span> <span class="no">LifeLostPause</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_down</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">      <span class="vi">@lost_life_at</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:milliseconds</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Commençons par ce qui change dans <code>collision</code>. Lorsque le joueur entre en
collision avec un smiley à l’envers, j’enregistre l’instant de cette collision.
<code>Gosu::milliseconds</code> retourne le nombre de millisecondes écoulées depuis le
début du jeu.</p>

<p>Pour savoir si le joueur vient de perdre une vie, la méthode <code>just_lost_a_life?</code>
compare le temps présent (<code>Gosu::milliseconds</code>) avec l’instant où le joueur a
perdu une vie (<code>@lost_life_at</code>). Si la différence est de moins de 1500
millisecondes (une seconde et demi) <code>just_lost_a_life?</code> retournera <code>true</code>.</p>

<p>Lors de l’initialisation on trouve cette ligne:</p>

<pre><code>@lost_life_at = -20_000
</code></pre>

<p>… qui est nécessaire pour que <code>@lost_life_at</code> ne soit pas <code>nil</code> au début
du jeu, ce qui provoquerait une erreur dans <code>just_lost_a_life?</code>. Mais pourquoi
-20,000 ? Essayez de la définir à zéro pour voir… En fait -20,000 est une
valeur arbitraire, qui aurait aussi bien pu être -10,000 ou -9999, etc.
Une autre solution aurait été d’écrire <code>just_lost_a_life?</code> comme ceci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">just_lost_a_life?</span>
</span><span class="line">  <span class="k">if</span> <span class="vi">@lost_life_at</span>
</span><span class="line">    <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:milliseconds</span> <span class="o">-</span> <span class="vi">@lost_life_at</span> <span class="o">&lt;</span> <span class="no">LifeLostPause</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais j’aime moins cette solution, pour deux raisons, 1) c’est moins performant
puisqu’on a un test de plus à chaque update (ok c’est pas grand chose, mais ça
plus ça plus ça…, et là c’est très facilement évitable pour rien) et 2) je préfère que toutes les variables d’objets soient
définies dans le constructeur (peut-être un vieux reste de mon passé de
javaïste, ou un truc comme ça).</p>

<p>Quoiqu’il en soit, la ligne <code>@lost_life_at = -20_000</code> mérite un commentaire
expliquant la raison de cette valeur arbitraire. J’espère que ce sera
compréhensible:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># It&#39;s important to note that this value is necessary for the game</span>
</span><span class="line"><span class="c1"># to avoid to freeze at startup.</span>
</span><span class="line"><span class="c1"># −20_000 is an arbitrary value. One can use -9999 or -5000 instead.</span>
</span><span class="line"><span class="vi">@lost_life_at</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20_000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour que tout ceci fonctionne, il suffit maintenant d’esquiver les updates au
bon moment:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">just_lost_a_life?</span>
</span><span class="line">
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="game-over-quand-0-vies">Game over quand 0 vies</h2>

<p>Vous avez maintenant compris que j’avance par petites itérations successives,
qui ne sont d’ailleurs pas toujours des fonctionnalités complètes.
Cette fois on va afficher «Game Over» et geler le jeu quand le joueur atteint
zéro vies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">just_lost_a_life?</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@game_over</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">game_state</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@game_over</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">game_state</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="ss">score</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">score</span><span class="p">,</span>
</span><span class="line">      <span class="ss">lives</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">lives</span><span class="p">,</span>
</span><span class="line">      <span class="n">game_over</span><span class="p">:</span> <span class="vi">@game_over</span><span class="p">,</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce qui mérite des explications c’est ce nouveau <code>game_state</code>. Plutôt que
d’envoyer les informations à l’UI sous la forme <code>@ui.draw(@player, @game_over)</code>
je préfère envoyer un <em>état</em> du jeu. Tout d’abord je n’envoie que le nécessaire
et ensuite on a un seul paramètre et non pas une liste de paramètres condamnée
à enfler.</p>

<p>Reste à refléter ça dans la classe UI:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@big_font</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Font</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;assets/fonts/VT323/VT323-Regular.ttf&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_score</span><span class="p">(</span><span class="n">game</span><span class="o">[</span><span class="ss">:score</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_lives</span><span class="p">(</span><span class="n">game</span><span class="o">[</span><span class="ss">:lives</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_game_over</span> <span class="k">if</span> <span class="n">game</span><span class="o">[</span><span class="ss">:game_over</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_game_over</span>
</span><span class="line">    <span class="vi">@big_font</span><span class="o">.</span><span class="n">draw_rel</span><span class="p">(</span><span class="s2">&quot;Game Over&quot;</span><span class="p">,</span>
</span><span class="line">                       <span class="no">WindowWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="no">WindowHeight</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class="line">                       <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span>
</span><span class="line">                       <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La nouveauté est la méthode <code>draw_rel</code>, qui va écrire son texte
<em>relativement</em> à lui-même. Oui je sais, ça sonne bizarre. Mais si vous
essayez les valeurs 0 et/ou 1 à la place de 0.5, vous devriez vite comprendre.
Là on va centrer le texte autour du milieu de l’écran, à la fois
horizontalement et verticalement.</p>

<blockquote>
  <p>Le fait que <code>draw_rel</code> soit l’abréviation de <code>draw_relative</code> ne sautera pas
forcement aux yeux de tout le monde. Alors pourquoi avoir utilisé une
abréviation ?</p>
</blockquote>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   ├── songs
│   │   └── Around the Bend.ogg
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.5.0">version 0.5.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">Écrire un jeu en 2d avec Ruby et Gosu - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/"/>
    <updated>2016-02-13T16:19:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4</id>
    <content type="html"><![CDATA[<p>Dans cet article on va s’occuper de gérer les vies de notre joueur.
On va les afficher et les perdre.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu5.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li>On s’occupe des vies</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="sourire--lenvers--autre-son-et-pas-de-points">Sourire à l’envers : autre son et pas de points</h2>

<p>Pour l’instant notre joueur collecte tout les smileys. Quel qu’ils soient.
Or, si les smiley oranges (sourire à l’endroit) doivent rapporter des points, les
smileys verts (sourire à l’envers) doivent eux faire perdre une vie à notre joueur.</p>

<p>On va commencer simplement par ne pas augmenter le score et jouer un son
différent quand le joueur entre en collision avec un smiley vert.
Dans la classe Player on charge le nouveau son (<code>life-lost.wav</code>) et on
modifie la méthode <code>collision</code> pour qu’elle réagisse au type du smiley:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_life_lost</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/life-lost.wav&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">?</span> <span class="n">collision</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">type</span><span class="p">)</span> <span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="vi">@score</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">      <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_down</span>
</span><span class="line">      <span class="vi">@sound_life_lost</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il ne faut pas oublier d’ajouter une méthode <code>type</code> à la classe Smiley:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Smiley</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:type</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Avouez que c’était simple…</p>

<h2 id="afficher-les-vies">Afficher les vies</h2>

<p>L’objectif de cet article est de gérer les vies du joueur. Pour cela,
commençons par lui en donner 3:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:lives</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@lives</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Les vies seront affichées au niveau de l’UI, c’est donc dans la classe du même
nom que cela va se passer. Jusqu’ici l’UI n’affichait que le score, et c’était
ce score que recevait en paramètre la méthode <code>draw</code>. On va modifier cela pour
pouvoir afficher le score et les vies.</p>

<p>On charge une nouvelle image, <code>heart.gif</code>, qui va symboliser une vie.
Puis dans <code>draw_lives</code> on affiche autant de <code>heart.gif</code> qu’il y a de vies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ui.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">  <span class="no">ScoreX</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">  <span class="no">ScoreY</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">  <span class="no">ScoreColor</span> <span class="o">=</span> <span class="mh">0xff_ffff00</span>
</span><span class="line">
</span><span class="line">  <span class="no">LivesX</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">  <span class="no">LivesXShift</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class="line">  <span class="no">LivesY</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@font</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Font</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;assets/fonts/VT323/VT323-Regular.ttf&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@heart</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/heart.gif&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_score</span><span class="p">(</span><span class="n">player</span><span class="o">.</span><span class="n">score</span><span class="p">)</span>
</span><span class="line">    <span class="n">draw_lives</span><span class="p">(</span><span class="n">player</span><span class="o">.</span><span class="n">lives</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_score</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Score: </span><span class="si">#{</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="no">ScoreX</span><span class="p">,</span> <span class="no">ScoreY</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class="line">               <span class="no">ScoreColor</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw_lives</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class="line">    <span class="n">number</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class="line">      <span class="vi">@heart</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="no">LivesXShift</span> <span class="o">*</span> <span class="n">index</span> <span class="o">+</span> <span class="no">LivesX</span><span class="p">,</span> <span class="no">LivesY</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’affichage des vies commence à la coordonnée x <code>LiveX</code> (soit 10), et se
poursuit en étant décalé à chaque fois de <code>LivesXShift</code> pixels vers la droite (soit 20).</p>

<p>Pour finir, il faut modifier l’appel à <code>UI#draw</code> depuis la classe <code>Window</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@player</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="perdre-une-vie">Perdre une vie</h2>

<p>Maintenant qu’on peut comptabiliser et afficher les vies du joueur, on est
prêt à lui en faire perdre. Il n’y a qu’une seule ligne à ajouter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">type</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_up</span>
</span><span class="line">      <span class="vi">@score</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">      <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">when</span> <span class="ss">:smiley_down</span>
</span><span class="line">      <span class="vi">@lives</span> <span class="o">-=</span> <span class="mi">1</span>                <span class="c1"># &lt;----------------- Ici</span>
</span><span class="line">      <span class="vi">@sound_life_lost</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette méthode <code>collision</code> est déjà trop longue à mon goût, mais je préfère
attendre qu’elle enfle encore avant d’y remédier. Je veux être certain que
même les plus débutant(e)s d’entre vous puissent voir cette méthode devenir
hors de contrôle avant de proposer une solution qui pourrait être vue comme
trop compliquée dans cette version.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── heart.gif
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   └── sound
│       ├── collect.wav
│       └── life-lost.wav
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.4.0">version 0.4.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/"/>
    <updated>2016-02-12T09:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3</id>
    <content type="html"><![CDATA[<p>On continue notre jeu en 2d en comptabilisant et en affichant le score.
Au passage on voit aussi comment utiliser une fonte précise et comment jouer
un son.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu4.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li>Beep, fonte et collecte des smileys</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="beep-et-collecte">Beep et collecte</h2>

<p>Pour donner l’illusion que le joueur attrape un smiley, dès que les deux images
entre en collision on supprime le smiley et on joue un petit son. Le cœur de
la fonctionnalité se passera au sein de la méthode <code>Player#collect</code>, qu’on
déclenchera depuis la classe Window:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici ce qui change dans la classe Player. On en discute après:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">  <span class="no">DistanceOfCollision</span> <span class="o">=</span> <span class="mi">35</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_collect</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/collect.wav&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">?</span> <span class="n">collision</span> <span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:distance</span><span class="p">(</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">y_center_of_mass</span><span class="p">,</span>
</span><span class="line">                              <span class="n">item</span><span class="o">.</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">item</span><span class="o">.</span><span class="n">y_center_of_mass</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">&lt;</span> <span class="no">DistanceOfCollision</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">x_center_of_mass</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_center_of_mass</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">4</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span>
</span><span class="line">    <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Tout d’abord, on charge un son comme on charge une image, sauf qu’on utilise
<code>Sample</code> au lieu de <code>Image</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@sound_collect</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/collect.wav&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ensuite, la méthode <code>collect</code>. On doit trouver le ou les objets (si il y en a)
qui sont en collision avec le joueur. On teste justement cette éventuelle
collision avec un smiley avec la méthode <code>collide?</code>. Si collision il y a,
l’objet sera supprimé (voir <code>collision</code> plus loin):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">?</span> <span class="n">collision</span> <span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>Modifier un objet sans vraiment le dire, par effet de bord, par exemple avec
<code>reject!</code> comme ci-dessus ne manquera pas de remplir d’horreur les tenants de la
programmation fonctionnelle. Mais comme le paradigme ici est la programmation
orienté objet, je ne vois pas de problèmes ;)</p>
</blockquote>

<p>Pour détecter si il y a eu collision entre deux objets, il existe plusieurs
méthodes. Comme Gosu fournit une méthode pour connaître la distance entre deux
points (<code>Gosu::distance</code>), voici ce que nous allons faire: le joueur et les smileys vont être
chacun représentés par un seul point précis. Si la distance entre ses deux points
tombe sous un certain seuil, nous considèrerons qu’il y a collision.</p>

<p>Le joueur est représenté par le point (<code>x_center_of_mass</code>, <code>y_center_of_mass</code>)
et un smiley par le point (<code>item.x_center_of_mass</code>, <code>item.y_center_of_mass</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:distance</span><span class="p">(</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">y_center_of_mass</span><span class="p">,</span>
</span><span class="line">                              <span class="n">item</span><span class="o">.</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">item</span><span class="o">.</span><span class="n">y_center_of_mass</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">&lt;</span> <span class="no">DistanceOfCollision</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour le joueur, la coordonnée x utilisée pour la détection de collision est
pile au milieu:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">x_center_of_mass</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour la coordonnée y, c’est le quart en partant du haut:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">y_center_of_mass</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">4</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Enfin, lors d’une collision il faut émettre un son et retourner <code>true</code> pour que
<code>reject!</code> sache qu’il faut supprimer ce smiley de la collection. Le paramètre
de <code>play</code> est le volume, de 0.0 à 1.0:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">collision</span>
</span><span class="line">    <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le point d’un smiley utilisé pour détecter une collision est le milieu de
la largeur pour x et le haut pour y:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>smiley.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Smiley</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">x_center_of_mass</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_center_of_mass</span>
</span><span class="line">    <span class="vi">@y</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>N’hésitez pas à modifier ces points de détection ainsi que la constante
<code>DistanceOfCollision</code> pour trouver les valeurs qui vous conviennent.</p>

<h2 id="compter-et-afficher-les-points">Compter et afficher les points</h2>

<p>On va ajouter 10 points quelque soit le type de smiley collecté. Et on va
afficher le score dans le coin supérieur gauche. Les sorties informatives
telles que le score, les vies, etc, seront gérées depuis la classe <code>UI</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ...</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;z_order&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;player&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;smiley&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;ui&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line"><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Un pattern commence à se dessiner, on crée un objet dans l’initialisation de
<code>Window</code> et on appelle sa méthode <code>draw</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span> <span class="o">=</span> <span class="no">UI</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="ss">score</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">score</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Les sorties de l’UI doivent être toujours visibles, on leurs donnera donc le
ZOrder le plus grand:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>z_order.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">ZOrder</span>
</span><span class="line">
</span><span class="line">  <span class="no">Background</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="no">Items</span>      <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="no">Player</span>     <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">  <span class="no">UI</span>         <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La classe Player est un bon endroit pour tenir compte du score et le mettre à
jour lors d’une collision avec un smiley:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:score</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span>
</span><span class="line">    <span class="vi">@score</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finalement voici un peu de nouveauté avec la classe UI et l’utilisation d’une
fonte pour afficher du texte.  Pour info, j’ai trouvé la police
<code>VT323-Regular.ttf</code> sur Google Font.  Le chargement d’une police de caractères
nécessite de fournir la taille et le fichier de la police:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ui.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@font</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Font</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;assets/fonts/VT323/VT323-Regular.ttf&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="ss">score</span><span class="p">:)</span>
</span><span class="line">    <span class="vi">@font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Score: </span><span class="si">#{</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xff_ffff00</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Quant à la méthode <code>draw</code> d’une fonte, je vous invite à regarder
<a href="https://www.libgosu.org/rdoc/Gosu/Font.html#draw-instance_method">sa documentation</a>
pour connaître les paramètres à fournir.</p>

<p>Une explication toutefois, ceci:</p>

<pre><code>0xff_ffff00
</code></pre>

<p>…est une couleur au format alpha, rouge, vert, bleu en hexadécimal. Le
<em>underscore</em> est juste une fonctionnalité de Ruby qui permet d’écrire les nombres
avec des underscores pour faciliter la lecture. Par exemple les deux nombres
qui suivent sont identiques, lequel est le plus simple à lire ?</p>

<pre><code>1000000000

1_000_000_000
</code></pre>

<p>Et ça marche pareil avec l’hexadécimal.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   └── sound
│       └── collect.wav
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.3.0">version 0.3.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/"/>
    <updated>2016-02-11T09:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2</id>
    <content type="html"><![CDATA[<p>Aujourd’hui on voit comment déplacer et contrôler le joueur, ainsi que
comment faire tomber une pluie de smileys.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu3.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li>Déplacer le joueur et pluie de smileys</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="dplacer-le-joueur">Déplacer le joueur</h2>

<p>On ajoute la méthode <code>update</code> à la classe <code>Window</code>. À l’instar de <code>draw</code>
cette méthode vient aussi de <code>Gosu::Window</code> et est appelée régulièrement.
Dans <code>draw</code> on dessine, on affiche. Dans <code>update</code> on calcule, on met à jour
les éléments du jeu.</p>

<blockquote>
  <p><code>update</code> sera appelée 60 fois par seconde quoiqu’il arrive, par contre
<code>draw</code> pourra être appelée plus ou moins souvent suivant les besoins de
l’OS. C’est pour cela qu’il est important de séparer le calcul de l’affichage.
Cette division entre calcul et affichage est d’ailleurs typique d’un framework de jeu,
ou même GUI, quelque soit le langage utilisé.</p>
</blockquote>

<p>Le nouveau code de <code>Window</code> est le suivant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@background_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/background.png&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_left</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_right</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Background</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">draw</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans <code>update</code> on utilise la méthode <code>button_down?</code> de Gosu pour tester si le
joueur appuit sur la touche gauche et/ou la touche droite. L’appui simultané sur
les deux touches <em>annulera</em> en quelque sorte le déplacement. Et dans tout les cas
on déplace le joueur avec <code>@player.move</code>.</p>

<p>Voyons maintenant la classe <code>Player</code>, qui a gagné plusieurs nouvelles méthodes
par rapport au dernier article:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="n">Y</span> <span class="o">=</span> <span class="mi">390</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="no">WindowHeight</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="vi">@image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/player.png&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_left</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">-=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_right</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">+=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">move</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+=</span> <span class="vi">@velocity</span>
</span><span class="line">    <span class="vi">@x</span> <span class="sx">%= WindowWidth</span>
</span><span class="line"><span class="sx">    @velocity *=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">96</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le joueur se déplaçant toujours sur la même ligne, sa coordonnée y ne change
pas, j’en ai donc fait une constante.</p>

<p>L’idée générale pour le déplacement, c’est qu’il soit <em>smooth</em>, avec une
accélération progressive et une glisse finale. On a donc un facteur
d’accélération de 0.5 et un facteur de glisse de 0.96. Prenez le temps de jouer
avec ces valeurs pour les comprendre, et peut-être pour en trouver d’autres qui vous
conviennent mieux.</p>

<p>Comme toujours, nous convertirons ces nombres magiques en constantes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="n">Y</span> <span class="o">=</span> <span class="mi">390</span>
</span><span class="line">  <span class="no">AccelerationFactor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class="line">  <span class="no">SkidingFactor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">96</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_left</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">-=</span> <span class="no">AccelerationFactor</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_right</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">+=</span> <span class="no">AccelerationFactor</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">move</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+=</span> <span class="vi">@velocity</span>
</span><span class="line">    <span class="vi">@x</span> <span class="sx">%= WindowWidth</span>
</span><span class="line"><span class="sx">    @velocity *=</span> <span class="no">SkidingFactor</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="une-pluie-de-smileys">Une pluie de smileys</h2>

<p>Il est temps de faire pleuvoir des smileys !</p>

<p>Ajoutez un fichier <code>smiley.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;z_order&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;player&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;smiley&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et remplissez le avec le code suivant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>smiley.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Smiley</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:y</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@image</span> <span class="o">=</span> <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:smiley_up</span>
</span><span class="line">               <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/smiley-yellow.png&quot;</span><span class="p">)</span>
</span><span class="line">             <span class="k">elsif</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:smiley_down</span>
</span><span class="line">               <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/smiley-green.png&quot;</span><span class="p">)</span>
</span><span class="line">             <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:random</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="nb">rand</span> <span class="o">*</span> <span class="p">(</span><span class="no">WindowWidth</span> <span class="o">-</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">+=</span> <span class="vi">@velocity</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il n’y a rien de vraiment nouveau par rapport à ce qu’on a vu jusqu’ici.
Je peux toutefois signaler la méthode <code>Gosu::random(0.8, 3.3)</code>, qui retourne
un Float entre 0.8 inclus et 3.3 exclus. Et aussi le calcul de <code>@x</code>:</p>

<pre><code>@x = rand * (WindowWidth - @image.width)
</code></pre>

<p>qui soustrait la largeur du smiley de la largeur de la fenêtre pour s’assurer
qu’un smiley sera toujours dans les limites de la fenêtre (visible, donc).</p>

<p>Pour intégrer les smileys au jeu, vous devez modifier les méthodes
<code>initialize</code>, <code>update</code> et <code>draw</code> de la classe Window:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">unless</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">15</span>
</span><span class="line">      <span class="n">r</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">      <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">      <span class="k">elsif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Les 3 lignes suivantes sont décrites dans l&#39;article précédent.</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_left</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_right</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Background</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Ça c&#39;est la nouvelle ligne:</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:draw</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">draw</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La nouvelle méthode <code>update</code> mérite bien quelques explications !
Tout d’abord je veux afficher un maximum de 15 smileys à l’écran:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>S’il y en a moins de 15, il y a <em>à chaque update</em> 3.5% de chances (0.035)
de créer un sourire à l’endroit, et 0.5% de chances (0.04 - 0.035) de créer un
sourire à l’envers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">r</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">  <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">  <span class="k">elsif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans tous les cas on met à jour les smileys existants (c’est à dire qu’on change leur
coordonnée y):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et on supprime les smileys qui sont sortit de la fenêtre de jeu (par le bas):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce code est hideux et il faut faire quelque chose pour lui ;)
On commence le refactoring de la classe Window en extrayant les deux méthodes
<code>update_items</code> et <code>update_player</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_items</span>
</span><span class="line">    <span class="k">unless</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">15</span>
</span><span class="line">      <span class="n">r</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">      <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">      <span class="k">elsif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_left</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_right</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La nouvelle méthode <code>update_items</code> mérite aussi sa petite extraction:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update_items</span>
</span><span class="line">    <span class="n">populate_items</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">populate_items</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">15</span>
</span><span class="line">
</span><span class="line">    <span class="n">type</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">    <span class="k">if</span> <span class="n">type</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">      <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">type</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">      <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant <code>populate_items</code> est toujours moche, et on sent que cette méthode
risque d’enfler dans l’avenir. Mais je pense que c’est le moment d’arrêter le refactoring
pour éviter de tomber dans l’<a href="https://en.wikipedia.org/wiki/Overengineering">overengineering</a>
et aussi parce que
<a href="http://martinfowler.com/bliki/Yagni.html">YAGNI</a> !.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   └── images
│       ├── background.png
│       ├── player.png
│       ├── smiley-green.png
│       └── smiley-yellow.png
├── main.rb
├── player.rb
├── smiley.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.2.0">version 0.2.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/"/>
    <updated>2016-02-10T10:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1</id>
    <content type="html"><![CDATA[<p>Voici une série d’articles sur l’écriture d’un jeu en 2d avec Ruby et Gosu.
Dans ce premier article on verra comment installer Gosu, créer une
fenêtre et afficher des images statiques les unes au dessus des autres.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu0.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li>Installation de Gosu, affichage d’images statiques</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/13/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-4/">On s’occupe des vies</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Musique et game over</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Affichage selon un angle</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Plusieurs musiques et reset de la partie</a></li>
</ol>

<h2 id="les-outils">Les outils</h2>

<p>Avant d’écrire la première ligne de code, assurez vous d’avoir installé correctement Ruby et la
gem Gosu.</p>

<h3 id="ruby">Ruby</h3>

<p>J’utiliserai Ruby en version 2.3 (la plus récente à ce jour). Si vous
utilisez une version de Ruby plus ancienne, vous devrez peut-être adapter le
code ici ou là. Pour gérer les différentes version de Ruby, j’utilise
indifféremment <a href="https://rvm.io/">rvm</a> ou
<a href="https://github.com/postmodern/chruby">chruby</a>
<em>— mais pas les deux sur la même machine, hein ;) —</em>.</p>

<blockquote>
  <p>Si vous n’avez jamais utilisé de gestionnaire de version pour Ruby, je
conseille de commencer par <strong>chruby</strong>. Si je préfère personnellement
<strong>rvm</strong> que je trouve plus complet, <strong>chruby</strong> s’avère
indéniablement plus simple à installer, à prendre en main, et à utiliser sur le
long terme.</p>
</blockquote>

<h3 id="gosu">Gosu</h3>

<p>Gosu est la gem qui nous fournira les méthodes basiques pour développer notre
jeu. J’ai installé la dernière version en date : gosu 0.10.5.</p>

<p>Sur <strong>Debian</strong> il faut d’abord s’assurer qu’on dispose des packages suivants:</p>

<pre><code>sudo apt-get install build-essential libsdl2-dev libsdl2-ttf-dev \
                     libpango1.0-dev libgl1-mesa-dev libfreeimage-dev \
                     libopenal-dev libsndfile1-dev
</code></pre>

<p>Et ensuite seulement on peut installer la gem Gosu:</p>

<pre><code>gem install gosu
</code></pre>

<p>Vous pouvez installer Gosu sur d’autres versions de Linux, sur OS X, ou sur
Windows:</p>

<ul>
  <li><a href="https://github.com/gosu/gosu/wiki/Getting-Started-on-Linux">Installation sur Linux</a></li>
  <li><a href="https://github.com/gosu/gosu/wiki/Getting-Started-on-OS-X">Installation sur OS X</a></li>
  <li><a href="https://github.com/gosu/gosu/wiki/Getting-Started-on-Windows">Installation sur Windows</a></li>
</ul>

<p>Enfin, vous pourrez trouver de l’aide sur <a href="https://github.com/gosu/gosu/wiki">le wiki</a>
et <a href="https://www.libgosu.org/rdoc/">la documentation de Gosu</a> pour le langage Ruby.</p>

<h2 id="du-son-des-images-etc">Du son, des images, etc</h2>

<p>Dans cette série d’articles nous allons coder un jeu. Pour ce qui est du son
et des images, on va laisser faire les gens qui savent ;) Mes deux sources
préférées pour les assets open source sont <a href="http://freesound.org/browse/">freesound.org</a>
et <a href="http://opengameart.org/">opengameart.org</a>.</p>

<p>J’utilise <strong>Gimp</strong> pour retoucher les images : découpe, mise à l’échelle,
changement de couleur, etc. Et j’utilise <strong>Audacity</strong> pour retravailler les
fichiers sonores : suppression des silences en début de fichier, conversion de
format (par exemple mp3 en ogg puisque Gosu ne lit pas le mp3).</p>

<h2 id="crer-une-fentre-pour-le-jeu">Créer une fenêtre pour le jeu</h2>

<p>Ça y est ! Ruby et Gosu sont installés, vous savez où trouver des images et du
son open source, on peut commencer en créant une fenêtre. Mettez le code
suivant dans un fichier <code>window.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">)</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">window</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">window</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le code est suffisamment simple pour que vous puissiez le comprendre sans
explications superflues. Pour savoir si vous avez bien installé Gosu, lancez
le programme:</p>

<pre><code>$ ruby window.rb
</code></pre>

<p>Et admirez le résultat:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu1.png" /></p>

<p>Même avec si peu de code, on peut déjà refactorer. Le fichier précédent
a deux problèmes. Un, il mélange la définition d’une classe et le lancement du
jeu. Et deux, il utilise deux nombres magiques. Si on n’y prends pas garde, les
nombres magiques vont vite devenir un fléau pour notre jeu. Les jeux ont tendance
à être saturés de nombres magiques, alors autant s’atteler à ce problème dès le début.</p>

<p>Après refactoring,
nous avons donc d’une part le code de lancement, avec des constantes pour les
dimensions.  On n’a plus à deviner ce que représente les nombres 640 et 480,
c’est inscrit dans le code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">WindowWidth</span>  <span class="o">=</span> <span class="mi">640</span>
</span><span class="line"><span class="no">WindowHeight</span> <span class="o">=</span> <span class="mi">480</span>
</span><span class="line">
</span><span class="line"><span class="n">window</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">WindowWidth</span><span class="p">,</span> <span class="no">WindowHeight</span><span class="p">)</span>
</span><span class="line"><span class="n">window</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et d’autre part la classe <code>Window</code>, tranquille dans son propre fichier:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La structure du dossier est pour l’instant la suivante:</p>

<pre><code>$ tree
.
├── window.rb
└── main.rb
</code></pre>

<p>Et nous lancerons donc le jeu avec la commande <code>ruby main.rb</code>.</p>

<h2 id="afficher-des-images">Afficher des images</h2>

<p>Maintenant qu’on sait créer une fenêtre, l’étape suivante sera l’affichage
d’images statiques. Nous allons afficher une image de fond, et par-dessus
l’image du joueur.</p>

<p>Toutes les images du jeu seront rangées dans le dossier <code>assets/images</code>:</p>

<pre><code>$ tree
.
├── assets
│   └── images
│       ├── background.png
│       └── player.png
├── window.rb
└── main.rb
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@background_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/background.png&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/player.png&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pendant l’initialisation on charge les images en mémoire avec
<code>Gosu::Image.new</code>.  Puis l’affichage se fait avec <strong>les</strong> méthodes <code>draw</code>. La
méthode <code>draw</code> de la classe <code>Window</code> est hérité de <code>Gosu::Window</code> et appelée 60
fois par seconde.  Dans cette méthode, on appelle la méthode <code>draw</code> des images.
Celle-ci prends trois paramètres : les coordonnées <strong>x</strong>, <strong>y</strong> et <strong>z</strong>.
La coordonnée z est le plan d’affichage. Au dessus ou en dessous. Plus le
nombre est haut, plus l’image sera affichée au-dessus des autres. Ici l’image
de fond a un z de 0, et l’image du joueur a un z de 1, donc le joueur est
affiché au-dessus du fond.</p>

<p>Le joueur est affiché <em>à peu près</em> au milieu de la surface de jeu (<code>width / 2</code>
et <code>height / 2</code>). À peu près, puisque les paramètres x et y de la méthode
<code>draw</code> définissent les coordonnées du coin supérieur gauche de l’image.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu2.png" /></p>

<p>Ce code souffre lui aussi de certains problèmes.</p>

<ol>
  <li>S’il est acceptable que l’image de fond <em>appartienne</em> à la fenêtre de jeu,
c’est absurde en ce qui concerne l’image du joueur.</li>
  <li>Il y a des nouveaux nombres magiques : les coordonnées z.</li>
</ol>

<p>On va donc créer deux nouvelles classes (en fait une classe et un module),
<code>ZOrder</code> et <code>Player</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;z_order&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;player&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">WindowWidth</span>  <span class="o">=</span> <span class="mi">640</span>
</span><span class="line"><span class="no">WindowHeight</span> <span class="o">=</span> <span class="mi">480</span>
</span><span class="line">
</span><span class="line"><span class="n">window</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">WindowWidth</span><span class="p">,</span> <span class="no">WindowHeight</span><span class="p">)</span>
</span><span class="line"><span class="n">window</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le contenu du module <code>ZOrder</code> est simpliste (c’est ni plus ni moins qu’un enum),
il définit les différents plans:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>z_order.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">ZOrder</span>
</span><span class="line">
</span><span class="line">  <span class="no">Background</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="no">Player</span>     <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La classe <code>Player</code> est simple elle aussi.</p>

<blockquote>
  <p>C’est l’avantage écrasant d’éclater le code en petites classes ayant chacune
une seule responsabilité : le code devient simplissime.</p>
</blockquote>

<p>L’image <em>appartient</em> désormais au joueur, tout comme ses coordonnées. Et c’est
le joueur lui-même qui <em>sait</em> comment s’afficher. La classe <code>Window</code> aura
juste à déclencher cet affichage.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">    <span class="vi">@image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/player.png&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@background_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/background.png&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Background</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">draw</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   └── images
│       ├── background.png
│       └── player.png
├── main.rb
├── player.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.1.0">version 0.1.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/25/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-6/">Écrire un jeu en 2d avec Ruby et Gosu - partie 6</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/15/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-5/">Écrire un jeu en 2d avec Ruby et Gosu - partie 5</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Livres de non-fiction lus en 2015]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/05/livres-de-non-fiction-lus-en-2015/"/>
    <updated>2016-02-05T17:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/05/livres-de-non-fiction-lus-en-2015</id>
    <content type="html"><![CDATA[<p>J’ai lu beaucoup d’ouvrage de non-fiction l’année dernière (2015). Bien plus
que d’habitude. Je voulais partager les titres avec vous pour, peut-être, vous
donner quelques idées, mais surtout pour que vous puissiez <em>vous</em> me donner
des idées de livres à lire pour 2016.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/bookshelf.jpg" /></p>

<!-- more -->

<ul>
  <li>Data Driven</li>
  <li>How to design TED presentation slides</li>
  <li>The Flinch</li>
  <li>R Graph Essentials</li>
  <li>Hands-On Programming with R</li>
  <li>R Object Oriented Programming</li>
  <li>Data Science at the command line</li>
  <li>Insérer la disquette N°2</li>
  <li>Mazes for programmers</li>
  <li>Curieuses histoires de la science - Quand les chercheurs se trompent</li>
  <li>Practical Data Cleaning (<em>Celui là se lit en 3 minutes et aurait du s’appeler
«comment utiliser excel pour enregister un jeu de données», bref il ne sert à
rien</em>)</li>
  <li>Count like an egyptian</li>
  <li>Work simply (<em>J’ai tenu 23 pages sur 222, c’est vraiment pas pour moi</em>)</li>
  <li>R machine learning Essentials (<em>Moyen, la moitié du code présenté pourrait
être évité</em>)</li>
  <li>Ces dépendances qui nous gouvernent</li>
  <li>Copernic et l’héliocentrisme</li>
  <li>Dalton et la théorie atomique</li>
  <li>Build your own lisp</li>
  <li>Max Planck et les quanta</li>
  <li>Art of Data Science</li>
  <li>L’éléctricité facile à comprendre</li>
  <li>Von Neumann et la théorie des jeux</li>
  <li>100 Astronomical Images That Changed Our World View</li>
  <li>Heisenberg et le principe d’incertitude</li>
  <li>Gödel et le théorème d’incomplétude</li>
</ul>

<p>Si tu penses que j’aimerais un livre que tu as lu, s’il te plait laisse un
commentaire.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabriquer un sablier à thé électronique 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/02/fabriquer-un-sablier-a-the-electronique-3/"/>
    <updated>2016-02-02T15:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/02/fabriquer-un-sablier-a-the-electronique-3</id>
    <content type="html"><![CDATA[<p>Comme promis, voici le code de mon <em>sablier à thé électronique</em>. C’est le
premier <em>objet</em> que j’ai pensé et fabriqué de A à Z, en me servant d’un
arduino pour réaliser d’abord un prototype. Ce qui fait que, même si le
résultat est moche, j’en suis fier ;)</p>

<p><img class="center" src="http://lkdjiin.github.io/images/tea_timer.jpg" /></p>

<!-- more -->

<p>Tout d’abord le code C qui doit être envoyé dans un micro contrôleur Attiny13,
à l’aide d’un <a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">programmateur</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;avr/io.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;util/delay.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define LED PB0</span>
</span><span class="line"><span class="cp">#define BUZZER PB2</span>
</span><span class="line"><span class="cp">#define BUTTON3 PB3 </span><span class="c1">// For 3 minutes</span>
</span><span class="line"><span class="cp">#define BUTTON5 PB4 </span><span class="c1">// For 5 minutes</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define THREE_MINUTES_IN_SECONDS 180</span>
</span><span class="line"><span class="cp">#define FIVE_MINUTES_IN_SECONDS  300</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">DDRB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">;</span> <span class="c1">// Outputs declarations.</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span>              <span class="c1">// Switch on the LED.</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">);</span>        <span class="c1">// Switch off the buzzer.</span>
</span><span class="line">
</span><span class="line">  <span class="n">DDRB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON3</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON5</span><span class="p">);</span> <span class="c1">// Inputs declarations.</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON3</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON5</span><span class="p">);</span> <span class="c1">// Pull up for inputs.</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Number of seconds for the timer to buzz.</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">g_timer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Give enough time to enable pull ups.</span>
</span><span class="line">  <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Button for 3 minutes pressed?</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON3</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">g_timer</span> <span class="o">=</span> <span class="n">THREE_MINUTES_IN_SECONDS</span><span class="p">;</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Button for 5 minutes pressed?</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON5</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">g_timer</span> <span class="o">=</span> <span class="n">FIVE_MINUTES_IN_SECONDS</span><span class="p">;</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Each cycle is approximately 1 second, but this is not really</span>
</span><span class="line">  <span class="c1">// accurate.</span>
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="n">g_timer</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PORTB</span> <span class="o">^=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span> <span class="c1">// LED off cause it was set up to on.</span>
</span><span class="line">    <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class="line">    <span class="n">PORTB</span> <span class="o">^=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span> <span class="c1">// LED on.</span>
</span><span class="line">    <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class="line">    <span class="n">g_timer</span><span class="o">--</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Now it&#39;s time to bip and blink forever.</span>
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">);</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">);</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voici le contenu du Makefile, qui simplifie les phases de compilation et
d’installation.</p>

<pre><code>DEVICE = attiny13
CLOCK  = 1000000
PROGRAMMER = -P /dev/ttyUSB0 -c arduino
BAUDRATE   = -b 19200

help:
  @echo 'check =&gt; check connection with ATtiny13'
  @echo 'hex   =&gt; compile hex file'
  @echo 'flash =&gt; install hex file'
  @echo 'clean =&gt; delete unnecessary files'

check:
  avrdude -p $(DEVICE) $(PROGRAMMER) $(BAUDRATE)

hex:
  avr-gcc -Wall -Os -DF_CPU=$(CLOCK) -mmcu=$(DEVICE) -c main.c
  avr-gcc -mmcu=$(DEVICE) -o main.elf main.o
  avr-objcopy -O ihex main.elf main.hex

flash:
  avrdude -p $(DEVICE) $(PROGRAMMER) -U flash:w:main.hex $(BAUDRATE)

clean:
  rm main.o
  rm main.elf
</code></pre>

<p>Vous pouvez retrouver ce code sur <a href="https://github.com/lkdjiin/tea-timer">gitub</a>, ainsi que le schéma avec les
composants électroniques.</p>

<p>J’espère me faire bientôt une deuxième version plus jolie et plus sophistiquée.</p>

<p><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Lire la partie 1</a></p>

<p><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Lire la partie 2</a></p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Fabriquer un sablier à thé électronique 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Fabriquer un sablier à thé électronique</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/">Connaitre la taille d&#8217;un programme pour Arduino</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un désassembleur pour Chip8]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8/"/>
    <updated>2016-01-31T10:25:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8</id>
    <content type="html"><![CDATA[<p>En ce moment je bricole un émulateur pour
<a href="https://fr.wikipedia.org/wiki/CHIP-8">Chip8</a> en JRuby.  Un des outils que j’ai
écrit en Ruby pour cet émulateur est <strong>c8dasm</strong>, un
<a href="https://fr.wikipedia.org/wiki/D%C3%A9sassembleur">désassembleur</a> pour Chip8.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/vintage.jpg" /></p>

<!-- more -->

<p>Si vous avez besoin d’un tel outil, si vous voulez étudier l’intérieur d’un
désassembleur, ou si vous êtes simplement curieux, vous trouverez
<a href="https://github.com/lkdjiin/c8dasm">le code en ligne</a>.</p>

<p>Si vous voulez voir ce que ça donne, voici un exemple:</p>

<pre><code>$ c8dasm MAZE
200:a21e  LD I, 21e     ;Puts 21e into register I.
202:c201  RND V2, 01    ;Puts random byte AND 01 into register V2.
204:3201  SE V2, 01     ;Skip next instruction if V2 = 01.
206:a21a  LD I, 21a     ;Puts 21a into register I.
208:d014  DRW V0, V1, 4 ;Draws 4-byte sprite from I at (V0, V1)
20a:7004  ADD V0, 04    ;V0 = V0 + 04.
20c:3040  SE V0, 40     ;Skip next instruction if V0 = 40.
20e:1200  JP 200        ;Jump to location 200.
210:6000  LD V0, 00     ;Puts the value 00 into register V0.
212:7104  ADD V1, 04    ;V1 = V1 + 04.
[...]
</code></pre>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle/">Un exemple de polymorphisme en situation réelle</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">Les arbres browniens - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">Les arbres browniens</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs Crystal - 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/"/>
    <updated>2016-01-19T13:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie</id>
    <content type="html"><![CDATA[<p>J’ai testé le langage Crystal le week end dernier. Rien de très poussé, juste
140 lignes de Ruby traduites en Crystal et <a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">un benchmark</a>. Je vais tenté de
synthétiser mes premières impressions sur ce langage.</p>

<p>Dans cet article
mon point de vue est celui d’un développeur Ruby qui cherche à rendre
ses programmes plus rapide avec l’aide de Crystal.</p>

<h2 id="crystal-nest-pas-ruby">Crystal n’est pas Ruby</h2>

<p>Si je devais retenir une seule chose, ce serait celle-ci: <strong>Crystal n’est pas un
Ruby compilé</strong>.  Si sa syntaxe ressemble beaucoup à celle de Ruby,
c’est vraiment un langage différent. La plus grande différence étant qu’il est
statiquement typé.</p>

<!-- more -->

<h2 id="pas-de-repl">Pas de REPL</h2>

<p>Les développeurs de Crystal ont l’air de penser que c’est compliqué de lui
ajouter un REPL, et ça l’est sûrement. Ne pas avoir accès à un REPL n’est pas
rédhibitoire pour un langage statique. Mais cela implique un processus de
développement totalement différent de celui de Ruby et des langages dynamiques,
même si le compilateur semble pour l’instant assez rapide.</p>

<h2 id="plusieurs-mthodes-sont-absentes">Plusieurs méthodes sont absentes</h2>

<p>Ou bien elles fonctionnent différemment. Il n’y a pas de <code>require_relative</code>, par
exemple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;./xpm&quot;</span>
</span><span class="line"><span class="c1"># De plus le fichier doit être nommé `xpm.cr`</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s2">&quot;xpm&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bien plus surprenant, il n’y a pas de <code>attr_reader</code>, il faut définir la méthode.
Peut-être que les développeurs n’ont pas encore eu le temps de s’y atteler ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="k">def</span> <span class="nf">foobar</span>
</span><span class="line">  <span class="vi">@foobar</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="kp">attr_reader</span> <span class="ss">:foobar</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pas-de-private-global">Pas de private «global»</h2>

<p>Avec Crystal, on définit une méthode privée au coup par coup.
C’est une syntaxe qui est possible en Ruby depuis la version 2 (2.1 je crois),
mais qui n’a jamais <em>pris</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="kp">private</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="typage-statique">Typage statique</h2>

<p>Est-ce que j’ai déjà mentionné que Crystal est un langage statiquement typé ?
Oui ?
Il est donc très <strike>gonflant</strike> tatillon avec les types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="s2">&quot;%i&quot;</span> <span class="o">%</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>   <span class="c1">#=&gt; erreur !</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="s2">&quot;%i&quot;</span> <span class="o">%</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>   <span class="c1">#=&gt; &quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="linfrence-de-types">L’inférence de types</h2>

<p>L’inférence de types, c’est bien, non ? Ça permet au compilateur de <em>deviner</em> le
type d’une variable pour que nous n’ayons pas à les spécifier nous même. Sauf
que dans l’optique d’une traduction d’un programme Ruby en Crystal je ne suis
pas convaincu du truc. Si on écrit un programme Crystal <em>from scratch</em>, pas de
soucis. Mais Ruby est bourré d’idiomes et de tics en tout genres qui vont
rendre le portage pas du tout trivial, à mon avis. Par exemple le code ruby
suivant initialise le tableau <code>@free_cells</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">  <span class="vi">@free_cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">FREE_TOTAL</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis, dans la méthode <code>move</code>, les éléments de ce tableau sont modifiés. Il est
possible que certains éléments soient mis à <code>nil</code>. Mais comme vous pouvez le
voir à la fin de la méthode, avant de <em>relacher le tableau dans la nature</em>,
les éléments <code>nil</code> sont supprimés. C’est pour moi un cas d’utilisation
légitime de <code>nil</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">move</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">  <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">    <span class="c1"># Modification des éléments, certains peuvent devenir nil.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="vi">@free_cells</span><span class="o">.</span><span class="n">compact!</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais un compilateur n’avalera pas cette belle histoire. Le tableau a été
initialisé avec un certain type et vous ne pourrez donc pas en utiliser
d’autres. Vous devrez dire à Crystal quels types peut contenir le tableau,
c’est une syntaxe spécifique à Crystal, inconnue de Ruby:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@free_cells</span> <span class="o">=</span> <span class="o">[]</span> <span class="n">of</span> <span class="nb">Array</span><span class="p">(</span><span class="no">Int32</span><span class="p">)</span> <span class="o">|</span> <span class="no">Nil</span>
</span><span class="line">    <span class="no">FREE_TOTAL</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@free_cells</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais si maintenant je peux insérer des <code>nil</code> dans mon tableau, plus question de
pouvoir lire ses éléments ainsi:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">  <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et non ! Puisque <code>@free_cells</code> a été déclaré comme pouvant contenir <code>nil</code> !
Même si <strong>je sais</strong> qu’à ce moment le tableau est exempt de <code>nil</code>, le
compilateur, lui, ne peut pas le savoir.
Il faut donc faire quelque chose comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">  <span class="k">if</span> <span class="n">cell</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class="line">    <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ou bien il faut repenser différemment le code. Et on commence a bien sentir
l’influence du typage statique, hein ? Encore une fois, ça n’est pas un
problème en soi, mais ça n’est pas Ruby.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Si on a de l’expérience avec les langages à typage statique, traduire un
programme Ruby en un programme Crystal n’est pas difficile et le gain de
performance peut-être intéressant.
Dans tout les cas, <strong>Crystal n’est pas Ruby</strong>. Travailler avec ce langage sera
différent et demandera des processus différents.
Reste à savoir quels programmes Ruby on va pouvoir réécrire en Crystal sans
avoir à réécrire, au hasard, tout ActiveRecord. Et là, je ne suis pas certain
qu’on va en trouver beaucoup.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">Ruby vs Crystal</a></li><li><a href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/">Comment écrire un framework de test pour Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2016/05/01/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-7/">Écrire un jeu en 2d avec Ruby et Gosu - partie 7</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs Crystal]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/"/>
    <updated>2016-01-19T09:23:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal</id>
    <content type="html"><![CDATA[<p>Après avoir produit <a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">quelques variations</a> sur le thème des 
<a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">arbres browniens</a> le
week end dernier, le moment semblait idéal pour tester le langage
<a href="http://crystal-lang.org/">Crystal</a>.</p>

<p>J’ai donc réécrit le programme de base que j’avais fait pour produire des
arbres browniens, en supprimant l’UI et en enregistrant (à la place d’une
image écran)
un fichier image
<em>— au format XPM, peut-être le sujet d’un prochain article —</em>.</p>

<p>Je calcule le temps que prends la construction de l’image, sans son
enregistrement:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/bench-crystal.png" /></p>

<!-- more -->

<p>Les deux programmes sont quasiment identiques, la version Crystal est
l’adaption au plus près de la version Ruby. Pour ce
programme particulier, Crystal est de 3 à 7 fois plus rapide que Ruby.</p>

<p>Je suis deçu car j’attendais mieux que ça. On m’avait vendu Crystal comme étant
plus rapide. En fait environ 20 fois plus rapide que Ruby.</p>

<p>Et c’est vrai qu’avec un petit truc comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="n">n</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class="line">  <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">fibonacci</span> <span class="mi">40</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ou alors encore ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="mi">50_000_000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="n">x</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>j’obtiens bien un programme Crystal 20 à 35 fois plus rapide que sa version
Ruby. Mais avec un programme plus «réel», c’est 3 à 7. Alors je ne boude pas,
hein, même un gain de 3 est toujours bon à prendre. Par contre, passer de Ruby à
Crystal a un coût, et savoir si ce coût justifie un si petit gain est une autre
histoire.</p>

<p>La prochaine fois j’espère vous donner mes premières impressions sur Crystal.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/">Ruby vs Crystal - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier/">Des benchmarks en général et de Ruby en particulier</a></li><li><a href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/">Comment écrire un framework de test pour Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les arbres browniens - 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/"/>
    <updated>2016-01-18T09:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie</id>
    <content type="html"><![CDATA[<p>Dans <a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">le dernier article</a>, je présentais un code de base en JRuby
pour construire des arbres browniens. À partir de ce code de base on peut
tester plusieurs variations.</p>

<h2 id="des-couleurs-au-hasard">Des couleurs au hasard</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree51.png" /></p>

<p>Pour cela, quand on <em>gèle</em> une cellule on lui attribue au hasard une valeur
entre 1 et le nombre maximum de couleur (ici seulement deux).</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">move</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">      <span class="k">if</span> <span class="n">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="n">frozen</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">frozen</span>
</span><span class="line">  <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># [...]</span>
</span><span class="line">      <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:MAGENTA</span><span class="p">)</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">j</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">      <span class="k">elsif</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:GREEN</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># [...]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="une-ligne-entire-de-graines">Une ligne entière de graines</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree52.png" /></p>

<p>En plaçant une ligne de graine, au lieu d’une seule, on obtient quelque chose
qui ressemble plus à des arbres.</p>

<h2 id="couleurs-suivant-le-temps-darrive">Couleurs suivant le temps d’arrivée</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree53.png" /></p>

<p>Par exemple cyan pour les 800 premières itérations, magenta pour les 600
suivantes, et vert pour les dernières.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">frozen</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@iteration</span> <span class="o">&lt;</span> <span class="mi">800</span>
</span><span class="line">      <span class="mi">1</span>
</span><span class="line">    <span class="k">elsif</span> <span class="vi">@iteration</span> <span class="o">&lt;</span> <span class="mi">1400</span>
</span><span class="line">      <span class="mi">2</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="mi">3</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mouvement-biais">Mouvement biaisé</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree55.png" /></p>

<p>Pour produire l’image ci-dessus les cellules <em>montent</em> plus souvent qu’elles ne
descendent.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="et-encore">Et encore</h2>

<p>On peut trouver encore des tas de variations, et les mélanger. Par exemple dans
l’image suivante la couleur d’une cellule dépend du nombre de ses voisines et
la longueur du mouvement des cellules suit, en gros, une
<a href="https://en.wikipedia.org/wiki/Cauchy_distribution">distribution de Cauchy</a>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree56.png" /></p>

<p>Si vous pensez à d’autres variations possibles, n’hésitez pas à m’en faire part.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">Les arbres browniens</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8/">Un désassembleur pour Chip8</a></li><li><a href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/">Comment écrire un framework de test pour Ruby</a></li></ul></section>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les arbres browniens]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/"/>
    <updated>2016-01-17T23:30:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens</id>
    <content type="html"><![CDATA[<p>Ce week end j’ai joué avec les arbres browniens (<em>brownian trees</em>).
Ce sont des agglomérats de cellules qui ressemblent vaguement à des arbres,
obtenus à partir d’un mouvement brownien. Et le mouvement brownien, c’est cool.</p>

<p>C’est Robert Brown, un
botaniste, qui le décrit en 1827 en observant des petites particules qui
semblaient bouger toutes seules. Il voit ses particules avoir la tremblote, mais
sans pouvoir expliquer pourquoi.</p>

<p>C’est d’autant plus cool qu’en 1905, en donnant l’explication du mouvement
brownien, Albert Enstein va fournir la preuve de l’existence des atomes.</p>

<p>Le mouvement brownien c’est simplement les atomes qui <em>cognent</em> dans tout les
sens sur des particules.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree.png" /></p>

<!-- more -->

<p>L’algorithme pour créer un arbre brownien est enfantin:</p>

<ol>
  <li>Positionner au hasard une première cellule gelée qui sert de <em>graine</em>.</li>
  <li>Positionner au hasard une cellule libre.</li>
  <li>Mouvoir au hasard la cellule libre, c’est le mouvement brownien.</li>
  <li>Quand la cellule libre <em>rencontre</em> une cellule gelée, elle gèle elle-même
et on recommence au point 2.</li>
</ol>

<p>Mettre les cellules libres une par une, c.à.d attendre qu’une rencontre avec une
cellule gelée se produise avant de passer à la cellule libre suivante est trop
long. Avec un dispositif d’affichage assez grand on pourrait y passer plusieurs
jours.
Donc je met toutes les cellules libres dès le départ, ainsi il se passe très
vite beaucoup de choses.</p>

<p>J’ai fait <a href="https://www.youtube.com/watch?v=wQnTUZHfSKA&amp;feature=youtu.be">une vidéo de la construction d’un arbre brownien</a> pour que vous puissiez visualiser comment ça fonctionne.</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/wQnTUZHfSKA" frameborder="0" allowfullscreen=""></iframe>

<p>J’ai écrit un programme en JRuby pour faire un arbre brownien basique.  Le code
n’est pas beau car il n’a pas été pensé pour durer plus que le temps d’un
week-end. Malgré tout, je pense qu’il est compréhensible et qu’il peut servir
de base pour des idées plus sophistiquées.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="kp">include</span> <span class="no">Java</span>
</span><span class="line">
</span><span class="line"><span class="c1"># It&#39;s Ruby… but it&#39;s also Java… so… import…</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JPanel</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">Timer</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Color</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Dimension</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Toolkit</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">ActionListener</span>
</span><span class="line">
</span><span class="line"><span class="no">SIZE</span> <span class="o">=</span> <span class="mi">200</span>        <span class="c1"># Both width and height of the *image*.</span>
</span><span class="line"><span class="no">SCALE</span> <span class="o">=</span> <span class="mi">2</span>         <span class="c1"># Multiply size by scale to obtain the *window* size.</span>
</span><span class="line"><span class="no">FREE_TOTAL</span> <span class="o">=</span> <span class="mi">6000</span> <span class="c1"># Number of particles to agregate.</span>
</span><span class="line"><span class="no">DELAY</span> <span class="o">=</span> <span class="mi">20</span>        <span class="c1"># Time to wait between *screen refreshes*.</span>
</span><span class="line">
</span><span class="line"><span class="no">VOID</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1"># A cell with nothing in itself.</span>
</span><span class="line"><span class="no">FROZEN</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># A cell already agregated.</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BrownianTree</span> <span class="o">&lt;</span> <span class="no">JFrame</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">ActionListener</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="s2">&quot;Brownian Tree&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">init_ui</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">init_ui</span>
</span><span class="line">    <span class="vi">@board</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">setPreferredSize</span><span class="p">(</span><span class="no">Dimension</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SIZE</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">))</span>
</span><span class="line">    <span class="n">add</span><span class="p">(</span><span class="vi">@board</span><span class="p">)</span>
</span><span class="line">    <span class="n">pack</span>
</span><span class="line">    <span class="n">setDefaultCloseOperation</span><span class="p">(</span><span class="ss">JFrame</span><span class="p">:</span><span class="ss">:EXIT_ON_CLOSE</span><span class="p">)</span>
</span><span class="line">    <span class="n">setVisible</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@timer</span> <span class="o">=</span> <span class="no">Timer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">DELAY</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@timer</span><span class="o">.</span><span class="n">start</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Called every DELAY millisecond, thanks to the *magic* of</span>
</span><span class="line">  <span class="c1"># ActionListener.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">actionPerformed</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">repaint</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Board</span> <span class="o">&lt;</span> <span class="no">JPanel</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="n">init_board</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">init_board</span>
</span><span class="line">    <span class="n">setBackground</span><span class="p">(</span><span class="no">Color</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># An array of SIZE x SIZE.</span>
</span><span class="line">    <span class="vi">@cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span><span class="p">,</span> <span class="no">VOID</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># The cell in the middle is the seed.</span>
</span><span class="line">    <span class="vi">@cells</span><span class="o">[</span><span class="no">SIZE</span> <span class="o">/</span> <span class="mi">2</span><span class="o">][</span><span class="no">SIZE</span> <span class="o">/</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="no">FROZEN</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># All free cells from the start, at random (x y) positions.</span>
</span><span class="line">    <span class="vi">@free_cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">FREE_TOTAL</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Called by `repaint` in BrownianTree. Yep, that&#39;s right, `repaint`</span>
</span><span class="line">  <span class="c1"># call `paint`. It&#39;s also Java, after all…</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">paint</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="no">Toolkit</span><span class="o">.</span><span class="n">getDefaultToolkit</span><span class="o">.</span><span class="n">sync</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">dispose</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Display frozen cells in white and free cells in red.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:WHITE</span><span class="p">)</span>
</span><span class="line">    <span class="no">SIZE</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="no">SIZE</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
</span><span class="line">        <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span>
</span><span class="line">          <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">j</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:RED</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">move</span>
</span><span class="line">    <span class="c1"># Move each free cell, one cell up or up-right or right or etc...</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="n">c</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">        <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span><span class="p">,</span>
</span><span class="line">        <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">      <span class="o">]</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="no">SIZE</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="no">SIZE</span>
</span><span class="line">        <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">c</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Freeze each free cell that have at least 1 neighbor.</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="k">if</span> <span class="n">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="no">FROZEN</span>
</span><span class="line">        <span class="kp">nil</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">cell</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">compact!</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="no">SIZE</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="no">SIZE</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class="line">      <span class="k">return</span> <span class="kp">false</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span>
</span><span class="line">      <span class="kp">true</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="kp">false</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">BrownianTree</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On se retrouve bientôt pour que je vous parle des quelques variations que j’ai
essayé autour du thème des arbres browniens.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">Les arbres browniens - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8/">Un désassembleur pour Chip8</a></li><li><a href="http://lkdjiin.github.io/blog/2016/11/02/comment-ecrire-un-framework-de-test-pour-ruby/">Comment écrire un framework de test pour Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je ne voterai pas]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/12/13/je-ne-voterai-pas/"/>
    <updated>2015-12-13T17:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/12/13/je-ne-voterai-pas</id>
    <content type="html"><![CDATA[<p>Il est 16h00, nous sommes le 13 décembre 2015, le FN va peut-être remporter
plusieurs régions et je ne voterai pas. J’ouvre twitter et je lis beaucoup de
conneries. Je me ferai bien un ptit coup de gueule maintenant puisque d’après
certains, vu que je ne vote pas, je devrai la fermer ensuite…</p>

<!-- more -->

<blockquote>
  <p>Voter est un droit mais c’est avant tout un devoir</p>
</blockquote>

<p>Ne pas voter est tout autant un droit. Je me sens même le devoir de ne pas
voter, pour en aucun cas légitimer les politiques (hommes, femmes, partis) qui
depuis 25 ans que je vote (car oui j’ai déjà voté) n’ont jamais, pas une fois,
tenu leur programme. Chaque fois que j’ai voté, ils (les politiques, les
hommes, les femmes, les partis) ont toujours pris ma voix pour ensuite se
torcher les fesses avec.</p>

<blockquote>
  <p>Celui qui ne vote pas n’a pas le droit de se plaindre des résultats</p>
</blockquote>

<p>Bah voyons, compte là-dessus. Quel que soit le résultat dans ma région, PS, LR
ou FN, je me plaindrai. Parce que quel que soit le résultat, ces gens ne me
représentent pas. Sûr que si c’est le FN qui passe, <a href="https://www.youtube.com/watch?v=FpH0gre8AQw">je gueulerai un peu plus</a>.</p>

<blockquote>
  <p>J’espère sincèrement que le taux d’abstention sera faible aujourd’hui.</p>
</blockquote>

<p>J’espère justement le contraire mais je pense que tu auras raison dans une
certaine mesure. Le taux d’abstention sera sûrement plus bas que la semaine
dernière. La raison ? PS et LR sont rodés depuis plusieurs décennies, ils
savent se servir du FN pour recueillir quelques votes de plus. Je ne jouerai pas à leur jeu, il me dégoute.</p>

<blockquote>
  <p>Si les gens lisaient plus, se cultivaient plus, le #FHaine ne serait pas si haut aux #electionsregionales. Vote d’ignorance et de peur.</p>
</blockquote>

<p>Ça fait 30 ans que certains se sentant supérieurs (à qui je ne sais
pas) font le coup de culpabiliser les électeurs du FN et/ou de les traiter de
gros cons. 30 ans ! Visiblement ça ne marche pas.</p>

<blockquote>
  <p>Faites vous entendre en allant voter</p>
</blockquote>

<p>Encore une fois, non. Ça ne marche pas. Un candidat te promet une chose. Tu
votes pour lui. Il est élu. Il a la légitimité. Il ne fait pas ce qu’il a
promis. Tu ne peux rien y changer. On recommence à la prochaine élection. Ah
mais si au fait, tu peux y faire quelque chose en refusant de voter…</p>

<blockquote>
  <p>On devrait interdire de voter au seconde tour au gens qui n’ont pas voter au premier , tout le monde se bougerai le cul</p>
</blockquote>

<p>Et allez donc, et pourquoi pas le vote obligatoire !</p>

]]></content>
  </entry>
  
</feed>
