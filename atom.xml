<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-31T21:28:50+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/"/>
    <updated>2014-05-31T21:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On peut améliorer la fonction <code>fight</code>, pour qu&#8217;elle ne choisisse pas toujours
le meilleur individu. Il serait bon que, dans une faible proportion, elle
choisisse parfois le plus faible des deux combattants ; ceci pour assurer
qu&#8217;on ne perde pas de matériel génétique.</p>

<!-- more -->


<p>Voici donc la nouvelle fonction <code>fight</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">rand</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mf">0.8</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index2</span> <span class="p">:</span> <span class="n">index1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans 80% des cas, elle selectionne le meilleur individu, et dans 20% des
cas, elle selectionne le plus faible.</p>

<p>Je pense qu&#8217;on a maintenant tous les éléments nécessaire à la finalisation
de l&#8217;algorithme.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/28/un-algorithme-genetique-en-julia-partie-10/'>Un algorithme génétique en Julia &ndash; partie 10</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/"/>
    <updated>2014-05-30T21:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Avec ce que j&#8217;ai compris au <a href="blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/">dernier épisode</a>
à propos des types, je peux améliorer la fonction <code>mutate</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">g</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">g</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">x</span><span class="p">)::</span><span class="kt">Int</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">ch</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Maintenant les gènes des chromosomes restent toujours des tableaux de
<em>Int</em>:</p>

<pre><code>julia&gt; include("main.jl")
mutate (generic function with 1 method)

julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1])
 Chromosome([1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1])
 Chromosome([1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,1,0])
 Chromosome([0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,1,1])
 Chromosome([0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,0,0,0,1,1])
 Chromosome([0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0])
 Chromosome([0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1])
 Chromosome([0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1])

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
  9
  9
 10
  8
 10
  7
  8
  6

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 7
 2
 7
 5
 2
 7
 3
 7
 2
 2
 1
 3
 6
 5
 2
 3

julia&gt; gen2 = reproduction([], pop, selection)
8-element Array{Chromosome,1}:
 Chromosome([1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1])
 Chromosome([0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,1])
 Chromosome([1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1])
 Chromosome([0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1])
 Chromosome([1,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0])
 Chromosome([0,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,1,0,0])
 Chromosome([0,0,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1])
 Chromosome([1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0])
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/28/un-algorithme-genetique-en-julia-partie-10/'>Un algorithme génétique en Julia &ndash; partie 10</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/"/>
    <updated>2014-05-29T21:13:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier on a vu qu&#8217;il y avait une légère différence de <em>type</em> entre les gènes
d&#8217;un chromosome avant et après la mutation:</p>

<pre><code>julia&gt; c = Chromosome(create_genes(10))
Chromosome([0,0,0,1,1,1,1,1,0,1])

julia&gt; d = mutate(c)
Chromosome({0,0,0,1,1,1,1,1,0,1})

julia&gt; c.genes
10-element Array{Int32,1}:

julia&gt; d.genes
10-element Array{Any,1}:
</code></pre>

<p>C&#8217;est l&#8217;occasion de regarder un peu les types en Julia.</p>

<!-- more -->


<p>Voici une fonction <code>foo</code> qui additionne deux nombres:</p>

<pre><code>julia&gt; foo(a, b) = a + b
foo (generic function with 1 method)

julia&gt; foo(1, 2)
3
</code></pre>

<p>Que se passe-t-il si je lui passe deux chaînes de caractères ?</p>

<pre><code>julia&gt; foo("he", "llo")
ERROR: no method +(ASCIIString, ASCIIString)
</code></pre>

<p>C&#8217;est une erreur, puisque la fonction <code>+</code> ne sait pas additionner des
chaînes.</p>

<p>Très bien, apprenons à <code>foo</code> l&#8217;addition de chaînes. Pour cela, on indique
à Julia ce qu&#8217;il faut faire lorsque les arguments reçus par <code>foo</code> sont de
type <code>String</code>:</p>

<pre><code>julia&gt; foo(a::String, b::String) = "$a$b"
foo (generic function with 2 methods)

julia&gt; foo("he", "llo")
"hello"
</code></pre>

<p>Et <code>foo</code> fonctionne toujours avec des nombres:</p>

<pre><code>julia&gt; foo(1, 2)
3
</code></pre>

<p>La fonction <code>foo</code> possède 2 <em>méthodes</em>, une à utiliser quand elle reçoit des
arguments <em>String</em>, et une autre, à utiliser dans tous les autres cas:</p>

<pre><code>julia&gt; methods(foo)
# 2 methods for generic function "foo":
foo(a::String,b::String) at none:1
foo(a,b) at none:1
</code></pre>

<p>La prochaine fois on arrangera notre fonction <code>mutate</code> pour que les gènes
conservent le même type.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/28/un-algorithme-genetique-en-julia-partie-10/'>Un algorithme génétique en Julia &ndash; partie 10</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/28/un-algorithme-genetique-en-julia-partie-10/"/>
    <updated>2014-05-28T21:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/28/un-algorithme-genetique-en-julia-partie-10</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici le nouveau code de l&#8217;algorithme:</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_genes</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_genes</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">selection_size</span> <span class="o">=</span> <span class="n">population_size</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">selection_size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mutate</span><span class="p">(</span><span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">]))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">])</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">g</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">g</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">ch</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>J&#8217;ai simplement ajouter la fonction <code>mutate</code> dans <code>crossover</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mutate</span><span class="p">(</span><span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">]))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et ça fonctionne:</p>

<pre><code>julia&gt; include("main.jl")

julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([0,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1])
 Chromosome([1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1])
 Chromosome([1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1])
 Chromosome([1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,0,1])
 Chromosome([0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0])
 Chromosome([0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1])
 Chromosome([1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0])
 Chromosome([1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0])

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
  9
 11
  9
 11
  8
  9
 10
  6

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 7
 7
 7
 7
 ...
 4
 1
 1

julia&gt; gen2 = reproduction([], pop, selection)
8-element Array{Chromosome,1}:
 Chromosome({1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,0})
 Chromosome({1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0})
 Chromosome({0,1,0,0,1,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1})
 Chromosome({1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,0,1,0,1,1})
 Chromosome({1,0,1,1,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1})
 Chromosome({1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0})
 Chromosome({0,1,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0,1})
 Chromosome({0,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,0,1})
</code></pre>

<p>Mais un truc me dérange toujours, le tableau est <em>modifié</em> après passage
dans <code>mutate</code>:</p>

<pre><code>julia&gt; c = chromosome(create_genes(10))
chromosome([0,0,0,1,1,1,1,1,0,1])

julia&gt; d = mutate(c)
Chromosome({0,0,0,1,1,1,1,1,0,1})

julia&gt; c.genes
10-element Array{Int32,1}:
...

julia&gt; d.genes
10-element Array{Any,1}:
...
</code></pre>

<p>C&#8217;est bien ça, le tableau n&#8217;est pas du même type. Bon, ça ne dérange pas
l&#8217;algorithme et c&#8217;est l&#8217;occasion d&#8217;un prochain article sur Julia ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/27/un-algorithme-genetique-en-julia-partie-9/"/>
    <updated>2014-05-27T21:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/27/un-algorithme-genetique-en-julia-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici une fonction de mutation pour nos chromosomes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">gene</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">gene</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">ch</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Le code me semble un peu <em>maladroit</em>, mais a l&#8217;air de fonctionner pas trop
mal ;) La fonction <code>mutate</code> prend en entrée un chromosome et produit un autre
chromosome en sortie. On peut voir qu&#8217;une seconde fonction, <code>mutator</code>, est
définie à l&#8217;intérieur.</p>

<p>Ça marche pas mal, même si il faudra faire quelque chose pour l&#8217;<em>intervalle magique</em> <code>rand(1:10)</code>:</p>

<pre><code>julia&gt; include("main.jl")
mutate (generic function with 1 method)

julia&gt; c = Chromosome(create_genes(20))
Chromosome([0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1])

julia&gt; mutate(c)
Chromosome({0,1,1,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1})
</code></pre>

<p>Le seul petit truc qui me dérange, c&#8217;est qu&#8217;on a <code>[...]</code> en entrée et
<code>{...}</code> en sortie. Je ne sais ni pourquoi, ni ce que c&#8217;est… On verra bien
au prochain épisode si c&#8217;est grave ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cherchez avec grep dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim/"/>
    <updated>2014-05-26T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Comment cherchez un mot ou un <em>pattern</em> dans votre base de code sans
quitter Vim ? Voici une réponse.</p>

<!-- more -->


<p>La commande <code>:grep</code> fait appel au programme <code>grep</code> installé sur votre
machine. La ligne suivante va chercher dans ma base de code le texte
<code>TODO</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">grep</span> TODO */*.rb
</span></code></pre></td></tr></table></div></figure>


<p>Sauf que, peut-être, ça ne marche pas chez vous. Si c&#8217;est le cas, il y
a fort à parier que le répertoire courant de Vim est, non pas celui du
fichier actif, mais votre <em>home</em>. Pour en être sûr, vous pouvez afficher
le répertoire courant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">pwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour changer le répertoire courant et qu&#8217;il coincide avec celui du fichier
courant, le plus rapide est:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">autochdir</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après, ça <em>devrait</em> marcher ;) Je vous invite à lire
<a href="http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file">cette page</a>
pour les histoires de dossier courant.</p>

<p>Personnellement, ce truc de répertoire courant m&#8217;a toujours pris la tête,
et je préfère utiliser un plugin comme <a href="https://github.com/mileszs/ack.vim">Ack.vim</a> ou <a href="https://github.com/rking/ag.vim">Ag.vim</a>,
ou plus souvent encore, faire la recherche directement dans une console. Mais chacun
ses goûts ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim/'>Le thème Gruvbox pour Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/'>Insérer le contenu d&#8217;un fichier ou d&#8217;une commande shell dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/'>Plugin vim-refactor pour Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/25/un-algorithme-genetique-en-julia-partie-8/"/>
    <updated>2014-05-25T19:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/25/un-algorithme-genetique-en-julia-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici le programme actuel, qui tient compte de l&#8217;utilisation du type
<code>Chromosome</code>, ajouté dans la partie 7.</p>

<!-- more -->




<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_genes</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_genes</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">selection_size</span> <span class="o">=</span> <span class="n">population_size</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">selection_size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">])</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le changement le plus important est l&#8217;utilisation d&#8217;une fonction anonyme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On arrive bien à calculer la génération suivante:</p>

<pre><code>julia&gt; include("main.jl")
reproduction (generic function with 1 method)

julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1])
 Chromosome([0,1,0,0,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0])
 Chromosome([0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0])
 Chromosome([0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0])
 Chromosome([1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0])
 Chromosome([1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1])
 Chromosome([1,1,0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,1])
 Chromosome([0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0])

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
  7
  9
  5
  7
  9
 10
 11
 10

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 2
 4
 6
 1
 6
 5
 8
 7
 5
 7
 5
 6
 8
 4
 6
 6

julia&gt; generation2 = reproduction([], pop, selection)
8-element Array{Chromosome,1}:
 Chromosome([0,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0])
 Chromosome([1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1])
 Chromosome([1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0])
 Chromosome([0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,1])
 Chromosome([1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1])
 Chromosome([1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1])
 Chromosome([0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,0])
 Chromosome([1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1])
</code></pre>

<p>La première version de l&#8217;algorithme est bientôt finie…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sortie de Coco version 0.11.0]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/24/sortie-de-coco-version-0-dot-11-dot-0/"/>
    <updated>2014-05-24T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/24/sortie-de-coco-version-0-dot-11-dot-0</id>
    <content type="html"><![CDATA[<p>Je viens juste de mettre en ligne la version 0.11.0 de Coco, une gem de
<em>code coverage</em> pour Ruby.</p>

<!-- more -->


<p>Ce que fait cette nouvelle version:</p>

<ul>
<li>Échappe proprement les entités HTML dans les rapports.</li>
<li>Implémente des compteurs de <em>hit</em>.</li>
<li>Sortie d&#8217;avertissement sur la console lors de l&#8217;utilisation de
fonctionnalités dépréciées.</li>
</ul>


<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/11/sortie-de-coco-0-dot-9/'>Sortie de coco 0.9</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/25/sortie-de-coco-0-dot-8/'>Sortie de coco 0.8</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/'>Couverture de code pour Ruby avec coco</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/23/un-algorithme-genetique-en-julia-partie-7/"/>
    <updated>2014-05-23T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/23/un-algorithme-genetique-en-julia-partie-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le <a href="blog/2014/05/18/un-algorithme-genetique-en-julia-partie-6/">dernier article</a> sur Julia, j&#8217;avais eu un problème avec les
tableaux. En effet, leur comportement n&#8217;est pas celui que j&#8217;attendais:</p>

<pre><code>julia&gt; a = [1, 2]
julia&gt; b = [3, 4]

julia&gt; [a, b]
4-element Array{Int32,1}:
 1
 2
 3
 4

julia&gt; append!(a, b)
4-element Array{Int32,1}:
 1
 2
 3
 4
</code></pre>

<p>Alors que j&#8217;attendais plutôt ceci : <code>[ [1, 2], [3, 4] ]</code>.</p>

<!-- more -->


<p>Pour régler ça, on doit pouvoir utiliser les tableaux multi-dimensionnels,
que Julia à tendance à nommer des «matrices». Vu mon niveau en math, ça
ne m&#8217;a pas vraiment attiré ;)</p>

<p>J&#8217;ai préféré regarder du coté des types. Pour l&#8217;instant, je comprends les
types comme des structures dans le genre de C, c&#8217;est-à-dire un ensemble de
donnés regroupées au sein d&#8217;une même référence.</p>

<p>J&#8217;ai donc besoin d&#8217;un type, que j&#8217;appelerais <code>Chromosome</code>, qui va contenir
le tableau des gènes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On l&#8217;utilise comme ceci:</p>

<pre><code>julia&gt; Chromosome([1, 2, 3])
Chromosome([1,2,3])
</code></pre>

<p>Je vais devoir modifier un peu les fonctions définies jusqu&#8217;ici pour qu&#8217;elle
fonctionnent avec des <code>Chromosome</code>s. Par exemple, pour créer la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">create_chromosome</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_chromosome</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui donne:</p>

<pre><code>julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0])
 Chromosome([1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1])
 Chromosome([1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1])
 Chromosome([1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1])
 Chromosome([0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,1,0,1])
 Chromosome([1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1])
 Chromosome([1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0])
 Chromosome([1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0])
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rechercher avec grep dans un fichier compressé]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse/"/>
    <updated>2014-05-22T21:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Il vous arrive peut-être parfois d&#8217;avoir à fouiller des fichiers de log ?
Vous utiliser <code>grep</code> pour ça ? Et comment faire quand les logs sont
compressés ?</p>

<!-- more -->


<p>Lorsque le log est normal, c&#8217;est à dire non-compressé, on peut utiliser la
commande <code>grep</code> suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grep --color <span class="s1">&#39;LOWER&#39;</span> test.log
</span><span class='line'>  User Exists <span class="o">(</span>0.8ms<span class="o">)</span>  SELECT 1 AS one FROM <span class="s2">&quot;users&quot;</span> WHERE LOWER<span class="o">(</span><span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;email&quot;</span><span class="o">)</span>   <span class="o">=</span> LOWER<span class="o">(</span><span class="s1">&#39;foo@example.com&#39;</span><span class="o">)</span> LIMIT 1
</span></code></pre></td></tr></table></div></figure>


<p>Elle va afficher toutes les lignes du fichier <code>test.log</code> qui contiennent le
mot <code>LOWER</code>.</p>

<p>Mais si on fait la même chose sur un log compressé:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grep --color <span class="s1">&#39;LOWER&#39;</span> test.log.1.gz
</span><span class='line'><span class="nv">$ </span>1
</span></code></pre></td></tr></table></div></figure>


<p>Ça ne fonctionne pas. Ci-dessus, le <code>$ 1</code>, c&#8217;est mon shell qui m&#8217;affiche
une erreur sous la forme du code de retour (une idée pour un futur article).</p>

<p>Pour chercher dans un fichier compressé avec <code>grep</code>, on peut utiliser très
simplement la commande <code>zgrep</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zgrep --color <span class="s1">&#39;LOWER&#39;</span> test.log.1.gz
</span><span class='line'>  User Exists <span class="o">(</span>0.8ms<span class="o">)</span>  SELECT 1 AS one FROM <span class="s2">&quot;users&quot;</span> WHERE LOWER<span class="o">(</span><span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;email&quot;</span><span class="o">)</span>   <span class="o">=</span> LOWER<span class="o">(</span><span class="s1">&#39;foo@example.com&#39;</span><span class="o">)</span> LIMIT 1
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/'>Insérer le contenu d&#8217;un fichier ou d&#8217;une commande shell dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/'>Vim &ndash; Comment ouvrir la fenêtre courante dans un nouvel onglet</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/'>Astuce Bash &ndash; Améliorer l&#8217;historique</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser une version particulière d'une gem Ruby... dans une gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem/"/>
    <updated>2014-05-21T20:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>On connait tous le moyen d&#8217;utiliser une gem d&#8217;une version précise dans un
projet Rails. Il suffit de mettre ceci dans le Gemfile:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;=1.2.3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et hop, Rails, avec son coté <em>magique</em>, fait automatiquement le <code>require</code>
nécéssaire pour charger la gem <code>foo</code>, avec la version <code>1.2.3</code>.
Mais qu&#8217;en est-il lorsqu&#8217;on veut faire la même chose dans une gem, ou bien
dans un simple script ?</p>

<!-- more -->


<p>Si j&#8217;écris un article sur ce sujet c&#8217;est parce que j&#8217;oublie régulièrement
comment faire. Et qu&#8217;à chaque fois je dois perdre quelques minutes à chercher.
En l&#8217;écrivant une fois pour toutes, j&#8217;éspère que ça va rentrer ;)</p>

<p>La solution est évidemment très simple, on écrit ce qui suit dans son script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;=1.2.3&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;foo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/'>Mettre à jour des gems ayants des références circulaires avec Bundle</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png/'>Prise en main de la gem chunky_png</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hub - Git plus facile avec Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github/"/>
    <updated>2014-05-20T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui j&#8217;ai découvert <a href="http://hub.github.com/">Hub</a>.
Un programme (en Ruby) qui étend les fonctionnalités de Git en ligne de
commande quand on travaille avec un dépot Github. Je n&#8217;est pas encore
eu le temps de le tester, ni même de l&#8217;installer, mais je voulais tout
de même vous en parler au cas où, comme moi, vous seriez passé à coté.</p>

<!-- more -->


<p>Ne l&#8217;ayant pas tester, je me contente de paraphraser la page d&#8217;acceuil
pour vous donner l&#8217;eau à la bouche ;)</p>

<p>Pour cloner un de vos propre projet, il suffit de:</p>

<pre><code>git clone projet
</code></pre>

<p>Si le projet ne vous appartient pas, il faut faire:</p>

<pre><code>git clone github/projet
</code></pre>

<p>Rien que ça, c&#8217;est déjà sympathique. Mais je suis impatient d&#8217;essayer la
commande suivante:</p>

<pre><code>git pull-request
</code></pre>

<p>Il y plusieurs autres commandes avec lesquelles j&#8217;ai hâte de m&#8217;amuser.
Si vous avez déjà utiliser Hub, dites moi donc ce que vous en pensez.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git/'>Comment mettre temporairement de coté ses modifications de code avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/'>Comment étendre Git avec ses propres scripts: la suite</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le thème Gruvbox pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim/"/>
    <updated>2014-05-19T20:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ça fait quelques semaines maintenant que j&#8217;utilise le thème
<a href="https://github.com/morhetz/gruvbox">Gruvbox</a> pour Vim. Je le trouve
excellent.</p>

<!-- more -->


<p>Il propose deux modes, un sombre et un clair, comme le fameux thème
Solarized, qu&#8217;on active ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">bg</span><span class="p">=</span><span class="nb">dark</span>
</span><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">bg</span><span class="p">=</span><span class="nb">light</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est comfortable de pouvoir changer selon l&#8217;humeur, ou la lumière… Il y a
pas mal de langages supportés, regardez donc les
<a href="https://github.com/morhetz/gruvbox/wiki/Gallery">captures d&#8217;écrans</a>
pour voir si ça vous convient.</p>

<p>Mais ce que j&#8217;aime vraiment, c&#8217;est la très bonne intégration de base avec
plusieurs plugins que j&#8217;utilise : Easy Motion, Rainbow Parentheses, Airline,
Git Gutter, Syntastic, CtrlP, etc.</p>

<p>Je vous recommande chaudement de l&#8217;essayer.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim/'>Cherchez avec grep dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/'>Insérer le contenu d&#8217;un fichier ou d&#8217;une commande shell dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/'>Plugin vim-refactor pour Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/18/un-algorithme-genetique-en-julia-partie-6/"/>
    <updated>2014-05-18T20:47:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/18/un-algorithme-genetique-en-julia-partie-6</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui je tente d&#8217;écrire une fonction de reproduction.
Je me dis qu&#8217;une fonction récursive serait ici la bienvenue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">])</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Explications ligne par ligne:</p>

<pre><code>function reproduction(new_population, current_population, selection)
</code></pre>

<p><code>new_population</code> est un accumulateur, qui débute comme un tableau vide.
<code>current_population</code> est un tableau qui contient la génération courante et qui
ne changera pas. <code>selection</code> est un tableau qui contient les indexs des
reproducteurs par rapport à <code>current_population</code>.</p>

<pre><code>if selection == []
  return new_population
</code></pre>

<p>C&#8217;est la condition de sortie de cette fonction récursive. Au fur et à mesure,
<code>selection</code> va être vidé des ses éléments.</p>

<pre><code>father = current_population[selection[1]]
mother = current_population[selection[2]]
child = crossover(father, mother)
</code></pre>

<p>On produit un nouvel individu (<code>child</code>) par le croisement de deux éléments de
<code>current_population</code>, pointés par les deux premiers éléments de <code>selection</code>.</p>

<pre><code>reproduction([new_population, child], current_population, selection[3:end])
</code></pre>

<p>On appelle à nouveau la fonction <code>reproduction</code>, en ajoutant le nouvel individu
et en retirant les deux premiers éléments de <code>selection</code>.</p>

<p>Ça fonctionne presque, mais pas tout à fait !
En effet:</p>

<pre><code>julia&gt; include("main.jl")
reproduction (generic function with 1 method)

julia&gt; population = create_population(8, 20)
8-element Array{Array{Int32,1},1}:
 [1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0]
 [0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1]
 [0,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,0,1,0,1]
 [1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1]
 [1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1]
 [0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0]
 [1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1]
 [0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,1]

julia&gt; scores = score(population)
8-element Array{Int32,1}:
  9
  9
  9
 11
 11
  5
 11
  8

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 2
 5
 4
 1
 5
 6
 5
 5
 4
 4
 6
 5
 4
 1
 1
 6

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 2
 7
 3
 1
 3
 3
 1
 4
 7
 7
 7
 8
 5
 4
 7
 4

julia&gt; generation2 = reproduction([], population, selection)
160-element Array{Int32,1}:
 0
 1
 0
 1
 0
 0
 0
 0
 1
 1
 ⋮
 1
 1
 0
 1
 0
 0
 0
 0
 1
 1
</code></pre>

<p>La fonction <code>reproduction</code> ne produit pas un tableau de 8 chromosomes de
longueur 20, mais un tableau de 160 entiers. Je sens qu&#8217;il y a un truc
vraiment cool avec les tableaux en Julia, mais j&#8217;ai la preuve que je n&#8217;ai pas
encore tout compris ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/17/un-algorithme-genetique-en-julia-partie-5/"/>
    <updated>2014-05-17T15:38:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/17/un-algorithme-genetique-en-julia-partie-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui je cherche à faire une fonction <code>crossover</code>, pour effectuer un
croisement entre deux chromosomes.</p>

<p>Soit les deux chromosomes suivants:</p>

<pre><code>julia&gt; a = [1, 2, 3, 4, 5]

julia&gt; b = [6, 7, 8, 9, 0]
</code></pre>

<!-- more -->


<p>Pour obtenir la taille d&#8217;un tableau:</p>

<pre><code>julia&gt; length(a)
5
</code></pre>

<p>Pour obtenir le <em>point de croisement</em>, on tire au hasard:</p>

<pre><code>julia&gt; cut_point = rand(1:length(a))
4
</code></pre>

<p>Le nouveau chromosome sera composé du début du premier, jusqu&#8217;au point de
croisement:</p>

<pre><code>julia&gt; cut_point = 3
3
julia&gt; a[1:cut_point]
3-element Array{Int32,1}:
 1
 2
 3
</code></pre>

<p>Puis de la fin du second chromosome:</p>

<pre><code>julia&gt; a[cut_point + 1:end]
2-element Array{Int32,1}:
 4
 5
</code></pre>

<p>Si on rassemble tout ça dans un tableau, on obtient notre nouveau
chromosome:</p>

<pre><code>julia&gt; [ a[1:cut_point], b[cut_point + 1:end] ]
5-element Array{Int32,1}:
 1
 2
 3
 9
 0
</code></pre>

<p>Il ne reste plus qu&#8217;à en faire une fonction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">chromosome1</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">],</span> <span class="n">chromosome2</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/16/un-algorithme-genetique-en-julia-partie-4/"/>
    <updated>2014-05-16T21:00:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/16/un-algorithme-genetique-en-julia-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici le fichier actuel:</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">create_chromosome</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">create_chromosome</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aujourd&#8217;hui on ajoute la fonction <code>tournament</code>.</p>

<!-- more -->


<p>La voilà:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">selection_size</span> <span class="o">=</span> <span class="n">population_size</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">selection_size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit que pour connaître la taille d&#8217;un tableau, on utilise la fonction
<code>length</code> et que je me sers encore d&#8217;une compréhension de liste pour produire
un tableau qui contiendra les index (sur la population) de mes reproducteurs.</p>

<pre><code>julia&gt; include("main.jl")
tournament (generic function with 1 method)

julia&gt; pop = create_population(8, 20)
8-element Array{Array{Int32,1},1}:
 [0,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0]
 [1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0]
 [1,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,1]
 [1,1,1,0,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,1]
 [1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,1]
 [1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0]
 [0,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,0]
 [0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,1,0,0]

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
  7
 13
  9
 11
 11
 13
 13
  9

julia&gt; tournament(scores)
16-element Array{Int32,1}:
 5
 6
 6
 4
 4
 6
 7
 2
 6
 6
 3
 7
 2
 2
 6
 3
</code></pre>

<p>À plus tard pour la suite…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/15/un-algorithme-genetique-en-julia-partie-3/"/>
    <updated>2014-05-15T21:28:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/15/un-algorithme-genetique-en-julia-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui j&#8217;essaye de faire la sélection en vue de la reprodution ;)
Si vous aviez suivi ma série d&#8217;articles
<a href="http://lkdjiin.github.io/blog/categories/algorithme-genetique/">les algorithmes génétiques démystifiés</a> vous savez de quoi je parle…</p>

<!-- more -->


<p>Voici d&#8217;abord les fonctions que j&#8217;ai jusqu&#8217;à présent :</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">create_chromosome</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">create_chromosome</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors j&#8217;ai remis des <code>_</code>, parce que sans j&#8217;y arrivais vraiment pas ;)
J&#8217;ai aussi ajouté l&#8217;argument <code>size</code> à la fonction de création d&#8217;un
chromosome pour éviter les nombres magiques.</p>

<p>Je veux opérer une sélection très simple : un tournoi. Pour ça, je
commence avec une fonction <code>fight</code> qui va renvoyer le meilleur chromosome
parmi deux:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>En fait je ne passe pas de chromosome à cette fonction mais le tableau des
scores de la population, obtenu avec <code>score</code> et deux indexs.</p>

<pre><code>julia&gt; include("main.jl")

julia&gt; pop = create_population(8, 20)
8-element Array{Array{Int32,1},1}:
 [1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1]
 [1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1]
 [0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1]
 [1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1]
 [0,1,0,0,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,1]
 [1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,1,0,1,0]
 [1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1]
 [0,0,0,1,0,1,0,0,0,1,1,1,0,1,0,1,1,1,1,1]

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
 15
  9
  9
 14
 10
 11
 10
 11
</code></pre>

<p>Et la fonction <code>fight</code> renvoit l&#8217;index du meilleur des deux chromosomes
du <em>combat</em>:</p>

<pre><code>julia&gt; fight(scores, 1, 2)
1

julia&gt; fight(scores, 7, 8)
8
</code></pre>

<p>La prochaine fois je pourrais organiser le tournoi proprement dit.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/14/un-algorithme-genetique-en-julia-partie-2/"/>
    <updated>2014-05-14T21:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/14/un-algorithme-genetique-en-julia-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je continue l&#8217;algorithme génétique en Julia que j&#8217;ai commencé hier, en
cherchant la manière de calculer le score d&#8217;un chromosome.</p>

<!-- more -->


<p>Tout d&#8217;abord, je met les fonctions créées hier dans un fichier <code>main.jl</code>.
J&#8217;en profite pour les renommer. La convention en Julia veut qu&#8217;on accolle
les mots, sans séparation. Bien que je trouve ça curieux et illisible, je
vais m&#8217;y plier, après tout j&#8217;apprends…</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">createchromosome</span><span class="p">()</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">createpopulation</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span> <span class="n">createchromosome</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une fois l&#8217;interpréteur Julia lancé, je charge les définitions de fonctions
du fichier <code>main.jl</code>:</p>

<pre><code>julia&gt; include("main.jl")
</code></pre>

<p>Puis je crée un chromosome:</p>

<pre><code>julia&gt; chromosome = createchromosome()
10-element Array{Int32,1}:
 1
 0
 0
 1
 1
 0
 0
 0
 1
 1
</code></pre>

<p>L&#8217;algorithme génétique que je veux mettre en place est le plus simple qui
existe. Je cherche à maximiser les chromosomes, c&#8217;est à dire que je veux
obtenir un chromosome qui ne comporte que des 1. Pour calculer son score,
il suffit donc de faire la somme de ses gènes. Très facile, puisque Julia
fournit la fonction <code>sum</code>:</p>

<pre><code>julia&gt; sum(chromosome)
5
</code></pre>

<p>Maintenant je dois trouver comment calculer le score de chaque chromosome.
Je crée donc une population:</p>

<pre><code>julia&gt; population = createpopulation(8)
8-element Array{Array{Int32,1},1}:
 [0,0,1,1,1,0,0,0,0,1]
 [1,0,0,0,1,0,1,1,0,0]
 [0,0,1,1,0,0,0,1,0,1]
 [1,0,0,1,1,0,0,0,0,0]
 [1,0,1,0,1,0,1,0,0,1]
 [0,1,1,1,1,1,0,1,0,0]
 [0,1,1,0,1,0,1,0,1,1]
 [0,1,1,1,1,1,0,1,0,0]
</code></pre>

<p>Et j&#8217;utilise <code>map</code>, qui va <em>mapper</em> la fonction <code>sum</code> sur chaque élément
de la population:</p>

<pre><code>julia&gt; map(sum, population)
8-element Array{Int32,1}:
 4
 4
 4
 3
 5
 6
 6
 6
</code></pre>

<p>Voilà, si on veut, on peut aussi créer une fonction <code>score</code>:</p>

<pre><code>julia&gt; score(population) = map(sum, population)

julia&gt; score(population)
8-element Array{Int32,1}:
 4
 4
 4
 3
 5
 6
 6
 6
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/13/un-algorithme-genetique-en-julia-partie-1/"/>
    <updated>2014-05-13T21:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/13/un-algorithme-genetique-en-julia-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour continuer d&#8217;apprendre le langage Julia, je vais coder un algorithme
génétique simple.</p>

<!-- more -->


<p>Tout d&#8217;abord un chromosome, qui va contenir 10 valeurs, chaque valeur pouvant
être soit zéro, soit un:</p>

<pre><code>julia&gt; chromosome() = rand(0:1, 10)
</code></pre>

<p>La fonction <code>rand</code> prend un <em>range</em> en premier paramêtre.</p>

<p>On teste cette fonction:</p>

<pre><code>julia&gt; chromosome()
10-element Array{Int32,1}:
 0
 1
 1
 1
 1
 1
 1
 0
 1
 1
</code></pre>

<p>Maintenant je veux une population:</p>

<pre><code>julia&gt; population(size) = [ chromosome() for _ in 1:size ]
</code></pre>

<p>Il s&#8217;agit d&#8217;une <em>compréhension de liste</em>. Pour chaque valeur (symbolisée
par le <code>_</code>) du <em>range</em> de 1 à <code>size</code>, on applique la fonction <code>chromosome</code>.
Je peux donc avoir une population:</p>

<pre><code>julia&gt; population(8)
8-element Array{Array{Int32,1},1}:
 [1,0,1,0,1,0,0,1,1,0]
 [1,1,0,1,0,1,0,1,0,0]
 [1,0,1,1,0,1,1,1,1,1]
 [0,0,1,0,0,1,0,0,1,1]
 [1,0,0,1,0,1,1,1,1,0]
 [0,1,0,0,1,1,1,0,1,1]
 [0,0,0,1,0,1,0,1,1,1]
 [0,1,0,0,0,1,0,1,1,0]
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/'>Un algorithme génétique en Julia &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/'>Un algorithme génétique en Julia &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/'>Un algorithme génétique en Julia &ndash; partie 11</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les fonctions en Julia - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/12/les-fonctions-en-julia-partie-2/"/>
    <updated>2014-05-12T21:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/12/les-fonctions-en-julia-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Suite du tour d&#8217;horizon des fonctions en Julia. Je m&#8217;intéresse aujourd&#8217;hui
aux arguments par défaut et aux arguments nommés (souvent appellés
<em>keyword arguments</em>).</p>

<!-- more -->


<p>La fonction suivante possède un argument <em>normal</em>, <code>a</code>, et un argument par
défaut, <code>b</code>:</p>

<pre><code>julia&gt; function add(a, b = 10)
           a + b
       end
</code></pre>

<p>Lorsqu&#8217;on l&#8217;appelle avec deux arguments, elle les additionne:</p>

<pre><code>julia&gt; add(1, 2)
3
</code></pre>

<p>Lorsqu&#8217;on l&#8217;appelle avec un seul argument, la valeur par défaut du second
argument est utilisé:</p>

<pre><code>julia&gt; add(1)
11
</code></pre>

<p>Tout ça est très classique, sans surprise. Voyons maintenant les arguments
nommés:</p>

<pre><code>julia&gt; function add(a, b = 10 ; c = 0)
           a + b + c
       end
</code></pre>

<p>J&#8217;ai ici défini la fonction <code>add</code> avec un argument normal, <code>a</code>, un argument par
défaut, <code>b</code>, et un argument nommé, <code>c</code>. On doit séparer les arguments
nommés par un point-virgule.</p>

<p>Avec une seule valeur, <code>b</code> vaut 10 et <code>c</code> vaut 0:</p>

<pre><code>julia&gt; add(1)
11
</code></pre>

<p>Avec deux valeurs, <code>b</code> vaut 2 et <code>c</code> vaut 0:</p>

<pre><code>julia&gt; add(1, 2)
3
</code></pre>

<p>Avec trois valeurs, je suis obligé de <em>nommer</em> <code>c</code>:</p>

<pre><code>julia&gt; add(1, 2, c = 10)
13
</code></pre>

<p>Lorsqu&#8217;on a uniquement des arguments nommés, la syntaxe peut paraître
étrange, il ne faut pas oublier le point-virgule:</p>

<pre><code>julia&gt; function foo(; bar = "bar", baz = "baz")
           "$bar $baz"
       end

julia&gt; foo()
"bar baz"

julia&gt; foo(bar = "hello", baz = "world")
"hello world"
</code></pre>

<p>Pour finir, on va mettre en exergue une différence de <em>portée</em> entre les
arguments par défaut et les arguments nommés. Soit <code>b</code> qui vaut 3:</p>

<pre><code>julia&gt; b = 3
3
</code></pre>

<p>Dans la fonction <code>foo</code> suivante je n&#8217;ai que des arguments par défaut.
L&#8217;argument <code>a</code> a comme valeur par défaut le contenu de <code>b</code>. Il s&#8217;agit du
contenu du <code>b</code> précédent, pas celui de l&#8217;argument:</p>

<pre><code>julia&gt; foo(a = b, b = 9) = a + b

julia&gt; foo()
12
</code></pre>

<p>Maintenant, même chose avec des arguments nommés:</p>

<pre><code>julia&gt; foo(; a = b, b = 9) = a + b

julia&gt; foo()
ERROR: b not defined
</code></pre>

<p>Oups ! Les arguments nommés n&#8217;ont pas accès au monde extérieur.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/13/un-algorithme-genetique-en-julia-partie-1/'>Un algorithme génétique en Julia &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/11/les-fonctions-en-julia/'>Les fonctions en Julia</a></li><li><a href='http://lkdjiin.github.io/blog/2014/05/10/le-langage-julia-2/'>Le langage Julia &ndash; 2</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
