<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-02-12T10:09:50+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/"/>
    <updated>2016-02-12T09:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3</id>
    <content type="html"><![CDATA[<p>On continue notre jeu en 2d en comptabilisant et en affichant le score.
Au passage on voit aussi comment utiliser une fonte précise et comment jouer
un son.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu4.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li>Beep, fonte et collecte des smileys</li>
</ol>

<h2 id="beep-et-collecte">Beep et collecte</h2>

<p>Pour donner l’illusion que le joueur attrape un smiley, dès que les deux images
entre en collision on supprime le smiley et on joue un petit son. Le cœur de
la fonctionnalité se passera au sein de la méthode <code>Player#collect</code>, qu’on
déclenchera depuis la classe Window:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="vi">@items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici ce qui change dans la classe Player. On en discute après:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">  <span class="no">DistanceOfCollision</span> <span class="o">=</span> <span class="mi">35</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@sound_collect</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/collect.wav&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">?</span> <span class="n">collision</span> <span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:distance</span><span class="p">(</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">y_center_of_mass</span><span class="p">,</span>
</span><span class="line">                              <span class="n">item</span><span class="o">.</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">item</span><span class="o">.</span><span class="n">y_center_of_mass</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">&lt;</span> <span class="no">DistanceOfCollision</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">x_center_of_mass</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_center_of_mass</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">4</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span>
</span><span class="line">    <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Tout d’abord, on charge un son comme on charge une image, sauf qu’on utilise
<code>Sample</code> au lieu de <code>Image</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@sound_collect</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Sample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/sound/collect.wav&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ensuite, la méthode <code>collect</code>. On doit trouver le ou les objets (si il y en a)
qui sont en collision avec le joueur. On teste justement cette éventuelle
collision avec un smiley avec la méthode <code>collide?</code>. Si collision il y a,
l’objet sera supprimé (voir <code>collision</code> plus loin):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">collect</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">    <span class="n">items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">?</span> <span class="n">collision</span> <span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>Modifier un objet sans vraiment le dire, par effet de bord, par exemple avec
<code>reject!</code> comme ci-dessus ne manquera pas de remplir d’horreur les tenants de la
programmation fonctionnelle. Mais comme le paradigme ici est la programmation
orienté objet, je ne vois pas de problèmes ;)</p>
</blockquote>

<p>Pour détecter si il y a eu collision entre deux objets, il existe plusieurs
méthodes. Comme Gosu fournit une méthode pour connaître la distance entre deux
points (<code>Gosu::distance</code>), voici ce que nous allons faire: le joueur et les smileys vont être
chacun représentés par un seul point précis. Si la distance entre ses deux points
tombe sous un certain seuil, nous considèrerons qu’il y a collision.</p>

<p>Le joueur est représenté par le point (<code>x_center_of_mass</code>, <code>y_center_of_mass</code>)
et un smiley par le point (<code>item.x_center_of_mass</code>, <code>item.y_center_of_mass</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">collide?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:distance</span><span class="p">(</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">y_center_of_mass</span><span class="p">,</span>
</span><span class="line">                              <span class="n">item</span><span class="o">.</span><span class="n">x_center_of_mass</span><span class="p">,</span> <span class="n">item</span><span class="o">.</span><span class="n">y_center_of_mass</span><span class="p">)</span>
</span><span class="line">    <span class="n">distance</span> <span class="o">&lt;</span> <span class="no">DistanceOfCollision</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour le joueur, la coordonnée x utilisée pour la détection de collision est
pile au milieu:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">x_center_of_mass</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour la coordonnée y, c’est le quart en partant du haut:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">y_center_of_mass</span>
</span><span class="line">    <span class="n">Y</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">4</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Enfin, lors d’une collision il faut émettre un son et retourner <code>true</code> pour que
<code>reject!</code> sache qu’il faut supprimer ce smiley de la collection. Le paramètre
de <code>play</code> est le volume, de 0.0 à 1.0:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">collision</span>
</span><span class="line">    <span class="vi">@sound_collect</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le point d’un smiley utilisé pour détecter une collision est le milieu de
la largeur pour x et le haut pour y:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>smiley.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Smiley</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">x_center_of_mass</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y_center_of_mass</span>
</span><span class="line">    <span class="vi">@y</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>N’hésitez pas à modifier ces points de détection ainsi que la constante
<code>DistanceOfCollision</code> pour trouver les valeurs qui vous conviennent.</p>

<h2 id="compter-et-afficher-les-points">Compter et afficher les points</h2>

<p>On va ajouter 10 points quelque soit le type de smiley collecté. Et on va
afficher le score dans le coin supérieur gauche. Les sorties informatives
telles que le score, les vies, etc, seront gérées depuis la classe <code>UI</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ...</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;z_order&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;player&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;smiley&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;ui&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line"><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Un pattern commence à se dessiner, on crée un objet dans l’initialisation de
<code>Window</code> et on appelle sa méthode <code>draw</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span> <span class="o">=</span> <span class="no">UI</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@ui</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="ss">score</span><span class="p">:</span> <span class="vi">@player</span><span class="o">.</span><span class="n">score</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Les sorties de l’UI doivent être toujours visibles, on leurs donnera donc le
ZOrder le plus grand:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>z_order.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">ZOrder</span>
</span><span class="line">
</span><span class="line">  <span class="no">Background</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="no">Items</span>      <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="no">Player</span>     <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">  <span class="no">UI</span>         <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La classe Player est un bon endroit pour tenir compte du score et le mettre à
jour lors d’une collision avec un smiley:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:score</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="vi">@score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collision</span>
</span><span class="line">    <span class="vi">@score</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finalement voici un peu de nouveauté avec la classe UI et l’utilisation d’une
fonte pour afficher du texte.  Pour info, j’ai trouvé la police
<code>VT323-Regular.ttf</code> sur Google Font.  Le chargement d’une police de caractères
nécessite de fournir la taille et le fichier de la police:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ui.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UI</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@font</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Font</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;assets/fonts/VT323/VT323-Regular.ttf&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="ss">score</span><span class="p">:)</span>
</span><span class="line">    <span class="vi">@font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Score: </span><span class="si">#{</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:UI</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xff_ffff00</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Quant à la méthode <code>draw</code> d’une fonte, je vous invite à regarder
<a href="https://www.libgosu.org/rdoc/Gosu/Font.html#draw-instance_method">sa documentation</a>
pour connaître les paramètres à fournir.</p>

<p>Une explication toutefois, ceci:</p>

<pre><code>0xff_ffff00
</code></pre>

<p>…est une couleur au format alpha, rouge, vert, bleu en hexadécimal. Le
<em>underscore</em> est juste une fonctionnalité de Ruby qui permet d’écrire les nombres
avec des underscores pour faciliter la lecture. Par exemple les deux nombres
qui suivent sont identiques, lequel est le plus simple à lire ?</p>

<pre><code>1000000000

1_000_000_000
</code></pre>

<p>Et ça marche pareil avec l’hexadécimal.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   ├── fonts
│   │   └── VT323
│   │       ├── OFL.txt
│   │       └── VT323-Regular.ttf
│   ├── images
│   │   ├── background.png
│   │   ├── player.png
│   │   ├── smiley-green.png
│   │   └── smiley-yellow.png
│   └── sound
│       └── collect.wav
├── main.rb
├── player.rb
├── smiley.rb
├── ui.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.3.0">version 0.3.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Écrire un jeu en 2d avec Ruby et Gosu - partie 2</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Écrire un jeu en 2d avec Ruby et Gosu - partie 1</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/">Un space invaders avec Opal.rb - partie 16</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/"/>
    <updated>2016-02-11T09:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2</id>
    <content type="html"><![CDATA[<p>Aujourd’hui on voit comment déplacer et contrôler le joueur, ainsi que
comment faire tomber une pluie de smileys.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu3.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Installation de Gosu, affichage d’images statiques</a></li>
  <li>Déplacer le joueur et pluie de smileys</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
</ol>

<h2 id="dplacer-le-joueur">Déplacer le joueur</h2>

<p>On ajoute la méthode <code>update</code> à la classe <code>Window</code>. À l’instar de <code>draw</code>
cette méthode vient aussi de <code>Gosu::Window</code> et est appelée régulièrement.
Dans <code>draw</code> on dessine, on affiche. Dans <code>update</code> on calcule, on met à jour
les éléments du jeu.</p>

<blockquote>
  <p><code>update</code> sera appelée 60 fois par seconde quoiqu’il arrive, par contre
<code>draw</code> pourra être appelée plus ou moins souvent suivant les besoins de
l’OS. C’est pour cela qu’il est important de séparer le calcul de l’affichage.
Cette division entre calcul et affichage est d’ailleurs typique d’un framework de jeu,
ou même GUI, quelque soit le langage utilisé.</p>
</blockquote>

<p>Le nouveau code de <code>Window</code> est le suivant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@background_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/background.png&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_left</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_right</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Background</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">draw</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans <code>update</code> on utilise la méthode <code>button_down?</code> de Gosu pour tester si le
joueur appuit sur la touche gauche et/ou la touche droite. L’appui simultané sur
les deux touches <em>annulera</em> en quelque sorte le déplacement. Et dans tout les cas
on déplace le joueur avec <code>@player.move</code>.</p>

<p>Voyons maintenant la classe <code>Player</code>, qui a gagné plusieurs nouvelles méthodes
par rapport au dernier article:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="n">Y</span> <span class="o">=</span> <span class="mi">390</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="no">WindowHeight</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="vi">@image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/player.png&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_left</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">-=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_right</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">+=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">move</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+=</span> <span class="vi">@velocity</span>
</span><span class="line">    <span class="vi">@x</span> <span class="sx">%= WindowWidth</span>
</span><span class="line"><span class="sx">    @velocity *=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">96</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le joueur se déplaçant toujours sur la même ligne, sa coordonnée y ne change
pas, j’en ai donc fait une constante.</p>

<p>L’idée générale pour le déplacement, c’est qu’il soit <em>smooth</em>, avec une
accélération progressive et une glisse finale. On a donc un facteur
d’accélération de 0.5 et un facteur de glisse de 0.96. Prenez le temps de jouer
avec ces valeurs pour les comprendre, et peut-être pour en trouver d’autres qui vous
conviennent mieux.</p>

<p>Comme toujours, nous convertirons ces nombres magiques en constantes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="n">Y</span> <span class="o">=</span> <span class="mi">390</span>
</span><span class="line">  <span class="no">AccelerationFactor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class="line">  <span class="no">SkidingFactor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">96</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_left</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">-=</span> <span class="no">AccelerationFactor</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">go_right</span>
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">+=</span> <span class="no">AccelerationFactor</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">move</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">+=</span> <span class="vi">@velocity</span>
</span><span class="line">    <span class="vi">@x</span> <span class="sx">%= WindowWidth</span>
</span><span class="line"><span class="sx">    @velocity *=</span> <span class="no">SkidingFactor</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="une-pluie-de-smileys">Une pluie de smileys</h2>

<p>Il est temps de faire pleuvoir des smileys !</p>

<p>Ajoutez un fichier <code>smiley.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;z_order&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;player&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;smiley&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et remplissez le avec le code suivant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>smiley.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Smiley</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:y</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@image</span> <span class="o">=</span> <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:smiley_up</span>
</span><span class="line">               <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/smiley-yellow.png&quot;</span><span class="p">)</span>
</span><span class="line">             <span class="k">elsif</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:smiley_down</span>
</span><span class="line">               <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/smiley-green.png&quot;</span><span class="p">)</span>
</span><span class="line">             <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@velocity</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:random</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="nb">rand</span> <span class="o">*</span> <span class="p">(</span><span class="no">WindowWidth</span> <span class="o">-</span> <span class="vi">@image</span><span class="o">.</span><span class="n">width</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">+=</span> <span class="vi">@velocity</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Items</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il n’y a rien de vraiment nouveau par rapport à ce qu’on a vu jusqu’ici.
Je peux toutefois signaler la méthode <code>Gosu::random(0.8, 3.3)</code>, qui retourne
un Float entre 0.8 inclus et 3.3 exclus. Et aussi le calcul de <code>@x</code>:</p>

<pre><code>@x = rand * (WindowWidth - @image.width)
</code></pre>

<p>qui soustrait la largeur du smiley de la largeur de la fenêtre pour s’assurer
qu’un smiley sera toujours dans les limites de la fenêtre (visible, donc).</p>

<p>Pour intégrer les smileys au jeu, vous devez modifier les méthodes
<code>initialize</code>, <code>update</code> et <code>draw</code> de la classe Window:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">unless</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">15</span>
</span><span class="line">      <span class="n">r</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">      <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">      <span class="k">elsif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Les 3 lignes suivantes sont décrites dans l&#39;article précédent.</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_left</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_right</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Background</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Ça c&#39;est la nouvelle ligne:</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:draw</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">draw</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La nouvelle méthode <code>update</code> mérite bien quelques explications !
Tout d’abord je veux afficher un maximum de 15 smileys à l’écran:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>S’il y en a moins de 15, il y a <em>à chaque update</em> 3.5% de chances (0.035)
de créer un sourire à l’endroit, et 0.5% de chances (0.04 - 0.035) de créer un
sourire à l’envers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">r</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">  <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">  <span class="k">elsif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans tous les cas on met à jour les smileys existants (c’est à dire qu’on change leur
coordonnée y):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et on supprime les smileys qui sont sortit de la fenêtre de jeu (par le bas):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce code est hideux et il faut faire quelque chose pour lui ;)
On commence le refactoring de la classe Window en extrayant les deux méthodes
<code>update_items</code> et <code>update_player</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update</span>
</span><span class="line">    <span class="n">update_items</span>
</span><span class="line">    <span class="n">update_player</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_items</span>
</span><span class="line">    <span class="k">unless</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">15</span>
</span><span class="line">      <span class="n">r</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">      <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">      <span class="k">elsif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">        <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_player</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_left</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbLeft</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">go_right</span> <span class="k">if</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:button_down?</span><span class="p">(</span><span class="ss">Gosu</span><span class="p">:</span><span class="ss">:KbRight</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La nouvelle méthode <code>update_items</code> mérite aussi sa petite extraction:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">update_items</span>
</span><span class="line">    <span class="n">populate_items</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:update</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@items</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="no">WindowHeight</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">populate_items</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="vi">@items</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">15</span>
</span><span class="line">
</span><span class="line">    <span class="n">type</span> <span class="o">=</span> <span class="nb">rand</span>
</span><span class="line">    <span class="k">if</span> <span class="n">type</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">035</span>
</span><span class="line">      <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_up</span><span class="p">))</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">type</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">040</span>
</span><span class="line">      <span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">Smiley</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:smiley_down</span><span class="p">))</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant <code>populate_items</code> est toujours moche, et on sent que cette méthode
risque d’enfler dans l’avenir. Mais je pense que c’est le moment d’arrêter le refactoring
pour éviter de tomber dans l’<a href="https://en.wikipedia.org/wiki/Overengineering">overengineering</a>
et aussi parce que
<a href="http://martinfowler.com/bliki/Yagni.html">YAGNI</a> !.</p>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   └── images
│       ├── background.png
│       ├── player.png
│       ├── smiley-green.png
│       └── smiley-yellow.png
├── main.rb
├── player.rb
├── smiley.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.2.0">version 0.2.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Écrire un jeu en 2d avec Ruby et Gosu - partie 3</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/">Écrire un jeu en 2d avec Ruby et Gosu - partie 1</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/">Un space invaders avec Opal.rb - partie 16</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un jeu en 2d avec Ruby et Gosu - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1/"/>
    <updated>2016-02-10T10:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/10/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-1</id>
    <content type="html"><![CDATA[<p>Voici une série d’articles sur l’écriture d’un jeu en 2d avec Ruby et Gosu.
Dans ce premier article on verra comment installer Gosu, créer une
fenêtre et afficher des images statiques les unes au dessus des autres.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu0.png" /></p>

<!-- more -->

<p>La totalité des articles:</p>

<ol>
  <li>Installation de Gosu, affichage d’images statiques</li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Déplacer le joueur et pluie de smileys</a></li>
  <li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Beep, fonte et collecte des smileys</a></li>
</ol>

<h2 id="les-outils">Les outils</h2>

<p>Avant d’écrire la première ligne de code, assurez vous d’avoir installé correctement Ruby et la
gem Gosu.</p>

<h3 id="ruby">Ruby</h3>

<p>J’utiliserai Ruby en version 2.3 (la plus récente à ce jour). Si vous
utilisez une version de Ruby plus ancienne, vous devrez peut-être adapter le
code ici ou là. Pour gérer les différentes version de Ruby, j’utilise
indifféremment <a href="https://rvm.io/">rvm</a> ou
<a href="https://github.com/postmodern/chruby">chruby</a>
<em>— mais pas les deux sur la même machine, hein ;) —</em>.</p>

<blockquote>
  <p>Si vous n’avez jamais utilisé de gestionnaire de version pour Ruby, je
conseille de commencer par <strong>chruby</strong>. Si je préfère personnellement
<strong>rvm</strong> que je trouve plus complet, <strong>chruby</strong> s’avère
indéniablement plus simple à installer, à prendre en main, et à utiliser sur le
long terme.</p>
</blockquote>

<h3 id="gosu">Gosu</h3>

<p>Gosu est la gem qui nous fournira les méthodes basiques pour développer notre
jeu. J’ai installé la dernière version en date : gosu 0.10.5.</p>

<p>Sur <strong>Debian</strong> il faut d’abord s’assurer qu’on dispose des packages suivants:</p>

<pre><code>sudo apt-get install build-essential libsdl2-dev libsdl2-ttf-dev \
                     libpango1.0-dev libgl1-mesa-dev libfreeimage-dev \
                     libopenal-dev libsndfile1-dev
</code></pre>

<p>Et ensuite seulement on peut installer la gem Gosu:</p>

<pre><code>gem install gosu
</code></pre>

<p>Vous pouvez installer Gosu sur d’autres versions de Linux, sur OS X, ou sur
Windows:</p>

<ul>
  <li><a href="https://github.com/gosu/gosu/wiki/Getting-Started-on-Linux">Installation sur Linux</a></li>
  <li><a href="https://github.com/gosu/gosu/wiki/Getting-Started-on-OS-X">Installation sur OS X</a></li>
  <li><a href="https://github.com/gosu/gosu/wiki/Getting-Started-on-Windows">Installation sur Windows</a></li>
</ul>

<p>Enfin, vous pourrez trouver de l’aide sur <a href="https://github.com/gosu/gosu/wiki">le wiki</a>
et <a href="https://www.libgosu.org/rdoc/">la documentation de Gosu</a> pour le langage Ruby.</p>

<h2 id="du-son-des-images-etc">Du son, des images, etc</h2>

<p>Dans cette série d’articles nous allons coder un jeu. Pour ce qui est du son
et des images, on va laisser faire les gens qui savent ;) Mes deux sources
préférées pour les assets open source sont <a href="http://freesound.org/browse/">freesound.org</a>
et <a href="http://opengameart.org/">opengameart.org</a>.</p>

<p>J’utilise <strong>Gimp</strong> pour retoucher les images : découpe, mise à l’échelle,
changement de couleur, etc. Et j’utilise <strong>Audacity</strong> pour retravailler les
fichiers sonores : suppression des silences en début de fichier, conversion de
format (par exemple mp3 en ogg puisque Gosu ne lit pas le mp3).</p>

<h2 id="crer-une-fentre-pour-le-jeu">Créer une fenêtre pour le jeu</h2>

<p>Ça y est ! Ruby et Gosu sont installés, vous savez où trouver des images et du
son open source, on peut commencer en créant une fenêtre. Mettez le code
suivant dans un fichier <code>window.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">)</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">window</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">window</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le code est suffisamment simple pour que vous puissiez le comprendre sans
explications superflues. Pour savoir si vous avez bien installé Gosu, lancez
le programme:</p>

<pre><code>$ ruby window.rb
</code></pre>

<p>Et admirez le résultat:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu1.png" /></p>

<p>Même avec si peu de code, on peut déjà refactorer. Le fichier précédent
a deux problèmes. Un, il mélange la définition d’une classe et le lancement du
jeu. Et deux, il utilise deux nombres magiques. Si on n’y prends pas garde, les
nombres magiques vont vite devenir un fléau pour notre jeu. Les jeux ont tendance
à être saturés de nombres magiques, alors autant s’atteler à ce problème dès le début.</p>

<p>Après refactoring,
nous avons donc d’une part le code de lancement, avec des constantes pour les
dimensions.  On n’a plus à deviner ce que représente les nombres 640 et 480,
c’est inscrit dans le code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">WindowWidth</span>  <span class="o">=</span> <span class="mi">640</span>
</span><span class="line"><span class="no">WindowHeight</span> <span class="o">=</span> <span class="mi">480</span>
</span><span class="line">
</span><span class="line"><span class="n">window</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">WindowWidth</span><span class="p">,</span> <span class="no">WindowHeight</span><span class="p">)</span>
</span><span class="line"><span class="n">window</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et d’autre part la classe <code>Window</code>, tranquille dans son propre fichier:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La structure du dossier est pour l’instant la suivante:</p>

<pre><code>$ tree
.
├── window.rb
└── main.rb
</code></pre>

<p>Et nous lancerons donc le jeu avec la commande <code>ruby main.rb</code>.</p>

<h2 id="afficher-des-images">Afficher des images</h2>

<p>Maintenant qu’on sait créer une fenêtre, l’étape suivante sera l’affichage
d’images statiques. Nous allons afficher une image de fond, et par-dessus
l’image du joueur.</p>

<p>Toutes les images du jeu seront rangées dans le dossier <code>assets/images</code>:</p>

<pre><code>$ tree
.
├── assets
│   └── images
│       ├── background.png
│       └── player.png
├── window.rb
└── main.rb
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@background_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/background.png&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/player.png&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pendant l’initialisation on charge les images en mémoire avec
<code>Gosu::Image.new</code>.  Puis l’affichage se fait avec <strong>les</strong> méthodes <code>draw</code>. La
méthode <code>draw</code> de la classe <code>Window</code> est hérité de <code>Gosu::Window</code> et appelée 60
fois par seconde.  Dans cette méthode, on appelle la méthode <code>draw</code> des images.
Celle-ci prends trois paramètres : les coordonnées <strong>x</strong>, <strong>y</strong> et <strong>z</strong>.
La coordonnée z est le plan d’affichage. Au dessus ou en dessous. Plus le
nombre est haut, plus l’image sera affichée au-dessus des autres. Ici l’image
de fond a un z de 0, et l’image du joueur a un z de 1, donc le joueur est
affiché au-dessus du fond.</p>

<p>Le joueur est affiché <em>à peu près</em> au milieu de la surface de jeu (<code>width / 2</code>
et <code>height / 2</code>). À peu près, puisque les paramètres x et y de la méthode
<code>draw</code> définissent les coordonnées du coin supérieur gauche de l’image.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gosu2.png" /></p>

<p>Ce code souffre lui aussi de certains problèmes.</p>

<ol>
  <li>S’il est acceptable que l’image de fond <em>appartienne</em> à la fenêtre de jeu,
c’est absurde en ce qui concerne l’image du joueur.</li>
  <li>Il y a des nouveaux nombres magiques : les coordonnées z.</li>
</ol>

<p>On va donc créer deux nouvelles classes (en fait une classe et un module),
<code>ZOrder</code> et <code>Player</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;z_order&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;player&#39;</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;window&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">WindowWidth</span>  <span class="o">=</span> <span class="mi">640</span>
</span><span class="line"><span class="no">WindowHeight</span> <span class="o">=</span> <span class="mi">480</span>
</span><span class="line">
</span><span class="line"><span class="n">window</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">WindowWidth</span><span class="p">,</span> <span class="no">WindowHeight</span><span class="p">)</span>
</span><span class="line"><span class="n">window</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le contenu du module <code>ZOrder</code> est simpliste (c’est ni plus ni moins qu’un enum),
il définit les différents plans:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>z_order.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">ZOrder</span>
</span><span class="line">
</span><span class="line">  <span class="no">Background</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="no">Player</span>     <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La classe <code>Player</code> est simple elle aussi.</p>

<blockquote>
  <p>C’est l’avantage écrasant d’éclater le code en petites classes ayant chacune
une seule responsabilité : le code devient simplissime.</p>
</blockquote>

<p>L’image <em>appartient</em> désormais au joueur, tout comme ses coordonnées. Et c’est
le joueur lui-même qui <em>sait</em> comment s’afficher. La classe <code>Window</code> aura
juste à déclencher cet affichage.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>player.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Player</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">    <span class="vi">@image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/player.png&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Player</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>window.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Window</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Collect The Smile!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@background_image</span> <span class="o">=</span> <span class="ss">Gosu</span><span class="p">:</span><span class="ss">:Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;assets/images/background.png&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">draw</span>
</span><span class="line">    <span class="vi">@background_image</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">ZOrder</span><span class="p">:</span><span class="ss">:Background</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@player</span><span class="o">.</span><span class="n">draw</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour finir, voici le contenu du jeu pour l’instant:</p>

<pre><code>$ tree
.
├── assets
│   └── images
│       ├── background.png
│       └── player.png
├── main.rb
├── player.rb
├── window.rb
└── z_order.rb
</code></pre>

<p>Le code et les assets se trouvent <a href="https://github.com/lkdjiin/collect-the-smiles">sur Github</a>.
La version précise pour cet article est la <a href="https://github.com/lkdjiin/collect-the-smiles/releases/tag/v0.1.0">version 0.1.0</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Écrire un jeu en 2d avec Ruby et Gosu - partie 3</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Écrire un jeu en 2d avec Ruby et Gosu - partie 2</a></li><li><a href="http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/">Un space invaders avec Opal.rb - partie 16</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Livres de non-fiction lus en 2015]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/05/livres-de-non-fiction-lus-en-2015/"/>
    <updated>2016-02-05T17:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/05/livres-de-non-fiction-lus-en-2015</id>
    <content type="html"><![CDATA[<p>J’ai lu beaucoup d’ouvrage de non-fiction l’année dernière (2015). Bien plus
que d’habitude. Je voulais partager les titres avec vous pour, peut-être, vous
donner quelques idées, mais surtout pour que vous puissiez <em>vous</em> me donner
des idées de livres à lire pour 2016.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/bookshelf.jpg" /></p>

<!-- more -->

<ul>
  <li>Data Driven</li>
  <li>How to design TED presentation slides</li>
  <li>The Flinch</li>
  <li>R Graph Essentials</li>
  <li>Hands-On Programming with R</li>
  <li>R Object Oriented Programming</li>
  <li>Data Science at the command line</li>
  <li>Insérer la disquette N°2</li>
  <li>Mazes for programmers</li>
  <li>Curieuses histoires de la science - Quand les chercheurs se trompent</li>
  <li>Practical Data Cleaning (<em>Celui là se lit en 3 minutes et aurait du s’appeler
«comment utiliser excel pour enregister un jeu de données», bref il ne sert à
rien</em>)</li>
  <li>Count like an egyptian</li>
  <li>Work simply (<em>J’ai tenu 23 pages sur 222, c’est vraiment pas pour moi</em>)</li>
  <li>R machine learning Essentials (<em>Moyen, la moitié du code présenté pourrait
être évité</em>)</li>
  <li>Ces dépendances qui nous gouvernent</li>
  <li>Copernic et l’héliocentrisme</li>
  <li>Dalton et la théorie atomique</li>
  <li>Build your own lisp</li>
  <li>Max Planck et les quanta</li>
  <li>Art of Data Science</li>
  <li>L’éléctricité facile à comprendre</li>
  <li>Von Neumann et la théorie des jeux</li>
  <li>100 Astronomical Images That Changed Our World View</li>
  <li>Heisenberg et le principe d’incertitude</li>
  <li>Gödel et le théorème d’incomplétude</li>
</ul>

<p>Si tu penses que j’aimerais un livre que tu as lu, s’il te plait laisse un
commentaire.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabriquer un sablier à thé électronique 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/02/02/fabriquer-un-sablier-a-the-electronique-3/"/>
    <updated>2016-02-02T15:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/02/02/fabriquer-un-sablier-a-the-electronique-3</id>
    <content type="html"><![CDATA[<p>Comme promis, voici le code de mon <em>sablier à thé électronique</em>. C’est le
premier <em>objet</em> que j’ai pensé et fabriqué de A à Z, en me servant d’un
arduino pour réaliser d’abord un prototype. Ce qui fait que, même si le
résultat est moche, j’en suis fier ;)</p>

<p><img class="center" src="http://lkdjiin.github.io/images/tea_timer.jpg" /></p>

<!-- more -->

<p>Tout d’abord le code C qui doit être envoyé dans un micro contrôleur Attiny13,
à l’aide d’un <a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">programmateur</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;avr/io.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;util/delay.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define LED PB0</span>
</span><span class="line"><span class="cp">#define BUZZER PB2</span>
</span><span class="line"><span class="cp">#define BUTTON3 PB3 </span><span class="c1">// For 3 minutes</span>
</span><span class="line"><span class="cp">#define BUTTON5 PB4 </span><span class="c1">// For 5 minutes</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define THREE_MINUTES_IN_SECONDS 180</span>
</span><span class="line"><span class="cp">#define FIVE_MINUTES_IN_SECONDS  300</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">DDRB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">;</span> <span class="c1">// Outputs declarations.</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span>              <span class="c1">// Switch on the LED.</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">);</span>        <span class="c1">// Switch off the buzzer.</span>
</span><span class="line">
</span><span class="line">  <span class="n">DDRB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON3</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON5</span><span class="p">);</span> <span class="c1">// Inputs declarations.</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON3</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON5</span><span class="p">);</span> <span class="c1">// Pull up for inputs.</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Number of seconds for the timer to buzz.</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">g_timer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Give enough time to enable pull ups.</span>
</span><span class="line">  <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Button for 3 minutes pressed?</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON3</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">g_timer</span> <span class="o">=</span> <span class="n">THREE_MINUTES_IN_SECONDS</span><span class="p">;</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Button for 5 minutes pressed?</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUTTON5</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">g_timer</span> <span class="o">=</span> <span class="n">FIVE_MINUTES_IN_SECONDS</span><span class="p">;</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Each cycle is approximately 1 second, but this is not really</span>
</span><span class="line">  <span class="c1">// accurate.</span>
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="n">g_timer</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PORTB</span> <span class="o">^=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span> <span class="c1">// LED off cause it was set up to on.</span>
</span><span class="line">    <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class="line">    <span class="n">PORTB</span> <span class="o">^=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span> <span class="c1">// LED on.</span>
</span><span class="line">    <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class="line">    <span class="n">g_timer</span><span class="o">--</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Now it&#39;s time to bip and blink forever.</span>
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">BUZZER</span><span class="p">);</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">LED</span><span class="p">);</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voici le contenu du Makefile, qui simplifie les phases de compilation et
d’installation.</p>

<pre><code>DEVICE = attiny13
CLOCK  = 1000000
PROGRAMMER = -P /dev/ttyUSB0 -c arduino
BAUDRATE   = -b 19200

help:
  @echo 'check =&gt; check connection with ATtiny13'
  @echo 'hex   =&gt; compile hex file'
  @echo 'flash =&gt; install hex file'
  @echo 'clean =&gt; delete unnecessary files'

check:
  avrdude -p $(DEVICE) $(PROGRAMMER) $(BAUDRATE)

hex:
  avr-gcc -Wall -Os -DF_CPU=$(CLOCK) -mmcu=$(DEVICE) -c main.c
  avr-gcc -mmcu=$(DEVICE) -o main.elf main.o
  avr-objcopy -O ihex main.elf main.hex

flash:
  avrdude -p $(DEVICE) $(PROGRAMMER) -U flash:w:main.hex $(BAUDRATE)

clean:
  rm main.o
  rm main.elf
</code></pre>

<p>Vous pouvez retrouver ce code sur <a href="https://github.com/lkdjiin/tea-timer">gitub</a>, ainsi que le schéma avec les
composants électroniques.</p>

<p>J’espère me faire bientôt une deuxième version plus jolie et plus sophistiquée.</p>

<p><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Lire la partie 1</a></p>

<p><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Lire la partie 2</a></p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Fabriquer un sablier à thé électronique 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Fabriquer un sablier à thé électronique</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/">Connaitre la taille d&#8217;un programme pour Arduino</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un désassembleur pour Chip8]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8/"/>
    <updated>2016-01-31T10:25:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8</id>
    <content type="html"><![CDATA[<p>En ce moment je bricole un émulateur pour
<a href="https://fr.wikipedia.org/wiki/CHIP-8">Chip8</a> en JRuby.  Un des outils que j’ai
écrit en Ruby pour cet émulateur est <strong>c8dasm</strong>, un
<a href="https://fr.wikipedia.org/wiki/D%C3%A9sassembleur">désassembleur</a> pour Chip8.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/vintage.jpg" /></p>

<!-- more -->

<p>Si vous avez besoin d’un tel outil, si vous voulez étudier l’intérieur d’un
désassembleur, ou si vous êtes simplement curieux, vous trouverez
<a href="https://github.com/lkdjiin/c8dasm">le code en ligne</a>.</p>

<p>Si vous voulez voir ce que ça donne, voici un exemple:</p>

<pre><code>$ c8dasm MAZE
200:a21e  LD I, 21e     ;Puts 21e into register I.
202:c201  RND V2, 01    ;Puts random byte AND 01 into register V2.
204:3201  SE V2, 01     ;Skip next instruction if V2 = 01.
206:a21a  LD I, 21a     ;Puts 21a into register I.
208:d014  DRW V0, V1, 4 ;Draws 4-byte sprite from I at (V0, V1)
20a:7004  ADD V0, 04    ;V0 = V0 + 04.
20c:3040  SE V0, 40     ;Skip next instruction if V0 = 40.
20e:1200  JP 200        ;Jump to location 200.
210:6000  LD V0, 00     ;Puts the value 00 into register V0.
212:7104  ADD V1, 04    ;V1 = V1 + 04.
[...]
</code></pre>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle/">Un exemple de polymorphisme en situation réelle</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">Les arbres browniens - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">Les arbres browniens</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs Crystal - 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/"/>
    <updated>2016-01-19T13:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie</id>
    <content type="html"><![CDATA[<p>J’ai testé le langage Crystal le week end dernier. Rien de très poussé, juste
140 lignes de Ruby traduites en Crystal et <a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">un benchmark</a>. Je vais tenté de
synthétiser mes premières impressions sur ce langage.</p>

<p>Dans cet article
mon point de vue est celui d’un développeur Ruby qui cherche à rendre
ses programmes plus rapide avec l’aide de Crystal.</p>

<h2 id="crystal-nest-pas-ruby">Crystal n’est pas Ruby</h2>

<p>Si je devais retenir une seule chose, ce serait celle-ci: <strong>Crystal n’est pas un
Ruby compilé</strong>.  Si sa syntaxe ressemble beaucoup à celle de Ruby,
c’est vraiment un langage différent. La plus grande différence étant qu’il est
statiquement typé.</p>

<!-- more -->

<h2 id="pas-de-repl">Pas de REPL</h2>

<p>Les développeurs de Crystal ont l’air de penser que c’est compliqué de lui
ajouter un REPL, et ça l’est sûrement. Ne pas avoir accès à un REPL n’est pas
rédhibitoire pour un langage statique. Mais cela implique un processus de
développement totalement différent de celui de Ruby et des langages dynamiques,
même si le compilateur semble pour l’instant assez rapide.</p>

<h2 id="plusieurs-mthodes-sont-absentes">Plusieurs méthodes sont absentes</h2>

<p>Ou bien elles fonctionnent différemment. Il n’y a pas de <code>require_relative</code>, par
exemple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;./xpm&quot;</span>
</span><span class="line"><span class="c1"># De plus le fichier doit être nommé `xpm.cr`</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s2">&quot;xpm&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bien plus surprenant, il n’y a pas de <code>attr_reader</code>, il faut définir la méthode.
Peut-être que les développeurs n’ont pas encore eu le temps de s’y atteler ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="k">def</span> <span class="nf">foobar</span>
</span><span class="line">  <span class="vi">@foobar</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="kp">attr_reader</span> <span class="ss">:foobar</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pas-de-private-global">Pas de private «global»</h2>

<p>Avec Crystal, on définit une méthode privée au coup par coup.
C’est une syntaxe qui est possible en Ruby depuis la version 2 (2.1 je crois),
mais qui n’a jamais <em>pris</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="kp">private</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="typage-statique">Typage statique</h2>

<p>Est-ce que j’ai déjà mentionné que Crystal est un langage statiquement typé ?
Oui ?
Il est donc très <strike>gonflant</strike> tatillon avec les types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="s2">&quot;%i&quot;</span> <span class="o">%</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>   <span class="c1">#=&gt; erreur !</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="s2">&quot;%i&quot;</span> <span class="o">%</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>   <span class="c1">#=&gt; &quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="linfrence-de-types">L’inférence de types</h2>

<p>L’inférence de types, c’est bien, non ? Ça permet au compilateur de <em>deviner</em> le
type d’une variable pour que nous n’ayons pas à les spécifier nous même. Sauf
que dans l’optique d’une traduction d’un programme Ruby en Crystal je ne suis
pas convaincu du truc. Si on écrit un programme Crystal <em>from scratch</em>, pas de
soucis. Mais Ruby est bourré d’idiomes et de tics en tout genres qui vont
rendre le portage pas du tout trivial, à mon avis. Par exemple le code ruby
suivant initialise le tableau <code>@free_cells</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">  <span class="vi">@free_cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">FREE_TOTAL</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis, dans la méthode <code>move</code>, les éléments de ce tableau sont modifiés. Il est
possible que certains éléments soient mis à <code>nil</code>. Mais comme vous pouvez le
voir à la fin de la méthode, avant de <em>relacher le tableau dans la nature</em>,
les éléments <code>nil</code> sont supprimés. C’est pour moi un cas d’utilisation
légitime de <code>nil</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">move</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">  <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">    <span class="c1"># Modification des éléments, certains peuvent devenir nil.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="vi">@free_cells</span><span class="o">.</span><span class="n">compact!</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais un compilateur n’avalera pas cette belle histoire. Le tableau a été
initialisé avec un certain type et vous ne pourrez donc pas en utiliser
d’autres. Vous devrez dire à Crystal quels types peut contenir le tableau,
c’est une syntaxe spécifique à Crystal, inconnue de Ruby:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@free_cells</span> <span class="o">=</span> <span class="o">[]</span> <span class="n">of</span> <span class="nb">Array</span><span class="p">(</span><span class="no">Int32</span><span class="p">)</span> <span class="o">|</span> <span class="no">Nil</span>
</span><span class="line">    <span class="no">FREE_TOTAL</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@free_cells</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais si maintenant je peux insérer des <code>nil</code> dans mon tableau, plus question de
pouvoir lire ses éléments ainsi:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">  <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et non ! Puisque <code>@free_cells</code> a été déclaré comme pouvant contenir <code>nil</code> !
Même si <strong>je sais</strong> qu’à ce moment le tableau est exempt de <code>nil</code>, le
compilateur, lui, ne peut pas le savoir.
Il faut donc faire quelque chose comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">  <span class="k">if</span> <span class="n">cell</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class="line">    <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ou bien il faut repenser différemment le code. Et on commence a bien sentir
l’influence du typage statique, hein ? Encore une fois, ça n’est pas un
problème en soi, mais ça n’est pas Ruby.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Si on a de l’expérience avec les langages à typage statique, traduire un
programme Ruby en un programme Crystal n’est pas difficile et le gain de
performance peut-être intéressant.
Dans tout les cas, <strong>Crystal n’est pas Ruby</strong>. Travailler avec ce langage sera
différent et demandera des processus différents.
Reste à savoir quels programmes Ruby on va pouvoir réécrire en Crystal sans
avoir à réécrire, au hasard, tout ActiveRecord. Et là, je ne suis pas certain
qu’on va en trouver beaucoup.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">Ruby vs Crystal</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Écrire un jeu en 2d avec Ruby et Gosu - partie 3</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/11/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-2/">Écrire un jeu en 2d avec Ruby et Gosu - partie 2</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs Crystal]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/"/>
    <updated>2016-01-19T09:23:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal</id>
    <content type="html"><![CDATA[<p>Après avoir produit <a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">quelques variations</a> sur le thème des 
<a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">arbres browniens</a> le
week end dernier, le moment semblait idéal pour tester le langage
<a href="http://crystal-lang.org/">Crystal</a>.</p>

<p>J’ai donc réécrit le programme de base que j’avais fait pour produire des
arbres browniens, en supprimant l’UI et en enregistrant (à la place d’une
image écran)
un fichier image
<em>— au format XPM, peut-être le sujet d’un prochain article —</em>.</p>

<p>Je calcule le temps que prends la construction de l’image, sans son
enregistrement:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/bench-crystal.png" /></p>

<!-- more -->

<p>Les deux programmes sont quasiment identiques, la version Crystal est
l’adaption au plus près de la version Ruby. Pour ce
programme particulier, Crystal est de 3 à 7 fois plus rapide que Ruby.</p>

<p>Je suis deçu car j’attendais mieux que ça. On m’avait vendu Crystal comme étant
plus rapide. En fait environ 20 fois plus rapide que Ruby.</p>

<p>Et c’est vrai qu’avec un petit truc comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="n">n</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class="line">  <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">fibonacci</span> <span class="mi">40</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ou alors encore ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="mi">50_000_000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="n">x</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>j’obtiens bien un programme Crystal 20 à 35 fois plus rapide que sa version
Ruby. Mais avec un programme plus «réel», c’est 3 à 7. Alors je ne boude pas,
hein, même un gain de 3 est toujours bon à prendre. Par contre, passer de Ruby à
Crystal a un coût, et savoir si ce coût justifie un si petit gain est une autre
histoire.</p>

<p>La prochaine fois j’espère vous donner mes premières impressions sur Crystal.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/">Ruby vs Crystal - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier/">Des benchmarks en général et de Ruby en particulier</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Écrire un jeu en 2d avec Ruby et Gosu - partie 3</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les arbres browniens - 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/"/>
    <updated>2016-01-18T09:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie</id>
    <content type="html"><![CDATA[<p>Dans <a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">le dernier article</a>, je présentais un code de base en JRuby
pour construire des arbres browniens. À partir de ce code de base on peut
tester plusieurs variations.</p>

<h2 id="des-couleurs-au-hasard">Des couleurs au hasard</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree51.png" /></p>

<p>Pour cela, quand on <em>gèle</em> une cellule on lui attribue au hasard une valeur
entre 1 et le nombre maximum de couleur (ici seulement deux).</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">move</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">      <span class="k">if</span> <span class="n">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="n">frozen</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">frozen</span>
</span><span class="line">  <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># [...]</span>
</span><span class="line">      <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:MAGENTA</span><span class="p">)</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">j</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">      <span class="k">elsif</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:GREEN</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># [...]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="une-ligne-entire-de-graines">Une ligne entière de graines</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree52.png" /></p>

<p>En plaçant une ligne de graine, au lieu d’une seule, on obtient quelque chose
qui ressemble plus à des arbres.</p>

<h2 id="couleurs-suivant-le-temps-darrive">Couleurs suivant le temps d’arrivée</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree53.png" /></p>

<p>Par exemple cyan pour les 800 premières itérations, magenta pour les 600
suivantes, et vert pour les dernières.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">frozen</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@iteration</span> <span class="o">&lt;</span> <span class="mi">800</span>
</span><span class="line">      <span class="mi">1</span>
</span><span class="line">    <span class="k">elsif</span> <span class="vi">@iteration</span> <span class="o">&lt;</span> <span class="mi">1400</span>
</span><span class="line">      <span class="mi">2</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="mi">3</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mouvement-biais">Mouvement biaisé</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree55.png" /></p>

<p>Pour produire l’image ci-dessus les cellules <em>montent</em> plus souvent qu’elles ne
descendent.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="et-encore">Et encore</h2>

<p>On peut trouver encore des tas de variations, et les mélanger. Par exemple dans
l’image suivante la couleur d’une cellule dépend du nombre de ses voisines et
la longueur du mouvement des cellules suit, en gros, une
<a href="https://en.wikipedia.org/wiki/Cauchy_distribution">distribution de Cauchy</a>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree56.png" /></p>

<p>Si vous pensez à d’autres variations possibles, n’hésitez pas à m’en faire part.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">Les arbres browniens</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8/">Un désassembleur pour Chip8</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Écrire un jeu en 2d avec Ruby et Gosu - partie 3</a></li></ul></section>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les arbres browniens]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/"/>
    <updated>2016-01-17T23:30:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens</id>
    <content type="html"><![CDATA[<p>Ce week end j’ai joué avec les arbres browniens (<em>brownian trees</em>).
Ce sont des agglomérats de cellules qui ressemblent vaguement à des arbres,
obtenus à partir d’un mouvement brownien. Et le mouvement brownien, c’est cool.</p>

<p>C’est Robert Brown, un
botaniste, qui le décrit en 1827 en observant des petites particules qui
semblaient bouger toutes seules. Il voit ses particules avoir la tremblote, mais
sans pouvoir expliquer pourquoi.</p>

<p>C’est d’autant plus cool qu’en 1905, en donnant l’explication du mouvement
brownien, Albert Enstein va fournir la preuve de l’existence des atomes.</p>

<p>Le mouvement brownien c’est simplement les atomes qui <em>cognent</em> dans tout les
sens sur des particules.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree.png" /></p>

<!-- more -->

<p>L’algorithme pour créer un arbre brownien est enfantin:</p>

<ol>
  <li>Positionner au hasard une première cellule gelée qui sert de <em>graine</em>.</li>
  <li>Positionner au hasard une cellule libre.</li>
  <li>Mouvoir au hasard la cellule libre, c’est le mouvement brownien.</li>
  <li>Quand la cellule libre <em>rencontre</em> une cellule gelée, elle gèle elle-même
et on recommence au point 2.</li>
</ol>

<p>Mettre les cellules libres une par une, c.à.d attendre qu’une rencontre avec une
cellule gelée se produise avant de passer à la cellule libre suivante est trop
long. Avec un dispositif d’affichage assez grand on pourrait y passer plusieurs
jours.
Donc je met toutes les cellules libres dès le départ, ainsi il se passe très
vite beaucoup de choses.</p>

<p>J’ai fait <a href="https://www.youtube.com/watch?v=wQnTUZHfSKA&amp;feature=youtu.be">une vidéo de la construction d’un arbre brownien</a> pour que vous puissiez visualiser comment ça fonctionne.</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/wQnTUZHfSKA" frameborder="0" allowfullscreen=""></iframe>

<p>J’ai écrit un programme en JRuby pour faire un arbre brownien basique.  Le code
n’est pas beau car il n’a pas été pensé pour durer plus que le temps d’un
week-end. Malgré tout, je pense qu’il est compréhensible et qu’il peut servir
de base pour des idées plus sophistiquées.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="kp">include</span> <span class="no">Java</span>
</span><span class="line">
</span><span class="line"><span class="c1"># It&#39;s Ruby… but it&#39;s also Java… so… import…</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JPanel</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">Timer</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Color</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Dimension</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Toolkit</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">ActionListener</span>
</span><span class="line">
</span><span class="line"><span class="no">SIZE</span> <span class="o">=</span> <span class="mi">200</span>        <span class="c1"># Both width and height of the *image*.</span>
</span><span class="line"><span class="no">SCALE</span> <span class="o">=</span> <span class="mi">2</span>         <span class="c1"># Multiply size by scale to obtain the *window* size.</span>
</span><span class="line"><span class="no">FREE_TOTAL</span> <span class="o">=</span> <span class="mi">6000</span> <span class="c1"># Number of particles to agregate.</span>
</span><span class="line"><span class="no">DELAY</span> <span class="o">=</span> <span class="mi">20</span>        <span class="c1"># Time to wait between *screen refreshes*.</span>
</span><span class="line">
</span><span class="line"><span class="no">VOID</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1"># A cell with nothing in itself.</span>
</span><span class="line"><span class="no">FROZEN</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># A cell already agregated.</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BrownianTree</span> <span class="o">&lt;</span> <span class="no">JFrame</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">ActionListener</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="s2">&quot;Brownian Tree&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">init_ui</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">init_ui</span>
</span><span class="line">    <span class="vi">@board</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">setPreferredSize</span><span class="p">(</span><span class="no">Dimension</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SIZE</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">))</span>
</span><span class="line">    <span class="n">add</span><span class="p">(</span><span class="vi">@board</span><span class="p">)</span>
</span><span class="line">    <span class="n">pack</span>
</span><span class="line">    <span class="n">setDefaultCloseOperation</span><span class="p">(</span><span class="ss">JFrame</span><span class="p">:</span><span class="ss">:EXIT_ON_CLOSE</span><span class="p">)</span>
</span><span class="line">    <span class="n">setVisible</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@timer</span> <span class="o">=</span> <span class="no">Timer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">DELAY</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@timer</span><span class="o">.</span><span class="n">start</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Called every DELAY millisecond, thanks to the *magic* of</span>
</span><span class="line">  <span class="c1"># ActionListener.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">actionPerformed</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">repaint</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Board</span> <span class="o">&lt;</span> <span class="no">JPanel</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="n">init_board</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">init_board</span>
</span><span class="line">    <span class="n">setBackground</span><span class="p">(</span><span class="no">Color</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># An array of SIZE x SIZE.</span>
</span><span class="line">    <span class="vi">@cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span><span class="p">,</span> <span class="no">VOID</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># The cell in the middle is the seed.</span>
</span><span class="line">    <span class="vi">@cells</span><span class="o">[</span><span class="no">SIZE</span> <span class="o">/</span> <span class="mi">2</span><span class="o">][</span><span class="no">SIZE</span> <span class="o">/</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="no">FROZEN</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># All free cells from the start, at random (x y) positions.</span>
</span><span class="line">    <span class="vi">@free_cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">FREE_TOTAL</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Called by `repaint` in BrownianTree. Yep, that&#39;s right, `repaint`</span>
</span><span class="line">  <span class="c1"># call `paint`. It&#39;s also Java, after all…</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">paint</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="no">Toolkit</span><span class="o">.</span><span class="n">getDefaultToolkit</span><span class="o">.</span><span class="n">sync</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">dispose</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Display frozen cells in white and free cells in red.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:WHITE</span><span class="p">)</span>
</span><span class="line">    <span class="no">SIZE</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="no">SIZE</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
</span><span class="line">        <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span>
</span><span class="line">          <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">j</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:RED</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">move</span>
</span><span class="line">    <span class="c1"># Move each free cell, one cell up or up-right or right or etc...</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="n">c</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">        <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span><span class="p">,</span>
</span><span class="line">        <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">      <span class="o">]</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="no">SIZE</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="no">SIZE</span>
</span><span class="line">        <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">c</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Freeze each free cell that have at least 1 neighbor.</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="k">if</span> <span class="n">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="no">FROZEN</span>
</span><span class="line">        <span class="kp">nil</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">cell</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">compact!</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="no">SIZE</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="no">SIZE</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class="line">      <span class="k">return</span> <span class="kp">false</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span>
</span><span class="line">      <span class="kp">true</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="kp">false</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">BrownianTree</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On se retrouve bientôt pour que je vous parle des quelques variations que j’ai
essayé autour du thème des arbres browniens.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">Les arbres browniens - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/31/un-desassembleur-pour-chip8/">Un désassembleur pour Chip8</a></li><li><a href="http://lkdjiin.github.io/blog/2016/02/12/ecrire-un-jeu-en-2d-avec-ruby-et-gosu-partie-3/">Écrire un jeu en 2d avec Ruby et Gosu - partie 3</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je ne voterai pas]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/12/13/je-ne-voterai-pas/"/>
    <updated>2015-12-13T17:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/12/13/je-ne-voterai-pas</id>
    <content type="html"><![CDATA[<p>Il est 16h00, nous sommes le 13 décembre 2015, le FN va peut-être remporter
plusieurs régions et je ne voterai pas. J’ouvre twitter et je lis beaucoup de
conneries. Je me ferai bien un ptit coup de gueule maintenant puisque d’après
certains, vu que je ne vote pas, je devrai la fermer ensuite…</p>

<!-- more -->

<blockquote>
  <p>Voter est un droit mais c’est avant tout un devoir</p>
</blockquote>

<p>Ne pas voter est tout autant un droit. Je me sens même le devoir de ne pas
voter, pour en aucun cas légitimer les politiques (hommes, femmes, partis) qui
depuis 25 ans que je vote (car oui j’ai déjà voté) n’ont jamais, pas une fois,
tenu leur programme. Chaque fois que j’ai voté, ils (les politiques, les
hommes, les femmes, les partis) ont toujours pris ma voix pour ensuite se
torcher les fesses avec.</p>

<blockquote>
  <p>Celui qui ne vote pas n’a pas le droit de se plaindre des résultats</p>
</blockquote>

<p>Bah voyons, compte là-dessus. Quel que soit le résultat dans ma région, PS, LR
ou FN, je me plaindrai. Parce que quel que soit le résultat, ces gens ne me
représentent pas. Sûr que si c’est le FN qui passe, <a href="https://www.youtube.com/watch?v=FpH0gre8AQw">je gueulerai un peu plus</a>.</p>

<blockquote>
  <p>J’espère sincèrement que le taux d’abstention sera faible aujourd’hui.</p>
</blockquote>

<p>J’espère justement le contraire mais je pense que tu auras raison dans une
certaine mesure. Le taux d’abstention sera sûrement plus bas que la semaine
dernière. La raison ? PS et LR sont rodés depuis plusieurs décennies, ils
savent se servir du FN pour recueillir quelques votes de plus. Je ne jouerai pas à leur jeu, il me dégoute.</p>

<blockquote>
  <p>Si les gens lisaient plus, se cultivaient plus, le #FHaine ne serait pas si haut aux #electionsregionales. Vote d’ignorance et de peur.</p>
</blockquote>

<p>Ça fait 30 ans que certains se sentant supérieurs (à qui je ne sais
pas) font le coup de culpabiliser les électeurs du FN et/ou de les traiter de
gros cons. 30 ans ! Visiblement ça ne marche pas.</p>

<blockquote>
  <p>Faites vous entendre en allant voter</p>
</blockquote>

<p>Encore une fois, non. Ça ne marche pas. Un candidat te promet une chose. Tu
votes pour lui. Il est élu. Il a la légitimité. Il ne fait pas ce qu’il a
promis. Tu ne peux rien y changer. On recommence à la prochaine élection. Ah
mais si au fait, tu peux y faire quelque chose en refusant de voter…</p>

<blockquote>
  <p>On devrait interdire de voter au seconde tour au gens qui n’ont pas voter au premier , tout le monde se bougerai le cul</p>
</blockquote>

<p>Et allez donc, et pourquoi pas le vote obligatoire !</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabriquer un sablier à thé électronique 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/"/>
    <updated>2015-12-12T16:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2</id>
    <content type="html"><![CDATA[<p>Après avoir appris à programmer un ATtiny45 avec l’IDE Arduino, il fallait
maintenant s’en passer. Pour cela je suis passé du langage Arduino au
langage C, avec le cross compilateur <code>avr-gcc</code> et l’outil <code>avrdude</code>.</p>

<p>Je vais profiter de vous montrer cela pour comparer la taille d’un même
programme, écrit une fois en langage Arduino et l’autre en C.</p>

<!-- more -->

<p><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Lire la partie 1</a></p>

<p><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Lire la partie 2</a></p>

<p>Le programme, c’est deux boutons/deux LEDs. Le bouton A s’occupe de la LED A.
Le bouton B s’occupe de la LED B. Quand un bouton est pressé puis relâché, sa
LED respective change d’état. Si elle était éteinte elle s’allume, et vice-versa.
C’était un peu mon <em>hello world!</em></p>

<p>Voilà le programme en langage Arduino:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sketch/sketch.ino</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">INPUT_PULLUP</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">INPUT_PULLUP</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">;</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">bitRead</span><span class="p">(</span><span class="n">PORTB</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">^</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">;</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">bitRead</span><span class="p">(</span><span class="n">PORTB</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">^</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le dossier contient juste deux sous dossiers:</p>

<pre><code>$ dirtree
.
├── build
└── sketch
</code></pre>

<p>Je compile avec l’IDE (en ligne de commande mais avec l’IDE quand même):</p>

<pre><code>$ ~/local/bin/arduino-1.6.5/arduino --verify sketch/sketch.ino
--pref build.path=build
Picked up JAVA_TOOL_OPTIONS: 
Loading configuration...
Initializing packages...
Preparing boards...
Verifying...

Le croquis utilise 972 octets (23%) de l'espace de stockage de programmes.
Le maximum est de 4 096 octets.
Les variables globales utilisent 9 octets de mémoire dynamique.
</code></pre>

<p>La taille du programme a déjà était annoncée, mais on peut la vérifier avec
<code>avr-size</code>, 972 octets:</p>

<pre><code>$ avr-size -d build/sketch.cpp.hex 
   text	   data	    bss	    dec	    hex	filename
      0	    972	      0	    972	    3cc	build/sketch.cpp.hex
</code></pre>

<p>Maintenant voici le même programme, cette fois directement en C. Donc sans
toutes les aides et fioritures de l’Arduino:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;avr/io.h&gt;</span>
</span><span class="line"><span class="cp">#define F_CPU 1000000UL</span>
</span><span class="line"><span class="cp">#include &lt;util/delay.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">DDRB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">  <span class="n">DDRB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)))</span> <span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">^=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">^=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La chaîne de compilation est cette fois un peu plus longue:</p>

<pre><code>$ avr-gcc -O -mmcu=attiny45 -c main.c
$ avr-gcc -mmcu=attiny45 -o main.elf main.o
$ avr-objcopy -O ihex main.elf main.hex
</code></pre>

<p>Même avec une option d’optimisation au minimum, la différence de taille est… sidérale:</p>

<pre><code>$ avr-size -d main.hex 
   text	   data	    bss	    dec	    hex	filename
      0	    158	      0	    158	     9e	main.hex
</code></pre>

<p>Pour transférer le code vers le micro processeur il n’y a plus besoin de l’IDE
Arduino. Je place l’ATtiny45 sur le <a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">shield programmateur</a> et j’utilise le
programme avrdude :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">avrdude</span> <span class="o">-</span><span class="n">p</span> <span class="n">attiny45</span> <span class="o">-</span><span class="n">P</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">ttyUSB0</span> <span class="o">-</span><span class="n">c</span> <span class="n">arduino</span> <span class="o">-</span><span class="n">U</span> <span class="n">flash</span><span class="o">:</span><span class="n">w</span><span class="o">:</span><span class="n">main</span><span class="p">.</span><span class="n">hex</span> <span class="o">-</span><span class="n">b</span> <span class="mi">19200</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Rendez vous une prochaine fois pour le code du sablier électronique avec son
Makefile et tout et tout.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/02/02/fabriquer-un-sablier-a-the-electronique-3/">Fabriquer un sablier à thé électronique 3</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Fabriquer un sablier à thé électronique</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/">Connaitre la taille d&#8217;un programme pour Arduino</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabriquer un sablier à thé électronique]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/"/>
    <updated>2015-10-29T14:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique</id>
    <content type="html"><![CDATA[<p>Voici un projet que j’avais en route depuis quelques semaines.  L’objectif était de
fabriquer mon premier «objet» grâce à l’arduino, en l’occurrence un <em>sablier à
thé électronique</em>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/hourglass.jpg" /></p>

<p>Un quoi ? En fait il s’agit tout simplement d’un minuteur. Mais je trouve le
nom <em>sablier à thé électronique</em> bien plus évocateur ;) Quand je me fais du thé
je laisse passer 9 fois sur 10 le temps d’infusion et je me retrouve avec un
breuvage imbuvable. J’avais donc envie d’un minuteur simple avec deux boutons,
un buzzer et une LED. Un des boutons lance un décompte de 3 minutes pour le thé
vert, l’autre c’est 5 minutes pour le thé noir. À la fin ça bip bip et ça
clignote jusqu’à ce qu’on l’arrête. Du vraiment simple, quoi. Sauf que je ne
voulais pas mettre un arduino entier dans ce projet alors qu’un petit micro
contrôleur à 60 centimes pourrait faire l’affaire.</p>

<!-- more -->

<p>J’allais donc devoir apprendre à programmer les micro contrôleurs ATtiny de
chez Atmel. Pourquoi ceux-là ? Parce qu’ils sont proches du micro contrôleur
utilisé par l’arduino (le ATmega 328). Bref je gardais quand même un pied en
terrain connu.</p>

<p>J’ai d’abord créé un prototype de ce <em>sablier sonore</em> avec l’arduino, pour être
sûr que je savais comment faire. Niveau schéma ça pourrait donner quelque chose
comme ça:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/attiny45-step4.png" /></p>

<p>Au final je n’utilise qu’une seule LED, mais dans le prototype original il y en
avait deux. Et c’est en utilisant ce premier prototype que je me suis aperçu
qu’une seule LED était suffisante.</p>

<p>L’étape suivante fut de réaliser ce montage, et le code, pour un ATtiny45.
Pourquoi ce micro contrôleur précisément ? Parce que 1) j’en avais un dans un
tiroir, et 2) on trouve une pléthore de tutoriels pour programmer un ATtiny45
en se servant d’un arduino. Si vous n’êtes pas familier du terme,
<strong>programmer</strong> un micro contrôleur c’est, en gros, lui transférer son programme
depuis un ordinateur. Pour que les deux cotés communiquent, on utilise un
<strong>programmateur</strong>. Il y a plusieurs façons de faire ça, je voulais utiliser un
arduino comme base de programmateur pour ne rien avoir à acheter de nouveau.
Vous pouvez trouver un bon tutoriel ici:
<a href="http://www.instructables.com/id/Program-an-ATtiny44458485-with-Arduino/">Program an ATtiny44/45/84/85 with Arduino</a>.</p>

<p>Finalement, on peut se créer le programmateur assez facilement pour l’ATtiny45:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/hello_world_bb.png" /></p>

<p>Comme j’allais programmer un certain nombre de micro contrôleurs, j’ai préféré
fabriquer un shield. D’abord un temporaire:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/arduino-temp-shield.jpg" /></p>

<p>Puis finalement un définitif:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/arduino-shield-attiny45.jpg" /></p>

<p>Trop pressé de le réaliser, je me suis trompé de sens pour le socket, ce qui
explique les câbles qui passent d’un coté à l’autre, puisque je n’ai pas
voulu le dessouder. C’est pas grave et il fonctionne très bien ;)</p>

<p>J’étais donc capable de programmer un ATtiny45 (4K de ROM) en utilisant
l’arduino <strong>ET</strong> l’IDE Arduino. C’était un bon début, mais ça n’était pas
suffisant. D’abord je ne voulais pas utiliser l’IDE Arduino, mais plutôt des
outils en ligne de commande, pour des raisons de reproductibilité et d’automatisation, et ensuite
je soupçonnais que le code de mon <em>sablier sonore</em> pouvait tenir sur un
ATtiny13 qui ne posséde que 1K de ROM et est pratiquement deux fois moins cher
que l’ATtiny45.</p>

<p><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Lire la partie 2</a></p>

<p><a href="http://lkdjiin.github.io/blog/2016/02/02/fabriquer-un-sablier-a-the-electronique-3/">Lire la partie 3</a></p>

<p>À suivre…</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/02/02/fabriquer-un-sablier-a-the-electronique-3/">Fabriquer un sablier à thé électronique 3</a></li><li><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Fabriquer un sablier à thé électronique 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/">Connaitre la taille d&#8217;un programme pour Arduino</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un quine en R - Le retour]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/"/>
    <updated>2015-10-13T14:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour</id>
    <content type="html"><![CDATA[<p>Dans l’article précédent <a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a>
je présentais un <a href="https://fr.wikipedia.org/wiki/Quine_%28informatique%29">quine</a> en langage R. Le code était un peu long, 19 lignes,
surtout comparé au code Ruby de l’article original:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">src</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">puts </span><span class="se">\&quot;</span><span class="s2">src = </span><span class="se">\&quot;</span><span class="s2"> + src.inspect + src&quot;</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;src = &quot;</span> <span class="o">+</span> <span class="n">src</span><span class="o">.</span><span class="n">inspect</span> <span class="o">+</span> <span class="n">src</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En Ruby, c’est court en partie grâce à la méthode <code>inspect</code> qui <em>échappe</em>
automatiquement les caractères non imprimables et les guillemets:</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">puts </span><span class="se">\&quot;</span><span class="s2">src</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line"><span class="go">&quot;\nputs \&quot;src\&quot;&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="o">.</span><span class="n">inspect</span>
</span><span class="line"><span class="go">&quot;\&quot;\\nputs \\\&quot;src\\\&quot;\&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bien entendu j’ai cherché une fonction similaire en R, du moins pour les
chaînes de caractères. J’ai laissé tombé après un quart d’heure de recherches
infructueuses, et j’ai pondu <a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">le code</a> de l’article précédent.</p>

<p>C’est là que Hadley Wickham <em>himself</em> m’a suggéré l’utilisation de la fonction
<code>encodeString</code>. C’est ce que j’avais cherché sans le trouver. Du coup, un
quine en R prends beaucoup moins de place et deviens plus compréhensible:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>quine2.r</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">src <span class="o">&lt;-</span> <span class="s">&quot;\nwriteLines(c(paste(\&quot;src &lt;-\&quot;, encodeString(src, quote=&#39;\&quot;&#39;)), src))&quot;</span>
</span><span class="line">
</span><span class="line">writeLines<span class="p">(</span>c<span class="p">(</span>paste<span class="p">(</span><span class="s">&quot;src &lt;-&quot;</span><span class="p">,</span> encodeString<span class="p">(</span>src<span class="p">,</span> quote<span class="o">=</span><span class="s">&#39;&quot;&#39;</span><span class="p">)),</span> src<span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette version me plait bien, je l’ai donc ajouté sur le <a href="http://rosettacode.org/wiki/Quine#R">rosettacode.org</a>.</p>

<p>Comme dit la dernière fois, il est bon d’utiliser <code>diff</code> pour s’assurer qu’on
a bien écrit un quine:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">diff -u quine2.r &lt;<span class="o">(</span>Rscript quine2.r<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà le résultat:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>Rscript quine3.r
</span><span class="line">src &lt;- <span class="s2">&quot;\nwriteLines(c(paste(\&quot;src &lt;-\&quot;, encodeString(src, quote=&#39;\&quot;&#39;)), src))&quot;</span>
</span><span class="line">
</span><span class="line">writeLines<span class="o">(</span>c<span class="o">(</span>paste<span class="o">(</span><span class="s2">&quot;src &lt;-&quot;</span>, encodeString<span class="o">(</span>src, <span class="nv">quote</span><span class="o">=</span><span class="s1">&#39;&quot;&#39;</span><span class="o">))</span>, src<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre/">Les langages que j&#8217;aimerais (ré)apprendre</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un quine en R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/"/>
    <updated>2015-10-10T18:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r</id>
    <content type="html"><![CDATA[<p>J’ai lu récemment l’article <a href="http://blog.chaps.io/2015/10/01/generating-quines-in-ruby.html">generating Quines in Ruby</a> qui m’a beaucoup plu. Et j’ai eu envie d’en faire un dans le langage R.</p>

<p>Alors c’est quoi un quine ? Un quine est un programme informatique
auto répliquant (<em>self-reproducing</em>).  Il doit satisfaire à deux conditions:</p>

<ol>
  <li>Il produit son code source en tant que unique sortie.</li>
  <li>Il ne prend aucune entrée, ce qui exclus par exemple de lire un fichier.</li>
</ol>

<!-- more -->

<p>Voici ma solution en R, elle affiche son code source sur la sortie standard
quand on l’exécute. Je me suis beaucoup inspiré de la solution en C de l’article
original:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>quine.r</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">src <span class="o">&lt;-</span><span class="s">&quot;\nescape &lt;- function(x) {\n    cat(&#39;\&quot;&#39;)\n    for(e in strsplit(x, &#39;&#39;)[[1]]) {\n        if(e == &#39;\\n&#39;) {\n            cat(&#39;\\\\n&#39;)\n        } else if(e == &#39;\\\\&#39;) {\n            cat(&#39;\\\\\\\\&#39;)\n        } else if(e == &#39;\&quot;&#39;) {\n            cat(&#39;\\\\\&quot;&#39;)\n        } else {\n            cat(e)\n        }\n    }\n    cat(&#39;\&quot;&#39;)\n}\ncat(\&quot;src &lt;-\&quot;)\nescape(src)\nwriteLines(src)&quot;</span>
</span><span class="line">escape <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">    cat<span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="kr">for</span><span class="p">(</span>e <span class="kr">in</span> strsplit<span class="p">(</span>x<span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)[[</span><span class="m">1</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="kr">if</span><span class="p">(</span>e <span class="o">==</span> <span class="s">&#39;\n&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span><span class="s">&#39;\\n&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="kr">else</span> <span class="kr">if</span><span class="p">(</span>e <span class="o">==</span> <span class="s">&#39;\\&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span><span class="s">&#39;\\\\&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="kr">else</span> <span class="kr">if</span><span class="p">(</span>e <span class="o">==</span> <span class="s">&#39;&quot;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span><span class="s">&#39;\\&quot;&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="kr">else</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span>e<span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    cat<span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">cat<span class="p">(</span><span class="s">&quot;src &lt;-&quot;</span><span class="p">)</span>
</span><span class="line">escape<span class="p">(</span>src<span class="p">)</span>
</span><span class="line">writeLines<span class="p">(</span>src<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Comme il est noté dans l’article original, il est bon de tester sa solution à
l’aide de <code>diff</code>. Si la sortie de votre programme et le source sont identiques,
<code>diff</code> ne produira aucune sortie, sinon bon débogage ;)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>diff -u quine.r &lt;<span class="o">(</span>Rscript quine.r<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ma solution est beaucoup plus longue que celle qui se trouve sur le <a href="http://rosettacode.org/wiki/Quine#R">rosetta code</a> par exemple. Mais c’est pas grave, c’était marrant à faire, c’était un bon petit casse-tête qui m’a bien fait réfléchir. Et j’ai même appris une fonction R qui m’était inconnue (<code>writeLines</code>).</p>

<p>À vous de jouer maintenant ; tenez moi au courant si vous écrivez un quine, quel
que soit le langage ;)</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/">Un quine en R - Le retour</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre/">Les langages que j&#8217;aimerais (ré)apprendre</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combien de fois par jour est-ce-que je m'assois à mon bureau]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/06/combien-de-fois-par-jour-est-ce-que-je-massois-a-mon-bureau/"/>
    <updated>2015-10-06T12:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/06/combien-de-fois-par-jour-est-ce-que-je-massois-a-mon-bureau</id>
    <content type="html"><![CDATA[<p>Depuis le 21 septembre j’enregistre chaque jour les moments où je suis assis à
mon bureau. Je vais mener cette expérience un peu bizarre pendant encore quelques
semaines. Je voudrais savoir combien de fois par jour je m’assois à mon bureau,
et si certains patterns se dégagent. J’enregistre ces données avec un arduino
relié à un
<a href="http://www.interlinkelectronics.com/FSR406.php">capteur de pression FSR</a>.
Vous trouverez <a href="https://github.com/lkdjiin/sit-down">le code arduino et quelques photos</a>
sur Github.</p>

<p>Cet article est un compte-rendu de la première semaine d’enregistrement.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/raw.jpg" /></p>

<!-- more -->

<p>La pression est enregistrée sur une échelle allant de 0 à 1023. Zéro
représentant l’absence de pression et 1023 étant la pression maximale que le
dispositif peut mesurer. Je fais une mesure toutes les 30 secondes.</p>

<p>Sur le graphique précédent, à gauche, on peut voir les données brutes de la
semaine. Toute l’échelle des valeurs est représentée. Suivant comment je suis
assis sur mon fauteuil, comment le poids est réparti, le dispositif capte des
valeurs différentes. Les points bleus, en bas, indiquent clairement quand je
ne suis pas assis (zéro pression ou presque). Après quelques essais empiriques, j’ai trouvé que la valeur 20
était un bon seuil pour séparer les données brutes en deux catégories :
assis (<em>seated</em>) et pas assis (<em>not seated</em>).</p>

<p>Voici le résultat pour la première semaine :</p>

<pre><code>| Jour       | Combien de fois assis |
| ---------- | --------------------- |
| 2015-09-21 | 32                    |
| 2015-09-22 | 30                    |
| 2015-09-23 | 33                    |
| 2015-09-24 | 33                    |
| 2015-09-25 | 40                    |
| 2015-09-26 | 26                    |
| 2015-09-27 | 26                    |
</code></pre>

<p>On peut visualiser les données retravaillées de manière sympathique, par
exemple pour le lundi ; les périodes de couleur marron sont les périodes
durant lesquelles je suis assis à mon bureau :</p>

<p><img class="center" src="http://lkdjiin.github.io/images/visualize-day.png" /></p>

<p>On peut étendre ce genre de visualisation sur une semaine entière. C’est un
premier moyen pour repérer des patterns. Mais cette semaine ayant été spéciale
(<em>j’ai travaillé aussi le week-end, ce que je ne fait pas normalement</em>),
j’attendrai d’avoir récolté plus de données avant de tirer des conclusions.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/visualize-week.png" /></p>

<p>J’écrirai certainement un prochain article plus technique sur le code R qui a
été nécessaire pour traiter les données et obtenir ces graphiques.</p>

<p>Si vous avez des projets de ce genre, en tête ou en cours de réalisation,
j’aimerais beaucoup en entendre parler, alors n’hésitez pas à laisser votre
commentaire.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li><li><a href="http://lkdjiin.github.io/blog/2014/04/09/projet-de-client-twitter-en-console/">Projet de client Twitter en console</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commencer le développement web en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/09/16/commencer-le-developpement-web-en-ruby/"/>
    <updated>2015-09-16T15:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/09/16/commencer-le-developpement-web-en-ruby</id>
    <content type="html"><![CDATA[<h2 id="guest-post-"><code>{ Guest Post }</code></h2>

<p>Grâce au framework <a href="http://rubyonrails.org/">Ruby on Rails</a>, Ruby est maintenant très populaire pour le développement d’application web.
Ce domaine est un pleine croissance et Ruby on Rails attire beaucoup de débutants de tout horizons.</p>

<p>Je pense que commencer l’apprentissage d’un framework web nécessite de bien comprendre le rôle de chacun de ses composants.
Des composants, Ruby on Rails en comporte beaucoup et chacun d’entre eux répond à une problématique bien précise.
ORM, routeur, templates, controlleurs, tâches de fond et bien d’autres ; il y a de quoi se perdre.</p>

<p>Mon conseil à ceux qui débutent dans le domaine est de bien comprendre la raison d’être de chaque chose.
Une manière amusante de cerner les problématiques qui ont donnés naissance aux frameworks tel que Rails,
c’est de se passer complètement de ces briques. C’est à dire partir du strict minimum et ajouter, petit à petit,
les composants dont on ressent le besoin.</p>

<!-- more -->

<h2 id="rack">Rack</h2>

<p><a href="https://rack.github.io/">Rack</a> est la brique de base de la plupart des frameworks web Ruby actuels. Rack est avant tout une API définissant
la manière pour un programme Ruby de prendre en charge et de répondre à une requête HTTP. Voici un exemple simple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ./config.ru</span>
</span><span class="line">
</span><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="o">[</span>
</span><span class="line">    <span class="mi">200</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="o">[</span> <span class="s2">&quot;&lt;h1&gt;Hello world&lt;/h1&gt;&quot;</span> <span class="o">]</span>
</span><span class="line">  <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">run</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans cet exemple, on voit que l’on declare une variable <code>app</code> à laquelle on assigne un object <code>Proc</code>.
Cet objet <code>app</code> est ensuite passé à la méthode <code>Rack::Builder#run</code> indiquant ainsi au serveur compatible
ce qu’il faut exectuter lorsqu’une requête arrivera.</p>

<p>Regardons de plus près comment se comporte le <code>Proc</code> ci-dessus. On voit qu’il prend un argument que l’on
appelle <em>l’environement Rack</em>. Le <code>Proc</code> retourne une <em>réponse Rack</em> qui est un tableau contenant les
informations nécessaire à la construction de la réponse HTTP : le code de retour, les entêtes et le corps
de la reponse.</p>

<p>Rack ne nécessite pas d’utiliser un <code>Proc</code>. La seule contrainte est d’être un objet répondant à la méthode
<code>#call</code> prenant en argument un environement Rack et retournant une réponse Rack telle que nous venons de le voir.</p>

<h3 id="excuter-lapplication">Exécuter l’application</h3>

<p>Pour executer ce <code>config.ru</code> on peut utiliser l’outil <code>rackup</code> fourni avec la gem <code>rack</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rack</span>
</span><span class="line"><span class="err">$</span> <span class="n">rackup</span> <span class="n">config</span><span class="o">.</span><span class="n">ru</span>
</span><span class="line"><span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">21</span> <span class="mi">10</span><span class="p">:</span><span class="mi">54</span><span class="p">:</span><span class="mi">21</span><span class="o">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span>
</span><span class="line"><span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">21</span> <span class="mi">10</span><span class="p">:</span><span class="mi">54</span><span class="p">:</span><span class="mi">21</span><span class="o">]</span> <span class="no">INFO</span>  <span class="n">ruby</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span> <span class="p">(</span><span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">13</span><span class="p">)</span> <span class="o">[</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">21</span> <span class="mi">10</span><span class="p">:</span><span class="mi">54</span><span class="p">:</span><span class="mi">21</span><span class="o">]</span> <span class="no">INFO</span>  <span class="ss">WEBrick</span><span class="p">:</span><span class="ss">:HTTPServer</span><span class="c1">#start: pid=24457 port=9292</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette commande va écouter sur le port 9292 et pour chaque requête appeller la méthode <code>#call</code> de l’objet <code>app</code>.</p>

<p>Lorsque l’on apportera es modification à notre code, il faudra bien penser à redémarrer le serveur : <code>CTRL-C</code> pour l’arrêter et le relancer avec la commande que l’on vient de voir.</p>

<h3 id="quy-a-t-il-dans-lenv">Qu’y a-t-il dans l’env</h3>

<p>Pour voir ce qui se trouve dans l’environement je vais utiliser <code>JSON.pretty_generate</code> qui va m’afficher la variable
<code>env</code> au format JSON.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ./config.ru</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;json&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">  <span class="o">[</span>
</span><span class="line">    <span class="mi">200</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="o">[</span> <span class="s2">&quot;&lt;h1&gt;Hello world&lt;/h1&gt;&quot;</span> <span class="o">]</span>
</span><span class="line">  <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">run</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Après avoir modifié le <code>config.ru</code>, il faut redémarrer le serveur.</p>

<p>Pour faire une requête, j’utilise <a href="https://github.com/jkbrzt/httpie">httpie</a> qui permet simplement d’envoyer des requêtes HTTP depuis le terminal et qui est équivalent à <code>curl</code> avec de jolies couleurs en plus. Vous pouvez utiliser le client de votre choix bien entendu. Chez moi cela donne :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">http</span> <span class="o">-</span><span class="n">v</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">9292</span>
</span><span class="line"><span class="no">GET</span> <span class="o">/</span> <span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span>
</span><span class="line"><span class="ss">Accept</span><span class="p">:</span> <span class="o">*/*</span>
</span><span class="line"><span class="no">Accept</span><span class="o">-</span><span class="ss">Encoding</span><span class="p">:</span> <span class="n">gzip</span><span class="p">,</span> <span class="n">deflate</span>
</span><span class="line"><span class="ss">Connection</span><span class="p">:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class="line"><span class="ss">Host</span><span class="p">:</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">9292</span>
</span><span class="line"><span class="no">User</span><span class="o">-</span><span class="ss">Agent</span><span class="p">:</span> <span class="no">HTTPie</span><span class="o">/</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="mi">200</span> <span class="no">OK</span>
</span><span class="line"><span class="ss">Connection</span><span class="p">:</span> <span class="no">Keep</span><span class="o">-</span><span class="no">Alive</span>
</span><span class="line"><span class="no">Content</span><span class="o">-</span><span class="ss">Type</span><span class="p">:</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span>
</span><span class="line"><span class="ss">Date</span><span class="p">:</span> <span class="no">Tue</span><span class="p">,</span> <span class="mi">21</span> <span class="no">Jul</span> <span class="mi">2015</span> <span class="mi">11</span><span class="p">:</span><span class="mi">21</span><span class="p">:</span><span class="mi">16</span> <span class="no">GMT</span>
</span><span class="line"><span class="ss">Server</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span> <span class="p">(</span><span class="no">Ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">13</span><span class="p">)</span>
</span><span class="line"><span class="no">Transfer</span><span class="o">-</span><span class="ss">Encoding</span><span class="p">:</span> <span class="n">chunked</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Hello</span> <span class="n">world</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À l’issue de cette requête, on a bien le body <code>&lt;h1&gt;Hello world&lt;/h1&gt;</code> qui s’affiche.
On remarque également que dans le terminal où notre serveur est lancé, on voit s’afficher
sur la sortie standard :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="s2">&quot;GATEWAY_INTERFACE&quot;</span><span class="o">:</span> <span class="s2">&quot;CGI/1.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;PATH_INFO&quot;</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;QUERY_STRING&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REMOTE_ADDR&quot;</span><span class="o">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REMOTE_HOST&quot;</span><span class="o">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REQUEST_METHOD&quot;</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REQUEST_URI&quot;</span><span class="o">:</span> <span class="s2">&quot;http://localhost:9292/&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SCRIPT_NAME&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_NAME&quot;</span><span class="o">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_PORT&quot;</span><span class="o">:</span> <span class="s2">&quot;9292&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_PROTOCOL&quot;</span><span class="o">:</span> <span class="s2">&quot;HTTP/1.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_SOFTWARE&quot;</span><span class="o">:</span> <span class="s2">&quot;WEBrick/1.3.1 (Ruby/2.2.2/2015-04-13)&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_HOST&quot;</span><span class="o">:</span> <span class="s2">&quot;localhost:9292&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_CONNECTION&quot;</span><span class="o">:</span> <span class="s2">&quot;keep-alive&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_ACCEPT_ENCODING&quot;</span><span class="o">:</span> <span class="s2">&quot;gzip, deflate&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_ACCEPT&quot;</span><span class="o">:</span> <span class="s2">&quot;*/*&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_USER_AGENT&quot;</span><span class="o">:</span> <span class="s2">&quot;HTTPie/0.9.2&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.version&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">    <span class="mi">1</span><span class="p">,</span>
</span><span class="line">    <span class="mi">3</span>
</span><span class="line">  <span class="p">],</span>
</span><span class="line">  <span class="s2">&quot;rack.input&quot;</span><span class="o">:</span> <span class="s2">&quot;#&lt;Rack::Lint::InputWrapper:0x007fcac62086c0&gt;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.errors&quot;</span><span class="o">:</span> <span class="s2">&quot;#&lt;Rack::Lint::ErrorWrapper:0x007fcac6208698&gt;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.multithread&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.multiprocess&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.run_once&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.url_scheme&quot;</span><span class="o">:</span> <span class="s2">&quot;http&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.hijack?&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.hijack&quot;</span><span class="o">:</span> <span class="s2">&quot;#&lt;Proc:0x007fcac6208b70@/home/n25/.gem/ruby/2.2.2/gems/rack-1.6.4/lib/rack/lint.rb:525&gt;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.hijack_io&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_VERSION&quot;</span><span class="o">:</span> <span class="s2">&quot;HTTP/1.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REQUEST_PATH&quot;</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.tempfiles&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">
</span><span class="line">  <span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est uniquement à partir de cette variable <code>env</code> que notre application devra formuler une réponse Rack !</p>

<h2 id="de-rack-au-frameworks-web">De Rack au frameworks Web</h2>

<p>Dans cette partie, essayons de trouver des solutions a de petits problèmes.
Bien sûr on n’utilisera que Rack.</p>

<p>Comme support nous nous mettrons dans le cas d’un réseau social très simplifié.</p>

<h3 id="le-routage">Le routage</h3>

<p>Chaque membre de notre réseau social va avoir une page qui lui est propre.
Pour y accéder nous utilisons le chemin suivant : <code>/members/&lt;id&gt;</code> où <code>&lt;id&gt;</code> sera <em>l’identifiant du membre</em>.</p>

<p>Avec Rack nous pouvons écrire le code suivant pour parvenir à isoler l’identifiant du membre :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">member</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">  <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">%r{\A/members/([A-Za-z0-9]+)\z}</span> <span class="o">&amp;&amp;</span> <span class="vg">$1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette méthode va nous permettre d’obtenir l’identifiant du membre en fonction de l’environement Rack.
On peut introduire ce code dans notre application :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="n">member_id</span> <span class="o">=</span> <span class="n">member</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">  <span class="o">[</span>
</span><span class="line">    <span class="mi">200</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="o">[</span> <span class="s2">&quot;&lt;h1&gt;Hello </span><span class="si">#{</span><span class="n">member_id</span><span class="si">}</span><span class="s2">&lt;/h1&gt;&quot;</span> <span class="o">]</span>
</span><span class="line">  <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ici on a extrait un paramètre de l’URL. Si on visite <code>/members/Nicolas</code> on verra le texte <em>Hello Nicolas</em> s’afficher.
Par contre, si on visite <code>/signup</code>, on verra <em>Hello</em> s’afficher seul puisque <code>member_id</code> sera égal à <code>nil</code>.</p>

<p>En pratique, notre réseau social va avoir besoin d’identifier des dixaines voir des centaines d’URLs différentes.
Avec ce volume, il est nécessaire de s’organiser autrement et d’associer les URLs gérée par notre application avec
le code responsable de répondre à la requête. Dans le cas ou une URL n’est pas gérée, on souhaite répondre par un code
d’erreur.</p>

<p>Voici un extrait de code permettant de répondre à cette problématique :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ShowMember</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">match?</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">%r{\A/members/[A-Za-z0-9]+\z}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">member_id</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">].</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;/members/&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">}</span>
</span><span class="line">    <span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;&lt;h1&gt;Hello </span><span class="si">#{</span><span class="n">member_id</span><span class="si">}</span><span class="s2">&lt;/h1&gt;&quot;</span>
</span><span class="line">    <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="o">[</span> <span class="n">body</span> <span class="o">]</span> <span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">actions</span> <span class="o">=</span> <span class="o">[</span> <span class="no">ShowMember</span> <span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="n">action</span> <span class="o">=</span> <span class="n">actions</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span> <span class="n">action</span><span class="o">.</span><span class="n">match?</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="n">action</span> <span class="p">?</span> <span class="n">action</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">:</span> <span class="o">[</span> <span class="mi">404</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span> <span class="s2">&quot;Not Found&quot;</span> <span class="o">]</span> <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On voit que j’ai implicitement définit une interface : <code>#match?(env)</code> et <code>call(env)</code> pour les actions que
l’application peut réaliser. Chaque action est responsable de formuler une réponse Rack lors d’un appel à la
méthode <code>call</code> et de savoir, via <code>match?</code>, si oui ou non elle doit s’executer.</p>

<p>L’ensemble des frameworks web font un traitement semblable en utilisant une solution que l’on appelle le routage.
Différentes approches concernant le routage existent, voir <a href="http://roda.jeremyevans.net/">Roda</a>, <a href="http://www.sinatrarb.com/">Sinatra</a> et <a href="http://guides.rubyonrails.org/routing.html">Rails</a>.</p>

<p>Voici par exemple un extrait de code qui utilise Sinatra pour faire exactement ce que nous avons fait :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s2">&quot;sinatra&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">get</span> <span class="s2">&quot;/members/:member_id&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member_id</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s2">&quot;member_id&quot;</span><span class="o">]</span>
</span><span class="line">  <span class="s2">&quot;&lt;h1&gt;Hello </span><span class="si">#{</span><span class="n">member_id</span><span class="si">}</span><span class="s2">&lt;/h1&gt;&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Remarque</em> :On voit dans cet exemple que Sinatra permet d’extraire les paramètres de l’URL automatiquement.</p>

<h3 id="les-templates">Les templates</h3>

<p>Lorsque l’on développe une fonctionnalité d’un site web, il est fréquent de le faire en deux phases.
Une phase de design où l’on va écrire HTML et CSS afin de visualiser le résultat voulu. Une autre phase
où l’on écrira le code métier qui va injecter les bonnes valeurs dans le HTML en fonction de l’action
effectuée.</p>

<p>Par exemple dans notre code : <code>"&lt;h1&gt;Hello #{member_id}&lt;/h1&gt;"</code> on injecte la variable <code>member_id</code> dans
du HTML. De manière générale, le HTML est beaucoup plus volumineux que dans notre exemple.</p>

<p>Dans la vie de tout les jours, il est fréquent qu’une équipe soit en charge de la phase plus visuelle
(HTML / CSS) et une autre en charge du code métier. Il est donc fréquent de séparer ces deux composantes
de notre code.</p>

<p>Pour effectuer cette séparation, on a recours à des <em>moteurs de templates</em>. Ces briques logicielles vont
nous permettre de séparer notre présentation du code métier. Voici un exemple, toujours en utilisant
Rack :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s2">&quot;erb&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;ostruct&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Template</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">erb</span><span class="p">(</span><span class="n">template_path</span><span class="p">,</span> <span class="n">locals</span><span class="o">=</span><span class="p">{})</span>
</span><span class="line">    <span class="n">file_content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">template_path</span><span class="p">)</span>
</span><span class="line">    <span class="n">context</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">locals</span><span class="p">)</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="nb">binding</span> <span class="p">}</span>
</span><span class="line">    <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">file_content</span><span class="p">)</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ShowMember</span>
</span><span class="line">  <span class="kp">extend</span> <span class="no">Templating</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">member_id</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">].</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;/members/&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">}</span>
</span><span class="line">    <span class="n">body</span> <span class="o">=</span> <span class="no">Template</span><span class="o">.</span><span class="n">erb</span><span class="p">(</span><span class="s2">&quot;template.html.erb&quot;</span><span class="p">,</span> <span class="n">member_id</span><span class="p">:</span> <span class="n">member_id</span><span class="p">)</span>
</span><span class="line">    <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="o">[</span> <span class="n">body</span> <span class="o">]</span> <span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x">&lt;h1&gt;Hello </span><span class="cp">&lt;%=</span> <span class="n">member_id</span> <span class="cp">%&gt;</span><span class="x">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ici, on va utiliser <code>ERB</code> pour charger le fichier <code>template.html.erb</code>. Au sein de ce fichier,
la variable <code>member_id</code> sera injectée dans le HTML grâce à la notation <code>&lt;%= ... %&gt;</code>.</p>

<p>Les moteurs de templates sont nombreux : <a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/erb/rdoc/ERB.html">erb</a>, <a href="http://haml.info/">haml</a>, <a href="http://slim-lang.com/">slim</a>, <a href="https://github.com/jimweirich/builder">builder</a>,
<a href="http://www.liquidmarkup.org/">liquid</a> etc. Leur usage va plus loin que la simple séparation du code de présentation et
du code métier (voir les <a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials">partials</a>, <a href="http://www.rubydoc.info/gems/slim/frames#Control_code_-">stuctures de controle</a>…).</p>

<h3 id="tester-son-application">Tester son application</h3>

<p>Avant de continuer je vais déplacer le code de l’application du fichier <code>config.ru</code> vers <code>app.rb</code>.
Au passage, j’en profite pour extraire une classe <code>Router</code> ainsi qu’une constante <code>App</code> qui contiendra
notre application.</p>

<p>Les tests sont indispensables lors du développement d’une application. Tester une application Rack est
assez aisé grâce aux outils inclus dans la gem <code>rack-test</code>. Voici un exemple d’un fichier de test écrit
avec minitest :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ./app_test.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;minitest/autorun&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;rack/test&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s2">&quot;app&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">App</span> <span class="k">do</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Test</span><span class="o">::</span><span class="no">Methods</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s2">&quot;when the URL match no known action&quot;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s2">&quot;returns a 404 status code&quot;</span> <span class="k">do</span>
</span><span class="line">      <span class="n">get</span> <span class="s2">&quot;/unknown/path&quot;</span>
</span><span class="line">      <span class="n">last_response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">must_equal</span> <span class="mi">404</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s2">&quot;when the URL match the members&#39;s path&quot;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s2">&quot;displays the member&#39;s id&quot;</span> <span class="k">do</span>
</span><span class="line">      <span class="n">get</span> <span class="s2">&quot;/members/Nicolas&quot;</span>
</span><span class="line">      <span class="n">last_response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">must_include</span> <span class="s2">&quot;Nicolas&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">app</span>
</span><span class="line">    <span class="no">App</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour lancer les tests, la commande : <code>bundle exec ruby -Ilib:test *_test.rb --pride</code> suffit.</p>

<p>Le frameworks web tels que Rails instaurent des conventions et des outils par défaut pour le test
de ses applications. Les outils de tests fonctionnent également hors des frameworks comme le montre
notre exemple.</p>

<h2 id="pour-finir">Pour finir</h2>

<p>En continuant sur cette lancée, on peut rencontrer d’autres problématiques comme les sessions, la persistance,
l’organisation du coe métier, le caching et bien d’autres. Il est très facile, avec un peu de recul, de créer
son propre framework ou d’utiliser un micro-framework puis d’y ajouter ses propres conventions ainsi que les
outils de son choix.</p>

<p>Même si ce billet s’adresse principalement aux débutants, j’espère qu’il touchera également quelques
enseignants ou mentors. Peu importe votre profil, n’hésitez pas à partager vos premiers pas avec le
développement web en Ruby ainsi que la manière dont vous l’aborderiez aujourd’hui.</p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="https://secure.gravatar.com/avatar/510312aa405bc675fc275fad7648eb1c?s=200" /></p>

<p><strong>Nicolas Zermati</strong><br />
Software writer, building the backend of Sleekapp.io at Tigerlily</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment implémenter un algorithme bien connu]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/09/11/comment-implementer-un-algorithme-bien-connu/"/>
    <updated>2015-09-11T14:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/09/11/comment-implementer-un-algorithme-bien-connu</id>
    <content type="html"><![CDATA[<p>Quand tu implémentes un algorithme «bien connu», tu as tout intérêt à suivre
strictement l’algorithme tel qu’il est décrit.</p>

<p>Ne commence pas à vouloir modifier telle ou telle partie.</p>

<p>Ou pire, ne cherche pas à optimiser quoi que ce soit.</p>

<!-- more -->

<p>Si on l’appelle un algorithme «bien connu», il doit y avoir une bonne raison à
ça.</p>

<p>C’est sûrement que des tas et des tas de personnes s’y sont déjà cassé les
dents.</p>

<p>C’est qu’une armée de développeur s’est déjà arraché les cheveux en travaillant dessus.</p>

<p>Parfois depuis plus de 40 ans.</p>

<p>Un algorithme «bien connu» est bien assez bon pour toi.</p>

<p>Implémente le tel quel.</p>

<p>Gagne du temps.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connaitre la taille d'un programme pour Arduino]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/"/>
    <updated>2015-08-20T16:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino</id>
    <content type="html"><![CDATA[<p>Si j’ai besoin de connaître la taille et la demande en RAM de mes
programmes Arduino, comment je fais ? Et puis d’abord pourquoi je voudrais
connaître leur taille ?</p>

<p><img class="center" src="http://lkdjiin.github.io/images/640-arduino-avr.jpg" /></p>

<!-- more -->

<h2 id="o-se-cache-le-programme">Où se cache le programme</h2>

<p>Le programme au format elf se trouve dans un dossier caché. Vous pouvez
constater que sa taille est assez conséquente. Ce n’est pas du tout sa taille
finale pour l’Arduino.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="se">\l</span>s -lh .build/uno/firmware.elf
</span><span class="line">-rwxr-xr-x 1 xavier xavier 40K août  19 21:01 .build/uno/firmware.elf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Un dossier caché est un dossier dont le nom commence par un point. On dit
«caché» car sous Linux et OS X ils sont invisibles par défaut.</em></p>

<h2 id="comment-connatre-les-besoins-en-mmoire-dun-programme-arduino">Comment connaître les besoins en mémoire d’un programme Arduino</h2>

<p>C’est le programme <code>avr-size</code> qui va tout nous dire:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>avr-size -dC .build/uno/firmware.elf
</span><span class="line">AVR Memory Usage
</span><span class="line">----------------
</span><span class="line">Device: Unknown
</span><span class="line">
</span><span class="line">Program:    2786 bytes
</span><span class="line"><span class="o">(</span>.text + .data + .bootloader<span class="o">)</span>
</span><span class="line">
</span><span class="line">Data:         34 bytes
</span><span class="line"><span class="o">(</span>.data + .bss + .noinit<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’utilise 34 octets de RAM et 2786 octets au total.</p>

<p>Le switch <code>-d</code> fournit les valeurs en décimal. Le switch <code>-C</code> spécifie le
format du rapport de <code>avr-size</code> (<code>$ avr-size --help</code> pour voir les autres).</p>

<h2 id="pourquoi-faire">Pourquoi faire</h2>

<p>Les micro contrôleurs ATMEL ont des tailles de mémoire
différentes (mémoire vive et mémoire programme). Par exemple l’ATtiny13 possède 1 Ko pour le programme et 64 octets
de RAM, tandis que le ATtiny85 fait 8 Ko pour le programme et 512 octets pour
la RAM.</p>

<p>Pour les programmes qui sont destinés à quitter la plateforme Arduino pour
rejoindre un micro contrôleur, connaître la taille mémoire permet de savoir
si il est intéressant de passer du temps et de l’énergie à <em>optimiser</em> ces
programmes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser Bash pour supprimer les encodages magiques de Ruby 1.9]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/08/06/utiliser-bash-pour-supprimer-les-encodages-magiques-de-ruby-1-dot-9/"/>
    <updated>2015-08-06T17:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/08/06/utiliser-bash-pour-supprimer-les-encodages-magiques-de-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>Si vous avez travaillé sur des projets écrit avec Ruby 1.9, vous avez peut-être
utilisé les encodages magiques (souvent appelés <em>magic comment</em>). Il s’agit
d’un commentaire en début de fichier qui définit l’encodage :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># -*- encoding: UTF-8 -*-</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Récemment j’ai passé plusieurs projets de Ruby 1.9.x à Ruby 2.x et j’ai
naturellement voulu supprimer ces <em>directives d’encodage</em> qui ne sont plus
nécessaires.</p>

<p>J’imagine qu’un IDE ou un autre doit être capable de faire ça (<code>&lt;mode troll&gt;</code>
sinon quel intérêt à utiliser un IDE ? <code>&lt;/mode troll&gt;</code>). Toujours est-il que
quelques commandes dans Bash et hop, terminé ;)</p>

<p>Voici comment faire, sans trop entrer dans les détails. J’espère juste vous
donner envie d’utiliser Bash, ou un autre shell (si ça n’est pas déjà le cas).</p>

<!-- more -->

<p>De quoi a-t-on besoin ?  <code>find</code>, <code>sed</code> et <code>xargs</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>find . -type f -name <span class="s1">&#39;*.rb&#39;</span> | xargs sed -i <span class="s1">&#39;1{/encoding/d}&#39;</span>
</span><span class="line"><span class="nv">$ </span>find . -type f -name <span class="s1">&#39;*.rb&#39;</span> | xargs sed -i -n <span class="s1">&#39;/./,$p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La première commande efface la première ligne des fichiers ruby si cette
ligne contient <code>encoding</code>. La seconde commande enlève la première ligne si
cette ligne est vide.</p>

<h2 id="find">find</h2>

<pre><code>find . -type f -name '*.rb'
</code></pre>

<p>Cherche tout les fichiers dont le nom se termine par <code>.rb</code> et les affichent
les uns après les autres.  Ça donne quelque chose comme ça :</p>

<pre><code>./fichier1.rb
./fichier2.rb
./dossier1/fichier1.rb
./dossier1/fichier2.rb
./dossier2/fichier1.rb
[...]
</code></pre>

<h2 id="xargs">xargs</h2>

<p>Pour donner les noms de fichier à manger à sed, il faut qu’ils soient sur une
seule ligne. C’est à dire les uns à coté des autres comme on écrirait des
paramètres, et pas les uns en dessous des autres comme ce qui sort de <code>find</code>.</p>

<p>Voilà donc <code>xargs</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;a\nb\nc&quot;</span>
</span><span class="line">a
</span><span class="line">b
</span><span class="line">c
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;a\nb\nc&quot;</span> | xargs
</span><span class="line">a b c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>– <em>Le switch <code>-e</code> de echo interprète la séquence \n comme un saut de ligne.</em> —</p>

<h2 id="sed">sed</h2>

<p>Le switch <code>-i</code> c’est pour <em>in place</em>. On modifie vraiment les fichiers.</p>

<pre><code>sed -i '1{/encoding/d}'
</code></pre>

<p>Supprime (<code>d</code>) la ligne qui contient <code>encoding</code>. Ne s’applique qu’à la 1ère
ligne <code>1{}</code>.</p>

<pre><code>sed -i -n '/./,$p'
</code></pre>

<p>Supprime la 1ère ligne si elle est vide. Je trouve que cette ligne mérite bien
un article à elle toute seule. Alors son explication sera pour une prochaine
fois ;)</p>

<p>Et vous, comment auriez vous fait ? Avec un shell ? Un IDE ?</p>
]]></content>
  </entry>
  
</feed>
