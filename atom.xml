<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-22T12:06:38+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 36]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/22/les-algorithmes-genetiques-demystifies-36/"/>
    <updated>2013-10-22T08:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/22/les-algorithmes-genetiques-demystifies-36</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Il reste à voir deux fonctions <em>techniques</em> pour faire tourner notre
programme: la copie d&#8217;un individu et le rendu d&#8217;une image. Je les appelle
<em>techniques</em> car elles n&#8217;ont rien à voir avec l&#8217;algorithme lui-même. La
copie d&#8217;un individu est rendue nécessaire par le langage utilisé, Javascript,
et le rendu d&#8217;une image est nécessaire puisqu&#8217;on veut …et bien… afficher
des images, quoi…</p>

<!-- more -->


<p>Voyons d&#8217;abord la copie d&#8217;un individu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">copy</span><span class="p">(</span><span class="nx">individual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">indiCopy</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TOTAL_SQUARES</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">objectCopy</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nx">prop</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">prop</span> <span class="k">in</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">objectCopy</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">=</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">prop</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">indiCopy</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">objectCopy</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">indiCopy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un individu est un tableau, contenant des objets, chaque objets contenants
des propriétés… <em>Là, je m&#8217;interroge et je demande l&#8217;avis de spécialistes:
est-ce-qu&#8217;il ne vaudrait pas mieux utiliser une librairie pour faire ça,
comme jQuery ou Underscore.js ?</em></p>

<p>Maintenant le rendu d&#8217;une image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">renderIndividual</span><span class="p">(</span><span class="nx">individual</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s2">&quot;white&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">IMAGE_WIDTH</span><span class="p">,</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TOTAL_SQUARES</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">globalAlpha</span> <span class="o">=</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;rgb(&#39;</span> <span class="o">+</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">red</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">green</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">blue</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">size</span><span class="p">,</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">size</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ctx</code> est un contexte de Canvas. Je vois ça tout simplement comme un objet
dans lequel on peut dessiner. Tout d&#8217;abord on <em>efface</em> l&#8217;image en la
remplissant de blanc:</p>

<pre><code>ctx.fillStyle = "white";
ctx.fillRect(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
</code></pre>

<p>Puis on dessine chacuns des carrés:</p>

<pre><code>for (var i = 0; i &lt; TOTAL_SQUARES; i++) {
</code></pre>

<p>Pour chaque carré il faut sélectionner sa transparence:</p>

<pre><code>ctx.globalAlpha = individual[i].alpha;
</code></pre>

<p>Puis sa couleur:</p>

<pre><code>ctx.fillStyle = 'rgb(' + individual[i].red + ',' +
  individual[i].green + ',' + individual[i].blue + ')';
</code></pre>

<p>On peut alors dessiner un carré:</p>

<pre><code>ctx.fillRect(individual[i].x, individual[i].y,
  individual[i].size, individual[i].size);
</code></pre>

<p>Voilà. Reste à voir maintenant le programme dans son ensemble. Voici les
fichiers HTML et CSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;fr&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;picture.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;canvas</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;400&quot;</span> <span class="na">id=</span><span class="s">&quot;canvas1&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span><span class='line'>    <span class="nt">&lt;canvas</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;400&quot;</span> <span class="na">id=</span><span class="s">&quot;canvas2&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;generation&quot;</span><span class="nt">&gt;</span>0<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;quality&quot;</span><span class="nt">&gt;</span>0<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;picture.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#222</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">p</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le programme Javascript complet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">canvasImgOrigin</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;canvas1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">canvasGenetic</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;canvas2&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctxOrigin</span> <span class="o">=</span> <span class="nx">canvas1</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas2</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TOTAL_SQUARES</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">IMAGE_WIDTH</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">IMAGE_HEIGHT</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SQUARE_MAX_SIZE</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">generation</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">htmlGeneration</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;generation&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">htmlQuality</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;quality&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">canvasBuffer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">canvasBuffer</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">IMAGE_WIDTH</span><span class="p">;</span>
</span><span class='line'><span class="nx">canvasBuffer</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctxBuffer</span> <span class="o">=</span> <span class="nx">canvasBuffer</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">img</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">ctxOrigin</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;photo.jpg&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">solution</span> <span class="o">=</span> <span class="nx">makeIndividual</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">hillClimb</span><span class="p">,</span> <span class="mi">150</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">makeIndividual</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">individual</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TOTAL_SQUARES</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">individual</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">x</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_WIDTH</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">y</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">size</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">SQUARE_MAX_SIZE</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">red</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">green</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">blue</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">alpha</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">individual</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">renderIndividual</span><span class="p">(</span><span class="nx">individual</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s2">&quot;white&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">IMAGE_WIDTH</span><span class="p">,</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TOTAL_SQUARES</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">globalAlpha</span> <span class="o">=</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">alpha</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;rgb(&#39;</span> <span class="o">+</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">red</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">green</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">blue</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">size</span><span class="p">,</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">size</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">quality</span><span class="p">(</span><span class="nx">individual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">imgOrigin</span> <span class="o">=</span> <span class="nx">ctxOrigin</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">IMAGE_WIDTH</span><span class="p">,</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pixelArrayOrigin</span> <span class="o">=</span> <span class="nx">imgOrigin</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">renderIndividual</span><span class="p">(</span><span class="nx">individual</span><span class="p">,</span> <span class="nx">ctxBuffer</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">imgBuffer</span> <span class="o">=</span> <span class="nx">ctxBuffer</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">400</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pixelArrayCandidate</span> <span class="o">=</span> <span class="nx">imgBuffer</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">pixelArrayOrigin</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">score</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">pixelArrayOrigin</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">pixelArrayCandidate</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">score</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">pixelArrayOrigin</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">pixelArrayCandidate</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">score</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">pixelArrayOrigin</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">pixelArrayCandidate</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="o">/</span> <span class="nx">score</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hillClimb</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opponent</span> <span class="o">=</span> <span class="nx">mutate</span><span class="p">(</span><span class="nx">copy</span><span class="p">(</span><span class="nx">solution</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score_opponent</span> <span class="o">=</span> <span class="nx">quality</span><span class="p">(</span><span class="nx">opponent</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score_solution</span> <span class="o">=</span> <span class="nx">quality</span><span class="p">(</span><span class="nx">solution</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">score_opponent</span> <span class="o">&gt;</span> <span class="nx">score_solution</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">solution</span> <span class="o">=</span> <span class="nx">opponent</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">generation</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">generation</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">renderIndividual</span><span class="p">(</span><span class="nx">solution</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">htmlGeneration</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">generation</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">htmlQuality</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">score_solution</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">generation</span> <span class="o">&gt;=</span> <span class="mi">100000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">interval</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">copy</span><span class="p">(</span><span class="nx">individual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">indiCopy</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TOTAL_SQUARES</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">objectCopy</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nx">prop</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">prop</span> <span class="k">in</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">objectCopy</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">=</span> <span class="nx">individual</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">prop</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">indiCopy</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">objectCopy</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">indiCopy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">mutate</span><span class="p">(</span><span class="nx">individual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">gene</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">TOTAL_SQUARES</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">squareProperty</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">squareProperty</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_WIDTH</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">size</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">SQUARE_MAX_SIZE</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">red</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">green</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">blue</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">6</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">alpha</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">individual</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour le faire tourner vous aurez besoin d&#8217;une photo de 400x400 pixels et
de beaucoup de patience… Avec Firefox, ça marche tout seul mais avec
Chrome il faudra passer par un serveur Web. Si Ruby est installé sur
votre machine, vous pouvez démarrer un serveur en entrant ceci dans un
terminal (même répertoire que votre fichier HTML):</p>

<pre><code>ruby -rwebrick -e'WEBrick::HTTPServer.new(:Port =&gt; 3000, :DocumentRoot =&gt; Dir.pwd).start'
</code></pre>

<p>Le code se trouve aussi sur Github: <a href="https://github.com/lkdjiin/picture_genetic_algorithm">github.com/lkdjiin/picture_genetic_algorithm</a>.
Je suis sûr que certains d&#8217;entre-vous connaissent Javascript bien mieux que
moi et peuvent l&#8217;améliorer, alors n&#8217;hésitez pas.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/20/les-algorithmes-genetiques-demystifies-35/'>Les algorithmes génétiques démystifiés 35</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/18/les-algorithmes-genetiques-demystifies-34/'>Les algorithmes génétiques démystifiés 34</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie/'>Les algorithmes génétiques démystifiés: Imagerie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/"/>
    <updated>2013-10-21T21:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>J&#8217;ai eu récemment à aider quelqu&#8217;un en mathématique (niveau 3ème), et ce
quelqu&#8217;un connaissait un peu Ruby. On a joué avec le langage pour faire
des maths. C&#8217;était drôle et intéressant. Ça m&#8217;a donné l&#8217;idée de
continuer cette affaire sur mon blog. Cette nouvelle série d&#8217;articles
s&#8217;adresse à celles et ceux qui débute Ruby et qui ont un niveau de math de
3ème.</p>

<!-- more -->


<p>Le premier problème auquel on va essayer de répondre en utilisant Ruby est
le suivant:</p>

<blockquote><p>Afficher toutes les paires de nombres amiables jusqu&#8217;à 10.000.</p></blockquote>


<p>Si vous avez besoin de vous rafraichir la mémoire sur les nombres
amiables, voici <a href="http://fr.wikipedia.org/wiki/Nombre_amical">l&#8217;article de wikipédia</a>.
Et en voici une définition rapide:</p>

<p>si <em>f</em>(n) est une fonction qui calcule la
somme des diviseurs stricts de n, alors n et m sont amiables si
<em>f</em>(n) = m et <em>f</em>(m) = n.</p>

<h2>Obtenir les diviseurs d&#8217;un nombre</h2>

<p>La première chose à faire est de calculer les diviseurs d&#8217;un nombre n.
Pour mémoire, les diviseurs de 8, par exemple, sont 1 ; 2 ; 4 et 8.
Pour les trouver, une méthode consiste à diviser 8 par chaque nombre de 1 à 8
et à regarder le reste de la division. Si il reste 0, c&#8217;est un diviseur, sinon
ce n&#8217;est pas un diviseur. En Ruby, calculer le reste d&#8217;une division se fait
avec l&#8217;opérateur <code>%</code> (le modulo):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">[~]⇒ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">1</span>
</span><span class='line'><span class="go">0</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">2</span>
</span><span class='line'><span class="go">0</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">3</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">4</span>
</span><span class='line'><span class="go">0</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">5</span>
</span><span class='line'><span class="go">3</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">6</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">7</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">8</span> <span class="o">%</span> <span class="mi">8</span>
</span><span class='line'><span class="go">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit bien que les diviseurs de 8, soit 1, 2, 4 et 8 renvoient bien 0.
Évidemment, il n&#8217;est pas question de se taper tout ces chiffres <em>à la main</em>,
imaginez un peu que vous vouliez connaitre les diviseurs de 123456789 !
Il nous faut quelque chose pour produire automatiquement les nombres de 1 à
n. En Ruby, on appelle ça un <code>Range</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span>
</span><span class='line'><span class="go">1..8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour y voir plus clair, on va appeler la méthode <code>to_a</code> sur ce <code>Range</code>, qui
va nous le transformer en un tableau (<code>Array</code>). Vous pouvez pensez à un
tableau comme à une simple liste:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="go">[1, 2, 3, 4, 5, 6, 7, 8]</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a bien une liste des nombres de 1 à 8. Notez que les parenthèses sont ici
nécessaires, sinon la méthode <code>to_a</code> serait appelée sur le chiffre 8, et
c&#8217;est pas bon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="go">NoMethodError: undefined method `to_a&#39; for 8:Fixnum</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on verra comment sélectionner dans cette liste seulement
les nombres qui nous intéressent, c&#8217;est à dire les diviseurs.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/'>Ruby 2.0: Tableaux littéraux pour les symboles</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/'>Ruby 2.0: Les arguments nommés</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/'>Vim: Créez des présentations avec Vimdeck</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 35]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/20/les-algorithmes-genetiques-demystifies-35/"/>
    <updated>2013-10-20T21:21:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/20/les-algorithmes-genetiques-demystifies-35</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On continue aujourd&#8217;hui avec la mise en place de l&#8217;algorithme de <em>Hill-climbing</em>
pour s&#8217;assurer que la fonction d&#8217;évaluation de nos images est pertinente.</p>

<!-- more -->


<p>J&#8217;ai déjà parlé du <em>Hill-climbing</em> dans
<a href="http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing/">cet article</a>.
On peut le considérer comme une version très basique d&#8217;un algorithme
génétique, sans population et sans reproduction. Utile donc, pour
tester rapidement et facilement l&#8217;évaluation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">solution</span> <span class="o">=</span> <span class="nx">makeIndividual</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">generation</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">htmlGeneration</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;generation&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">htmlQuality</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;quality&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">hillClimb</span><span class="p">,</span> <span class="mi">150</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hillClimb</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opponent</span> <span class="o">=</span> <span class="nx">mutate</span><span class="p">(</span><span class="nx">copy</span><span class="p">(</span><span class="nx">solution</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score_opponent</span> <span class="o">=</span> <span class="nx">quality</span><span class="p">(</span><span class="nx">opponent</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score_solution</span> <span class="o">=</span> <span class="nx">quality</span><span class="p">(</span><span class="nx">solution</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">score_opponent</span> <span class="o">&gt;</span> <span class="nx">score_solution</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">solution</span> <span class="o">=</span> <span class="nx">opponent</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">generation</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">generation</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">renderIndividual</span><span class="p">(</span><span class="nx">solution</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">htmlGeneration</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">generation</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">htmlQuality</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">score_solution</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">generation</span> <span class="o">&gt;=</span> <span class="mi">100000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">interval</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les explications maintenant. À chaque tour on compare les scores obtenus
par la solution courante (la meilleure jusqu&#8217;ici) avec une version mutée
de lui-même (<code>opponent</code>). Si l&#8217;opposant est meilleur, il prend la place
de la solution:</p>

<pre><code>var opponent = mutate(copy(solution));
var score_opponent = quality(opponent);
var score_solution = quality(solution);
if (score_opponent &gt; score_solution) {
  solution = opponent;
}
</code></pre>

<p>J&#8217;affiche ensuite la solution courante, toutes les 100 générations:</p>

<pre><code>generation++;
if (generation % 100 == 0) renderIndividual(solution, ctx);
</code></pre>

<p>À chaque tour, j&#8217;affiche la génération courante et son score:</p>

<pre><code>htmlGeneration.innerHTML = generation;
htmlQuality.innerHTML = score_solution;
</code></pre>

<p>Enfin, on stoppe tout au bout de 100.000 essais:</p>

<pre><code>if (generation &gt;= 100000) {
  clearInterval(interval);
}
</code></pre>

<p>La fonction de mutation est longue, mais simple. On sélectionne au hasard
un carré et une de ses propriétés puis on la modifie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">mutate</span><span class="p">(</span><span class="nx">individual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">gene</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">TOTAL_SQUARES</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">squareProperty</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">squareProperty</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_WIDTH</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">size</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">SQUARE_MAX_SIZE</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">red</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">green</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">blue</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">6</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">individual</span><span class="p">[</span><span class="nx">gene</span><span class="p">].</span><span class="nx">alpha</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">individual</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on verra deux dernières fonctions <em>techniques</em>:
<code>copy</code> et <code>renderIndividual</code> et on sera près à faire tourner
notre algorithme.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/22/les-algorithmes-genetiques-demystifies-36/'>Les algorithmes génétiques démystifiés 36</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/18/les-algorithmes-genetiques-demystifies-34/'>Les algorithmes génétiques démystifiés 34</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie/'>Les algorithmes génétiques démystifiés: Imagerie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmation fonctionnelle pour les développeurs Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/19/programmation-fonctionnelle-pour-les-developpeurs-ruby/"/>
    <updated>2013-10-19T16:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/19/programmation-fonctionnelle-pour-les-developpeurs-ruby</id>
    <content type="html"><![CDATA[<p>Si vous êtes comme moi, la programmation fonctionnelle vous intéresse,
mais vous n&#8217;y comprenez pas grand chose…
Je vous encourage à regarder cette conférence de Jessica Kerr:
<a href="http://vimeo.com/75181845">Functional Principles for Ruby Developers</a>.</p>

<!-- more -->


<p>Elle y développe une analogie que j&#8217;ai beaucoup aimé: C&#8217;est Watson qui
demande
à Sherlock Holmes «Vous saviez qu&#8217;on a découvert une nouvelle planète dans
le système solaire ?». Et Holmes de répondre un truc du genre «Non. Pourtant
vous venez de me le dire, mais je l&#8217;ai déjà oublié.»</p>

<p>Dans cette histoire, Holmes ne veut pas remplir son cerveau avec ce genre
d&#8217;information qui lui est inutile pour résoudre ses enquêtes. Il se contente
de savoir ce dont il a besoin.</p>

<p>Jessica Kerr nous explique que c&#8217;est cela la programmation fonctionnelle:
se contenter de faire seulement ce qu&#8217;on a à faire, sans toucher au monde
extérieur. Et elle nous explique comment le faire en Ruby.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/'>Apprendre Ruby en faisant des maths</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/'>Ruby 2.0: Tableaux littéraux pour les symboles</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/'>Ruby 2.0: Les arguments nommés</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 34]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/18/les-algorithmes-genetiques-demystifies-34/"/>
    <updated>2013-10-18T20:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/18/les-algorithmes-genetiques-demystifies-34</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir vu comment créer un individu qui représente une image,
on regarde aujourd&#8217;hui comment évaluer une image.</p>

<!-- more -->


<p>N&#8217;étant pas familier du traitement d&#8217;image et de tout ce qui s&#8217;y rapporte,
j&#8217;avoue avoir eu un petit instant de panique quand je me suis demandé:
«Comment savoir, entre deux images, laquelle est <em>la plus proche</em> d&#8217;une image
de référence ?».</p>

<p>Et puis j&#8217;ai respiré un bon coup: après tout une image n&#8217;est rien d&#8217;autre
qu&#8217;une liste de données, on a qu&#8217;à faire au plus simple, c&#8217;est à dire
comparer chaque pixel. Y&#8217;avait vraiment pas de quoi paniquer ! Voilà donc
la fonction <code>quality</code> qui mesure la similitude entre une image d&#8217;origine
et une image candidate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">quality</span><span class="p">(</span><span class="nx">individual</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">imgOrigin</span> <span class="o">=</span> <span class="nx">ctxOrigin</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">IMAGE_WIDTH</span><span class="p">,</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pixelArrayOrigin</span> <span class="o">=</span> <span class="nx">imgOrigin</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">renderIndividual</span><span class="p">(</span><span class="nx">individual</span><span class="p">,</span> <span class="nx">ctxBuffer</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">imgBuffer</span> <span class="o">=</span> <span class="nx">ctxBuffer</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">IMAGE_WIDTH</span><span class="p">,</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pixelArrayCandidate</span> <span class="o">=</span> <span class="nx">imgBuffer</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">pixelArrayOrigin</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">score</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">pixelArrayOrigin</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">pixelArrayCandidate</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">score</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">pixelArrayOrigin</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">pixelArrayCandidate</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">score</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">pixelArrayOrigin</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">pixelArrayCandidate</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="o">/</span> <span class="nx">score</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est parti pour quelques explications. On récupère les pixels de
l&#8217;image d&#8217;origine (qui se trouve dans un canvas) dans la variable
<code>pixelArrayOrigin</code>:</p>

<pre><code>var imgOrigin = ctxOrigin.getImageData(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
var pixelArrayOrigin = imgOrigin.data;
</code></pre>

<p>Ensuite, on construit l&#8217;image candidate dans un canvas non-affiché. La
fonction <code>renderIndividual</code> sera détaillée plus tard:</p>

<pre><code>renderIndividual(individual, ctxBuffer);
</code></pre>

<p>On récupère les pixels de cette image candidate dans <code>pixelArrayCandidate</code>:</p>

<pre><code>var imgBuffer = ctxBuffer.getImageData(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
var pixelArrayCandidate = imgBuffer.data;
</code></pre>

<p>Maintenant on vérifie les pixels un à un. Un pixel est représenté par quatre
nombres, respectivement rouge, vert, bleu et alpha. Le score augmente de la
différence entre les composantes rouges, vertes et bleues:</p>

<pre><code>for (var i = 0, n = pixelArrayOrigin.length; i &lt; n; i += 4) {
  score += Math.abs(pixelArrayOrigin[i] - pixelArrayCandidate[i]);
  score += Math.abs(pixelArrayOrigin[i+1] - pixelArrayCandidate[i+1]);
  score += Math.abs(pixelArrayOrigin[i+2] - pixelArrayCandidate[i+2]);
}
</code></pre>

<p>Finalement on retourne l&#8217;inverse pour avoir un score compris entre
0 et 1:</p>

<pre><code>return 1 / score;
</code></pre>

<p>La prochaine fois, on met l&#8217;algorithme de <em>Hill-Climbing</em> en place.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/22/les-algorithmes-genetiques-demystifies-36/'>Les algorithmes génétiques démystifiés 36</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/20/les-algorithmes-genetiques-demystifies-35/'>Les algorithmes génétiques démystifiés 35</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie/'>Les algorithmes génétiques démystifiés: Imagerie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0: Tableaux littéraux pour les symboles]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/"/>
    <updated>2013-10-17T10:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La version 2.0 de Ruby gagne une nouvelle syntaxe pour la définition
de tableaux de symboles : <code>%i</code>.</p>

<p>On a maintenant le choix pour définir un tableau de symboles entre les deux
syntaxes suivantes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="ss">:voici</span><span class="p">,</span> <span class="ss">:plusieurs</span><span class="p">,</span> <span class="ss">:symboles</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">i</span><span class="p">(</span> <span class="n">voici</span> <span class="n">plusieurs</span> <span class="n">symboles</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>On y gagne en clarté mais aussi, le langage y gagne en cohérence. On est
habitué à utiliser <code>%w</code> pour les tableaux de chaînes de caractères, il n&#8217;y
avait pas de raison pour qu&#8217;on ne puisse pas le faire avec des symboles.
J&#8217;aime beaucoup cette nouvelle possibilité, même si je ne vois pas
le rapport entre la lettre <code>i</code> et les symboles…</p>

<p>Il existe aussi une version qui permet l&#8217;interpolation, c&#8217;est <code>%I</code> (avec
un i majuscule). Vous pouvez voir la différence entre <code>%i</code> et <code>%I</code> dans la
session suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="o">%</span><span class="n">i</span><span class="p">(</span> <span class="c1">#{&quot;bé&quot; + &quot;po&quot;} azerty )</span>
</span><span class='line'><span class="go">[</span>
</span><span class='line'><span class="go">    [0] :&quot;\#{\&quot;bé\&quot;&quot;,</span>
</span><span class='line'><span class="go">    [1] :+,</span>
</span><span class='line'><span class="go">    [2] :&quot;\&quot;po\&quot;}&quot;,</span>
</span><span class='line'><span class="go">    [3] :azerty</span>
</span><span class='line'><span class="go">]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="o">%</span><span class="n">I</span><span class="p">(</span> <span class="c1">#{&quot;bé&quot; + &quot;po&quot;} azerty )</span>
</span><span class='line'><span class="go">[</span>
</span><span class='line'><span class="go">    [0] :bépo,</span>
</span><span class='line'><span class="go">    [1] :azerty</span>
</span><span class='line'><span class="go">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/'>Ruby 2.0: Les arguments nommés</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode/'>Ruby 2.0: Raffinement de méthode</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/'>Apprendre Ruby en faisant des maths</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: Imagerie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie/"/>
    <updated>2013-10-16T16:31:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Bonjour, aujourd&#8217;hui on commence une nouvelle étude sur les algorithmes
génétiques avec un problème sympa : recréer une photo à partir de plusieurs
carrés de tailles et de couleurs différentes. Au début, l&#8217;image est
générée au hasard:</p>

<p><img src="http://lkdjiin.github.io/images/Capture-13.jpg"></p>

<p>Puis, petit à petit, elle converge vers la photo d&#8217;origine:</p>

<p><img src="http://lkdjiin.github.io/images/Capture-11.jpg"></p>

<!-- more -->


<p>Avant tout, il faut réfléchir à deux choses: la représentation des individus
et l&#8217;évaluation. De plus, comme je l&#8217;ai déjà mentionné, Javascript n&#8217;est pas
mon fort. Alors plutôt que d&#8217;écrire tout de suite un algorithme génétique, je
vais d&#8217;abord essayer de mettre en place un algorithme de <em>Hill Climbing</em>.</p>

<h2>Les individus</h2>

<p>Chaque <em>solution/individu</em> sera composé de quelques centaines de petits carrés.
Chaque carré pourra être personnalisé grâce à:</p>

<ul>
<li>sa position x</li>
<li>sa position y</li>
<li>sa taille</li>
<li>sa couleur (rouge, vert et bleu)</li>
<li>sa transparence</li>
</ul>


<p>Voici comment je traduis ça en Javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">makeIndividual</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">individual</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">TOTAL_SQUARES</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">individual</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">x</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_WIDTH</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">y</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_HEIGHT</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">size</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">IMAGE_WIDTH</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">red</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">green</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">blue</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">alpha</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">individual</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Techniquement, un individu est donc une liste de gènes, et un gène est un
objet avec les propriétés x, y, size, red, green, blue et alpha.</p>

<p>La prochaine fois on verra comment on peut évaluer nos images.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/22/les-algorithmes-genetiques-demystifies-36/'>Les algorithmes génétiques démystifiés 36</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/20/les-algorithmes-genetiques-demystifies-35/'>Les algorithmes génétiques démystifiés 35</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/18/les-algorithmes-genetiques-demystifies-34/'>Les algorithmes génétiques démystifiés 34</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un article par jour pendant un an: Bilan des 100 jours]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/15/un-article-par-jour-pendant-un-an-bilan-des-100-jours/"/>
    <updated>2013-10-15T11:37:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/15/un-article-par-jour-pendant-un-an-bilan-des-100-jours</id>
    <content type="html"><![CDATA[<p>Comme certains d&#8217;entre vous le savent, j&#8217;écris un article par jour pendant
un an. Et aujourd&#8217;hui c&#8217;est le 100ème jour !
Déjà 100 articles, ou bien seulement 100 articles, ça dépend du moment.
Quoiqu&#8217;il en soit, c&#8217;est un jour parfait pour un petit bilan.</p>

<!-- more -->


<p>Pendant cette période de 100 jours, 3780 visiteurs uniques
ont vus plus de 20.000 pages. Ce sont des chiffres extraordinaires pour
moi: en débutant cette aventure je ne comptais absolument pas être lu,
j&#8217;osais à peine envisager 3 ou 4 visites par jour. Bref, je suis
un bloggeur heureux !</p>

<p>Pour ce qui est des statistiques navigateur/OS, voici le top 3 dans
chaque catégorie, au cas ou quelqu&#8217;un serait intéressé:</p>

<pre><code>Chrome    52%
Firefox   36%
Safari     8%

Windows   39%
Linux     26%
Macintosh 23%
</code></pre>

<p>Et maintenant le top/flop. L&#8217;article le plus lu est
<a href="http://lkdjiin.github.io/blog/2013/08/28/les-algorithmes-genetiques-demystifies/">les algorithmes génétiques démystifiés</a>,
avec 984 vues. Je ne pensais vraiment pas intéresser beaucoup de monde avec
ça. Ce fut une très agréable surprise, étant donné que ce sujet me tient
particulièrement à coeur.</p>

<p>Quand à l&#8217;article le moins lu c&#8217;est <a href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/">Implémenter un langage sur Parrot: la grammaire</a>
avec 22 petites vues. C&#8217;est d&#8217;ailleurs toute la série sur Parrot qui a fait
flop. En relisant ces articles, je m&#8217;aperçois qu&#8217;ils sont mal conçus et mal
écrits. J&#8217;essaierais donc de faire mieux pour les 260 et quelques jours qui
viennent ;&ndash;)</p>

<p>Merci de me lire,<br/>
À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/09/un-mois-darticles-quotidiens-le-bilan/'>Un mois d&#8217;articles quotidiens: le bilan</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/08/nouveau-defi-un-article-par-jour-pendant-un-an/'>Nouveau défi: un article par jour pendant un an</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/12/elle-a-ecrit-180-sites-web-en-180-jours/'>Elle a écrit 180 sites web en 180 jours</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0: Les arguments nommés]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/"/>
    <updated>2013-10-14T19:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Les arguments nommés étaient absents de Ruby jusqu&#8217;à sa version 2.0, curieux
pour un langage qui fait tellement penser à Smalltalk.</p>

<!-- more -->


<p>Il était bien sûr possible de les <em>simuler</em> en utilisant un hash, un peu
comme ce qu&#8217;on fait en Javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">person</span><span class="p">(</span><span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;toto&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">99</span><span class="p">}</span>
</span><span class='line'>  <span class="n">opts</span> <span class="o">=</span> <span class="n">defaults</span><span class="o">.</span><span class="n">merge</span> <span class="n">opts</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:age</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais bof. Ça ressemble à tout sauf à du Ruby. C&#8217;est un <em>hack</em>, un truc, une
astuce, tout ce qu&#8217;on veut mais ça ne s&#8217;intègre pas au langage.
Voici la même méthode, avec cette fois-ci des arguments nommés:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">person</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;toto&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">99</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">age</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici comment différentes manières d&#8217;appeler cette méthode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">person</span>
</span><span class='line'><span class="n">person</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;oscar&quot;</span>
</span><span class='line'><span class="n">person</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">18</span>
</span><span class='line'><span class="n">person</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;oscar&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">18</span>
</span><span class='line'><span class="n">person</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;oscar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, ça fonctionne dans tous les sens. Par contre, pas question d&#8217;oublier
le nom de l&#8217;argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">person &quot;oscar&quot;, 18</span>
</span><span class='line'><span class="go">ArgumentError: wrong number of arguments (2 for 0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut aussi mélanger arguments normaux et nommés, à condition que les
arguments nommés viennent après. Le code suivant est valide:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">person</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">99</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">age</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="s2">&quot;oscar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais pas celui-ci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">person</span><span class="p">(</span><span class="ss">age</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">SyntaxError: (irb):1: syntax error, unexpected tIDENTIFIER</span>
</span><span class='line'><span class="go">def person(age: 99, name)</span>
</span><span class='line'><span class="go">                        ^</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/'>Ruby 2.0: Tableaux littéraux pour les symboles</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode/'>Ruby 2.0: Raffinement de méthode</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/'>Apprendre Ruby en faisant des maths</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Créez des présentations avec Vimdeck]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/"/>
    <updated>2013-10-13T13:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck</id>
    <content type="html"><![CDATA[<p>Vimdeck est un programme écrit en Ruby qui transforme un fichier texte au
format Markdown en plusieurs <em>slides</em> pour effectuer une présentation avec
l&#8217;éditeur de texte Vim !</p>

<!-- more -->


<h2>Installation</h2>

<p>Installez tout d&#8217;abord le plugin Vim <a href="https://github.com/vim-scripts/SyntaxRange">SyntaxRange</a>.</p>

<p>Ensuite, installez le programme de manière classique:</p>

<pre><code>gem install vimdeck
</code></pre>

<p>Note: J&#8217;ai eu un problème de dépendance (sur Debian) et il a fallu installer la
librairie systême <code>libmagickwand-dev</code> pour que tout fonctionne bien.</p>

<h2>Utilisation</h2>

<p>Maintenant on écrit notre présentation au format Markdown, par exemple:</p>

<pre><code># Premier slide

- Premier point
- Second point
- Troisième point


# Deuxième slide

- Premier
{~- Deuxième point~}
{~- Troisième point~}


# Troisième et dernier slide

```ruby
class Foo
  def bar
    puts "Hello Vimdeck!"
  end
end
```
</code></pre>

<p>Et on lance la présentation ainsi:</p>

<pre><code>vimdeck mon_fichier.md
</code></pre>

<p>Ensuite, on change de slide avec les touches PageUp/PageDown.</p>

<p>Vous pouvez voir des captures d&#8217;écrans sur le <a href="https://github.com/tybenz/vimdeck">site du projet</a>.</p>

<h2>Conclusion</h2>

<p>Bon, le projet est un peu jeune et pas mal buggé, mais l&#8217;idée est vraiment
intéressante. C&#8217;est totalement improbable, complêtement loufoque, inutilisable
avec des graphiques, donc
rigoureusement indispensable, ne serait-ce que pour frimer devant les
collègues: «Regardez comment je fais une présentation en 3 minutes avec mon
éditeur de texte…».</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/'>Apprendre Ruby en faisant des maths</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/'>Ruby 2.0: Tableaux littéraux pour les symboles</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/'>Ruby 2.0: Les arguments nommés</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elle a écrit 180 sites web en 180 jours]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/12/elle-a-ecrit-180-sites-web-en-180-jours/"/>
    <updated>2013-10-12T21:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/12/elle-a-ecrit-180-sites-web-en-180-jours</id>
    <content type="html"><![CDATA[<p>Jennifer Dewalt a créé un site web par jour pendant 180 jours, pour
apprendre à coder.</p>

<!-- more -->


<p>La la liste des 180 sites se trouve ici : <a href="http://jenniferdewalt.com/">jenniferdewalt.com</a>.
Son article relatant son aventure, au terme des 180 jours,
peut se <a href="http://blog.jenniferdewalt.com/post/62998082815/after-180-websites-im-ready-to-start-the-rest-of-my">lire ici</a>.</p>

<p>J&#8217;aime beaucoup cette démarche <em>à la dure</em> qui me rappele, toute proportions
gardées, ce que j&#8217;ai entrepris avec ce blog. J&#8217;ai particulierement apprécié
sa phrase «<em>After 180 Websites, I’m Ready to Start the Rest of My Life as
a Coder</em>», en français : «Après 180 sites web, je suis prête à passer le
reste de ma vie comme développeur». Je dis cela sans ironie, je trouve
très rassurant les certitudes de la jeunesse et lui souhaite de réussir.</p>

<p>N&#8217;hésitez pas à aller faire un petit tour sur son blog, c&#8217;est très
intéressant.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/15/un-article-par-jour-pendant-un-an-bilan-des-100-jours/'>Un article par jour pendant un an: Bilan des 100 jours</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/09/un-mois-darticles-quotidiens-le-bilan/'>Un mois d&#8217;articles quotidiens: le bilan</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/08/nouveau-defi-un-article-par-jour-pendant-un-an/'>Nouveau défi: un article par jour pendant un an</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 32]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/11/les-algorithmes-genetiques-demystifies-32/"/>
    <updated>2013-10-11T20:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/11/les-algorithmes-genetiques-demystifies-32</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je vais arrêter d&#8217;écrire sur le problème des 8 dames, temporairement. On a
réussi à développer un programme qui permet de trouver des solutions pour
un échiquier de 50 x 50 cases en un temps acceptable. Voici un joli
graphique avec en x, la taille d&#8217;un coté de l&#8217;échiquier et en y, le nombre
de secondes requis pour obtenir une solution:</p>

<p><img src="http://lkdjiin.github.io/images/secondes-pour-tailles.png"></p>

<!-- more -->


<p>26 minutes pour un échiquier de 50 x 50 cases, je trouve que ça n&#8217;est pas
si mal. Par contre on voit bien comme le temps augmente de manière
exponentielle ! J&#8217;aimerais parvenir à trouver des solutions pour un
échiquier de 100 x 100 cases (voir même 1000 x 1000) en un temps raisonable,
disons quelques heures. Pour ça, il faudra améliorer le programme. Peut-être
explorer d&#8217;autres méthodes de sélection et/ou croisement ; utiliser les
multiples coeurs de nos machines ; peut-être changer de langage (je pense
en ce moment à Elixir ou Scala, mais je suis ouvert aux suggestions).
Enfin, tout ça sera pour plus tard.</p>

<p>En attendant, je voudrais aborder un problème d&#8217;imagerie: un algorithme
génétique qui copierait au mieux une photo à partir de petits carrés de
couleurs et de tailles quelconques. Je compte le faire en Javascript
mais je dois vous prévenir que Javascript et moi, ça fait deux.
Je vais commencer à regarder ça ce week-end, et je compte sur vous pour
pointer les erreurs et les maladresses de mon futur code…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/'>Les algorithmes génétiques démystifiés: un point sur les performances</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale/'>Les algorithmes génétiques démystifiés 30: La population initiale</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29/'>Les algorithmes génétiques démystifiés 29</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0: Raffinement de méthode]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode/"/>
    <updated>2013-10-10T18:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ruby possède un truc cool : les classes ouvertes. Lorsque j&#8217;écris :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je ne suis pas en train de <em>définir</em> une nouvelle classe <code>String</code>, je suis
simplement en train <em>d&#8217;ouvrir</em> la classe <code>String</code> existante pour lui ajouter
une nouvelle méthode.</p>

<!-- more -->


<p>C&#8217;est très utile et très cohérent avec l&#8217;esprit orienté objet de Ruby.
Mettons que j&#8217;ai besoin de cacher les voyelles d&#8217;une phrase pour un
hypothétique jeu de lettre, je peux écrire un module avec une collection
de méthodes utilitaires, par exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Util</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hide_vowels</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string</span><span class="o">.</span><span class="n">tr</span><span class="p">(</span><span class="s1">&#39;aeiouy&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Util</span><span class="o">.</span><span class="n">hide_vowels</span><span class="p">(</span><span class="s2">&quot;bonjour xavier&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui donne:</p>

<pre><code>b*nj**r x*v**r
</code></pre>

<p>Mais on peut aussi tirer parti des classes ouvertes de cette manière:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hide_vowels</span>
</span><span class='line'>    <span class="n">tr</span><span class="p">(</span><span class="s1">&#39;aeiouy&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;bonjour xavier&quot;</span><span class="o">.</span><span class="n">hide_vowels</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est plus élégant, à la fois dans la définition et dans l&#8217;utilisation.
Seulement ce genre de code peut poser problème quand il est utilisé dans
des bibliothèques, puisque une fois chargée, la nouvelle méthode est visible
dans tout le code client. Parfois c&#8217;est ce qu&#8217;on veut, parfois ce ne devrait
être qu&#8217;une méthode utilitaire du code tiers.</p>

<p>Ruby 2.0 propose le raffinement de méthode (<em>method refinement</em>) pour
pallier à ce problème. L&#8217;idée est de limiter la portée des méthodes ajoutées
ou modifiées avec le mécanisme des classes ouvertes. Voici un petit exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">CoolString</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hide_vowels</span>
</span><span class='line'>      <span class="n">tr</span><span class="p">(</span><span class="s1">&#39;aeiouy&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># puts &quot;abc&quot;.hide_vowels</span>
</span><span class='line'>
</span><span class='line'><span class="n">using</span> <span class="no">CoolString</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">hide_vowels</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne en commentaire provoquerait une erreur (NoMethodError). Pour pouvoir
utiliser la méthode <code>hide_vowels</code> il faut explicitement écrire
<code>using CoolString</code>. La portée de <code>hide_vowels</code> s&#8217;étend du moment où on utilise
la méthode <code>using</code> jusqu&#8217;à la fin du fichier.</p>

<p>Le raffinement de méthode est expérimental dans Ruby 2.0 et devrait être
définitivement adopté dans Ruby 2.1. Pour aller plus loin, on peut se
reporter à la <a href="http://www.ruby-doc.org/core-2.0.0/doc/syntax/refinements_rdoc.html">documentation</a>.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/'>Ruby 2.0: Tableaux littéraux pour les symboles</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/'>Ruby 2.0: Les arguments nommés</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/'>Apprendre Ruby en faisant des maths</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: un point sur les performances]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/"/>
    <updated>2013-10-09T11:57:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui j&#8217;ai peu de temps à consacrer à ce blog. Je voudrais faire
un petit point sur les performances de différentes versions de
l&#8217;interpréteur Ruby.</p>

<!-- more -->


<p>Utiliser un interpréteur plus rapide est le moyen le plus simple de
booster les performances. J&#8217;ai calculé le temps que prends une génération
avec diverses tailles d&#8217;échiquier (16, 30 et 40) et trois interpréteurs
différents: MRI 1.9.3, MRI 2.0.0 et Rubinius 2.0.0.
Voici les résultats:</p>

<pre><code>Temps en seconde pour une génération
====================================

                 16x16  30x30  40x40

MRI 1.9.3        0.092  0.24   0.40
MRI 2.0.0        0.081  0.20   0.34
Rubinius 2.0.0   0.075  0.15   0.24
</code></pre>

<p>C&#8217;est sans appel et sans surprise. On peut quand même noter que plus
la taille de l&#8217;échiquier augmente, plus Rubinius est proportionnelement rapide.
En gros 22% plus rapide sur un échiquier de 16x16 cases et 66% plus rapide sur
un échiquier de 40x40 cases.</p>

<p>Conclusion évidente: choisissez bien vos outils ;&ndash;)</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale/'>Les algorithmes génétiques démystifiés 30: La population initiale</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29/'>Les algorithmes génétiques démystifiés 29</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28/'>Les algorithmes génétiques démystifiés 28</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 30: La population initiale]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale/"/>
    <updated>2013-10-08T21:30:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui je voudrais parler un peu de la population initiale dans
l&#8217;algorithme génétique du problème des 8 dames et en général.</p>

<!-- more -->


<h2>La population initiale</h2>

<p>Dans le paradoxe du singe savant, les chromosomes de la population initiale,
c&#8217;est à dire les phrases, étaient générés complètement au hasard. Ce n&#8217;est
pas le cas dans le programme qu&#8217;on a développé pour solutionner le problème
des 8 dames…</p>

<p>Les dames ne sont pas placées au hasard sur l&#8217;échiquier, mais sont
placées une seule par rangée. Cela a pour effet d&#8217;<em>orienter</em> la population
initiale. Les chromosomes de la population initiale appartiennent à un
sous-ensemble des chromosomes possibles. Et comme la fonction de mutation
s&#8217;applique elle aussi sur une rangée on ne peut jamais sortir de ce
sous-ensemble.</p>

<p>On pourrait même <em>orienter</em> encore plus la population initiale en faisant
en sorte que les dames ne puissent se trouver ni sur une même rangée, ni
sur une même colonne. Pour cela, on pourrait changer la méthode
<code>initialize</code> de la classe <code>Individual</code> ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="c1"># Comme précédement…</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">chromosome_size</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors est-ce-que c&#8217;est bien d&#8217;orienter la population initiale ? Ça dépend.
Le truc c&#8217;est qu&#8217;on ne possède pas toujours une totale compréhension du
problème et de l&#8217;ensemble des solutions potentielles. Et bien souvent,
orienter la population initiale d&#8217;une manière que l&#8217;on <em>croit</em> bonne a pour
effet d&#8217;emmener le programme dans un extremum local d&#8217;où il peut être
long de sortir. Il est difficile d&#8217;obtenir la preuve qu&#8217;on puisse se passer
de certains gènes…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/'>Les algorithmes génétiques démystifiés: un point sur les performances</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29/'>Les algorithmes génétiques démystifiés 29</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28/'>Les algorithmes génétiques démystifiés 28</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 29]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29/"/>
    <updated>2013-10-07T18:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on voit comment sortir de l&#8217;extremum local qui bloque notre
algorithme sur le problème des 8 dames.</p>

<!-- more -->


<p>Pour rappel, on essaie de faire fonctionner l&#8217;algorithme sur des échiquiers
de plus grande taille: 16, 20 ou 30 cases.
On a vu dernièrement que le faible taux de mutation (1/<em>n</em>, où <em>n</em> est la
taille de la population) qu&#8217;on emploie à du bon et du mauvais.
Il est bon puisqu&#8217;en exploitant les chromosomes, il mène assez vite à une
<em>presque</em> solution. Et il est mauvais puisque arrivé à cette <em>presque</em> solution,
qui est un extremum local, il ne permet pas l&#8217;exploration d&#8217;autres chromosomes.</p>

<p>À priori, on peut penser qu&#8217;il suffit d&#8217;augmenter le taux de mutation.
Effectivement, on obtiendra souvent de très bons résultats entre 1 et
3%. Mais souvent ne veut pas dire toujours et on restera régulièrement
coincé.</p>

<p>Une solution envisageable est d&#8217;avoir un taux de mutation variable. 1/<em>n</em>
au début, puis quand on sent arriver l&#8217;extremum local on augmente le taux
pour permettre à l&#8217;exploration de reprendre. Enfin, quand on pense être
sorti de l&#8217;extremum local, on repasse au taux original.</p>

<p>Voici la nouvelle classe <code>Mutator</code>, j&#8217;ai mis le code supplémentaire
entre <code># ---</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mutator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="c1"># ---</span>
</span><span class='line'>    <span class="vi">@original</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="c1"># ---</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span>
</span><span class='line'>        <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">chromosome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ---</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increase_mutation_rate</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">+=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">original_mutation_rate</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="vi">@original</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ---</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le nouveau membre <code>@original</code> et les deux nouvelles méthodes permettent
d&#8217;augmenter le taux de mutation (de 10% carrément) et de le repasser
à l&#8217;original.</p>

<p>Les autres modifications du code sont en rapport avec ceci. Voici le code
complet:</p>

<figure class='code'><figcaption><span>8_queens.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display</span>
</span><span class='line'>    <span class="vi">@chromosome</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">queen_position</span><span class="o">|</span>
</span><span class='line'>      <span class="n">row</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="vi">@chromosome</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class='line'>        <span class="n">row</span> <span class="o">+=</span> <span class="p">(</span><span class="n">cell</span> <span class="o">==</span> <span class="n">queen_position</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;Q&quot;</span> <span class="p">:</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">row</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Gene</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">rand</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@board_size</span> <span class="o">=</span> <span class="n">board_size</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">fitness</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">board</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@board_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">row1</span><span class="o">|</span>
</span><span class='line'>      <span class="n">gene1</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row1</span><span class="o">]</span>
</span><span class='line'>      <span class="p">(</span><span class="n">row1</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@board_size</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row2</span><span class="o">|</span>
</span><span class='line'>        <span class="n">gene2</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row2</span><span class="o">]</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">gene1</span> <span class="o">==</span> <span class="n">gene2</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">row2</span> <span class="o">-</span> <span class="n">row1</span> <span class="o">==</span> <span class="p">(</span><span class="n">gene1</span> <span class="o">-</span> <span class="n">gene2</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fitness</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GeneticAlgorithm</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">board_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@generations</span> <span class="o">=</span> <span class="n">generations</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>    <span class="vi">@board_size</span> <span class="o">=</span> <span class="n">board_size</span>
</span><span class='line'>    <span class="vi">@mutation_rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@crossover</span> <span class="o">=</span> <span class="no">Crossover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="c1"># ---</span>
</span><span class='line'>    <span class="n">old_best</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">same_best</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="c1"># ---</span>
</span><span class='line'>    <span class="vi">@generations</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Evaluator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@board_size</span><span class="p">,</span> <span class="vi">@population</span><span class="p">)</span><span class="o">.</span><span class="n">evaluate</span>
</span><span class='line'>      <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">best</span>
</span><span class='line'>      <span class="nb">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">best</span><span class="o">.</span><span class="n">score</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>        <span class="n">best</span><span class="o">.</span><span class="n">display</span>
</span><span class='line'>        <span class="nb">exit</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1"># ---</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">best</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="n">old_best</span>
</span><span class='line'>        <span class="n">same_best</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">same_best</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="vi">@crossover</span><span class="o">.</span><span class="n">original_mutation_rate</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">old_best</span> <span class="o">=</span> <span class="n">best</span><span class="o">.</span><span class="n">score</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">same_best</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'>        <span class="n">same_best</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Increase mutation rate to </span><span class="si">#{</span><span class="vi">@crossover</span><span class="o">.</span><span class="n">increase_mutation_rate</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1"># ---</span>
</span><span class='line'>      <span class="n">next_generation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">best</span><span class="o">.</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>    <span class="n">pool</span> <span class="o">=</span> <span class="no">MatingPool</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@population</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="vi">@crossover</span><span class="o">.</span><span class="n">two_point</span><span class="p">(</span><span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">,</span> <span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MatingPool</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">integer_part</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">real_part</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">-</span> <span class="n">integer_part</span>
</span><span class='line'>      <span class="n">integer_part</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">individual</span><span class="o">.</span><span class="n">dup</span> <span class="p">}</span>
</span><span class='line'>      <span class="vi">@mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">individual</span><span class="o">.</span><span class="n">dup</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="n">real_part</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="vi">@mating_pool</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random</span>
</span><span class='line'>    <span class="vi">@mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Crossover</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@mutator</span> <span class="o">=</span> <span class="no">Mutator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@size</span><span class="p">,</span> <span class="vi">@rate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">two_point</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">assemble</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">,</span> <span class="n">two_cut_points</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="vi">@mutator</span><span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Individual</span><span class="o">.</span><span class="n">from_chromosome</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ---</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increase_mutation_rate</span>
</span><span class='line'>    <span class="vi">@mutator</span><span class="o">.</span><span class="n">increase_mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">original_mutation_rate</span>
</span><span class='line'>    <span class="vi">@mutator</span><span class="o">.</span><span class="n">original_mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ---</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">two_cut_points</span>
</span><span class='line'>    <span class="n">point1</span> <span class="o">=</span> <span class="n">cut_point</span>
</span><span class='line'>    <span class="n">point2</span> <span class="o">=</span> <span class="n">cut_point</span>
</span><span class='line'>    <span class="n">point1</span><span class="p">,</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">point2</span><span class="p">,</span> <span class="n">point1</span> <span class="k">if</span> <span class="n">point1</span> <span class="o">&gt;</span> <span class="n">point2</span>
</span><span class='line'>    <span class="o">[</span><span class="n">point1</span><span class="p">,</span> <span class="n">point2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cut_point</span>
</span><span class='line'>    <span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assemble</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point1</span><span class="p">,</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">points</span>
</span><span class='line'>    <span class="n">parent1</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point1</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">parent2</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="n">point1</span><span class="o">.</span><span class="n">.point2</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">parent1</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="n">point2</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mutator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="c1"># ---</span>
</span><span class='line'>    <span class="vi">@original</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="c1"># ---</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span>
</span><span class='line'>        <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">chromosome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ---</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increase_mutation_rate</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">+=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">original_mutation_rate</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="vi">@original</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ---</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">generations</span> <span class="o">=</span> <span class="mi">1_000</span>
</span><span class='line'><span class="n">board_size</span> <span class="o">=</span> <span class="mi">16</span>
</span><span class='line'><span class="n">population</span> <span class="o">=</span> <span class="no">Population</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">mutation</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">001</span>
</span><span class='line'><span class="no">GeneticAlgorithm</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">board_size</span><span class="p">,</span> <span class="n">mutation</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut voir dans la méthode <code>run</code> que l&#8217;augmentation du taux de mutation
se fait lorsque 5 générations successives on le même meilleur score.
Avec cette méthode, je génère une solution pour un échiquier de 16x16 cases
avec une moyenne de 311 générations.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28/'>Les algorithmes génétiques démystifiés 28</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/'>Les algorithmes génétiques démystifiés 27</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/'>Les algorithmes génétiques démystifiés: un point sur les performances</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le métier de copiste musical]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/06/le-metier-de-copiste-musical/"/>
    <updated>2013-10-06T20:58:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/06/le-metier-de-copiste-musical</id>
    <content type="html"><![CDATA[<p>Pour changer un peu de l&#8217;informatique et comme on est dimanche, je vous
présente aujourd&#8217;hui le métier de copiste musical.</p>

<!-- more -->


<p>En quelques mots, un copiste musical se charge de mettre votre musique sur
partition. Doté d&#8217;une très bonne oreille, il travaille généralement à partir
d&#8217;un enregistrement audio et transcrit votre musique pour vous. Le
produit fini est souvent dans un format imposé par la SACEM.
Il peut aussi travailler avec un imprimeur et/ou un graphiste pour
produire, par exemple un songbook de vos chansons.</p>

<p>Un copiste musical vous sera utile si vous avez besoin de mettre votre
musique sur partition mais que vous ne connaissez pas le solfège, ou encore
si vous n&#8217;en avez pas le temps, si vous voulez que ça aie l&#8217;air vraiment
pro, etc.
J&#8217;ai une amie dont c&#8217;est le métier, vous pouvez voir son site ici:
<a href="http://www.la-copiste-musicale.com/">la-copiste-musicale.com</a>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem Ruby: Tracez vos fonctions et données en 2D avec ctioga2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/05/gem-ruby-tracez-vos-fonctions-et-donnees-en-2d-avec-ctioga2/"/>
    <updated>2013-10-05T14:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/05/gem-ruby-tracez-vos-fonctions-et-donnees-en-2d-avec-ctioga2</id>
    <content type="html"><![CDATA[<p>Je cherchais un programme simple à prendre en main pour tracer des
ensembles de données depuis un fichier et des fonctions mathématiques
et je suis tombé sur la gem <a href="http://ctioga2.rubyforge.org/index.html">ctioga2</a>.</p>

<p><img src="http://lkdjiin.github.io/images/ctioga2.png"></p>

<p>Voici une introduction rapide à ce programme de traçage.</p>

<!-- more -->


<h2>Installation</h2>

<p>Il faut d&#8217;abord installer les outils nécessaires à la génération de document
pdf. Sur Linux c&#8217;est texlive, pour les autres OS voyez la
<a href="http://ctioga2.rubyforge.org/install.html">page d&#8217;installation</a> de ctioga2.
Ensuite on installe la gem comme d&#8217;habitude:</p>

<pre><code>gem install ctioga2
</code></pre>

<h2>Le fichier de données</h2>

<p>Un commentaire commence par un <code>#</code>. La première colonne est la coordonnée <code>x</code> et
la seconde colonne est la coordonnée <code>y</code>. Difficile de faire plus simple.
Un exemple:</p>

<pre><code># Fichier data.dat
# x y
0 -0.9
1 -0.4
2 -0.1
3 0.1
4 0.4
5 0.9
</code></pre>

<h2>Les scripts</h2>

<p>Voici un script minimal pour générer un fichier pdf:</p>

<pre><code># Fichier test.ct2
xpdf
plot data.dat
title 'Test'
</code></pre>

<p>Ce script va générer un fichier au format pdf à partir de notre fichier
de données, avec le titre <code>Test</code>. On le lance ainsi:</p>

<pre><code>ctioga2 -f test.ct2
</code></pre>

<p><strong>Note</strong> j&#8217;ai trouvé que seuls les caractères ascii fonctionnaient pour le
titre.</p>

<p>Si notre fichier de données possèdent plusieurs colonnes, on peut tracer
plusieurs courbes ainsi:</p>

<pre><code># Fichier test.ct2
xpdf
plot data.dat
plot data.dat@1:3
title 'Test'
</code></pre>

<p>Par défaut les <code>x</code> proviennent de la 1ère colonne et les <code>y</code> de la seconde.
La ligne <code>plot data.dat@1:3</code> trace une seconde courbe avec les <code>y</code> venant
de la 3ème colonne.</p>

<p>On peut aussi fournir des expressions Ruby:</p>

<pre><code>plot data2.dat@'$2:$3**2'
</code></pre>

<p>Ici la seconde colonne est utilisée pour les <code>x</code> et les <code>y</code> proviennent de
la troisième colonne, dont les données sont élevées à la puissance 2.</p>

<p>Plein d&#8217;autres choses sont possibles, comme produire du format png ou
svg, spécifier la portée des coordonnées x et y, utiliser le programme
en ligne de commande, etc.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/'>Apprendre Ruby en faisant des maths</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/19/programmation-fonctionnelle-pour-les-developpeurs-ruby/'>Programmation fonctionnelle pour les développeurs Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/'>Ruby 2.0: Tableaux littéraux pour les symboles</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 28]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28/"/>
    <updated>2013-10-04T18:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">dernier article</a> on a vu quelle forme concrete prenait un extremum
local dans nos algorithmes génétiques: les chromosomes tendent à devenir
identiques. On doit maintenant comprendre pourquoi on bloque sur un
extremum local dans ce problème particulier des 8 dames, alors qu&#8217;on avait
bien supprimé ce souci dans le <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">paradoxe du singe savant</a>.</p>

<!-- more -->


<p>On reprend <a href="http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/">le code</a> pour le paradoxe du singe savant et on modifie
la méthode <code>run</code> de la classe <code>GeneticAlgorithm</code> pour inspecter l&#8217;état des
chromosomes une fois la solution trouvée:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="vi">@generations</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Evaluator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@search_value</span><span class="p">,</span> <span class="vi">@population</span><span class="p">)</span><span class="o">.</span><span class="n">evaluate</span>
</span><span class='line'>      <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">best</span>
</span><span class='line'>      <span class="c1"># display(generation, best)</span>
</span><span class='line'>      <span class="c1"># exit if best.score == @search_value.size</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">best</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>        <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">p</span> <span class="n">i</span><span class="o">.</span><span class="n">chromosome</span><span class="p">}</span>
</span><span class='line'>        <span class="nb">exit</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">next_generation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>En se servant du <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">petit script d&#8217;analyse</a> du dernier article, vous vous
apercevrez que pratiquement chaque chromosome est unique. Pourquoi cela
fonctionne ici et pas là ?</p>

<p>Lorsque, dans le paradoxe du singe savant, on mute une phrase, chaque
mutation a une chance réelle d&#8217;améliorer la phrase. Bien sûr, pour améliorer
la phrase, il faut que toutes les conditions soit réunies. Il faut
premièrement, que le gène qui mute soit un «mauvais» gène et deuxièmement,
que le remplaçant soit un «bon» gène. Par contre, quelque soit le gène
mutant, les autres gènes n&#8217;entrent pas en ligne de compte. Dans la phrase,
chaque gène est totalement indépendant des autres. Voici un exemple pour
clarifier mon propos. On cherche la phrase &ldquo;bonjour&rdquo; et on a pour l&#8217;instant
ceci:</p>

<pre><code>xxxxxxx
</code></pre>

<p>Cette phrase n&#8217;a que des mauvais gènes, son score est de zéro. Si on mute
le premier gène en &ldquo;b&rdquo;:</p>

<pre><code>bxxxxxx
</code></pre>

<p>La phrase s&#8217;est améliorée, son score a augmenté. Vous remarquez que quelque soit
les autres gènes, bons ou mauvais, le score augmente de toutes manières de 1.
C&#8217;est ce que j&#8217;appelle des <em>gènes indépendants</em>.</p>

<p>Dans le problème des 8 dames, c&#8217;est très différent. Il me manque malheureusement
les outils mathématiques et/ou statistiques pour conceptualiser tout ça mais
je vais néanmoins essayer d&#8217;expliquer. Lorsqu&#8217;on déplace une dame sur le
plateau, c&#8217;est à dire quand un gène mute, son déplacement à un effet
potentiel sur les autres dames, elle peut entrer en conflit avec une ou
plusieurs. Donc dans le problème des 8 dames les gènes sont dépendants les
uns des autres. On ne peut pas en muter un sans affecter <em>potentiellement</em>
les autres. Ça signifie qu&#8217;il doit y avoir certains chromosomes pour lequels
la mutation d&#8217;un seul gène, quel qu&#8217;il soit (ou même de plusieurs en
augmentant la taille de l&#8217;échiquier), ne peut pas améliorer ce chromosome.
Comme le taux de mutation doit être petit pour permettre
<a href="http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation/">l&#8217;exploitation</a> des chromosomes, la probabilité qu&#8217;un chromosome voit
suffisament de ses gènes mutés comme il faut est infime, quasi-inexistante.</p>

<p>J&#8217;espère avoir été suffisament clair, n&#8217;hésitez pas à me demander des précisions
le cas échéant, je ferais de mon mieux pour y répondre. Je vous proposerais
une solution dans le prochain article.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29/'>Les algorithmes génétiques démystifiés 29</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/'>Les algorithmes génétiques démystifiés 27</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/'>Les algorithmes génétiques démystifiés: un point sur les performances</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: un exemple de valeur par défaut pour un Hash]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash/"/>
    <updated>2013-10-03T10:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>J&#8217;oublie régulièrement qu&#8217;un Hash peut renvoyer une valeur par défaut.
Du coup, je me retrouve souvent avec un code inutilement lourd.
Aujourd&#8217;hui je montre un exemple d&#8217;initialisation d&#8217;un Hash avec une
valeur par défaut et pourquoi c&#8217;est intéressant.</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">l&#8217;article d&#8217;hier</a>
(sur les algorithmes génétiques) je donnais un script de trois lignes sans
fournir d&#8217;explications, les voici.</p>

<h2>L&#8217;objectif</h2>

<p>J&#8217;ai un fichier (&ldquo;mots.txt&rdquo;) contenant un certain nombre de mots pouvant
apparaitre plusieurs fois:</p>

<pre><code>casserole
casserole
assiette
fourchette
casserole
fourchette
verre
...
</code></pre>

<p>Je veux connaitre le nombre d&#8217;occurence de chaque mot et produire une sortie
de ce genre:</p>

<pre><code>187 =&gt; casserole
 13 =&gt; assiette
  2 =&gt; fourchette
  1 =&gt; verre
</code></pre>

<h2>La classe Hash expliquée en 30 secondes</h2>

<p><em>Si vous savez déjà ce qu&#8217;est un hash, passez directement à la section
suivante.</em></p>

<p>Un <em>hash</em> peut contenir un nombre indeterminé de paires d&#8217;objets ; ces paires
étants organisées en clé/valeur. Ça marche comme un dictionnaire. Dans
d&#8217;autres langages, vous les connaissez peut-être sous le nom de dict, map,
tableau associatif, hashtable, etc. En Ruby, on peut créer un hash vide de
deux façons:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">autre_hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut créer et remplir un hash en même temps:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;clef1&quot;</span> <span class="o">=&gt;</span> <span class="mi">123</span><span class="p">,</span> <span class="s2">&quot;clef2&quot;</span> <span class="o">=&gt;</span> <span class="mi">456</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour connaitre la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;clef1&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour modifier la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;clef1&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour ajouter une paire clé/valeur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;nouvelle clef&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">123546789</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notez que les clés et leurs valeurs peuvent être de n&#8217;importe quel type.
On n&#8217;est pas limité à des chaînes de caractères et des nombres.</p>

<h2>Première version</h2>

<p>Mon premier jet a donné ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Version 1</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;mots.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="s2">&quot;%3d&quot;</span> <span class="o">%</span> <span class="n">value</span><span class="si">}</span><span class="s2"> =&gt; </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La première ligne crée un hash vide tandis que la dernière affiche
le contenu du hash, formaté comme je le veux. Au milieu, on itère sur
les lignes du fichier texte (les mots) pour remplir le hash,
c&#8217;est ça qui m&#8217;intéresse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="nb">hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est une construction classique à base de if/else. Si le hash possède
une clé identique à la ligne en cours (<code>if hash.key?(line)</code>) alors on
incrémente sa valeur associée. Sinon on crée cette clé, associée à la
valeur 1 puisque c&#8217;est la première fois qu&#8217;on rencontre ce mot
(<code>hash[line] = 1</code>).</p>

<h2>Deuxième version</h2>

<p>Ruby possède un opérateur ternaire (<em>ternary operator</em>) qui peut remplacer
un if/else simple comme le notre:</p>

<pre><code>condition ? oui : non
</code></pre>

<p>Si <code>condition</code> est vérifiée, on execute <code>oui</code>, sinon on execute <code>non</code>.
Dans notre cas on peut donc écrire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;mots.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="p">?</span> <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Certains adorent ce genre de construction, d&#8217;autres détestent. <em>À priori</em> je
n&#8217;ai rien contre, mais il faut avouer que dans ce cas précis c&#8217;est tout
simplement illisible.</p>

<h2>Troisième version</h2>

<p>Ruby possède un opérateur sympa qu&#8217;on peut parfois utiliser quand on veut
initialiser une variable si elle n&#8217;existe pas où la modifier si elle
existe: <code>||=</code>. Il faut savoir qu&#8217;un hash renvoie la valeur <code>nil</code> quand on
lui fournit une clé inexistante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;result.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">||=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>hash[line] ||= 0</code> va créer la clé et lui donner la valeur 0 si cette clé
n&#8217;existe pas, sinon la clé se voit affecter sa valeur. Ensuite la valeur de
la clé est incrémentée avec <code>hash[line] += 1</code>. Je trouve cela plus lisible
que la version avec l&#8217;opérateur ternaire, mais moins lisible que la version
avec le if/else, car cela fait appel à un «truc».</p>

<h2>Quatrième et dernière version</h2>

<p>Voici la <em>bonne</em> version (selon moi bien entendu). Il faut modifier
légerement la création du hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;result.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">line</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quand vous créer un hash, vous pouvez lui dire: «Je veux que tu renvois
telle valeur quand on te donne une clé inexistante». Dans notre cas, les
clés inexistantes renverront toujours zéro. Le tour est joué: une simple
incrémentation suffit maintenant, qu&#8217;une clé existe déjà ou non.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/'>Apprendre Ruby en faisant des maths</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/17/ruby-2-dot-0-tableaux-litteraux-pour-les-symboles/'>Ruby 2.0: Tableaux littéraux pour les symboles</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/'>Ruby 2.0: Les arguments nommés</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
