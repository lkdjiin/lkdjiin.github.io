<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-01-23T14:24:46+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mieux utiliser le programme gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem/"/>
    <updated>2015-01-23T11:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Le programme <code>gem</code> est bien connu des rubyistes, et ce pour une bonne raison:
il est au coeur de l&#8217;utilisation de Ruby. Si je veux par exemple profiter
de <a href="https://github.com/michaeldv/awesome_print">awesome_print</a>
dans ma console irb, je vais l&#8217;installer grâce à <code>gem</code>:</p>

<pre><code>$ gem install awesome_print
</code></pre>

<p>De même, avez-vous déjà vu une appli Rails se passer d&#8217;un Gemfile ?</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'><span class="n">ruby</span> <span class="s1">&#39;2.0.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>En fait, si vous avez fait seulement 3 jours de Ruby dans votre vie, vous savez
utiliser <code>gem</code>. Mais l&#8217;utilisez-vous à fond ? Moi, non. Enfin pas encore.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/diamond-1_512.png"></p>

<!-- more -->


<p>Depuis 5 ou 6 ans que j&#8217;utilise quotidiennement Ruby, je n&#8217;avais jamais
écrit <code>gem --help</code>. Jamais. Pas une seule fois.</p>

<pre><code>$ gem --help
RubyGems is a sophisticated package manager for Ruby.  This is a
...
  Further help:
    gem help commands            list all 'gem' commands
    gem help examples            show some examples of usage
    gem help gem_dependencies    gem dependencies file guide
    gem help platforms           gem platforms guide
    gem help &lt;COMMAND&gt;           show help on COMMAND
    gem server                   present a web page at
...
</code></pre>

<p>J&#8217;ai l&#8217;impression qu&#8217;il y a de quoi lire et de quoi faire. Voici donc un rapide
tour d&#8217;horizon des possibilités offertes par <code>gem</code>.</p>

<h2>gem help commands</h2>

<p>Commençons par regarder les différentes commandes:</p>

<pre><code>$ gem help commands
GEM commands are:

    build                  Build a gem from a gemspec
    cert                   Manage RubyGems certificates and signing settings
...
    wrappers               Re run generation of environment wrappers for gems.
    yank                   Remove a pushed gem from the index
...
Commands may be abbreviated, so long as they are unambiguous.
</code></pre>

<p>J&#8217;ai abrégé la sortie ci-dessus car il y a <strong>33 commandes</strong>, je n&#8217;avais vraiment
pas la moindre idée d&#8217;un nombre si important de commande. En voici la liste:</p>

<ul>
<li>build</li>
<li>cert</li>
<li>check</li>
<li>cleanup</li>
<li>contents</li>
<li>dependency</li>
<li>environment</li>
<li>fetch</li>
<li>generate_index</li>
<li>help</li>
<li>install</li>
<li>list</li>
<li>lock</li>
<li>mirror</li>
<li>open</li>
<li>outdated</li>
<li>owner</li>
<li>pristine</li>
<li>push</li>
<li>query</li>
<li>rdoc</li>
<li>regenerate_binstubs</li>
<li>search</li>
<li>server</li>
<li>sources</li>
<li>specification</li>
<li>stale</li>
<li>uninstall</li>
<li>unpack</li>
<li>update</li>
<li>which</li>
<li>wrappers</li>
<li>yank</li>
</ul>


<p>Personnellement j&#8217;ai déjà utilisé <code>build</code>, <code>cleanup</code>, <code>install</code>, <code>list</code>,
<code>push</code>, <code>uninstall</code>, <code>update</code> et c&#8217;est tout. 7 commandes sur 33, je suis loin du compte.</p>

<p>En regardant d&#8217;un peu plus près la sortie de <code>gem help commands</code>,
je m&#8217;aperçois qu&#8217;on peut abréger chaque commande:</p>

<pre><code>$ gem install my_gem
</code></pre>

<p>seras donc identique à:</p>

<pre><code>$ gem i my_gem
</code></pre>

<p>J&#8217;aime beaucoup cette idée.</p>

<h2>gem help a_command</h2>

<p>On peut obtenir de l&#8217;aide sur une commande spécifique.
Par exemple, avec <code>gem help install</code>, j&#8217;apprend que les options permettant de
ne pas générer la documentation:</p>

<pre><code>--no-rdoc
--no-ri
</code></pre>

<p>sont des options dépréciées. On peut maintenant utiliser:</p>

<pre><code>-N, --no-document
</code></pre>

<h2>gem help examples</h2>

<p>Évidemment cette commande affiche plusieurs exemples ;) Comme la manière
d&#8217;installer une version spécifique d&#8217;une gem:</p>

<pre><code>$ gem install rake --version 0.3.1
</code></pre>

<p>Je ne sais pas pourquoi je ne me souviens jamais de cette manière de faire,
pourtant évidente. Maintenant je n&#8217;aurais plus besoin de poser la question à
un moteur de recherche, je me contenterais de <code>gem help examples</code>.</p>

<h2>gem server</h2>

<p>Une petite curiosité : <code>gem server</code> fournit une page html, à consulter à
l&#8217;adresse <code>localhost:8808</code> avec la liste des gems installées. Ça semble un peu
gadget, d&#8217;autant plus qu&#8217;on peut avoir ces informations rapidement dans la
console avec la commande <code>list</code>:</p>

<pre><code>$ gem list

*** LOCAL GEMS ***

awesome_print (1.6.1)
bigdecimal (1.2.6)
bundler (1.7.9)
...
</code></pre>

<p>Et puis avec <code>gem help list</code>, j&#8217;ai trouvé comment obtenir des détails sur les
gems:</p>

<pre><code>$ gem list -d

*** LOCAL GEMS ***

awesome_print (1.6.1)
    Author: Michael Dvorkin
    Homepage: http://github.com/michaeldv/awesome_print
    License: MIT
    Installed at: /home/xavier/.rvm/gems/ruby-2.2.0

    Pretty print Ruby objects with proper indentation and colors

bigdecimal (1.2.6)
    Authors: Kenta Murata, Zachary Scott, Shigeo Kobayashi
    Homepage: http://www.ruby-lang.org
    Installed at (default): /home/xavier/.rvm/rubies/ruby-2.2.0/lib/ruby/gems/2.2.0

Arbitrary-precision decimal floating-point number library.

...
</code></pre>

<h2>Encore du boulot…</h2>

<p>Je n&#8217;ai pas fini de la lire, cette documentation. Elle semble prometteuse, et
je sens que je vais apprendre encore pas mal de choses.</p>

<p>J&#8217;espère vous avoir donné envie de regarder certaines commandes plus en détails.
Dans un monde idéal, il faudrait que je regarde les 33…</p>

<p>À bientôt.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem/'>Utiliser une version particulière d&#8217;une gem Ruby&hellip; dans une gem</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/'>Mettre à jour des gems ayants des références circulaires avec Bundle</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je ne vais pas terminer le jeu de la vie en Rust]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/"/>
    <updated>2015-01-22T17:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je ne vais pas terminer le jeu de la vie en Rust. Si vous voulez vraiment savoir
pourquoi, continuez à lire cet article. Sinon passez au suivant qui devrait
être plus intéressant :&ndash;)</p>

<!-- more -->


<pre><code>$ rustc --version
rustc 1.0.0-nightly (29bd9a06e 2015-01-20 23:03:09 +0000)
</code></pre>

<p>Après avoir procédé à la mise à jour de Rust, j&#8217;ai commencé à vouloir régler
les conflits :/ Parce que oui, même avec le petit bout de code que j&#8217;ai obtenu
jusqu&#8217;ici il y a déjà plusieurs conflits après le changement de version.  Pour
les plus simples, il suffit de renommer <code>uint</code> en <code>usize</code> et les suffixes <code>u</code>
sur les nombres entiers en <code>us</code>.</p>

<p>Par contre il y a d&#8217;autres erreurs qui me donnent mal à la tête d&#8217;avance, comme
par exemple:</p>

<pre><code>   Compiling game_of_life v0.0.1 (file:///home/xavier/code/rust/game_of_life)
src/main.rs:13:20: 13:39 error: unresolved name `std::rand::task_rng`
src/main.rs:13         let cell = std::rand::task_rng().gen_range(0us, 2us);
                                  ^~~~~~~~~~~~~~~~~~~
</code></pre>

<p>et aussi:</p>

<pre><code>src/main.rs:7:20: 7:23 error: the trait `core::fmt::String` is not implemented for the type `collections::vec::Vec&lt;usize&gt;`
src/main.rs:7     println!("{}", gen);
</code></pre>

<p>Comme j&#8217;ai plusieurs projets, grands et petits, en cours en ce moment, je
préfère me concentrer sur ceux qui ont une chance d&#8217;aboutir, et le jeu de la vie
en Rust ne fait clairement pas partie de mes priorités.</p>

<p>Je reviendrais (peut-être) à Rust après la version 1.0 finale, quand
le langage et la documentation seront suffisamment stables.</p>

<p>À bientôt.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2/'>Le jeu de la vie en Rust &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1/'>Le jeu de la vie en Rust &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/'>Le jeu de la vie en Haskell &ndash; partie 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To tap or not to tap en Ruby ? C'est la question]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/14/to-tap-or-not-to-tap-en-ruby-cest-la-question/"/>
    <updated>2015-01-14T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/14/to-tap-or-not-to-tap-en-ruby-cest-la-question</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Le monde des Rubyistes est divisé en deux: ceux qui utilisent <code>Object#tap</code> à tout
propos, et ceux qui ne connaissent pas cette méthode.
Dans l&#8217;article <a href="https://blog.engineyard.com/2015/five-ruby-methods-you-should-be-using">Five Ruby Methods You Should Be Using</a>
sur le blog d&#8217;Engine Yard, Ben Lewis nous parle justement, entre autre, de <code>Object#tap</code>
en expliquant très bien son mécanisme.</p>

<p>Mon article d&#8217;aujourd&#8217;hui sera lui aussi divisé en deux, d&#8217;abord une traduction en
français de l&#8217;article original de Ben Lewis sur <code>Object#tap</code>, puis une critique
(que j&#8217;espère constructive)
à la fois de l&#8217;article et de la méthode <code>tap</code></p>

<!-- more -->


<h3>Traduction de l&#8217;article original Object#tap</h3>

<p>Vous êtes vous déjà trouvé dans la situation d&#8217;appeler une méthode sur un
objet, et que la valeur de retour ne soit pas ce que vous vouliez ? Vous
espériez recevoir l&#8217;objet en question, mais à la place vous avez reçu une autre
valeur. Peut-être que vous vouliez ajouter une valeur arbitraire à un ensemble
de paramètres enregistrés dans un hash. Vous mettez à jour cette valeur avec
<code>Hash.[]</code>, mais vous recevez <code>'bar'</code> au lieu de l&#8217;objet hash <code>params</code>, donc vous
devez le renvoyer explicitement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>  <span class="n">params</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne qui contient <code>params</code> à la fin de cette méthode semble être de trop.</p>

<p>On peut arranger ça avec <code>Object#tap</code>.</p>

<p>C&#8217;est facile à utiliser. Appeler simplement <code>tap</code> sur l&#8217;objet, puis passer à
<code>tap</code> un bloc avec le code que vous voulez lancer sur cet objet. L&#8217;objet sera
donné au bloc, puis retourné. Voici comment nous pouvons l&#8217;utiliser pour
améliorer <code>update_params</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a des douzaines d&#8217;excellents endroits où utiliser <code>Object#tap</code>. Cherchez
simplement les méthodes appelées sur un objet qui ne renvoient pas l&#8217;objet
lui-même, alors que c&#8217;est ce que vous voudriez.</p>

<h3>Fin de la traduction et début de la critique</h3>

<p>L&#8217;article explique très bien la mécanique de <code>Object#tap</code>, sur ce point pas de souci.
Mais j&#8217;ai un problème avec l&#8217;exemple choisi, que je trouve peu adapté.
— <em>Pour être tout à fait honnête, j&#8217;ai plutôt un problème avec <code>tap</code>.</em> —
Si on rapproche les deux versions,
je trouve que la première est beaucoup plus facile à lire. Même si celle-ci
comporte une ligne de plus. Même si cette ligne supplémentaire ne fait <em>pas
très pro</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>  <span class="n">params</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans la première version, voici comment se passe la lecture dans ma tête:</p>

<p><em>«Dans l&#8217;objet <code>params</code> on enregistre la clé <code>:foo</code> avec la valeur <code>'bar'</code> puis on
renvoie <code>params</code>»</em></p>

<p>C&#8217;est cristallin, précis, simple, rapide.</p>

<p>Dans la seconde version, ça donne ceci (toujours dans ma tête, hein):</p>

<p><em>«On se branche sur l&#8217;objet <code>params</code>, donc il sera renvoyé à la fin de la méthode.
Dans le bloc on utilise <code>p</code>, qui est… ? … qui est <code>params</code>, ok, donc on enregistre
la clé <code>:foo</code> avec la valeur <code>'bar'</code> dans <code>params</code>.»</em></p>

<p>C&#8217;est loin d&#8217;être aussi fluide. Y a plein de parasites. Ce qui fait que dans ce
cas précis, je préfere très nettement la première version.</p>

<p>Au passage, je trouve que <code>p</code> est très mal choisi, ça me donne la fausse sensation que le
bloc va itérer sur chaque paramètre. Selon moi il n&#8217;y a aucune raison pour ne pas
réutiliser <code>params</code>, bien au contraire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">params</span><span class="o">|</span> <span class="n">params</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là où <code>tap</code> peut améliorer légèrement la lecture, c&#8217;est lorsqu&#8217;il y a beaucoup
d&#8217;opérations sur un objet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_an_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">item</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">item</span><span class="o">.</span><span class="n">do_something</span>
</span><span class='line'>  <span class="n">item</span><span class="o">.</span><span class="n">do_another_thing</span>
</span><span class='line'>  <span class="n">item</span><span class="o">.</span><span class="n">send_email_confirmation_to_admin</span>
</span><span class='line'>  <span class="n">item</span><span class="o">.</span><span class="n">do_something_else</span>
</span><span class='line'>  <span class="n">item</span><span class="o">.</span><span class="n">important_stuff</span>
</span><span class='line'>  <span class="n">item</span><span class="o">.</span><span class="n">less_important_stuff_to_do</span>
</span><span class='line'>  <span class="n">item</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On n&#8217;y comprend rien, hein ?  Avec <code>tap</code>, ça permet de voir rapidement que ce
code ne comporte rien d&#8217;autre que des opérations sur un <em>item</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_an_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Item</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">item</span><span class="o">.</span><span class="n">do_something</span>
</span><span class='line'>    <span class="n">item</span><span class="o">.</span><span class="n">do_another_thing</span>
</span><span class='line'>    <span class="n">item</span><span class="o">.</span><span class="n">send_email_confirmation_to_admin</span>
</span><span class='line'>    <span class="n">item</span><span class="o">.</span><span class="n">do_something_else</span>
</span><span class='line'>    <span class="n">item</span><span class="o">.</span><span class="n">important_stuff</span>
</span><span class='line'>    <span class="n">item</span><span class="o">.</span><span class="n">less_important_stuff_to_do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais encore une fois, l&#8217;amélioration apportée est légère. Et elle est
seulement visuelle. Je vois régulièrement ce genre de code et je ne l&#8217;aime pas.
<code>Item.new.tap</code>, par exemple, c&#8217;est la <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">loi de Démeter</a> qu&#8217;on foule du pied.
Et le code à l&#8217;intérieur du bloc reste une bouillie qu&#8217;on ferait mieux
de refactorer.</p>

<p>Bref, la méthode <code>Object#tap</code> me semble poser plus de problèmes qu&#8217;elle n&#8217;en
résout. Vous avez un avis sur le sujet ?</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem/'>Mieux utiliser le programme gem</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/27/ruby-2-dot-2-une-selection-des-nouvelles-methodes/'>Ruby 2.2 &ndash; Une sélection des nouvelles méthodes</a></li><li><a href='http://lkdjiin.github.io/blog/2014/10/29/le-jeu-de-la-vie-en-ruby-opal-partie-3/'>Le jeu de la vie en ruby (opal) &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Rust - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2/"/>
    <updated>2015-01-13T10:14:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Tests unitaires avec Rust</h2>

<p>Je vais ajouter des tests unitaires au code du dernier article. Il s&#8217;agissait
simplement d&#8217;une seule fonction pour créer une génération aléatoire de cellule.
Voici tout le code, l&#8217;implémentation et les tests dans le même fichier <code>src/main.rs</code>.</p>

<figure class='code'><figcaption><span>src/main.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[cfg(not(test))]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">gen</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">gen</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">create_generation</span><span class="p">(</span><span class="n">width</span><span class="o">:</span> <span class="k">uint</span><span class="p">,</span> <span class="n">height</span><span class="o">:</span> <span class="k">uint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="k">uint</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">size</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">task_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="m">2</span><span class="k">u</span><span class="p">);</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cell</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[cfg(test)]</span>
</span><span class='line'><span class="k">mod</span> <span class="n">tests</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">super</span><span class="o">::</span><span class="n">create_generation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#[test]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">test_create_generation_length</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="m">12</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#[test]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">test_create_generation_has_1_and_0</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">gen</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="n">gen</span><span class="p">.</span><span class="n">len</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">gen</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="m">2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>On lance les tests grâce à l&#8217;outil à tout faire, Cargo:</p>

<pre><code>$ cargo test
   Compiling game_of_life v0.0.1 (file:///home/xavier/code/rust/game_of_life)
     Running target/game_of_life-f45ebd9dc330e3e4

running 2 tests
test test::test_create_generation_has_1_and_0 ... ok
test test::test_create_generation_length ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured
</code></pre>

<p>Concernant le code, il se comprend assez facilement de lui-même, voici tout de même quelques
éclaircissements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[cfg(not(test))]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sans cette annotation (pardon, attribut en langage Rust) <code>cargo test</code> produirait
un avertissement assez ennuyeux, car la fonction <code>main</code> n&#8217;est pas utilisé par
les tests:</p>

<pre><code>$ cargo test
   Compiling game_of_life v0.0.1 (file:///home/xavier/code/rust/game_of_life)
/home/.../main.rs:3:1: 6:2 warning: function is never used: `main`, #[warn(dead_code)] on by default
/home/.../main.rs:3 fn main() {
/home/.../main.rs:4     let gen = create_generation(3, 4);
/home/.../main.rs:5     println!("{}", gen);
/home/.../main.rs:6 }
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[cfg(test)]</span>
</span><span class='line'><span class="k">mod</span> <span class="n">tests</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est la déclaration d&#8217;un <strong>mod</strong>ule nommé <code>tests</code>, avec un attribut permettant
à Rust de savoir que ce qui suit concerne des tests et ne devra pas être compilé
dans le programme final.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">super</span><span class="o">::</span><span class="n">create_generation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On va utiliser la fonction <code>create_generation</code>, définie dans le parent du
module courant. <code>tests</code> est le module courant, le parent est créé automatiquement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[test]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ceci n&#8217;est pas un commentaire, vous l&#8217;avez compris, on appelle ça un attribut. C&#8217;est une sorte d&#8217;annotation.
Ça dit à Rust que la prochaine fonction est un test et ça nous permet d&#8217;écrire des fonctions utilitaires
dans le module <code>tests</code>.</p>

<h2>Tests unitaires et implémentation dans le même fichier</h2>

<p>C&#8217;est la recommendation de Rust : placer les tests unitaires dans le même fichier
que l&#8217;implémentation. Bien sûr, les tests d&#8217;intégration ont un dossier et des
fichiers bien à eux.
L&#8217;idée est originale même si elle ne doit pas être nouvelle. Je dis que
l&#8217;idée n&#8217;est pas nouvelle parce que je l&#8217;ai environ deux ou trois fois par an.
Par contre je n&#8217;y ai jamais cru suffisamment pour tenter de l&#8217;implémenter. Rust
l&#8217;a fait et je suis très curieux de voir ce que cela va donner.</p>

<p>Cette façon de faire a des avantages, comme ne pas perdre de temps à
trouver les tests unitaires ou aider à rester <em>focus</em> sur ce qui doit être
testé. Mais je m&#8217;interroge quand même sur ce que cela peut poser comme problèmes à l&#8217;usage.</p>

<p>Ma première interrogation concerne la taille des fichiers.
Le code Rust, sans être le plus verbeux qui soit, est quand même loin de la concision.
Un exemple simple, en Rust:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">task_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="m">2</span><span class="k">u</span><span class="p">);</span>
</span><span class='line'><span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cell</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le même en Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je ne serais pas étonné de trouver des fichiers Rust avec 200 lignes de code
d&#8217;implémentation (je vois ça régulièrement en Ruby).
Et si on respecte la <a href="http://martinfowler.com/bliki/TestPyramid.html">pyramide des tests</a> on se retrouve
vite avec 3 ou 4 tests par fonction, d&#8217;où des fichiers assez imposants,
d&#8217;un bon millier de lignes.
En fouillant un peu dans le code de Rust, par exemple le fichier <a href="https://github.com/rust-lang/rust/blob/master/src/libserialize/json.rs">json.rs</a>,
on peut voir que je suis encore loin de la réalité (presque 4000 lignes).</p>

<p>Une autre interrogation concerne le refactoring. Il faut pouvoir facilement casser
un fichier en plusieurs autres, plus petits. Dans quelle mesure ce type de
«couplage» entre test et implémentation va faciliter, ou au contraire compliquer,
cette tâche ?</p>

<p>Bref, je trouve l&#8217;idée très séduisante en théorie, et j&#8217;attend de voir si sa mise
en pratique fonctionne. Il y a encore d&#8217;autres choses à dire sur les tests avec
Rust, et j&#8217;y reviendrais certainement dans un prochain article.</p>

<p>N&#8217;oubliez pas que votre opinion m&#8217;intéresse, alors si vous pensez quelque chose
de ces tests unitaires à même le code, laissez donc un commentaire.</p>

<p>À bientôt.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1/'>Le jeu de la vie en Rust &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/'>Le jeu de la vie en Haskell &ndash; partie 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Rust - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1/"/>
    <updated>2015-01-04T18:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Premiers pas avec Rust</h2>

<p>On va écrire une version simple du jeu de la vie en Rust.</p>

<h3>Installer Rust</h3>

<p>Rendez-vous <a href="http://www.rust-lang.org/install.html">sur cette page</a> pour trouver
le type d&#8217;installation qui vous convient. Même si on peut trouver que cela pose
des problèmes, j&#8217;ai opté pour la méthode la plus simple:</p>

<pre><code>$ curl -s https://static.rust-lang.org/rustup.sh | sudo sh
</code></pre>

<p>Cela installe la version <em>nightly</em> et le gestionnaire de paquet <code>Cargo</code>.
L&#8217;installation est très rapide.</p>

<p>Pour information, voici la version que j&#8217;ai installé:</p>

<pre><code>$ rustc --version
rustc 0.13.0-nightly (636663172 2014-12-28 16:21:58 +0000)
</code></pre>

<!-- more -->


<h3>Cargo</h3>

<p>Rust fournit un outil très proche du Bundler des rubyistes, il s&#8217;agit
de Cargo. On s&#8217;en sert pour la création d&#8217;un projet, faire les builds,
lancer les tests, gérer les dépendances, etc…</p>

<p>Je crée le projet <code>game_of_life</code>:</p>

<pre><code>$ cargo new game_of_life --bin
$ cd game_of_life
</code></pre>

<p>Ça donne ceci:</p>

<pre><code>$ tree
.
├── Cargo.toml
└── src
    └── main.rs
</code></pre>

<p>Le fichier <code>Cargo.toml</code> est un manifeste et ne nous intéresse pas trop pour
l&#8217;instant.</p>

<h3>Création d&#8217;une génération de cellules</h3>

<p>Je ne vais pas parler de test aujourd&#8217;hui, ça sera pour plus tard. Je vais seulement écrire une
fonction <code>create_generation</code> (ma toute première fonction Rust !) qui va produire un tableau de
cellules, c&#8217;est à dire un tableau de 0 et de 1.</p>

<p>Pour représenter une génération, j&#8217;ai déjà utilisé dans les articles précédents des tableaux de
tableaux et des tableaux à 2 dimensions. C&#8217;est ma dernière chance d&#8217;utiliser des tableaux plats.
Voici le code complet du fichier <code>main.rs</code>.</p>

<figure class='code'><figcaption><span>src/main.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">gen</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">gen</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">create_generation</span><span class="p">(</span><span class="n">width</span><span class="o">:</span> <span class="k">uint</span><span class="p">,</span> <span class="n">height</span><span class="o">:</span> <span class="k">uint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="k">uint</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">size</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">task_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="m">2</span><span class="k">u</span><span class="p">);</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cell</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour le compiler et le lancer, on peut utiliser Cargo:</p>

<pre><code>$ cargo run
     Running `target/game_of_life`
[1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0]
</code></pre>

<p>Je ne suis pas très content de cette fonction <code>create_generation</code>, j&#8217;ai bien
conscience qu&#8217;elle est maladroite, mais elle a
au moins un mérite: elle fonctionne ! Alors, place aux explications.</p>

<pre><code>fn create_generation(width: uint, height: uint) -&gt; Vec&lt;uint&gt; {
</code></pre>

<p>Rust est statiquement typé, le compilateur doit connaître la signature d&#8217;une
fonction. Donc on déclare le type des paramêtres (ici <code>uint</code> pour <em>unsigned int</em>)
et le type de la valeur de retour (ici un <code>Vec</code>teur).</p>

<pre><code>let size = width * height;
</code></pre>

<p>On déclare une variable avec <code>let</code>. Pas besoin de préciser le type de <code>size</code>
puisque le compilateur peut l&#8217;inférer.</p>

<pre><code>let mut result = Vec::new();
</code></pre>

<p>Par défaut, une variable ne peut pas être modifiée, comme je désire ajouter des
éléments à <code>result</code>, je dois spécifier <code>mut</code> (pour <em>mutable</em>).</p>

<pre><code>for _ in range(0u, size) {
    let cell = std::rand::task_rng().gen_range(0u, 2u);
    result.push(cell);
}
</code></pre>

<p><code>0u</code> est une autre manière de préciser le type. Ici c&#8217;est <code>0</code> de type <code>uint</code>.
Dans la boucle on génère un nombre aléatoire et on l&#8217;ajoute dans <code>result</code>.</p>

<pre><code>result
</code></pre>

<p>Finalement on renvoie <code>result</code>. Notez qu&#8217;il n&#8217;y a pas de point-virgule après
<code>result</code>, c&#8217;est voulu, ça ne fonctionnerait pas avec. Par contre j&#8217;aurais pu
écrire <code>return result;</code>, et là il faudrait le point-virgule. Je n&#8217;ai pas encore
très bien compris le pourquoi du comment, donc je ne vais pas me risquer à vous
fournir une explication foireuse.</p>

<p>Voilà, c&#8217;est tout pour ma première approche de Rust. La prochaine fois je
parlerais des tests unitaires.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2/'>Le jeu de la vie en Rust &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/'>Le jeu de la vie en Haskell &ndash; partie 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/"/>
    <updated>2014-12-30T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je dois maintenant pouvoir extraire 9 cellules d&#8217;une génération (la cellule
cible et ses 8 voisines). Pour cela, je vais avoir besoin de la fonction
suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">extractNeighborhood</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elle prendra en entrée la génération, l&#8217;index de la rangée et l&#8217;index de la
colonne. Mais pour simplifier l&#8217;implémentation de <code>extractNeighborhood</code> j&#8217;ai
ressenti le besoin d&#8217;une fonction utilitaire <code>sliceAround</code> qui ferait ça:</p>

<pre><code>$ ghci
&gt; :load Slice.hs 
&gt; let list = [0,1,2,3,4,5]
&gt; sliceAround 1 list
[0,1,2]
&gt; sliceAround 4 list
[3,4,5]
&gt; sliceAround 0 list
[0,1]
&gt; sliceAround 5 list
[4,5]
</code></pre>

<!-- more -->


<p>J&#8217;ai donc écrit les tests (que vous pouvez trouvez sur <a href="https://github.com/lkdjiin/game-of-life-haskell">Github</a>) et le module
<code>Slice</code> qui en découle:</p>

<figure class='code'><figcaption><span>Slice.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Slice</span> <span class="p">(</span><span class="nf">sliceAround</span><span class="p">)</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sliceAround</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">sliceAround</span> <span class="mi">0</span> <span class="n">list</span> <span class="ow">=</span> <span class="n">take</span> <span class="mi">2</span> <span class="n">list</span>
</span><span class='line'><span class="nf">sliceAround</span> <span class="n">n</span> <span class="n">list</span> <span class="ow">=</span> <span class="n">take</span> <span class="mi">3</span> <span class="o">$</span> <span class="n">drop</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;était facile. J&#8217;ai quand même été étonné de ne pas trouver une fonction
<code>slice</code> de base (ou j&#8217;ai mal cherché, c&#8217;est toujours possible ;) ). Même s&#8217;il
est vrai qu&#8217;avec <code>take</code> et <code>drop</code> c&#8217;est très simple à obtenir.
Ensuite j&#8217;utilise <code>sliceAround</code> pour écrire <code>extractNeighborhood</code>:</p>

<figure class='code'><figcaption><span>GameOfLife.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">extractNeighborhood</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class='line'><span class="nf">extractNeighborhood</span> <span class="n">generation</span> <span class="n">row</span> <span class="n">column</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">row</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="n">row1</span> <span class="o">++</span> <span class="n">row2</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">row</span> <span class="o">==</span> <span class="p">(</span><span class="n">length</span> <span class="n">generation</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="ow">=</span> <span class="n">row0</span> <span class="o">++</span> <span class="n">row1</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">row0</span> <span class="o">++</span> <span class="n">row1</span> <span class="o">++</span> <span class="n">row2</span>
</span><span class='line'>    <span class="kr">where</span> <span class="n">row0</span> <span class="ow">=</span> <span class="n">getRow</span> <span class="o">$</span> <span class="n">row</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>          <span class="n">row1</span> <span class="ow">=</span> <span class="n">getRow</span> <span class="n">row</span>
</span><span class='line'>          <span class="n">row2</span> <span class="ow">=</span> <span class="n">getRow</span> <span class="o">$</span> <span class="n">row</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>          <span class="n">getRow</span> <span class="n">r</span> <span class="ow">=</span> <span class="n">sliceAround</span> <span class="n">column</span> <span class="o">$</span> <span class="n">generation</span> <span class="o">!!</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;arrive pas à simplifier plus cette fonction, mais il doit y avoir moyen.
Si vous connaissez Haskell, j&#8217;aimerais beaucoup avoir votre avis.</p>

<p>Avant de pouvoir en terminé avec ce jeu de la vie en Haskell, il me faut une
fonction <code>nextGeneration</code>, et j&#8217;ai eu bien peur que celle-ci me fasse mal à la
tête.</p>

<p>En fait ça n&#8217;a pas été si violent que ça. En décomposant, j&#8217;y suis arrivé
rapidement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">nextGeneration</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span>
</span><span class='line'><span class="nf">nextGeneration</span> <span class="n">generation</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">nextRow</span> <span class="n">y</span> <span class="n">generation</span><span class="p">)</span> <span class="o">|</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">height</span><span class="p">]]</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">height</span> <span class="ow">=</span> <span class="p">(</span><span class="n">length</span> <span class="n">generation</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nf">nextRow</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class='line'><span class="nf">nextRow</span> <span class="n">y</span> <span class="n">generation</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">nextCell</span> <span class="n">y</span> <span class="n">x</span> <span class="n">generation</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">width</span><span class="p">]]</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">row</span> <span class="ow">=</span> <span class="n">generation</span> <span class="o">!!</span> <span class="n">y</span>
</span><span class='line'>        <span class="n">width</span> <span class="ow">=</span> <span class="p">(</span><span class="n">length</span> <span class="n">row</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nf">nextCell</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Cell</span>
</span><span class='line'><span class="nf">nextCell</span> <span class="n">y</span> <span class="n">x</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span>
</span><span class='line'>  <span class="kr">where</span> <span class="n">neighborhood</span> <span class="ow">=</span> <span class="n">extractNeighborhood</span> <span class="n">generation</span> <span class="n">y</span> <span class="n">x</span>
</span><span class='line'>        <span class="n">cell</span> <span class="ow">=</span> <span class="p">(</span><span class="n">generation</span> <span class="o">!!</span> <span class="n">y</span><span class="p">)</span> <span class="o">!!</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais là encore, j&#8217;ai l&#8217;impression qu&#8217;il y a moyen de simplifier…</p>

<p>Il ne me reste plus qu&#8217;à faire une boucle:</p>

<figure class='code'><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">GameOfLife</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Concurrent</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">loop</span> <span class="n">n</span> <span class="n">g</span> <span class="ow">=</span>
</span><span class='line'> <span class="kr">do</span>
</span><span class='line'>   <span class="n">displayGeneration</span> <span class="n">g</span>
</span><span class='line'>   <span class="n">threadDelay</span> <span class="mi">1000000</span>
</span><span class='line'>   <span class="n">loop</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">nextGeneration</span> <span class="n">g</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span><span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">width</span> <span class="ow">=</span> <span class="mi">80</span>
</span><span class='line'>      <span class="n">height</span> <span class="ow">=</span> <span class="mi">23</span>
</span><span class='line'>      <span class="n">cells</span> <span class="ow">=</span> <span class="n">randomCells</span> <span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">)</span> <span class="p">(</span><span class="n">mkStdGen</span> <span class="mi">1234</span><span class="p">)</span>
</span><span class='line'>      <span class="n">generation</span> <span class="ow">=</span> <span class="n">createGeneration</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class='line'>   <span class="kr">in</span> <span class="n">loop</span> <span class="mi">40</span> <span class="n">generation</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notez <code>threadDelay</code>, pour faire une pause, qui prend un
nombre de micro-secondes ! Je ne sais pas si ça fonctionne à ce niveau de
granularité, mais ça m&#8217;impressionne.</p>

<p>Finalement, on peut compiler et lancer le programme \o/</p>

<pre><code>$ ghc -o gol Slice.hs GameOfLife.hs gol.hs
$ ./gol
</code></pre>

<p>Je vous rappelle que le code se trouve sur <a href="https://github.com/lkdjiin/game-of-life-haskell">Github</a> et que tous vos
commentaires sur ce code seront les bienvenus.</p>

<p>Voilà, j&#8217;en ai terminé avec Haskell. Je suis à la fois content, parce que
impatient de commencer la version Rust, et à la fois un peu triste parce que
je commence à peine à entrevoir les possibilités de Haskell. J&#8217;espère être en
mesure de me dégager un peu de temps pour continuer à étudier ce langage.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/'>Le jeu de la vie en Haskell &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/'>Le jeu de la vie en Haskell &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/'>Le jeu de la vie en Haskell &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/"/>
    <updated>2014-12-30T08:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Cette fois je met des tests en place avec <a href="https://www.haskell.org/haskellwiki/HUnit_1.0_User%27s_Guide">HUnit</a>.
Pour cela, je dois d&#8217;abord <em>modulariser</em> mon code. J&#8217;ai donc déplacé le code
de la dernière fois, sans la fonction <code>main</code>, dans un fichier <code>GameOfLife</code>.
Puis j&#8217;ai ajouté la déclaration du module.</p>

<!-- more -->




<figure class='code'><figcaption><span>GameOfLife.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">GameOfLife</span>
</span><span class='line'><span class="p">(</span> <span class="nf">randomCells</span>
</span><span class='line'><span class="p">,</span> <span class="nf">createGeneration</span>
</span><span class='line'><span class="p">,</span> <span class="nf">formatGeneration</span>
</span><span class='line'><span class="p">)</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">Cell</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">Generation</span> <span class="ow">=</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class='line'><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span><span class='line'>
</span><span class='line'><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="n">width</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">line</span><span class="kt">:</span><span class="p">(</span><span class="n">createGeneration</span> <span class="n">width</span> <span class="n">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">where</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">=</span> <span class="n">splitAt</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class='line'>
</span><span class='line'><span class="nf">formatGeneration</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class='line'><span class="nf">formatGeneration</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">intercalate</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">concatMap</span> <span class="n">show</span><span class="p">)</span> <span class="n">generation</span><span class="p">)</span>
</span><span class='line'>   <span class="kr">in</span> <span class="n">map</span> <span class="n">replaceChar</span> <span class="n">rows</span>
</span><span class='line'>
</span><span class='line'><span class="nf">replaceChar</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">Char</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="sc">&#39;1&#39;</span> <span class="ow">=</span> <span class="sc">&#39;@&#39;</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="sc">&#39;0&#39;</span> <span class="ow">=</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une déclaration de module, c&#8217;est ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">GameOfLife</span>
</span><span class='line'><span class="p">(</span> <span class="nf">randomCells</span>
</span><span class='line'><span class="p">,</span> <span class="nf">createGeneration</span>
</span><span class='line'><span class="p">,</span> <span class="nf">formatGeneration</span>
</span><span class='line'><span class="p">)</span> <span class="kr">where</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai donc un module <code>GameOfLife</code> qui exporte, pour l&#8217;instant, trois fonctions.
Au fait, le code est sur <a href="https://github.com/lkdjiin/game-of-life-haskell">Github</a>.</p>

<p>Je vais créer la fonction <code>cellNextState</code>, je la rajoute donc dans les exports
du module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">GameOfLife</span>
</span><span class='line'><span class="p">(</span> <span class="nf">randomCells</span>
</span><span class='line'><span class="p">,</span> <span class="nf">createGeneration</span>
</span><span class='line'><span class="p">,</span> <span class="nf">formatGeneration</span>
</span><span class='line'><span class="p">,</span> <span class="nf">cellNextState</span>
</span><span class='line'><span class="p">)</span> <span class="kr">where</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et j&#8217;en crée une version qui ne fonctionne pas ;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cellNextState</span> <span class="ow">::</span> <span class="kt">Cell</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Cell</span>
</span><span class='line'><span class="nf">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span> <span class="ow">=</span> <span class="n">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est parti pour mon premier test en Haskell. Je crée un fichier
<code>GameOfLife_Test.hs</code>:</p>

<figure class='code'><figcaption><span>GameOfLife_Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">GameOfLife_Test</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">GameOfLife</span><span class="p">(</span><span class="n">cellNextState</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Test.HUnit</span>
</span><span class='line'>
</span><span class='line'><span class="nf">testCellNextState3</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class='line'>  <span class="s">&quot;Gets live cell when neighborhood&#39;sum is 3&quot;</span> <span class="mi">1</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">runTestTT</span> <span class="n">testCellNextState3</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est du bon vieux test unitaire à l&#8217;ancienne. Je mentirais en disant que
je trouve la syntaxe sexy.</p>

<pre><code>$ runhaskell GameOfLife_Test.hs 
### Error:                                
Prelude.undefined
Cases: 1  Tried: 1  Errors: 1  Failures: 0
Counts {cases = 1, tried = 1, errors = 1, failures = 0}
</code></pre>

<p>Bon, si maintenant ma fonction renvoie 1, le test devrait passer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span> <span class="ow">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ runhaskell GameOfLife_Test.hs 
Cases: 1  Tried: 1  Errors: 0  Failures: 0
Counts {cases = 1, tried = 1, errors = 0, failures = 0}
</code></pre>

<p>J&#8217;aimerais bien avoir une sortie en couleur. Si il y a moyen, je n&#8217;ai pas
encore trouvé…</p>

<p>Quoiqu&#8217;il en soit, je peux tester mon code Haskell, et ça c&#8217;est cool. Je vais
donc en finir avec <code>cellNextState</code> en faisant quelques tests de plus:</p>

<figure class='code'><figcaption><span>GameOfLife_Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">GameOfLife_Test</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">GameOfLife</span><span class="p">(</span><span class="n">cellNextState</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Test.HUnit</span>
</span><span class='line'>
</span><span class='line'><span class="nf">testCellNextState3</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class='line'>  <span class="s">&quot;Gets 1 when neighborhood&#39;s sum is 3&quot;</span>
</span><span class='line'>  <span class="mi">1</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nf">testCellNextState4AndAlive</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class='line'>  <span class="s">&quot;Gets 1 when neighborhood&#39;s sum is 4 and cell is alive&quot;</span>
</span><span class='line'>  <span class="mi">1</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">1</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nf">testCellNextState4AndDead</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class='line'>  <span class="s">&quot;Gets 0 when neighborhood&#39;s sum is 4 and cell is dead&quot;</span>
</span><span class='line'>  <span class="mi">0</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nf">testCellNextState6</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class='line'>  <span class="s">&quot;Gets 0 when neighborhood&#39;s sum is 6&quot;</span>
</span><span class='line'>  <span class="mi">0</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">1</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">runTestTT</span> <span class="o">$</span> <span class="kt">TestList</span> <span class="p">[</span><span class="n">testCellNextState3</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">testCellNextState4AndAlive</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">testCellNextState4AndDead</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">testCellNextState6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ runhaskell GameOfLife_Test.hs 
### Failure in: 2                         
Gets 0 when neighborhood's sum is 4 and cell is dead
expected: 0
 but got: 1
### Failure in: 3                         
Gets 0 when neighborhood's sum is 6
expected: 0
 but got: 1
Cases: 4  Tried: 4  Errors: 0  Failures: 2
Counts {cases = 4, tried = 4, errors = 0, failures = 2}
</code></pre>

<figure class='code'><figcaption><span>GameOfLife.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cellNextState</span> <span class="ow">::</span> <span class="kt">Cell</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Cell</span>
</span><span class='line'><span class="nf">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">4</span> <span class="ow">=</span> <span class="n">cell</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="kr">where</span> <span class="n">total</span> <span class="ow">=</span> <span class="n">sum</span> <span class="n">neighborhood</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ runhaskell GameOfLife_Test.hs 
Cases: 4  Tried: 4  Errors: 0  Failures: 0
Counts {cases = 4, tried = 4, errors = 0, failures = 0}
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/'>Le jeu de la vie en Haskell &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/'>Le jeu de la vie en Haskell &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/'>Le jeu de la vie en Haskell &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/"/>
    <updated>2014-12-29T15:07:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je vais commencer par une amélioration du code du
<a href="http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/">dernier article</a>
(merci <a href="https://twitter.com/julienXX">@julienXX</a> pour les indices).</p>

<p>La fonction <code>createGeneration</code> était comme ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="kt">[]</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">generation</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="n">cells</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class='line'>     <span class="kr">in</span> <span class="n">createGeneration</span> <span class="p">(</span><span class="n">drop</span> <span class="n">width</span> <span class="n">cells</span><span class="p">)</span> <span class="n">width</span> <span class="p">(</span><span class="n">line</span><span class="kt">:</span><span class="n">generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je l&#8217;ai transformé comme cela:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="kt">Cell</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class='line'>
</span><span class='line'><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="n">width</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">line</span><span class="kt">:</span><span class="p">(</span><span class="n">createGeneration</span> <span class="n">width</span> <span class="n">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">where</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">=</span> <span class="n">splitAt</span> <span class="n">width</span> <span class="n">cells</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Elle utilise maintenant <code>splitAt</code>, une fonction de base, qui simplifie la
transformation d&#8217;une liste en une liste de listes. J&#8217;ai aussi créé un type
<code>Cell</code>, qui me semble utile à des fins de documentation.</p>

<h2>Affichage d&#8217;une génération</h2>

<p>Le sujet principal de cet article, c&#8217;est l&#8217;affichage d&#8217;une génération dans le
terminal. Voici ma solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="nf">formatGeneration</span> <span class="ow">::</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class='line'><span class="nf">formatGeneration</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">intercalate</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">concatMap</span> <span class="n">show</span><span class="p">)</span> <span class="n">generation</span><span class="p">)</span>
</span><span class='line'>   <span class="kr">in</span> <span class="n">map</span> <span class="n">replaceChar</span> <span class="n">rows</span>
</span><span class='line'>
</span><span class='line'><span class="nf">replaceChar</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">Char</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="sc">&#39;1&#39;</span> <span class="ow">=</span> <span class="sc">&#39;@&#39;</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="sc">&#39;0&#39;</span> <span class="ow">=</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>En avant pour les explications pas à pas. <code>concat</code> concatène une liste de
<em>string</em> et <code>show</code> transforme un élément en <em>string</em>.</p>

<pre><code>&gt; concat ["1", "0"]
"10"
&gt; show 1
"1"
</code></pre>

<p>Je <em>mappe</em> la fonction <code>show</code> sur chaque élément d&#8217;une liste de nombres.</p>

<pre><code>&gt; map show [1,0]
["1","0"]
</code></pre>

<p>Puis je peux les concaténer.</p>

<pre><code>&gt; concat (map show [1,0])
"10"
</code></pre>

<p><code>concatMap</code> est un raccourci pour <code>concat (map ...)</code>.</p>

<pre><code>&gt; concatMap show [1,0]
"10"
</code></pre>

<p>On <em>mappe</em> le code précédent sur une génération complête.</p>

<pre><code>&gt; map (concatMap show) [[1,0], [0,0], [1,1]]
["10","00","11"]
</code></pre>

<p>Puis, grâce à <code>intercalate</code>, on joint les éléments avec un saut de ligne.</p>

<pre><code>&gt; import Data.List
&gt; intercalate "\n" (map (concatMap show) [[1,0], [0,0], [1,1]]) 
"10\n00\n11"
</code></pre>

<p>Pour ce qui est de <code>replaceChar</code>, l&#8217;exemple suivant parle de lui-même.</p>

<pre><code>&gt; :load gol.hs 
&gt; map replaceChar "10\n00\n11"
"@ \n  \n@@"
</code></pre>

<p>Voici le code actuel, n&#8217;hésitez pas à me faire part des améliorations possibles.</p>

<figure class='code'><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">Cell</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class='line'>
</span><span class='line'><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class='line'><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span><span class='line'>
</span><span class='line'><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="n">width</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">line</span><span class="kt">:</span><span class="p">(</span><span class="n">createGeneration</span> <span class="n">width</span> <span class="n">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">where</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">=</span> <span class="n">splitAt</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class='line'>
</span><span class='line'><span class="nf">formatGeneration</span> <span class="ow">::</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class='line'><span class="nf">formatGeneration</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">intercalate</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">concatMap</span> <span class="n">show</span><span class="p">)</span> <span class="n">generation</span><span class="p">)</span>
</span><span class='line'>   <span class="kr">in</span> <span class="n">map</span> <span class="n">replaceChar</span> <span class="n">rows</span>
</span><span class='line'>
</span><span class='line'><span class="nf">replaceChar</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">Char</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="sc">&#39;1&#39;</span> <span class="ow">=</span> <span class="sc">&#39;@&#39;</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="sc">&#39;0&#39;</span> <span class="ow">=</span> <span class="sc">&#39; &#39;</span>
</span><span class='line'><span class="nf">replaceChar</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span><span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">width</span> <span class="ow">=</span> <span class="mi">80</span>
</span><span class='line'>        <span class="n">height</span> <span class="ow">=</span> <span class="mi">24</span>
</span><span class='line'>        <span class="n">cells</span> <span class="ow">=</span> <span class="n">randomCells</span> <span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">)</span> <span class="p">(</span><span class="n">mkStdGen</span> <span class="mi">123</span><span class="p">)</span>
</span><span class='line'>        <span class="n">generation</span> <span class="ow">=</span> <span class="n">createGeneration</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class='line'>     <span class="kr">in</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">formatGeneration</span> <span class="n">generation</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ runhaskell gol.hs
@@@    @  @ @@@ @@@@@@ @ @  @ @   @ @ @  @@@@   @   @@  @  @@@@ @ @ @@@ @@  @  @
  @  @ @@ @@@ @@@@  @@ @@@@ @ @@@    @@ @ @ @@  @          @ @@@ @ @@@ @@@ @  @ 
  @ @@@ @@ @ @@ @@      @   @@@  @@    @  @ @@ @@ @@@   @@@@@@     @@  @@@@ @@ @
[...]
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/'>Le jeu de la vie en Haskell &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/'>Le jeu de la vie en Haskell &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/'>Le jeu de la vie en Haskell &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/"/>
    <updated>2014-12-28T18:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Première rencontre avec Haskell</h2>

<p>L&#8217;histoire qui suit a du arriver à de nombreux développeurs rencontrant Haskell
pour la première fois.</p>

<p>— Bon, comment produire un nombre aléatoire ?<br/>
— Ah OK, je vois.<br/>
— Euh, attends, tu veux dire que je dois passer un générateur avec une <em>seed</em> à
chaque fois ?<br/>
— Ah OK, c&#8217;est l&#8217;histoire des fonctions <em>pures</em>, quand tu as le même argument en
entrée, tu produis <strong>toujours</strong> la même valeur en sortie. Du coup, tu ne peux
pas avoir une fonction <code>random</code> qui te sortirait une valeur différente à chaque
appel. Oui, d&#8217;accord, c&#8217;est logique.<br/>
— Ah mais non, attends, je fais comment pour lui donner une <em>seed</em> différente à
chaque lancement du programme ? Ah, bin oui, j&#8217;ai qu&#8217;a prendre l&#8217;heure système,
ou un truc comme ça.<br/>
— Comment ça le générateur n&#8217;accepte pas mon heure système comme <em>seed</em> !?
— Comment ça c&#8217;est pas le bon type ?! Qu&#8217;est-ce que c&#8217;est que cette histoire de
monade IO ? Qu&#8217;est-ce que c&#8217;est que ce langage où je ne peux pas convertir
l&#8217;heure système en un entier qui me servirait à quelque chose ???!!!</p>

<p>Bref, bonjour Haskell…</p>

<!-- more -->


<h2>Création d&#8217;une génération</h2>

<p>Toute cette histoire n&#8217;est peut-être pas si importante. Une fois
accepté que Haskell a certainement une bonne raison de ne pas nous laisser faire
une chose particulière, on peut avancer. Finalement, si je produis toujours les
mêmes nombres, ça devrait être plus simple pour tester.</p>

<p>Le code suivant produit une liste de <code>0</code> et de <code>1</code>. En entrée, la fonction
prend la taille de la liste et un générateur de nombre aléatoire.</p>

<figure class='code'><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'>
</span><span class='line'><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour essayer ce code, j&#8217;utilise <code>ghci</code>, le REPL Haskell. C&#8217;est une vieille
version qui était déjà installée sur ma machine.</p>

<pre><code>$ ghci
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
</code></pre>

<p>Dans <code>ghci</code>, on charge notre fichier avec <code>:l gol.hs</code>. (<code>:l</code> est l&#8217;abbréviation
de <code>:load</code>).</p>

<pre><code>Prelude&gt; :l gol.hs 
[1 of 1] Compiling Main             ( gol.hs, interpreted )
Ok, modules loaded: Main.
</code></pre>

<p>On va produire une liste de 12 nombres. Pour obtenir un générateur de nombre
aléatoire, on utilise <code>mkStdGen</code>, que j&#8217;initialise ici avec le nombre <code>4567</code>.</p>

<pre><code>*Main&gt; randomCells 12 (mkStdGen 4567)
[1,0,1,0,1,1,1,1,1,0,1,0]
</code></pre>

<p>Alors, on pourrait s&#8217;arrêter là pour la création des cellules. On pourrait très
bien se débrouiller avec une liste simple. Mais je préfère quand même avoir une
liste de listes (une liste de rangées).</p>

<p>Voilà donc une jolie fonction récursive <code>createGeneration</code> qui prend en entrée
la liste de cellules aléatoires, la largeur d&#8217;une rangée, et la génération en
cours de production (l&#8217;accumulateur).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="kt">[]</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">generation</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="n">cells</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class='line'>     <span class="kr">in</span> <span class="n">createGeneration</span> <span class="p">(</span><span class="n">drop</span> <span class="n">width</span> <span class="n">cells</span><span class="p">)</span> <span class="n">width</span> <span class="p">(</span><span class="n">line</span><span class="kt">:</span><span class="n">generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>*Main&gt; let cells = randomCells 12 (mkStdGen 4567)
*Main&gt; createGeneration cells 4 []
[[1,0,1,0],[1,1,1,1],[1,0,1,0]]
</code></pre>

<p>Pour finir, voici le listing complet du fichier <code>gol.hs</code>.</p>

<figure class='code'><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'>
</span><span class='line'><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span><span class='line'>
</span><span class='line'><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="kt">[]</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">generation</span>
</span><span class='line'><span class="nf">createGeneration</span> <span class="n">cells</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class='line'>     <span class="kr">in</span> <span class="n">createGeneration</span> <span class="p">(</span><span class="n">drop</span> <span class="n">width</span> <span class="n">cells</span><span class="p">)</span> <span class="n">width</span> <span class="p">(</span><span class="n">line</span><span class="kt">:</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">randomCells</span> <span class="mi">12</span> <span class="p">(</span><span class="n">mkStdGen</span> <span class="mi">123</span><span class="p">)</span>
</span><span class='line'>     <span class="kr">in</span> <span class="n">print</span> <span class="p">(</span><span class="n">createGeneration</span> <span class="n">cells</span> <span class="mi">4</span> <span class="kt">[]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ runhaskell gol.hs 
[[0,0,1,0],[0,0,0,1],[1,1,1,0]]
</code></pre>

<p>Comme il s&#8217;agit de mon tout premier code en Haskell, n&#8217;hésitez surtout pas à me
remonter mes erreurs, ou bien des trucs pour améliorer le code.</p>

<p><strong>P.S.</strong></p>

<p>Vous avez peut-être remarqué que je n&#8217;ai pas écrit de tests ?
J&#8217;avais remarqué <a href="http://hspec.github.io/">Hspec</a>, que j&#8217;aurais aimé utilisé.
Mais <code>cabal</code> refuse de l&#8217;installer. Je pense que ma version d&#8217;Haskell est trop
datée et qu&#8217;il me faudrait refaire une installation sans passer par les paquets
de mon OS. Je sais qu&#8217;il y a <a href="https://www.haskell.org/haskellwiki/HUnit_1.0_User%27s_Guide">HUnit</a>
de base, mais ça m&#8217;a l&#8217;air bien compliqué à mettre en place pour mon niveau de
débutant. Si je continue Haskell après avoir écrit le jeu de la vie, il est sûr
que je m&#8217;y mettrais.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/'>Le jeu de la vie en Haskell &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/'>Le jeu de la vie en Haskell &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/'>Le jeu de la vie en Haskell &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.2 - Une sélection des nouvelles méthodes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/27/ruby-2-dot-2-une-selection-des-nouvelles-methodes/"/>
    <updated>2014-12-27T15:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/27/ruby-2-dot-2-une-selection-des-nouvelles-methodes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ça y est, noël est passé et Ruby 2.2.0 est arrivé.
Je vous ai préparé une sélection (personnelle) des nouveautés de cette dernière
version de Ruby.</p>

<p>Vous pouvez voir la liste exhaustive des changements ici:
<a href="https://github.com/ruby/ruby/blob/v2_2_0/NEWS">ruby v2.2.0 NEWS</a></p>

<!-- more -->


<h2>Les symboles pour les clés d&#8217;un Hash peuvent être entre guillemets</h2>

<p>Ce qui autorise l&#8217;utilisation des espaces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;foo bar&quot;</span><span class="p">:</span> <span class="s2">&quot;baz&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="go">=&gt; {:&quot;foo bar&quot;=&gt;&quot;baz&quot;}</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">hash</span><span class="o">[</span><span class="ss">:&quot;foo bar&quot;</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enumerable#slice_when</h2>

<p>J&#8217;ai le tableau suivant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je veux rassembler ensemble les séries de nombre qui se suivent. Autrement dit,
je veux obtenir ceci:</p>

<pre><code>[ [1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21] ]
</code></pre>

<p><code>slice_when</code> me fait ça facilement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">slice_when</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">|</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">j</span> <span class="p">}</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="go">=&gt; [[1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21]]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>max et min peuvent retourner plusieurs valeurs</h2>

<p>Plutôt que d&#8217;obtenir la seule et unique valeur limite, on peut maintenant
obtenir une liste.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">max</span>
</span><span class='line'><span class="go">=&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">max</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; [3, 2]</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">max</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; [3, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Method#curry</h2>

<p>Tout d&#8217;abord, voici une méthode <code>add</code>, qui prend 3 arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On <em>currifie</em> cette méthode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">proc</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:add</span><span class="p">)</span><span class="o">.</span><span class="n">curry</span>
</span><span class='line'><span class="go">=&gt; #&lt;Proc:0x8f945a4 (lambda)&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je peux maintenant l&#8217;appliquer partiellement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">proc</span> <span class="o">=</span> <span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; #&lt;Proc:0x9407dfc (lambda)&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; 6</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; 13</span>
</span></code></pre></td></tr></table></div></figure>


<h2>La lib Etc</h2>

<p>Pour finir, voici deux nouvelles méthodes de la bibliothèque standard <code>Etc</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;etc&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Etc</span><span class="o">.</span><span class="n">uname</span>
</span><span class='line'><span class="go">=&gt; {:sysname=&gt;&quot;Linux&quot;, ... }</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Etc</span><span class="o">.</span><span class="n">nprocessors</span>
</span><span class='line'><span class="go">=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem/'>Mieux utiliser le programme gem</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake/'>Affichage de toutes les tâches rake</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake/'>Description détaillée des tâches rake</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Julia - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/26/le-jeu-de-la-vie-en-julia-partie-3/"/>
    <updated>2014-12-26T15:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/26/le-jeu-de-la-vie-en-julia-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>C&#8217;est la troisième et dernière partie du jeu de la vie en Julia. Déjà.
J&#8217;aime tellement découvrir et utiliser ce langage que ça me rend triste.</p>

<p>Tout d&#8217;abord, le code du <a href="https://github.com/lkdjiin/game-of-life-julia">jeu de la vie en Julia</a>
est disponible sur Github, pour celles et ceux qui veulent y jeter un oeil.</p>

<h2>Calculer la génération suivante</h2>

<p>Maintenant, en avant pour la suite. Encore une fonction, et ça sera terminé. Il faut calculer la génération
suivante à partir de la génération courante:</p>

<figure class='code'><figcaption><span>test.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">generation</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Generation</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>                                       <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>                                       <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>                                       <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<figure class='code'><figcaption><span>generation.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="kr">module</span> <span class="n">Generation</span>
</span><span class='line'>
</span><span class='line'><span class="n">using</span> <span class="o">..</span><span class="n">Neighborhood</span><span class="p">:</span> <span class="n">extract</span><span class="p">,</span> <span class="n">state</span>
</span><span class='line'><span class="n">using</span> <span class="o">..</span><span class="n">Cell</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">duplicate</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">y</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span>
</span><span class='line'>            <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="n">newstate</span> <span class="o">=</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class='line'>            <span class="n">duplicate</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">newstate</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">duplicate</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code est un peu plus complexe que dans les 2 premiers articles, et il m&#8217;a
fallu un peu de temps avant de réussir à utiliser les modules.</p>

<p>Je vais utiliser les fonctions <code>extract</code> et <code>state</code> du module <code>Neighborhood</code>,
module qui est défini dans le module parent, d&#8217;où les <code>..</code>.</p>

<pre><code>using ..Neighborhood: extract, state
</code></pre>

<p>Je crée un nouveau tableau, aux mêmes dimensions que <code>generation</code>, et remplis
de zéros.</p>

<pre><code>duplicate = zeros(generation)
</code></pre>

<p>Ensuite, c&#8217;est une boucle dans une boucle qui se sert du code des articles
précédents, avant de renvoyer le tableau <code>duplicate</code>. C&#8217;est pas très beau, mais
comme le test passe, ça me va pour l&#8217;instant.</p>

<p>Il reste à se servir de ce code dans le fichier principal:</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;neighborhood.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;cell.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;generation.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;display.jl&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> main</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">number_of_generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">generation</span> <span class="o">=</span> <span class="n">Generation</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">number_of_generation</span>
</span><span class='line'>        <span class="n">Display</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.8</span><span class="p">)</span>
</span><span class='line'>        <span class="n">generation</span> <span class="o">=</span> <span class="n">Generation</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">main</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, c&#8217;est terminé ! Le reste de l&#8217;article se consacre à l&#8217;amélioration
de la fonction <code>Generation.next</code>.</p>

<h2>Un peu de refactoring</h2>

<p>Pour améliorer <code>Generation.next</code>, il y a la fonction
<a href="http://julia.readthedocs.org/en/latest/stdlib/base/#Base.eachindex">eachindex</a>,
malheureusement elle n&#8217;est pas encore disponible dans la dernière version stable.
J&#8217;ai donc cherché autre chose.</p>

<p>Ma première tentative : utiliser une compréhension de liste avec <code>reshape</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">duplicate</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="o">=</span> <span class="n">reshape</span><span class="p">([(</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="k">for</span> <span class="n">h</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span><span class="p">,</span> <span class="n">w</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span><span class="p">],</span> <span class="n">length</span><span class="p">(</span><span class="n">generation</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">in</span> <span class="n">indexes</span>
</span><span class='line'>        <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="n">newstate</span> <span class="o">=</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class='line'>        <span class="n">duplicate</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">newstate</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">duplicate</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La compréhension de liste génère la liste des indexs:</p>

<pre><code>julia&gt; [(h,w) for h in 1:3, w in 1:4]
3x4 Array{(Int32,Int32),2}:
 (1,1)  (1,2)  (1,3)  (1,4)
 (2,1)  (2,2)  (2,3)  (2,4)
 (3,1)  (3,2)  (3,3)  (3,4)
</code></pre>

<p>Et <code>reshape</code> change les dimensions du tableau, ici pour une seule dimension de la bonne longueur:</p>

<pre><code>julia&gt; reshape([(h,w) for h in 1:3, w in 1:4], 3 * 4)
12-element Array{(Int32,Int32),1}:
 (1,1)
 (2,1)
 (3,1)
 (1,2)
 (2,2)
 (3,2)
 (1,3)
 (2,3)
 (3,3)
 (1,4)
 (2,4)
 (3,4)
</code></pre>

<p>Vous avez peut-être remarqué le pattern (a-t-il un nom ?):</p>

<ol>
<li>Création d&#8217;une variable</li>
<li>Transformation de cette variable</li>
<li>Renvoi de la variable</li>
</ol>


<p>En général, on peut se passer de la création et du retour explicite en utilisant
un <code>map</code>. Ici, j&#8217;ai créé une fonction <code>newstate</code> à l&#8217;intérieur de <code>next</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="k">for</span> <span class="n">h</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span><span class="p">,</span> <span class="n">w</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span><span class="p">]</span>
</span><span class='line'>    <span class="k">function</span><span class="nf"> newstate</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">map</span><span class="p">((</span><span class="n">yx</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">newstate</span><span class="p">(</span><span class="n">first</span><span class="p">(</span><span class="n">yx</span><span class="p">),</span> <span class="n">last</span><span class="p">(</span><span class="n">yx</span><span class="p">)),</span> <span class="n">indexes</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut simplifier la fonction anonyme à l&#8217;aide du <em>splat</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'>  <span class="n">map</span><span class="p">((</span><span class="n">yx</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">newstate</span><span class="p">(</span><span class="n">yx</span><span class="o">...</span><span class="p">),</span> <span class="n">indexes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, deux fonctions séparées me semble bien plus lisibles:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span><span class="p">,</span> <span class="n">x</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span><span class="p">]</span>
</span><span class='line'>    <span class="n">map</span><span class="p">((</span><span class="n">yx</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">newstate</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">yx</span><span class="o">...</span><span class="p">),</span> <span class="n">indexes</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> newstate</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà. Le code est disponible sur Gitub : <a href="https://github.com/lkdjiin/game-of-life-julia">le jeu de la vie en Julia</a>.</p>

<p>La prochaine fois, ce sera du Haskell.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/24/le-jeu-de-la-vie-en-julia-partie-2/'>Le jeu de la vie en Julia &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/23/le-jeu-de-la-vie-en-julia-partie-1/'>Le jeu de la vie en Julia &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Julia - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/24/le-jeu-de-la-vie-en-julia-partie-2/"/>
    <updated>2014-12-24T10:03:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/24/le-jeu-de-la-vie-en-julia-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<h2>Calcul du prochain état d&#8217;un cellule</h2>

<p>Au départ je voulais écrire une fonction <code>nextcellstate</code>. C&#8217;est la convention
en Julia: séparer les mots par des underscores seulement si c&#8217;est
incompréhensible.  Je ne sais pas pour vous, mais moi je trouve <code>nextcellstate</code>
incompréhensible.  Donc ça devient <code>next_cell_state</code>. C&#8217;est mieux. Mais on te
dis aussi que si tu ressens le besoin de mettre des underscores, c&#8217;est
peut-être parce que ta fonction en fait trop. Bon conseil.</p>

<p>Alors, cette fonction pourrait appartenir à un module <code>Cell</code>. Elle devient donc
<code>Cell.nextstate</code>. Pardon, <code>Cell.next_state</code>, c&#8217;est mieux. Mais j&#8217;ai encore <code>next</code> et
<code>state</code>, qui font deux choses différentes.</p>

<p><code>state</code> calcule l&#8217;état d&#8217;un voisinage (<em>neighborhood</em>) de cellules, c&#8217;est à dire le
nombre de <code>1</code> (cellule vivante) parmi 9 cellules: celle qui nous intéresse et ses
8 voisines.</p>

<p><code>next</code> calcule le prochain état d&#8217;une cellule (1 ou 0, vivante ou morte) selon son
état actuel et l&#8217;état de son voisinage.</p>

<p>J&#8217;ai donc décidé d&#8217;avoir une fonction <code>Neighborhood.state</code> plus une fonction
<code>Cell.next</code>.  Voici le test pour <code>Neighborhood.state</code>, c&#8217;est loin d&#8217;être
exhaustif, mais j&#8217;ai envie d&#8217;avancer:</p>

<figure class='code'><figcaption><span>test.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;generation.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;neighborhood.jl&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Neighborhood</span><span class="o">.</span><span class="n">state</span><span class="p">([</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et la fonction:</p>

<figure class='code'><figcaption><span>neighborhood.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="kr">module</span> <span class="n">Neighborhood</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span> <span class="o">=</span> <span class="n">countnz</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p><code>countnz</code> compte tout simplement le nombre d&#8217;éléments différents de zéro.</p>

<p>Passons à <code>Cell.next</code>:</p>

<figure class='code'><figcaption><span>test.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;generation.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;neighborhood.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;cell.jl&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="n">ALIVE</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">DEAD</span>  <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">ALIVE</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">DEAD</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">DEAD</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">ALIVE</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>cell.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="kr">module</span> <span class="n">Cell</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">neighborhood</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">neighborhood</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'>    <span class="k">elseif</span> <span class="n">neighborhood</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'>        <span class="n">cell</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il semble que Julia n&#8217;ai pas de switch/case, dommage.</p>

<p>Maintenant je passe à l&#8217;extraction d&#8217;une génération, c&#8217;est à dire les 9 cellules
composées de notre cellule cible et de ses 8 voisines.</p>

<figure class='code'><figcaption><span>test.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="n">generation</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="p">]</span>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Neighborhood</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">;</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">]</span>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Neighborhood</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">;</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">;</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>neighborhood.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est tellement simple à implémenter&hellip; J&#8217;aime de plus en plus Julia.</p>

<p>Ensuite viennent les tests des cas exceptionnels. Je ne vous en montre que 3:</p>

<figure class='code'><figcaption><span>test.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">generation</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class='line'>               <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Neighborhood</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="p">;</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Neighborhood</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span> <span class="mi">1</span><span class="err"> </span><span class="mi">1</span> <span class="p">;</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">;</span> <span class="mi">1</span> <span class="mi">0</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">Neighborhood</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là encore, l&#8217;implémentation est simple:</p>

<figure class='code'><figcaption><span>neighborhood.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">y_low</span> <span class="o">=</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">y_up</span>  <span class="o">=</span> <span class="n">y</span> <span class="o">==</span> <span class="n">height</span> <span class="o">?</span> <span class="n">height</span> <span class="p">:</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">x_low</span> <span class="o">=</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">x_up</span>  <span class="o">=</span> <span class="n">x</span> <span class="o">==</span> <span class="n">width</span> <span class="o">?</span> <span class="n">width</span> <span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">generation</span><span class="p">[</span><span class="n">y_low</span><span class="p">:</span><span class="n">y_up</span><span class="p">,</span> <span class="n">x_low</span><span class="p">:</span><span class="n">x_up</span><span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qu&#8217;on peut ré-arrenger un peu, par exemple ainsi:</p>

<figure class='code'><figcaption><span>neighborhood.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">yrange</span> <span class="o">=</span> <span class="n">range_for</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'>    <span class="n">xrange</span> <span class="o">=</span> <span class="n">range_for</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">generation</span><span class="p">[</span><span class="n">yrange</span><span class="p">,</span> <span class="n">xrange</span><span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> range_for</span><span class="p">(</span><span class="n">coordinate</span><span class="p">,</span> <span class="n">dimension</span><span class="p">)</span>
</span><span class='line'>    <span class="n">low</span> <span class="o">=</span> <span class="n">coordinate</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="n">coordinate</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">up</span>  <span class="o">=</span> <span class="n">coordinate</span> <span class="o">==</span> <span class="n">dimension</span> <span class="o">?</span> <span class="n">dimension</span> <span class="p">:</span> <span class="n">coordinate</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">low</span><span class="p">:</span><span class="n">up</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rendez-vous dans le prochain article pour la fin du jeu de la vie en Julia.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/26/le-jeu-de-la-vie-en-julia-partie-3/'>Le jeu de la vie en Julia &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/23/le-jeu-de-la-vie-en-julia-partie-1/'>Le jeu de la vie en Julia &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Julia - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/23/le-jeu-de-la-vie-en-julia-partie-1/"/>
    <updated>2014-12-23T14:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/23/le-jeu-de-la-vie-en-julia-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici la première partie du jeu de la vie en Julia.
Pour installer la dernière version stable (0.3.3), rendez-vous sur le
<a href="https://github.com/JuliaLang/julia">Github de Julia</a>.</p>

<p>Julia est un langage jeune et en pleine effervescence et plusieurs frameworks
de tests sont en cours de création. J&#8217;ai notamment remarqué:</p>

<ul>
<li><a href="https://github.com/JuliaLang/FactCheck.jl">FactCheck.jl</a></li>
<li><a href="https://github.com/arypurnomoz/JulieTest.jl">JulieTest.jl</a></li>
<li><a href="https://github.com/Veraticus/testfast.jl">testfast.jl</a></li>
</ul>


<h2>Création d&#8217;une génération</h2>

<p>Mais pour ce que je compte faire ici, Julia possède une macro très simple,
<a href="http://julia.readthedocs.org/en/latest/stdlib/test/">@test</a>. Même si <code>@test</code>
est très minimal, ça sera suffisant pour ce programme. Voici donc les
tests de la fonction <code>create</code> du module <code>Generation</code>:</p>

<figure class='code'><figcaption><span>test.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;generation.jl&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">using</span> <span class="n">Base</span><span class="o">.</span><span class="n">Test</span>
</span><span class='line'>
</span><span class='line'><span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">WIDTH</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="n">created_generation</span> <span class="o">=</span> <span class="n">Generation</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">HEIGHT</span><span class="p">,</span> <span class="n">WIDTH</span><span class="p">)</span>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="nb">typeof</span><span class="p">(</span><span class="n">created_generation</span><span class="p">)</span> <span class="o">==</span> <span class="n">Array</span><span class="p">{</span><span class="kt">Int</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="p">@</span><span class="n">test</span> <span class="n">size</span><span class="p">(</span><span class="n">created_generation</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">HEIGHT</span><span class="p">,</span> <span class="n">WIDTH</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">created_generation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">@</span><span class="n">test</span> <span class="n">created_generation</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">in</span> <span class="mi">0</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Et voici les explications ligne par ligne. D&#8217;abord je rends disponible le code du futur fichier <code>generation.jl</code>:</p>

<pre><code>include("generation.jl")
</code></pre>

<p>Ensuite je demande à utiliser le module <code>Test</code>, pour avoir accès à la macro <code>@test</code>:</p>

<pre><code>using Base.Test
</code></pre>

<p>Définition des <em>constantes</em> pour la hauteur et la largeur de la génération:</p>

<pre><code>HEIGHT = 3
WIDTH = 4
</code></pre>

<p>Création d&#8217;une génération, c&#8217;est cette fonction qu&#8217;il m&#8217;intéresse de tester:</p>

<pre><code>created_generation = Generation.create(HEIGHT, WIDTH)
</code></pre>

<p>Je m&#8217;assure que <code>create</code> renvoie un tableau d&#8217;entiers à 2 dimensions:</p>

<pre><code>@test typeof(created_generation) == Array{Int,2}
</code></pre>

<p>Je m&#8217;assure que le tableau renvoyé par <code>create</code> possède bien les dimensions
voulues:</p>

<pre><code>@test size(created_generation) == (HEIGHT, WIDTH)
</code></pre>

<p>Je m&#8217;assure enfin que chaque cellule du tableau est un 1 ou un 0:</p>

<pre><code>for i in 1:length(created_generation)
    @test created_generation[i] in 0:1
end
</code></pre>

<p>Pour lancer ces tests : <code>julia test.jl</code>.</p>

<p>Voici maintenant la fonction <code>create</code> qui fera passer les tests ci-dessus:</p>

<figure class='code'><figcaption><span>generation.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="kr">module</span> <span class="n">Generation</span>
</span><span class='line'>
</span><span class='line'><span class="n">create</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notez l&#8217;efficacité de la fonction <code>rand</code>. Sans argument, elle produit
classiquement un nombre aléatoire entre 0 et 1:</p>

<pre><code>julia&gt; rand()
0.7084513868758786
</code></pre>

<p>Avec un <em>range</em>, elle sort un nombre compris dans ce <em>range</em>:</p>

<pre><code>julia&gt; rand(0:1)
1
</code></pre>

<p>Si j&#8217;ajoute en plus une dimension, elle renvoie un tableau:</p>

<pre><code>julia&gt; rand(0:1, 3)
3-element Array{Int32,1}:
 0
 0
 1
</code></pre>

<p>Avec deux dimensions:</p>

<pre><code>julia&gt; rand(0:1, 3, 4)
3x4 Array{Int32,2}:
 0  0  0  1
 1  1  1  1
 1  1  0  0
</code></pre>

<p>Et même pour le fun, avec 3 dimensions:</p>

<pre><code>julia&gt; rand(0:1, 3, 4, 3)
3x4x3 Array{Int32,3}:
[:, :, 1] =
 1  1  1  1
 0  1  0  0
 0  0  1  0

[:, :, 2] =
 1  1  0  1
 0  0  0  0
 1  1  1  1

[:, :, 3] =
 0  0  0  1
 1  0  0  1
 1  1  0  0
</code></pre>

<p>Vous pouvez aussi tester avec encore plus de dimensions, ça fonctionnera.</p>

<h2>Affichage d&#8217;une génération</h2>

<p>Bon, Julia est jeune, je l&#8217;ai déjà dit. Je n&#8217;ai rien trouvé de simple pour faire
un peu de graphisme, donc je vais faire les sorties dans la console.</p>

<figure class='code'><figcaption><span>display.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="kr">module</span> <span class="n">Display</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> draw</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">run</span><span class="p">(</span><span class="sb">`clear`</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">replace</span><span class="p">(</span><span class="n">repr</span><span class="p">(</span><span class="n">generation</span><span class="p">)[</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La première ligne de la fonction, <code>run</code>, appelle la commande système
<code>clear</code>, qui efface l&#8217;écran du terminal.</p>

<p>La seconde demande à être décomposée. Soit la génération suivante:</p>

<pre><code>julia&gt; generation = rand(0:1, 2, 3)
2x3 Array{Int32,2}:
 0  0  1
 0  1  0
</code></pre>

<p><code>repr</code> nous donne la représentation en chaîne de caractères:</p>

<pre><code>julia&gt; repr(generation)
"[0 0 1\n 0 1 0]"
</code></pre>

<p>On peut accéder à une chaîne comme un tableau, ici je conserve ce qui se trouve
entre le second et l&#8217;avant-dernier élément:</p>

<pre><code>julia&gt; repr(generation)[2:end-1]
"0 0 1\n 0 1 0"
</code></pre>

<p><strong>Je m&#8217;aperçois que j&#8217;ai oublié de parler d&#8217;un truc important: l&#8217;indexation les
tableaux en Julia commence à 1.</strong></p>

<p>Pour finir je supprime les espaces avec <code>replace</code>:</p>

<pre><code>julia&gt; replace(repr(generation)[2:end-1], " ", "")
"001\n010"
</code></pre>

<p>Et quand on combine tout ça dans un fichier <code>main.jl</code>, voici le résultat:</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;generation.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;display.jl&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">height</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">width</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'>
</span><span class='line'><span class="n">generation</span> <span class="o">=</span> <span class="n">Generation</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'><span class="n">Display</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ julia main.jl
00010111100111000011100111001010001101000010110111000111101101110101000011100000
00001101010010101111001010110101100101001000001011010001010110010100011011011011
01001000011101000001101110010010110000100101011110001001110110101111010001001001
11111110011101100001111010110101110000101011011000000011110000010011011100111111
11100100000011100001111111101010011000110011010101011100011110101110111111001111
11110011000101101010110010110011101101000111000111111111001110010100011101010101
10011101010110011110100101110110111101111101100110011011011001011100000110110000
01001110010101111101110001000110110100001101100100000010011101111000001010111100
00011001011000000000000111010000100001100000001110101110000010100010101111011111
00101011011010000001111001001011111101101110111000101100000100001101110110101100
10000010100100011111111101010101001010001010111111001111100001010001011010000001
11000011000001001101011001111101111111111111011111100101100101010000101111101001
11010111011111101001111110100000001011100100010100100100000010001011000010101110
10011000100111111100011010010100110001101110001001100100100000010100111001111011
11110001001011000101100001001110010100010011100101001101010111111100011100111101
11001111000101101111001110010010101001110010101100010100101011101011000101000000
01001111111101010010001100010011000001110110001110110101010101010000111010111000
01101001011011011001110010010010000101000111111111010101001011101011111001101010
00101111001100011111110110000110011100001011011100101101011001111111111100011110
01110001110010001001011100100000100000010110001100011011101001010011111011110100
</code></pre>

<p>Pour rendre la sortie écran un peu plus présentable, <em>effaçons</em> les 0, en les
remplaçant par des espaces, et remplaçons les 1 par des @:</p>

<figure class='code'><figcaption><span>display.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="kr">module</span> <span class="n">Display</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> draw</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">run</span><span class="p">(</span><span class="sb">`clear`</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">repr</span><span class="p">(</span><span class="n">generation</span><span class="p">)[</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="s">&quot;@&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="s">&quot;0&quot;</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour terminer, voici une petite boucle pour afficher une dizaine de générations:</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;generation.jl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">include</span><span class="p">(</span><span class="s">&quot;display.jl&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">height</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">width</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="mi">10</span>
</span><span class='line'>    <span class="n">generation</span> <span class="o">=</span> <span class="n">Generation</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mf">0.8</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Display</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/26/le-jeu-de-la-vie-en-julia-partie-3/'>Le jeu de la vie en Julia &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/24/le-jeu-de-la-vie-en-julia-partie-2/'>Le jeu de la vie en Julia &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en logo - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/20/le-jeu-de-la-vie-en-logo-partie-3/"/>
    <updated>2014-12-20T17:46:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/20/le-jeu-de-la-vie-en-logo-partie-3</id>
    <content type="html"><![CDATA[<p>Suite et fin du jeu de la vie en Logo.</p>

<p>Je ne montrerais pas d&#8217;extraits de code, pour la simple raison que
je n&#8217;en peux plus du langage Logo.  Ceci dit, pour les curieux, le code complet
se trouve sur <a href="https://github.com/lkdjiin/game-of-life-logo">Github</a>.</p>

<p> Je ne sais pas ce qui m&#8217;a pris de
ressortir Logo du placard. Les madeleines de Proust sont faites pour rester à
l&#8217;état de souvenirs. Écrire le jeu de la vie en Logo n&#8217;a jamais été fun. À
aucun moment.</p>

<!-- more -->


<p>Bref, j&#8217;oublie définitivement Logo. La prochaine version sera en Julia, ça
promet d&#8217;être bien plus intéressant.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/17/le-jeu-de-la-vie-en-logo-partie-2/'>Le jeu de la vie en logo &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/16/le-jeu-de-la-vie-en-logo-partie-1/'>Le jeu de la vie en logo &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en logo - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/17/le-jeu-de-la-vie-en-logo-partie-2/"/>
    <updated>2014-12-17T16:35:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/17/le-jeu-de-la-vie-en-logo-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cette fois, on affiche la génération de cellules crée la dernière fois.
J&#8217;ai déjà eu l&#8217;occasion de dire que Logo était spécial, on va voir avec
son système graphique que c&#8217;est bien le cas. Je ne vais pas parler de la
métaphore de la <em>tortue</em>, vous trouverez sûrement des ressources là-dessus.
Je voudrais plutôt parler du système de coordonnée. Alors que dans la plupart des
langages (tous ?) les systèmes graphiques proposent de placer le point d&#8217;origine (0, 0) en haut à
gauche, Logo le place au centre. En général, l&#8217;axe des y croit vers le bas,
en Logo il croit vers le haut.</p>

<p>Selon le manuel d&#8217;UCBLogo, voici à quoi s&#8217;attendre:</p>

<pre><code>(-100, 100)            (100, 100)

              (0, 0)

(-100, -100)           (100, -100)
</code></pre>

<!-- more -->


<p>Mais en fait, non. J&#8217;ai plutôt ça sur la machine où j&#8217;utilise Logo:</p>

<pre><code>(-250, 250)            (250, 250)

              (0, 0)

(-250, -250)           (250, -250)
</code></pre>

<p>Quoiqu&#8217;il en soit, voici comment ça marche.</p>

<figure class='code'><figcaption><span>drawing.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">hideturtle</span>
</span><span class='line'>
</span><span class='line'><span class="err">to draw.generation :generation :size</span>
</span><span class='line'><span class="err">for [y 1 :size] [p.draw.line :y]</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">to p.draw.line :y</span>
</span><span class='line'><span class="err">for [x 1 :size] [if (cell.alive? :generation :x :y) [p.draw.cell :x :y ] ]</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">to p.draw.cell :x :y</span>
</span><span class='line'><span class="err">penup</span>
</span><span class='line'><span class="err">setxy :x :y</span>
</span><span class='line'><span class="err">setheading 90</span>
</span><span class='line'><span class="err">pendown</span>
</span><span class='line'><span class="err">forward 1</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>hideturtle</code> cache la tortue, comme son nom l&#8217;indique. Parce que, en plus
d&#8217;être moche, ça ralenti le dessin, qui n&#8217;est déjà pas très rapide.</p>

<p>La procédure <code>draw.generation</code> itère sur chaque ligne de <code>generation</code> et
appelle la procédure <em>privée</em> <code>p.draw.line</code>.</p>

<p><code>p.draw.line</code> itère sur chaque cellule de la ligne. On détermine, avec
<code>cell.alive?</code>, si la cellule est vivante. Si c&#8217;est le cas, on appelle
<code>p.draw.cell</code>.</p>

<p><code>p.draw.cell</code> affiche un pixel en (x, y).</p>

<p>Dans le fichier <code>generation.lg</code>, j&#8217;ajoute la procédure <code>cell.alive?</code>.</p>

<figure class='code'><figcaption><span>generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">to cell.alive? :generation :x :y</span>
</span><span class='line'><span class="err">localmake &quot;line item :y :generation</span>
</span><span class='line'><span class="err">ifelse (item :x :line) = 1 [output &quot;true] [output &quot;false]</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on assemble le tout dans un fichier <code>application.lg</code>.</p>

<figure class='code'><figcaption><span>application.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">load &quot;generation.lg</span>
</span><span class='line'><span class="err">load &quot;drawing.lg</span>
</span><span class='line'>
</span><span class='line'><span class="err">make &quot;size 100</span>
</span><span class='line'>
</span><span class='line'><span class="err">draw.generation create.generation :size :size :size</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le résultat:</p>

<pre><code>$ tree
.
├── application.lg
├── drawing.lg
├── generation.lg
└── test.generation.lg

$ logo application.lg
</code></pre>

<p><img src="http://lkdjiin.github.io/images/game-of-life-logo.png"></p>

<p>Mouais, un peu moche, non ? J&#8217;avoue que je commence déjà à en avoir marre de
Logo.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/20/le-jeu-de-la-vie-en-logo-partie-3/'>Le jeu de la vie en logo &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/16/le-jeu-de-la-vie-en-logo-partie-1/'>Le jeu de la vie en logo &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en logo - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/16/le-jeu-de-la-vie-en-logo-partie-1/"/>
    <updated>2014-12-16T18:01:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/16/le-jeu-de-la-vie-en-logo-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>C&#8217;est parti pour la version Logo du jeu de la vie. J&#8217;utiliserais
<a href="http://www.cs.berkeley.edu/~bh/logo.html">ucblogo</a> en version 5.5, qui est celle qu&#8217;on trouve dans les paquets Debian.
Sur leur site vous trouverez la version 6, si vous souhaitez la compiler.</p>

<pre><code>$ logo
Welcome to Berkeley Logo version 5.5
</code></pre>

<h2>Introduction</h2>

<p>Attention ! Le monde de Logo est autre. Je n&#8217;ai pas d&#8217;autres formules qui me
viennent à l&#8217;esprit.  Si vous utilisez Vim, j&#8217;ai écrit un fichier de
<a href="https://github.com/lkdjiin/logo.vim">coloration syntaxique pour Logo</a>,
minimal, mais toujours utile pour ne pas se sentir coincé dans les années 80.
Et comme il n&#8217;existe pas de frameworks de test (ou alors ils sont bien cachés),
j&#8217;en ai écrit un rudimentaire : <a href="https://github.com/lkdjiin/logo-unit">Logo unit test</a>.</p>

<p>Bref, vous aurez compris que l&#8217;éco-système Logo open source est assez pauvre,
voir inexistant.  Je crois qu&#8217;il n&#8217;y a même pas de tag <code>logo</code> sur
stackoverflow.</p>

<!-- more -->


<h2>Création d&#8217;une génération</h2>

<p>Créons un fichier pour les tests, et un fichier pour l&#8217;implémentation.</p>

<pre><code>$ tree
.
├── generation.lg
└── test.generation.lg
</code></pre>

<p>En avant pour le premier test, je veux m&#8217;assurer que la procédure
<code>create.generation</code> renvoie une liste.</p>

<figure class='code'><figcaption><span>test.generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">load &quot;generation.lg</span>
</span><span class='line'>
</span><span class='line'><span class="err">to t.create.generation.returns.a.list</span>
</span><span class='line'><span class="err">assert.list create.generation</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Premières remarques sur Logo</h3>

<p>Tout d&#8217;abord, les points n&#8217;ont rien à voir avec des appels de
méthode/fonction/procédure.  C&#8217;est juste une manière de nommer les choses. En
Ruby on aurait <code>assert_list</code>, en Java <code>assertList</code>, en Racket <code>assert-list</code>, en
Logo c&#8217;est plutôt <code>assert.list</code>.</p>

<p>Ensuite, la première ligne <code>load "generation.lg</code>, qui charge le fichier
<code>generation.lg</code>, ne contient pas de faute de frappe ! Il y a bien un seul
guillement double (<code>"</code>). C&#8217;est la façon de dire que <code>generation.lg</code> doit être
pris dans son sens littéral, pas en tant que variable ou procédure, mais bien en
tant que nom.</p>

<h3>Lancer les tests</h3>

<p>On lance les tests en chargeant la procédure <code>tt</code>. Logo nous dit <em>je ne sais
pas comment faire pour create.generation</em>. Normal puisque cette procédure
n&#8217;existe pas encore.</p>

<pre><code>$ logo
Welcome to Berkeley Logo version 5.5
? tt "test.generation.lg
I don't know how  to create.generation  in t.create.generation.returns.a.list
[assert.list create.generation]
</code></pre>

<h3>Notre première procédure</h3>

<p>Il suffit de renvoyer une liste vide pour faire passer le test. Notez que
<code>output</code> est l&#8217;équivalent du plus commun <code>return</code>.</p>

<figure class='code'><figcaption><span>generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">to create.generation</span>
</span><span class='line'><span class="err">output []</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>? tt "test.generation.lg
.

1 tests. 0 fail.
</code></pre>

<h3>Une liste à plusieurs dimensions</h3>

<p>Notre liste devra avoir une largeur (x) et une hauteur (y), commençons par
tester la hauteur.</p>

<figure class='code'><figcaption><span>test.generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">load &quot;generation.lg</span>
</span><span class='line'>
</span><span class='line'><span class="err">to t.create.generation.returns.a.list</span>
</span><span class='line'><span class="err">assert.list create.generation 3</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">to t.create.generation.have.a.height</span>
</span><span class='line'><span class="err">assert.equal 3 count create.generation 3</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le code permettant de faire passer nos nouveaux tests.</p>

<figure class='code'><figcaption><span>generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">to create.generation :height</span>
</span><span class='line'><span class="err">output cascade :height [lput # ?] []</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cascade</code> prend un nombre d&#8217;itération, un template et une valeur de départ.
<code>lput</code> (pour <em>last put</em>) ajoute une valeur à la fin d&#8217;une liste. <code>#</code> dans le
template est remplacé par l&#8217;itération.</p>

<p>Ensuite, nouveaux tests pour s&#8217;assurer qu&#8217;on a aussi une largeur.</p>

<figure class='code'><figcaption><span>test.generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">load &quot;generation.lg</span>
</span><span class='line'>
</span><span class='line'><span class="err">to t.create.generation.returns.a.list</span>
</span><span class='line'><span class="err">assert.list create.generation 4 3</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">to t.create.generation.have.a.height</span>
</span><span class='line'><span class="err">assert.equal 3 count create.generation 4 3</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">to t.create.generation.have.a.width</span>
</span><span class='line'><span class="err">assert.equal 4 count first create.generation 4 3</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On implémente notre liste à 2 dimensions.</p>

<figure class='code'><figcaption><span>generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">to create.generation :width :height</span>
</span><span class='line'><span class="err">output cascade :height [lput (p.create.line :width) ?] []</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">to p.create.line :width</span>
</span><span class='line'><span class="err">output cascade :width [lput 0 ?] []</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <code>p.</code> en tête d&#8217;un nom de procédure est une convention que j&#8217;ai utilié pour
signifier que la procédure est privée.</p>

<p>Les tests passent.</p>

<pre><code>? tt "test.generation.lg
...

3 tests. 0 fail.
</code></pre>

<p>On peut regarder à quoi ressemble la sortie de notre procédure.</p>

<pre><code>? print create.generation 4 3
[0 0 0 0] [0 0 0 0] [0 0 0 0]
</code></pre>

<h3>Un peu de hasard</h3>

<p>Les cellules du jeu de la vie sont représentées soit par un 0 (cellule
morte), soit par un 1 (cellule vivante). Je teste que <code>create.generation</code>
produit bien une suite de 0 et de 1.</p>

<figure class='code'><figcaption><span>test.generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">to t.create.generation.produces.0s.or.1s</span>
</span><span class='line'><span class="err">rerandom</span>
</span><span class='line'><span class="err">localmake &quot;result create.generation 3 2</span>
</span><span class='line'><span class="err">assert.equal :result [[1 0 1] [1 1 1]]</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>rerandom</code> place le générateur de nombre aléatoire dans un état reproductible,
pour pouvoir tester facilement. <code>localmake</code> déclare une variable locale, ici
<code>result</code> qui va contenir la sortie de <code>create.generation 3 2</code>.</p>

<p>Et j&#8217;implémente avec la procédure <code>random</code> qui renvoie un nombre aléatoire.</p>

<figure class='code'><figcaption><span>generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">to p.create.line :width</span>
</span><span class='line'><span class="err">output cascade :width [lput (random 2) ?] []</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, les tests passent.</p>

<pre><code>? tt "test.generation.lg
....

4 tests. 0 fail.
? print create.generation 9 3
[0 0 1 0 1 1 0 0 0] [1 1 1 1 0 0 0 1 1] [1 0 1 0 1 1 1 1 0]
</code></pre>

<h2>La portée des variables en Logo</h2>

<p>Le code précédent fonctionne très bien, par contre on peut faire un refactoring
intéressant qui va me permettre de parler d&#8217;un phénomène étrange en Logo.</p>

<figure class='code'><figcaption><span>generation.lg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">to create.generation :width :height</span>
</span><span class='line'><span class="err">output cascade :height [lput p.create.line ?] []</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">to p.create.line</span>
</span><span class='line'><span class="err">output cascade :width [lput (random 2) ?] []</span>
</span><span class='line'><span class="err">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous remarquerez que j&#8217;ai enlevé le paramêtre <code>width</code> de la procédure
<code>p.create.line</code> et que ce <code>width</code> n&#8217;est plus passé par <code>create.generation</code>.
Pourtant le code continue de fonctionner comme un charme.</p>

<p>C&#8217;est que Logo a une notion toute particulière de la <em>localité</em> des variables.
Une variable locale à une procédure est connue dans cette même procédure
<strong>et aussi</strong> dans les sous-procédures appelées par cette même procédure.
Autrement dit, <code>p.create.line</code> connait les variables <code>width</code> et <code>height</code>
puisqu&#8217;elle est appelée par <code>create.generation</code>.</p>

<p>Ce n&#8217;est pas le seul langage à fonctionner comme ça (les premiers Lisp et
Perl, il me semble). Par contre je me demande toujours si c&#8217;est génial, ou
irresponsable.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/12/20/le-jeu-de-la-vie-en-logo-partie-3/'>Le jeu de la vie en logo &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/12/17/le-jeu-de-la-vie-en-logo-partie-2/'>Le jeu de la vie en logo &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en racket - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/11/09/le-jeu-de-la-vie-en-racket-partie-3/"/>
    <updated>2014-11-09T15:01:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/11/09/le-jeu-de-la-vie-en-racket-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>C&#8217;est la troisième et dernière partie du jeu de la vie en Racket.</p>

<p><img src="http://lkdjiin.github.io/images/screenshot-game-of-life-racket.png"></p>

<!-- more -->


<h2>Trouver le prochain état d&#8217;une cellule</h2>

<p>Vous avez l&#8217;habitude maintenant, je commence par un test très simple.</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et une implémentation minimale.</p>

<figure class='code'><figcaption><span>generation.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-cell-state</span> <span class="nv">neighborhood</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">create-generation</span>
</span><span class='line'>         <span class="nv">next-cell-state</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis je teste d&#8217;autres cas.</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>for/sum</code> réduit une liste à la somme de ses éléments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-cell-state</span> <span class="nv">neighborhood</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">sum</span> <span class="p">(</span><span class="nf">for/sum</span> <span class="p">([</span><span class="nf">i</span> <span class="nv">neighborhood</span><span class="p">])</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">3</span> <span class="nv">sum</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list-ref </span><span class="nv">neighborhood</span> <span class="mi">4</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je teste les derniers cas.</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme il y a maintenant trois cas, j&#8217;utilise <code>cond</code> au lieu de <code>if</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-cell-state</span> <span class="nv">neighborhood</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">sum</span> <span class="p">(</span><span class="nf">for/sum</span> <span class="p">([</span><span class="nf">i</span> <span class="nv">neighborhood</span><span class="p">])</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">[(</span><span class="nb">= </span><span class="mi">3</span> <span class="nv">sum</span><span class="p">)</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="p">[(</span><span class="nb">= </span><span class="mi">4</span> <span class="nv">sum</span><span class="p">)</span> <span class="p">(</span><span class="nb">list-ref </span><span class="nv">neighborhood</span> <span class="mi">4</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">[</span><span class="nf">else</span> <span class="mi">0</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On pourrait aussi utiliser <code>match</code> plutôt que <code>cond</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-cell-state</span> <span class="nv">neighborhood</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">match</span> <span class="p">(</span><span class="nf">for/sum</span> <span class="p">([</span><span class="nf">i</span> <span class="nv">neighborhood</span><span class="p">])</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>         <span class="p">[</span><span class="mi">3</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>         <span class="p">[</span><span class="mi">4</span> <span class="p">(</span><span class="nb">list-ref </span><span class="nv">neighborhood</span> <span class="mi">4</span><span class="p">)]</span>
</span><span class='line'>         <span class="p">[</span><span class="nf">_</span> <span class="mi">0</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;ai aucune idée de laquelle est la plus performante, même si je peux
imaginer à priori que dans ce cas là c&#8217;est <code>cond</code>.</p>

<h2>test-case</h2>

<p>Je pense qu&#8217;il est temps de regrouper les tests en <code>test-case</code>. Rackunit, le
framework de test de Racket est assez évolutif.</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span>
</span><span class='line'>         <span class="s">&quot;generation.rkt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">test-case</span> <span class="s">&quot;create-generation&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-pred</span> <span class="nv">list?</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>            <span class="s">&quot;It returns a list&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span> <span class="mi">4</span>
</span><span class='line'>              <span class="s">&quot;It builds a list with the right height&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">first</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)))</span> <span class="mi">3</span>
</span><span class='line'>              <span class="s">&quot;It builds a list with the right width&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">([</span><span class="nf">cell</span> <span class="p">(</span><span class="nf">first</span> <span class="p">(</span><span class="nf">first</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)))])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-true</span> <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">cell</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">cell</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>              <span class="s">&quot;It populates generation with 0s or 1s&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">((</span><span class="err">λ</span> <span class="p">()</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">random-seed </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                 <span class="s">&quot;It populates generation uniformly&quot;</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">test-case</span> <span class="s">&quot;next-cell-state&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-cell-state</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Extraire un voisinage de cellule</h2>

<p>Comme toujours je commence par un test simple. On peut noter les arguments
nommés de Racket (<code>#:</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">test-case</span> <span class="s">&quot;extract-neighborhood&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">([</span><span class="nf">game</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))])</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">extract-neighborhood</span> <span class="nv">game</span> <span class="kd">#:x</span> <span class="mi">1</span> <span class="kd">#:y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et une implémentation encore plus simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">extract-neighborhood</span> <span class="nv">generation</span> <span class="kd">#:x</span> <span class="p">[</span><span class="nf">x</span> <span class="mi">0</span><span class="p">]</span> <span class="kd">#:y</span> <span class="p">[</span><span class="nf">y</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>La suite est classique, j&#8217;ajoute un nouveau test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">test-case</span> <span class="s">&quot;extract-neighborhood&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">([</span><span class="nf">game</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))])</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">extract-neighborhood</span> <span class="nv">game</span> <span class="kd">#:x</span> <span class="mi">1</span> <span class="kd">#:y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">extract-neighborhood</span> <span class="nv">game</span> <span class="kd">#:x</span> <span class="mi">2</span> <span class="kd">#:y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je regarde ce test échouer.</p>

<pre><code>$ racket game-of-life-test.rkt 
--------------------
extract-neighborhood
FAILURE
actual:     (1 0 1 0 1 0 1 0 0)
expected:   (0 1 0 1 0 1 0 0 1)
</code></pre>

<p>Et j&#8217;implémente le minimum de code pour faire passer ce nouveau test.
Je vous épargne ça dans l&#8217;article, si vous êtes curieux vous pouvez trouver
<a href="https://github.com/lkdjiin/game-of-life-racket">le code sur Github</a>.</p>

<h2>Une nouvelle génération</h2>

<p>J&#8217;écris un test pour la production d&#8217;une nouvelle génération.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">test-case</span> <span class="s">&quot;next-generation&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">([</span><span class="nf">game</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))])</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">next-generation</span> <span class="nv">game</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le code qui fait passer ce test.</p>

<figure class='code'><figcaption><span>generation.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-generation</span> <span class="nv">current</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">for/list</span> <span class="p">([</span><span class="nf">y</span> <span class="p">(</span><span class="nb">length </span><span class="nv">current</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">for/list</span> <span class="p">([</span><span class="nf">x</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">first</span> <span class="nv">current</span><span class="p">))])</span>
</span><span class='line'>      <span class="p">(</span><span class="k">define </span><span class="nv">neighborhood</span> <span class="p">(</span><span class="nf">extract-neighborhood</span> <span class="nv">current</span> <span class="kd">#:x</span> <span class="nv">x</span> <span class="kd">#:y</span> <span class="nv">y</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">next-cell-state</span> <span class="nv">neighborhood</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut maintenant lancer le jeu de la vie.</p>

<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="s">&quot;generation.rkt&quot;</span>
</span><span class='line'>         <span class="s">&quot;window.rkt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">size</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">generation</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="nv">size</span> <span class="nv">size</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">canvas</span> <span class="p">(</span><span class="nf">create-window</span> <span class="nv">size</span> <span class="nv">size</span> <span class="nv">generation</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">loop</span> <span class="nv">n</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">send</span> <span class="nv">canvas</span> <span class="nv">change-generation</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">sleep </span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">when </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">sub1 </span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">next-generation</span> <span class="nv">g</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">loop</span> <span class="mi">30</span> <span class="nv">generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mise à l&#8217;échelle</h2>

<p>Pour rendre les choses un peu plus intéressantes visuellement, on va faire un
zoom x4.</p>

<figure class='code'><figcaption><span>window.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket/gui</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-window</span> <span class="nv">w</span> <span class="nv">h</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">scale</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">frame</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">frame%</span>
</span><span class='line'>                     <span class="p">[</span><span class="nf">label</span> <span class="s">&quot;Game of Life&quot;</span><span class="p">]</span>
</span><span class='line'>                     <span class="p">[</span><span class="nf">width</span> <span class="p">(</span><span class="nb">* </span><span class="nv">w</span> <span class="nv">scale</span><span class="p">)]</span>
</span><span class='line'>                     <span class="p">[</span><span class="nf">height</span> <span class="p">(</span><span class="nb">* </span><span class="nv">h</span> <span class="nv">scale</span><span class="p">)]))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">canvas</span> <span class="p">(</span><span class="nf">new</span> <span class="p">(</span><span class="nf">class</span> <span class="nv">canvas%</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>         <span class="p">(</span><span class="nf">define/override</span> <span class="p">(</span><span class="nf">on-paint</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">set-brush</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">brush%</span> <span class="p">[</span><span class="nf">color</span> <span class="s">&quot;black&quot;</span><span class="p">]))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">draw-rectangle</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">* </span><span class="nv">w</span> <span class="nv">scale</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">h</span> <span class="nv">scale</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">set-brush</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">brush%</span> <span class="p">[</span><span class="nf">color</span> <span class="s">&quot;white&quot;</span><span class="p">]))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">y</span> <span class="p">(</span><span class="nb">length </span><span class="nv">current-generation</span><span class="p">)])</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">x</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">first</span> <span class="nv">current-generation</span><span class="p">))])</span>
</span><span class='line'>               <span class="p">(</span><span class="k">when </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">list-ref </span><span class="p">(</span><span class="nb">list-ref </span><span class="nv">current-generation</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">draw-rectangle</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">scale</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">y</span> <span class="nv">scale</span><span class="p">)</span> <span class="nv">scale</span> <span class="nv">scale</span><span class="p">))))))))</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Une surface de jeu sans bordures</h2>

<p>Il reste à <em>retirer</em> les bordures du jeu. Le processus est exactement le même
que pour les versions <a href="http://lkdjiin.github.io/blog/2014/10/25/le-jeu-de-la-vie-en-ruby-opal-partie-1/">Javascript</a> et <a href="http://lkdjiin.github.io/blog/2014/10/16/le-jeu-de-la-vie-en-javascript-partie-1/">Ruby</a> et je n&#8217;ai pas envie de
réécrire les mêmes phrases. Au besoin, je vous rappelle que le
<a href="https://github.com/lkdjiin/game-of-life-racket">code complet du jeu de la vie en Racket</a> se trouve sur Github.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/11/08/le-jeu-de-la-vie-en-racket-partie-2/'>Le jeu de la vie en racket &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/11/01/le-jeu-de-la-vie-en-racket-partie-1/'>Le jeu de la vie en racket &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en racket - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/11/08/le-jeu-de-la-vie-en-racket-partie-2/"/>
    <updated>2014-11-08T13:46:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/11/08/le-jeu-de-la-vie-en-racket-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>C&#8217;est le moment d&#8217;afficher à l&#8217;écran notre génération créée au hasard
<a href="http://lkdjiin.github.io/blog/2014/11/01/le-jeu-de-la-vie-en-racket-partie-1/">la dernière fois</a>.
Je rappelle que je n&#8217;écris pas de tests pour cette partie.
Pour obtenir un affichage, je me contente de suivre les exemples donnés dans la
documentation
<a href="http://mirror.racket-lang.org/releases/6.1/doc/draw/overview.html">drawing overview</a>
et <a href="http://mirror.racket-lang.org/releases/6.1/doc/gui/windowing-overview.html">windowing overview</a>.</p>

<!-- more -->


<p>Ce qui donne la première experimentation suivante:</p>

<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket/gui</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">generation</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">100</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">frame</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">frame%</span>
</span><span class='line'>  <span class="p">[</span><span class="nf">label</span> <span class="s">&quot;Example&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="nf">width</span> <span class="mi">100</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="nf">height</span> <span class="mi">100</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">new</span> <span class="nv">canvas%</span>
</span><span class='line'>     <span class="p">[</span><span class="nf">parent</span> <span class="nv">frame</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="nf">paint-callback</span>
</span><span class='line'>       <span class="p">(</span><span class="err">λ</span> <span class="p">(</span><span class="nf">canvas</span> <span class="nv">dc</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">set-brush</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">brush%</span> <span class="p">[</span><span class="nf">color</span> <span class="s">&quot;black&quot;</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">y</span> <span class="p">(</span><span class="nb">length </span><span class="nv">generation</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">x</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">first</span> <span class="nv">generation</span><span class="p">))])</span>
</span><span class='line'>              <span class="p">(</span><span class="k">when </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">list-ref </span><span class="p">(</span><span class="nb">list-ref </span><span class="nv">generation</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">draw-rectangle</span> <span class="nv">x</span> <span class="nv">y</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">)))))])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">send</span> <span class="nv">frame</span> <span class="nv">show</span> <span class="no">#t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le truc marrant (une façon de voir comme une autre) est que si on
joue les tests, la fenêtre s&#8217;affiche. C&#8217;est pas très pratique.</p>

<p>Mais avant tout, ce code révèle une erreur précédente:</p>

<p><img src="http://lkdjiin.github.io/images/code-barre-2014-10-11.png"></p>

<p>On dirait un code barre ! Pas vraiment une distribution uniforme.</p>

<p>Alors le bug est simple à trouver, par contre je vais devoir écrire un ou
plusieurs nouveaux tests et je garde ça pour la fin de l&#8217;article.</p>

<p>Ensuite, je voudrais faire une boucle qui affiche une nouvelle génération au
hasard chaque seconde. Je dois avouer que cette histoire de canvas, je la sens
pas trop. Et le code que j&#8217;ai pondu s&#8217;en ressent. D&#8217;abord je mets ce qui a trait
à une génération dans un module à part:</p>

<figure class='code'><figcaption><span>generation.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-generation</span> <span class="nv">width</span> <span class="nv">height</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">for/list</span> <span class="p">([</span><span class="nf">i</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">height</span> <span class="mi">0</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">make-list</span> <span class="nv">width</span> <span class="p">(</span><span class="nb">random </span><span class="mi">2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">create-generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis, tout le bazar de frame et de canvas, aussi dans un module:</p>

<figure class='code'><figcaption><span>window.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket/gui</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-window</span> <span class="nv">w</span> <span class="nv">h</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">frame</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">frame%</span>
</span><span class='line'>                     <span class="p">[</span><span class="nf">label</span> <span class="s">&quot;Game of Life&quot;</span><span class="p">]</span>
</span><span class='line'>                     <span class="p">[</span><span class="nf">width</span> <span class="nv">w</span><span class="p">]</span>
</span><span class='line'>                     <span class="p">[</span><span class="nf">height</span> <span class="nv">h</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">canvas</span> <span class="p">(</span><span class="nf">new</span> <span class="p">(</span><span class="nf">class</span> <span class="nv">canvas%</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">super-new</span> <span class="p">[</span><span class="nf">parent</span> <span class="nv">frame</span><span class="p">]</span> <span class="p">[</span><span class="nf">style</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">no-autoclear</span><span class="p">)])</span>
</span><span class='line'>         <span class="p">(</span><span class="k">define </span><span class="nv">current-generation</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">define </span><span class="nv">dc</span> <span class="p">(</span><span class="nf">send</span> <span class="nv">this</span> <span class="nv">get-dc</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">define/public</span> <span class="p">(</span><span class="nf">change-generation</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="k">set! </span><span class="nv">current-generation</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">send</span> <span class="nv">this</span> <span class="nv">refresh-now</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">define/override</span> <span class="p">(</span><span class="nf">on-paint</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">set-brush</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">brush%</span> <span class="p">[</span><span class="nf">color</span> <span class="s">&quot;black&quot;</span><span class="p">]))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">draw-rectangle</span> <span class="mi">0</span> <span class="mi">0</span> <span class="nv">w</span> <span class="nv">h</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">set-brush</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">brush%</span> <span class="p">[</span><span class="nf">color</span> <span class="s">&quot;white&quot;</span><span class="p">]))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">y</span> <span class="p">(</span><span class="nb">length </span><span class="nv">current-generation</span><span class="p">)])</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">x</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">first</span> <span class="nv">current-generation</span><span class="p">))])</span>
</span><span class='line'>               <span class="p">(</span><span class="k">when </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">list-ref </span><span class="p">(</span><span class="nb">list-ref </span><span class="nv">current-generation</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">draw-rectangle</span> <span class="nv">x</span> <span class="nv">y</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">send</span> <span class="nv">frame</span> <span class="nv">show</span> <span class="no">#t</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">canvas</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">create-window</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Moi qui suis habitué à des méthodes de 2 ou 3 lignes, c&#8217;est pas vraiment ça.
Et puis j&#8217;ai du mal à saisir le modèle objet de Racket.</p>

<p>Enfin le programme principal avec la boucle:</p>

<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="s">&quot;generation.rkt&quot;</span>
</span><span class='line'>         <span class="s">&quot;window.rkt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">size</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">generation</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="nv">size</span> <span class="nv">size</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">canvas</span> <span class="p">(</span><span class="nf">create-window</span> <span class="nv">size</span> <span class="nv">size</span> <span class="nv">generation</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">loop</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">send</span> <span class="nv">canvas</span> <span class="nv">change-generation</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="nv">size</span> <span class="nv">size</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">sleep </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">when </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">sub1 </span><span class="nv">n</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">loop</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;ai le temps, j&#8217;essaierais d&#8217;utiliser la bibliothèque <code>2htdp/universe</code>,
qui me semble bien plus simple.</p>

<p>Maintenant le bug. Le problème est que je crée des lignes complètes de 0 ou de 1
dans la liste qui représente une génération, plutôt que de distribuer
uniformément ces 0 et ces 1. Je vais donc ajouter un test qui initialise le
générateur de nombres aléatoires toujours de la même manière.</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span>
</span><span class='line'>         <span class="s">&quot;generation.rkt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">((</span><span class="err">λ</span> <span class="p">()</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">random-seed </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                 <span class="s">&quot;It populates generation uniformly&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sans surprise, le test échoue.</p>

<pre><code>$ racket game-of-life-test.rkt
--------------------
FAILURE
actual:     ((1 1) (1 1) (0 0))
expected:   ((1 0) (1 0) (1 0))
name:       check-equal?
location:   (#&lt;path:/home/xavier/code/game-of-life-racket/game-of-life-test.rkt&gt; 21 3 537 112)
expression: (check-equal? (create-generation 2 3) (quote ((1 0) (1 0) (1 0))))
message:    "It populates generation uniformly"
</code></pre>

<p>Et voici le fix.</p>

<figure class='code'><figcaption><span>generation.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-generation</span> <span class="nv">width</span> <span class="nv">height</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">rnd</span> <span class="nv">_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">random </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">for/list</span> <span class="p">([</span><span class="nf">i</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">height</span> <span class="mi">0</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">map </span><span class="nv">rnd</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">width</span> <span class="mi">0</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">create-generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/11/09/le-jeu-de-la-vie-en-racket-partie-3/'>Le jeu de la vie en racket &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/11/01/le-jeu-de-la-vie-en-racket-partie-1/'>Le jeu de la vie en racket &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en racket - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/11/01/le-jeu-de-la-vie-en-racket-partie-1/"/>
    <updated>2014-11-01T12:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/11/01/le-jeu-de-la-vie-en-racket-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Le troisième volet de cette série <a href="http://lkdjiin.github.io/blog/2014/10/08/le-jeu-de-la-vie-dans-sept-langages-differents/">le jeu de la vie en 7 langages</a>
sera consacré à <a href="http://racket-lang.org/">Racket</a>, un dialecte de Lisp.
Télécharger le ici: <a href="http://download.racket-lang.org/">http://download.racket-lang.org/</a>
et installez avec <code>bash ./nom-du-fichier.sh</code></p>

<!-- more -->


<p>On commence par un <em>smoke test</em> pour être sûr que Racket est bien installé et
accessible. Dans un fichier <code>game-of-life-test.rkt</code>, chargez le framework de
test et le futur fichier d&#8217;implémentation.</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span>
</span><span class='line'>         <span class="s">&quot;game-of-life.rkt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis executez le :</p>

<pre><code>$ racket game-of-life-test.rkt
game-of-life-test.rkt:4:9: cannot open module file
</code></pre>

<p>Cool, Racket est là et nous dit qu&#8217;il ne peut pas ouvrir le fichier
<code>game-of-life.rkt</code>. Créons le :</p>

<pre><code>touch game-of-life.rkt
</code></pre>

<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span></code></pre></td></tr></table></div></figure>


<p>Premier test maintenant, la fonction <code>create-generation</code> doit renvoyer une
liste.</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span>
</span><span class='line'>         <span class="s">&quot;game-of-life.rkt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-pred</span> <span class="nv">list?</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ racket game-of-life-test.rkt 
game-of-life-test.rkt:6:19: create-generation: unbound identifier in module
</code></pre>

<p>Ok, on renvoie donc une liste vide <code>'()</code>. Notez aussi <code>provide</code>, qui permet de
définir en quelque sorte les fonctions publiques du fichier.</p>

<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-generation</span> <span class="nv">width</span> <span class="nv">height</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">create-generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>rackunit</code>, le framework de test <em>shippé</em> avec Racket peut aussi documenter
les tests:</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span> <span class="mi">4</span>
</span><span class='line'>              <span class="s">&quot;It builds a list with the right height&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On crée une liste de la bonne taille, et comme on se fiche pour l&#8217;instant de ce
qu&#8217;elle contient, on peut l&#8217;initialiser avec des zéros.</p>

<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-generation</span> <span class="nv">width</span> <span class="nv">height</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">make-list</span> <span class="nv">height</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chaque élément de la liste doit aussi être une liste (la dimension <code>x</code>).</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">first</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)))</span> <span class="mi">3</span>
</span><span class='line'>              <span class="s">&quot;It builds a list with the right width&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ racket game-of-life-test.rkt 
length: contract violation
  expected: list?
  given: 0
</code></pre>

<p>J&#8217;utilise <code>for/list</code> pour construire cette fameuse liste à deux dimensions. Les
différentes variantes de <code>for</code> me semble très utilisées en Racket.</p>

<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-generation</span> <span class="nv">width</span> <span class="nv">height</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">for/list</span> <span class="p">([</span><span class="nf">i</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">height</span> <span class="mi">0</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">make-list</span> <span class="nv">width</span> <span class="mi">0</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, je veux que ma liste contiennent des <code>0</code> (cellule morte) et des
<code>1</code> (cellule vivante).</p>

<figure class='code'><figcaption><span>game-of-life-test.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">([</span><span class="nf">cell</span> <span class="p">(</span><span class="nf">first</span> <span class="p">(</span><span class="nf">first</span> <span class="p">(</span><span class="nf">create-generation</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)))])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-true</span> <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">cell</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">cell</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>              <span class="s">&quot;It populates generation with 0s or 1s&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>game-of-life.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">create-generation</span> <span class="nv">width</span> <span class="nv">height</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">for/list</span> <span class="p">([</span><span class="nf">i</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">height</span> <span class="mi">0</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">make-list</span> <span class="nv">width</span> <span class="p">(</span><span class="nb">random </span><span class="mi">2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce dernier bout de code contient un bug qui n&#8217;est pas attrapé par les
tests (vous l&#8217;avez vu ?). Je <em>fixerais</em> ça dans le prochain article.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/11/09/le-jeu-de-la-vie-en-racket-partie-3/'>Le jeu de la vie en racket &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/11/08/le-jeu-de-la-vie-en-racket-partie-2/'>Le jeu de la vie en racket &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/'>Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en ruby (opal) - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/10/29/le-jeu-de-la-vie-en-ruby-opal-partie-3/"/>
    <updated>2014-10-29T07:18:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/10/29/le-jeu-de-la-vie-en-ruby-opal-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Il est temps de tout assembler, pour ça on va écrire une classe <code>Game</code> qui va
jouer le rôle de chef d&#8217;orchestre.</p>

<!-- more -->


<h2>La classe Game</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">canvas</span><span class="p">,</span> <span class="n">iterations</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@iterations</span> <span class="o">=</span> <span class="n">iterations</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="n">generation</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@width</span> <span class="o">=</span> <span class="n">generation</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@generation</span> <span class="o">=</span> <span class="n">generation</span>
</span><span class='line'>    <span class="vi">@canvas</span> <span class="o">=</span> <span class="n">canvas</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>    <span class="n">draw</span>
</span><span class='line'>    <span class="vi">@iterations</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@iterations</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">update</span>
</span><span class='line'>      <span class="n">after_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span> <span class="p">{</span> <span class="n">start</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>    <span class="vi">@canvas</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>    <span class="vi">@generation</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="n">line</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="p">,</span> <span class="n">x</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@canvas</span><span class="o">.</span><span class="n">pixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">new_generation</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@height</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@width</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>        <span class="n">extractor</span> <span class="o">=</span> <span class="no">NeighborhoodExtractor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@generation</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Neighborhood</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">extractor</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span><span class="o">.</span><span class="n">next_state</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@generation</span> <span class="o">=</span> <span class="n">new_generation</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rien d&#8217;exceptionnel dans ce code, à part la ligne suivante, extraite de la
méthode <code>start</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">after_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span> <span class="p">{</span> <span class="n">start</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Qu&#8217;est-ce que c&#8217;est que cette méthode <code>after_ms</code> ?</p>

<p>Je ne peux pas faire une bête boucle <code>loop</code>, ou un appel récursif à <code>start</code>
puisqu&#8217;on est en Opal.rb, et pas <em>vraiment</em> en Ruby. Le code qui tourne, au
final, sera du Javascript. Et si on n&#8217;insère pas des petites pauses, le
navigateur ne va pas aimer du tout. Et puisqu&#8217;en Javascript il n&#8217;existe pas de
fonction <code>pause</code>, il n&#8217;y en a pas non plus en Opal.rb.</p>

<p>J&#8217;avoue que je me suis gratter un peu la tête avant de trouver une solution
toute simple. Il suffit d&#8217;écrire un <em>wrapper</em> autour de la fonction Javascript
<code>setTimeout</code>:</p>

<figure class='code'><figcaption><span>app/kernel.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Kernel</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_ms</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="sb">`setTimeout(function() {`</span>
</span><span class='line'>      <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="sb">`}, n);`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mise à l&#8217;échelle de l&#8217;affichage</h2>

<p>Ça, c&#8217;est très simple.</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;canvas</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;400&quot;</span> <span class="na">id=</span><span class="s">&quot;canvas&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;build.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/canvas.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Canvas</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">SCALE</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@canvas</span>  <span class="o">=</span> <span class="sb">`document.getElementById(&#39;canvas&#39;)`</span>
</span><span class='line'>    <span class="vi">@context</span> <span class="o">=</span> <span class="sb">`</span><span class="si">#@canvas</span><span class="sb">.getContext(&#39;2d&#39;)`</span>
</span><span class='line'>    <span class="vi">@height</span>  <span class="o">=</span> <span class="sb">`</span><span class="si">#@canvas</span><span class="sb">.height`</span>
</span><span class='line'>    <span class="vi">@width</span>   <span class="o">=</span> <span class="sb">`</span><span class="si">#@canvas</span><span class="sb">.width`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">clear</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="vi">@width</span><span class="p">,</span> <span class="vi">@height</span><span class="p">,</span> <span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="s1">&#39;white&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_rect</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="sb">`</span><span class="si">#@context</span><span class="sb">.fillStyle = </span><span class="si">#{</span><span class="n">color</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="sb">`</span><span class="si">#@context</span><span class="sb">.fillRect(</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="sb">, </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="sb">, </span><span class="si">#{</span><span class="n">w</span><span class="si">}</span><span class="sb">, </span><span class="si">#{</span><span class="n">h</span><span class="si">}</span><span class="sb">)`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Supprimer les bordures</h2>

<p>Ça, c&#8217;est très ennuyeux, vous pouvez sauter directement à la fin de l&#8217;article.</p>

<p>Je désactive les tests des bordures, puis je les réécrit un par un.</p>

<figure class='code'><figcaption><span>spec/neighborhood_extractor_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app/neighborhood_extractor.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">NeighborhoodExtractor</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:generation</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;borders&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">specify</span> <span class="s1">&#39;x=1 y=0&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">extractor</span> <span class="o">=</span> <span class="no">NeighborhoodExtractor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">extractor</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># specify &#39;x=2 y=2&#39; do</span>
</span><span class='line'>    <span class="c1">#   extractor = NeighborhoodExtractor.new(generation, 2, 2)</span>
</span><span class='line'>    <span class="c1">#   expect(extractor.cells).to eq [0, 1, 0, 1, 1, 0, 0, 0, 0]</span>
</span><span class='line'>    <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># specify &#39;x=0 y=1&#39; do</span>
</span><span class='line'>    <span class="c1">#   extractor = NeighborhoodExtractor.new(generation, 0, 1)</span>
</span><span class='line'>    <span class="c1">#   expect(extractor.cells).to eq [0, 0, 1, 0, 1, 0, 0, 0, 1]</span>
</span><span class='line'>    <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># specify &#39;x=3 y=1&#39; do</span>
</span><span class='line'>    <span class="c1">#   extractor = NeighborhoodExtractor.new(generation, 3, 1)</span>
</span><span class='line'>    <span class="c1">#   expect(extractor.cells).to eq [0, 1, 0, 1, 0, 0, 1, 0, 0]</span>
</span><span class='line'>    <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/neighborhood_extractor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">group_of_tree</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">row_index</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">generation</span><span class="o">[</span><span class="n">generation</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">row_index</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">x</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="o">[*</span><span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">]</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après refactoring</p>

<figure class='code'><figcaption><span>app/neighborhood_extractor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NeighborhoodExtractor</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:generation</span><span class="p">,</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cells</span>
</span><span class='line'>    <span class="o">[</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">row_index</span> <span class="o">=</span> <span class="n">generation</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">row_index</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">group_of_tree</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">group_of_tree</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">row_index</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">x</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="o">[*</span><span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">]</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/neighborhood_extractor_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;borders&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">specify</span> <span class="s1">&#39;x=2 y=2&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">extractor</span> <span class="o">=</span> <span class="no">NeighborhoodExtractor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">extractor</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/neighborhood_extractor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NeighborhoodExtractor</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:generation</span><span class="p">,</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cells</span>
</span><span class='line'>    <span class="o">[</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">group_of_tree</span><span class="p">(</span><span class="n">ensure_overlapping</span><span class="p">(</span><span class="n">row_index</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ensure_overlapping</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">generation</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">index</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">index</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">group_of_tree</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="o">[</span> <span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">x</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="o">[*</span><span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">]</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">][</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/neighborhood_extractor_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;borders&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">specify</span> <span class="s1">&#39;x=0 y=1&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">extractor</span> <span class="o">=</span> <span class="no">NeighborhoodExtractor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">extractor</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">specify</span> <span class="s1">&#39;x=3 y=1&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">extractor</span> <span class="o">=</span> <span class="no">NeighborhoodExtractor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">extractor</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça y est, on y voit plus clair.</p>

<figure class='code'><figcaption><span>app/neighborhood_extractor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NeighborhoodExtractor</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:generation</span><span class="p">,</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cells</span>
</span><span class='line'>    <span class="o">[</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="o">*</span><span class="n">extract</span><span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">group_of_tree</span><span class="p">(</span><span class="n">ensure_overlapping</span><span class="p">(</span><span class="n">row_index</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ensure_overlapping</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">generation</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">index</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">index</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">group_of_tree</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">row</span> <span class="o">=</span> <span class="n">generation</span><span class="o">[</span><span class="n">row_index</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="o">[</span><span class="n">row</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">*</span><span class="n">row</span><span class="o">[</span><span class="n">x</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">x</span> <span class="o">==</span> <span class="n">generation</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="o">[*</span><span class="n">row</span><span class="o">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">]</span><span class="p">,</span> <span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">row</span><span class="o">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, Ruby/Opal.rb c&#8217;est fait. Vous pouvez trouver le code sur Github si vous
êtes intéressés : <a href="https://github.com/lkdjiin/game-of-life-ruby">Le jeu de la vie en ruby/opal.rb</a>.</p>

<p>La prochaine version sera écrite en Racket, un dialecte de Lisp.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/10/27/le-jeu-de-la-vie-en-ruby-opal-partie-2/'>Le jeu de la vie en ruby (opal) &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/10/25/le-jeu-de-la-vie-en-ruby-opal-partie-1/'>Le jeu de la vie en ruby (opal) &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/10/08/le-jeu-de-la-vie-dans-sept-langages-differents/'>Le jeu de la vie dans sept langages différents</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
