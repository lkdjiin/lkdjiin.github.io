<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-02-09T19:03:37+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9/"/>
    <updated>2014-02-09T18:55:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/">L&#8217;auto complétion programmable en bash: partie 8</a>.</p>

<h2>Une complétion améliorée</h2>

<p>On voit aujourd&#8217;hui deux fonctions bien utiles lors de l&#8217;écriture
de votre script d&#8217;auto-complétion: <code>_get_comp_words_by_ref</code> et
<code>compopt</code>.</p>

<!-- more -->


<p>On va ajouter une option <code>--format=</code> à notre commande <code>test</code>. Ce que
je veux, c&#8217;est pouvoir écrire quelque chose comme ça:</p>

<pre><code>$ mytool test --format=documentation
</code></pre>

<p>Il faut donc que:</p>

<pre><code>$ mytool test -[TAB]
</code></pre>

<p>nous donne ceci:</p>

<pre><code>$ mytool test --format=
</code></pre>

<p>Mais contrairement à ce qu&#8217;il se passe jusqu&#8217;ici, je ne veux pas
que l&#8217;auto-complétion ajoute un espace après <code>--format=</code>.</p>

<p>Voici tout d&#8217;abord le script qui fait ça :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span>cur prev <span class="nb">command </span>options
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="o">)</span>
</span><span class='line'>    _get_comp_words_by_ref cur prev
</span><span class='line'>    <span class="nv">commands</span><span class="o">=</span><span class="s1">&#39;new compile test&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$COMP_CWORD</span> -eq 1 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$commands&quot;</span> -- <span class="s2">&quot;$cur&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">&quot;$cur&quot;</span> <span class="o">==</span> -* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">command</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[1]</span><span class="k">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="nv">$command</span> in
</span><span class='line'>            new<span class="o">)</span>
</span><span class='line'>                <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--without-test&#39;</span>
</span><span class='line'>                ;;
</span><span class='line'>            compile<span class="o">)</span>
</span><span class='line'>                <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--verbose&#39;</span>
</span><span class='line'>                ;;
</span><span class='line'>            <span class="nb">test</span><span class="o">)</span>
</span><span class='line'>                <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--format=&#39;</span>
</span><span class='line'>                compopt -o nospace
</span><span class='line'>                ;;
</span><span class='line'>        <span class="k">esac</span>
</span><span class='line'><span class="k">        </span><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$options&quot;</span> -- <span class="s2">&quot;$cur&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant, je vais détailler les nouveautés. D&#8217;abord, vous avez
peut-être remarqué que la ligne:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_get_comp_words_by_ref cur prev
</span></code></pre></td></tr></table></div></figure>


<p>a remplacé les deux lignes suivantes
(<a href="">voir article précédent</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">cur</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD]}&quot;</span>
</span><span class='line'><span class="nv">prev</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD-1]}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est plus simple, plus lisible, plus propre. Cette fonction,
<code>_get_comp_words_by_ref</code>, se trouve dans le script <code>/etc/bash_completion</code>,
que je vous invite à étudier. Ce fichier défini plusieurs fonctions
utiles pour la complétion.</p>

<p>Voyons maintenant l&#8217;ajout de la nouvelle option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>        <span class="nb">test</span><span class="o">)</span>
</span><span class='line'>            <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--format=&#39;</span>
</span><span class='line'>            compopt -o nospace
</span><span class='line'>            ;;
</span></code></pre></td></tr></table></div></figure>


<p>La nouveauté est ici <code>compopt -o nospace</code>. La fonction <code>compopt</code> permet
d&#8217;allumer/éteindre certaines options pour la complétion en cours. Ici on
demande de ne pas ajouter d&#8217;espace à la fin de la chaîne renvoyée par
la complétion.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/"/>
    <updated>2014-02-08T14:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7/">L&#8217;auto complétion programmable en bash: partie 7</a>.</p>

<h2>Une complétion plus étoffée</h2>

<p>Après avoir étudié les variables <code>COMPREPLY</code>, <code>COMP_WORDS</code>, <code>COMP_CWORD</code>,
et le motif minimal, voici maintenant un programme plus utile.</p>

<!-- more -->


<p>Je veux que <code>mytool new</code> réponde à la seule option <code>--without-test</code>.
Donc:</p>

<pre><code>$ mytool new -[TAB]
</code></pre>

<p>doit donner:</p>

<pre><code>$ mytool new --without-test
</code></pre>

<p>Je veux aussi que <code>mytool commpile</code> réponde seulement à <code>--verbose</code>, donc:</p>

<pre><code>$ mytool compile -[TAB]
</code></pre>

<p>doit donner:</p>

<pre><code>$ mytool compile --verbose
</code></pre>

<p>Quant à <code>mytool test</code>, il ne prend aucune option.</p>

<p>Voici sans plus tarder un programme qui fait ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span>cur prev <span class="nb">command </span>options
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="o">)</span>
</span><span class='line'>    <span class="nv">cur</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD]}&quot;</span>
</span><span class='line'>    <span class="nv">prev</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD-1]}&quot;</span>
</span><span class='line'>    <span class="nv">commands</span><span class="o">=</span><span class="s1">&#39;new compile test&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$COMP_CWORD</span> -eq 1 <span class="o">]]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$commands&quot;</span> -- <span class="s2">&quot;$cur&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span><span class="nb">command</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[1]</span><span class="k">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$cur&quot;</span> <span class="o">==</span> -* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">            case</span> <span class="nv">$command</span> in
</span><span class='line'>                new<span class="o">)</span>
</span><span class='line'>                    <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--without-test&#39;</span>
</span><span class='line'>                    ;;
</span><span class='line'>                compile<span class="o">)</span>
</span><span class='line'>                    <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--verbose&#39;</span>
</span><span class='line'>                    ;;
</span><span class='line'>            <span class="k">esac</span>
</span><span class='line'><span class="k">            </span><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$options&quot;</span> -- <span class="s2">&quot;$cur&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'><span class="k">    fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Ok, Bash n&#8217;est pas le plus lisible des langages, mais si vous avez suivi
tous les articles précédent, vous êtes en mesure de suivre la logique
de ce programme. Voilà ce que donne l&#8217;algorithme:</p>

<pre><code>Si le curseur est en position 1
  Compléter avec les commandes
Sinon
  Trouver la commande courante
  Si le mot sous le curseur commence par '-'
    Compléter les options suivant la commande courante
</code></pre>

<p>Quelques points précis maintenant : on calcule le mot sous le curseur
dans <code>cur</code> et le mot précédent dans <code>prev</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">cur</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD]}&quot;</span>
</span><span class='line'><span class="nv">prev</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD-1]}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On place toutes les commandes dans une variable <code>commands</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">commands</span><span class="o">=</span><span class="s1">&#39;new compile test&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ce qui permet de calculer les complétions possibles de la manière
suivante (plus lisible et flexible quand on a beaucoup de commandes):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$commands&quot;</span> -- <span class="s2">&quot;$cur&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Ruby - Utiliser les variables d'environnement]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement/"/>
    <updated>2014-02-07T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour un projet en cours, je dois accéder à une variable d&#8217;environnement
passée par la ligne de commande. Voici comment faire, et pourquoi le
faire.</p>

<!-- more -->


<h2>Comment faire ?</h2>

<p>Dans Ruby, on accède aux variables d&#8217;environnement à l&#8217;aide
du hash <code>ENV</code>. Pour créer une variable d&#8217;environnement qui ne sera
connue que de votre programme, il faut
l&#8217;affecter avant la commande:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ MYVAR=1 irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">p</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MYVAR&#39;</span><span class="o">]</span>
</span><span class='line'><span class="go">&quot;1&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>La syntaxe suivante crée une variable d&#8217;environnement avec une chaîne
vide:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ MYVAR= irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">p</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MYVAR&#39;</span><span class="o">]</span>
</span><span class='line'><span class="go">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une variable d&#8217;environnement inexistante renverra <code>nil</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MYVAR&#39;</span><span class="o">]</span>
</span><span class='line'><span class="go">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pourquoi faire ?</h2>

<p>Pour prendre des décisions qui ne sont connues
qu&#8217;au lancement du programme, on se sert normalement des options en
ligne de commande, du genre:</p>

<pre><code>$ foo -a --bar
</code></pre>

<p>Mais quand un programme A est lancé par un autre programme B, ou
bien par le
déclenchement du programme B, on n&#8217;a pas forcement la possibilité
d&#8217;ajouter des options au programme A. Dans ce cas les variables
d&#8217;environnement sont une solution.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/'>Ruby 2.1: Les nouvelles méthodes de Set</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/29/ruby-2-dot-1-la-methode-array-number-to-h/'>Ruby 2.1: la méthode Array#to_h</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/'>Remplacer Sed et Awk par Ruby: Récapitulatif</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Dossier parent dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/"/>
    <updated>2014-02-06T20:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment ouvrir le dossier parent dans le Finder,
(l&#8217;explorateur d&#8217;OS X).</p>

<!-- more -->


<h2>Remonter au dossier parent dans le Finder</h2>

<p>L&#8217;idée est bien sûr de pouvoir faire ça avec le clavier. Avec une
souris vous savez déjà comment faire ;)</p>

<p>Sur Linux, on utilise la touche <code>Backspace</code>, et parfois
<code>Alt flèche haut</code>.</p>

<p>Sur OS X, on utilisera <code>Meta flèche haut</code>, la touche <code>Backspace</code> ne
fonctionnera pas.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Raccourcis clavier pour changer de bureau]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/"/>
    <updated>2014-02-05T20:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment changer facilement et rapidement de bureau
virtuel.</p>

<!-- more -->


<h2>Les raccourcis de Mission Control</h2>

<p>Pour passer au bureau virtuel de gauche, c&#8217;est <code>Control flèche gauche</code>.  <br/>
Pour passer au bureau virtuel de droite, c&#8217;est <code>Control flèche droite</code>.</p>

<p>À cause du temps de transition de l&#8217;animation entre les changements
de bureau, il est intéressant de pouvoir accéder directement au
bureau souhaité. <code>Control 1</code> vous ammène sur le bureau numéro 1,
<code>Control 2</code> sur le bureau numéro 2, etc. Si ce genre de raccourci
ne fonctionne pas pour vous, allez voir ici:</p>

<pre><code>Menu pomme &gt; Préférences système &gt; Clavier &gt; Raccourcis
</code></pre>

<p>Notez au passage qu&#8217;il est impossible de désactiver l&#8217;animation entre
les changements de bureau (<em>!!??</em>), ce qui s&#8217;avère très pénible
certains jours…</p>

<p><a href="http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/">Astuce suivante</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Les bureaux virtuels]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/"/>
    <updated>2014-02-04T20:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment activer les bureaux virtuels à la sauce OS X.</p>

<!-- more -->


<h2>Mission Control</h2>

<p>Si il y a un truc dont je ne veux vraiment pas me passer, c&#8217;est bien
l&#8217;utilisation des bureaux virtuels. Je sais que ça ne convient pas
à tous le monde, loin de là, mais si vous êtes comme moi, vous serez
heureux d&#8217;apprendre qu&#8217;il y a un équivalent sur OS X : Mission Control.</p>

<p>Pour l&#8217;activer :</p>

<pre><code>Menu pomme &gt; Préférences système &gt; Mission control &gt; Activation
</code></pre>

<p>Une fois activé, appuyez sur F9 pour avoir accès à une vue de tous
vos bureaux, en ajouter, modifier l&#8217;ordre, etc.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/">Astuce suivante</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Vim - Les sections]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections/"/>
    <updated>2014-02-03T20:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je viens juste de découvrir deux nouveaux mouvements avec Vim que
j&#8217;aimerais partager avec vous:
section suivante et section précédente.</p>

<!-- more -->


<p>Pour aller à la section suivante :</p>

<pre><code>]]
</code></pre>

<p>Pour aller à la section précédente :</p>

<pre><code>[[
</code></pre>

<p>Le tout étant de savoir ce qu&#8217;est une section !? J&#8217;étudierais l&#8217;aide
de Vim plus tard… Pour l&#8217;instant, voici ce que ça donne avec les
langages suivants:</p>

<p><strong>Bash, C</strong> : Va au caractère <code>{</code> d&#8217;une fonction
 (uniquement quand il débute une ligne).</p>

<p><strong>Python</strong> : Va à chaque <code>class</code> et <code>def</code>.</p>

<p><strong>Ruby</strong> : Va à chaque <code>module</code> et <code>class</code>.</p>

<p><strong>Vim</strong> : Va à chaque <code>function</code>.</p>

<p>Notez que ça semble ne rien faire avec les fichiers Javascript,
Racket, Scheme, Java, Haskell, et j&#8217;en passe. Je n&#8217;ai pas plus
d&#8217;informations pour l&#8217;instant, mais je compte bien m&#8217;y pencher de
plus près. En attendant, si vous avez des connaissances sur ces
mouvements, n&#8217;hésitez pas à nous en faire profiter dans un
commentaire.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/'>Sauvegarde automatique des fichiers dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes/'>Vim et les digraphes</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7/"/>
    <updated>2014-02-02T18:35:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6/">L&#8217;auto complétion programmable en bash: partie 6</a>.</p>

<h2>Un motif général et basique, la suite</h2>

<p>Après avoir regardé la variable <code>COMPREPLY</code> dans le dernier article,
on étudie aujourd&#8217;hui les variables <code>COMP_WORDS</code> et <code>COMP_CWORD</code>.</p>

<!-- more -->


<p>On va encore modifier notre script, cette fois pour examiner le
contenu de la variable <code>COMP_WORDS</code>:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[@]</span><span class="k">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>N&#8217;oubliez pas de sourcer:</p>

<pre><code>$ source /etc/bash_completion.d/mytool
</code></pre>

<p>Testons:</p>

<pre><code>$ mytool foo bar[TAB]
</code></pre>

<p>est remplacé par:</p>

<pre><code>$ mytool foo mytool foo bar
</code></pre>

<p>On voit que <code>COMP_WORDS</code> est un tableau qui contient chaque éléments
de notre ligne de commande, au moment où celle ci est envoyée à
l&#8217;auto-complétion.</p>

<p>Voyons maintenant <code>COMP_CWORD</code>:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="nv">$COMP_CWORD</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Si je tapes:</p>

<pre><code>$ mytool foo bar[TAB]
</code></pre>

<p>Cela va être remplacé par:</p>

<pre><code>$ mytool foo 2
</code></pre>

<p>Donc, <code>COMP_CWORD</code> contient l&#8217;index de l&#8217;élément de la ligne de
commande dans lequel se trouve le curseur.</p>

<p>On a maintenant tous les éléments en main pour comprendre le script
présenté la dernière fois comme le motif de base pour
l&#8217;auto-complétion:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">current</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">&quot;new compile test&quot;</span> -- <span class="nv">$current</span><span class="k">)</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Il reste juste à expliquer la dernière ligne:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>complete</code>, interne à Bash, s&#8217;occupe bien sûr de l&#8217;auto-complétion
du programme <code>mytool</code>. Le nombre d&#8217;options possibles est important, vous pouvez
jeter un oeil au manuel si vous avez le temps. On se contentera ici de l&#8217;option
<code>-F</code>. Cette option est très intéressante, elle prend en argument le nom d&#8217;une
fonction (ici <code>_mytool</code>) qui va calculer la complétion. Cette fameuse option
<code>-F</code> permet aussi à <code>complete</code> de savoir qu&#8217;elle doit chercher des résultats
dans la variable <code>COMPREPLY</code>. Notez la convention utilisée: la fonction
<code>_mytool</code> calcule la complétion du programme <code>mytool</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Sauvegarder et quitter les fichiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers/"/>
    <updated>2014-02-01T20:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Il est temps pour moi de faire un point sur les différentes méthodes
qu&#8217;offre Vim pour quitter et/ou sauvegarder un fichier.</p>

<!-- more -->


<h2>Les basiques</h2>

<p>Voici, selon moi, les commandes à retenir en premier lieu.</p>

<p>Pour sauvegarder un fichier, utilisez la commande <code>write</code>, ou
plutôt son raccourci <code>w</code>:</p>

<pre><code>:w
:write
</code></pre>

<p>Je rappelle qu&#8217;on peut facilement obtenir une aide exhaustive sur une
commande quelconque:</p>

<pre><code>:h :write
</code></pre>

<p>Et je conseille de lire systématiquement l&#8217;aide de Vim sur les
commandes dont je vais vous parler. Vous découvrirez ainsi des tas
de variantes qui pourrait vous être utile.</p>

<p>Pour sauvegarder tous les fichiers en une seule fois:</p>

<pre><code>:wall
</code></pre>

<p>Pour quitter un fichier, on utilise <code>quit</code>, ou son raccourci <code>q</code>:</p>

<pre><code>:q
:quit
</code></pre>

<p>De même, pour quitter tous les fichiers (et fermer Vim):</p>

<pre><code>:qa
:qall
</code></pre>

<p>Si vous voulez fermer un fichier modifié <em>sans</em> enregistrer les
modifications, la commande suivante est indispensable:</p>

<pre><code>:q!
</code></pre>

<p>Voilà pour les basiques. Ces commandes sont simples à mémoriser.</p>

<h2>Les combinaisons</h2>

<p>Il arrive souvent qu&#8217;on veuille sauvegarder un fichier, <em>et en même
temps</em> le fermer. Je recommenderais aux débutants d&#8217;utiliser la
commande suivante:</p>

<pre><code>:wq
</code></pre>

<p>Elle est très facile à mémoriser, étant la combinaison de <code>write</code> et
de <code>quit</code>.</p>

<p>Quand du temps aura passé et que vous serez prêt à en apprendre
d&#8217;autres, essayez donc les deux qui suivent:</p>

<p>Un simple <code>:x</code> permet de sauver/quitter le fichier, vous gagnez une
touche par rapport à <code>:wq</code>:</p>

<pre><code>:x
</code></pre>

<p>Suivant le layout de votre clavier, la suivante peut vous convenir plus ou
moins. C&#8217;est la seule qui soit en mode normal et non pas en mode commande,
rapide comme l&#8217;éclair, je l&#8217;adore:</p>

<pre><code>ZZ
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Naviguer dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/"/>
    <updated>2014-01-31T20:48:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment ouvrir un dossier dans le Finder
(l&#8217;explorateur d&#8217;OS X), et notamment un dossier caché.</p>

<!-- more -->


<h2>Naviguer dans l&#8217;explorateur</h2>

<p>Bien sûr, on peut toujours cliquer sur le dossier à ouvrir. Mais en
fait non, sur mon poste les dossiers cachés (ceux qui commencent par
un point) refusent de s&#8217;ouvrir ainsi. Et puis si on a les mains sur
le clavier, c&#8217;est toujours agaçant d&#8217;aller chercher la souris.</p>

<p>Une fois le dossier sélectionné à l&#8217;aide des touches fléchées, sur
Linux on entre dans le dossier en appuyant sur la touche <code>Enter</code>.
Sur OS X, il faut appuyer sur <code>Meta</code> + <code>flèche bas</code>.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/">Astuce suivante</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Afficher tous les fichiers dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/"/>
    <updated>2014-01-30T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment afficher tous les fichiers dans le Finder
(l&#8217;explorateur d&#8217;OS X).</p>

<!-- more -->


<h2>Afficher tous les fichiers dans l&#8217;explorateur</h2>

<p>Par défaut, l&#8217;explorateur d&#8217;OS X ne montre pas les fichiers et
dossiers cachés (ceux qui commencent par un point) et d&#8217;autres
(je ne sais pas trop lesquels).</p>

<p>Dans Linux, un <code>Ctrl h</code> dans l&#8217;explorateur affiche/masque ces fameux
fichiers et dossiers cachés. Sous OS X, c&#8217;est moins pratique, il
faut saisir ceci dans un terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.finder AppleShowAllFiles -bool <span class="nb">true</span>
</span><span class='line'>defaults write NSGlobalDomain AppleShowAllExtensions -bool <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faudra ensuite tuer toutes les instances de Finder pour que les
changements soient pris en compte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>killall Finder
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/">Astuce suivante</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6/"/>
    <updated>2014-01-29T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/">L&#8217;auto complétion programmable en bash: partie 5</a>.</p>

<h2>Un motif général et basique</h2>

<p>Nous avons écrit un petit <a href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/">programme pour tester</a>,
puis nous avons écrit <a href="http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/">un script d&#8217;auto-complétion très simple</a>.
Reprenons notre jeu de rôle: nous avons un programme <code>mytool</code> qui
attend une des trois commandes suivantes: <code>new</code>, <code>compile</code> ou
<code>test</code>. On va ajouter ceci: la commande <code>new</code> peut prendre
l&#8217;option <code>--without-test</code> et la commande <code>compile</code> peut prendre
l&#8217;option <code>--verbose</code>. Ça reste encore très simple, mais on ne peut
déjà plus se servir uniquement de la fonction <code>complete</code>, vue
la dernière fois.</p>

<p>Voyons donc le motif général utilisé par beaucoup de scripts
d&#8217;auto-complétion:</p>

<!-- more -->




<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">current</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">&quot;new compile test&quot;</span> -- <span class="nv">$current</span><span class="k">)</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Le script ci-dessus fait exactement la même chose que notre simple
script de la dernière fois, qui était le suivant:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">complete</span> -W <span class="s2">&quot;new compile test&quot;</span> mytool
</span></code></pre></td></tr></table></div></figure>


<p>Mais il le fait d&#8217;une manière plus compliquée. En effet,
pourquoi faire simple… Les explications viendront plus tard.</p>

<p>En fait, pour aller plus loin, il est important de comprendre le rôle
des variables <code>COMP_WORDS</code>, <code>COMP_CWORD</code> et <code>COMPREPLY</code>. Pour ça, on
va modifier notre script, et chercher à comprendre ce que
représente <code>COMPREPLY</code>:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> this is some replacement <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Pour qu&#8217;il soit pris en compte tout de suite, il faut le sourcer:</p>

<pre><code>$ source /etc/bash_completion.d/mytool
</code></pre>

<p>Alors, que fait-il ? Si je tapes <code>mytool foo bar[TAB]</code>, voici ce que
le script sort:</p>

<pre><code>$ mytool foo bar[TAB]
is           replacement  some         this   
</code></pre>

<p>COMPREPLY accepte un tableau de chaînes, qui sont les suggestions que
nous renvoit l&#8217;auto-complétion. On note au passage que ces suggestions
sont triées alphabétiquement.</p>

<p>Modifions à nouveau notre script:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> replacement <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois, COMPREPLY représente un tableau d&#8217;un seul élément.
N&#8217;oubliez pas de sourcer le script avant de le tester:</p>

<pre><code>$ mytool foo bar[TAB]
</code></pre>

<p>devient:</p>

<pre><code>$ mytool foo replacement
</code></pre>

<p>Vous devriez maintenant avoir bien compris à quoi sert la variable
<code>COMPREPLY</code>.</p>

<p>La prochaine fois, on regardera en détail les variables <code>COMP_WORDS</code>
et <code>COMP_CWORD</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 7</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/"/>
    <updated>2014-01-28T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Après <a href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/">avoir installé</a> le plugin Airline pour Vim,
après <a href="http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/">avoir configuré le thème</a>,
puis <a href="http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/">personnalisé quelques sections</a>,
vous pensiez en avoir fini. Mais il se peut que la branche git
n&#8217;apparaisse pas dans votre barre de statut ?
Comment faire pour que Airline affiche le nom de la branche git ?</p>

<!-- more -->


<p>En fait, il ne peut pas. Enfin pas vraiment. Airline ne fait pas tout.
Par contre il intègre très bien d&#8217;autres plugins. Et notamment
l&#8217;excellent vim-fugitive de Tim Pope. Donc, pour que Airline affiche
votre branche git, il vous suffit d&#8217;installer vim-fugitive. Par
exemple, avec Pathogen:</p>

<pre><code>git clone git://github.com/tpope/vim-fugitive.git ~/.vim/bundle/vim-fugitive
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/'>Installation du plugin Airline pour Vim &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/"/>
    <updated>2014-01-27T21:01:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant qu&#8217;on a personnalisé l&#8217;apparence de Airline, voyons
comment on peut personnaliser les informations des sections.</p>

<!-- more -->


<p>Tout d&#8217;abord, la section qui affiche le numéro de ligne et de
colonne du curseur (la section la plus à droite) ne me plait pas
du tout. Je voudrais supprimer le petit symbole (qui prend de la
place pour rien) et le pourcentage (dont je n&#8217;ai jamais compris
l&#8217;intérêt) et ajouter le nombre de lignes du fichier. Je voudrais
donc un truc comme ça:</p>

<pre><code>ligne courante / total lignes : colonne
</code></pre>

<p>La documentation de Airline (<code>:h airline</code>) nous apprends que chaque
section possède un petit nom (pour la dernière c&#8217;est <code>z</code>), est
personnalisable, et qu&#8217;on peut même en ajouter. La documentation de
Vim (<code>:h 'statusline'</code>) nous permet de savoir quoi mettre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_section_z <span class="p">=</span> <span class="s1">&#39; %l / %L : %c &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà.</p>

<p>Sur le même principe, je veux modifier la section centrale, celle qui
affiche le nom du fichier. Par défaut, c&#8217;est le nom complet, avec son
chemin, qui est affiché. Comme je dispose déjà de cette information dans
la barre de titre de la fenêtre, je n&#8217;en ai pas besoin et le nom du
fichier sans son chemin me suffira:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_section_c <span class="p">=</span> <span class="s1">&#39;%t %m&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>%t</code> est le nom du fichier et <code>%m</code> est la marque de modification
(le <code>[+]</code>).</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/'>Installation du plugin Airline pour Vim &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/"/>
    <updated>2014-01-26T16:03:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après <a href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/">l&#8217;installation basique du plugin Airline</a>, voyons maintenant
comment modifier quelque peu le thème.</p>

<!-- more -->


<p>On peut visualiser les thèmes disponibles pour Airline
<a href="https://github.com/bling/vim-airline/wiki/Screenshots">sur cette page</a>.
J&#8217;ai choisi wombat pour l&#8217;instant, puisque je trouve que c&#8217;est celui
qui <em>colle</em> le mieux avec mon jeu de couleurs actuel. Voici ce qu&#8217;il
faut ajouter au <code>.vimrc</code> pour changer de thème:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_theme<span class="p">=</span><span class="s1">&#39;wombat&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous n&#8217;êtes pas sûr du nom pour le thème que vous avez choisi,
regardez le nom du fichier dans le dossier
<code>vim-airline/autoload/airline/themes</code>.</p>

<p>J&#8217;ai ensuite installé quelques polices de caractères patchées pour Powerline,
trouvées
<a href="https://github.com/Lokaltog/powerline-fonts">ici</a>, mais aucunes
ne m&#8217;a vraiment séduite. J&#8217;utilise la font <code>Inconsolata-g</code>, qui me
convient parfaitement, je ne vois donc pas de raison d&#8217;en changer.</p>

<p>Il faut maintenant paramétrer les symboles pour les bords des sections,
la branche git, les fichiers en lectures seules, etc. Mettez donc
ceci dans votre <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> <span class="p">!</span>exists<span class="p">(</span><span class="s1">&#39;g:airline_symbols&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:airline_symbols <span class="p">=</span> {}
</span><span class='line'><span class="k">endif</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_left_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_left_alt_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_right_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_right_alt_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_symbols.branch <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_symbols.<span class="nb">readonly</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme il n&#8217;est pas certain que les symboles ci-dessus apparaissent dans
votre navigateur, en voici une version en image:</p>

<p><img src="http://lkdjiin.github.io/images/symboles-airline.png"></p>

<p>La prochaine fois, on verra comment modifier une section.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/'>Installation du plugin Airline pour Vim &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/"/>
    <updated>2014-01-25T18:34:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour disposer de quelques informations dans la barre de statut,
j&#8217;utilisais jusqu&#8217;ici statline, qui me convenait assez bien, rien de
tape à l&#8217;œil. Et puis j&#8217;ai décidé d&#8217;essayer quelque chose de
plus coloré, histoire de voir si ça m&#8217;était utile.</p>

<!-- more -->


<p>Avant d&#8217;installer <a href="https://github.com/bling/vim-airline">Airline</a>,
il faut bien entendu retirer Powerline, ou Statline (je n&#8217;en connais pas
d&#8217;autres).</p>

<p>Comme j&#8217;utilise Pathogen pour gérer mes plugins, voici comment rapatrier
le code d&#8217;Airline:</p>

<pre><code>git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline
</code></pre>

<p>La documentation est exhaustive et fournit
<a href="https://github.com/bling/vim-airline#installation">ici</a>
d&#8217;autres méthodes d&#8217;installation pour Vundle, NeoBundle et VAM.</p>

<p>Avec Pathogen, ne pas oublier de générer la documentation, vous en
aurez besoin pour personnaliser l&#8217;apparence et les fonctionnalités
de Airline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Helptags
</span></code></pre></td></tr></table></div></figure>


<p>Un rapide coup d&#8217;œil à la documentation, justement, montre que la
personnalisation aux petits oignons va prendre un peu plus longtemps
que quelques minutes. Bref, on va devoir se manger de la doc…</p>

<p>À ce stade, c&#8217;est à dire en ayant seulement installé Airline et rien
configuré encore, ça fonctionne déja. Mais curieusement (du moins c&#8217;est
curieux à mes yeux) Airline est configuré par défaut pour n&#8217;apparaître que
lorsqu&#8217;une fenêtre est splittée. Pour l&#8217;avoir tout le temps, il faut ajouter
ceci dans le <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">laststatus</span><span class="p">=</span><span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois, je m&#8217;attaquerais à la modification du thème.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X : Raccourcis claviers de Firefox]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/"/>
    <updated>2014-01-24T21:01:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Les raccourcis claviers de Firefox qui changent.</p>

<!-- more -->


<h2>Raccourcis claviers de Firefox</h2>

<p>J&#8217;utilise très peu de raccourcis clavier sur Firefox, mais je tiens
beaucoup à ceux que j&#8217;utilise:</p>

<ul>
<li>Pour augmenter la taille des caractères, c&#8217;est <code>Meta +</code> au lieu
de <code>Ctrl +</code>.</li>
<li>Pour ouvrir un nouvel onglet, c&#8217;est <code>Meta t</code> au lieu de <code>Ctrl t</code>.</li>
<li>Pour fermer un onglet, c&#8217;est <code>Meta w</code> au lieu de <code>Ctrl w</code>.</li>
<li>Pour aller à l&#8217;onglet numéro <em>n</em>, c&#8217;est <code>Meta 1</code>, au lieu de <code>Alt 1</code>,
<code>Meta 2</code> au lieu de <code>Alt 2</code>, etc… Ce raccourci est très pratique
quand vous avez des onglets épinglés dont vous vous servez
régulièrement (chat, webmail, réseaux sociaux, etc).</li>
<li>Pour aller à l&#8217;onglet précédent/onglet suivant, le raccourci est
identique: <code>Ctrl page-précédente</code> et <code>Ctrl page-suivante</code>.</li>
</ul>


<p><a href="http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/">Astuce précédente</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/">Astuce suivante</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X : Coloriser la commande ls]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/"/>
    <updated>2014-01-23T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment faire pour que la commande <code>ls</code> affiche sa sortie
en couleur dans un terminal.</p>

<!-- more -->


<h2>Comment coloriser la sortie de la commande ls </h2>

<p>Sous Linux, qui utilise normalement la commande <code>ls</code> du <strong>Gnu</strong>, c&#8217;est l&#8217;option
<code>--color</code> qui permet d&#8217;obtenir la sortie en couleurs. Ce qui donne
typiquement ce genre d&#8217;alias:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls --color=auto&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sous OS X, qui utilise <strong>la version Bsd</strong> de la commande <code>ls</code>, il s&#8217;agit
de l&#8217;option <code>-G</code>, ce qui donnera plutôt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls -G&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/">Astuce suivante</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X : Le fichier de configuration de Bash]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash/"/>
    <updated>2014-01-22T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Dans quel fichier doit-on placer sa configuration Bash
sous OS X.</p>

<!-- more -->


<h2>Où mettre son fichier de configuration pour Bash ?</h2>

<p>Sous Linux, le fichier de configuration de Bash est généralement
placé dans <code>~/.bashrc</code>.</p>

<p>Sous OS X, il faut le mettre dans <code>~/.bash_profile</code>.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/">Astuce suivante</a>
<a href="http://lkdjiin.github.io/blog/2014/01/21/de-linux-debian-a-os-x-renommer-un-fichier-dans-lexplorateur/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) à OS X : Renommer un fichier dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/21/de-linux-debian-a-os-x-renommer-un-fichier-dans-lexplorateur/"/>
    <updated>2014-01-21T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/21/de-linux-debian-a-os-x-renommer-un-fichier-dans-lexplorateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment renommer un fichier dans l&#8217;explorateur de fichier.</p>

<!-- more -->


<h2>Renommer un fichier dans le navigateur de fichier</h2>

<p>On peut bien sûr renommer un fichier dans un terminal avec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv file newname
</span></code></pre></td></tr></table></div></figure>


<p>Mais comment faire de même dans l&#8217;explorateur de fichier alors qu&#8217;il
n&#8217;y a pas de menu contextuel du genre «renommer le fichier» ?
Il faut, après avoir sélectionné le fichier à l&#8217;aide des touches fléchées ou
d&#8217;un clic de souris, <strong>appuyer sur la touche Entrée</strong>. C&#8217;est tout.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/01/20/de-linux-debian-a-os-x-quitter-firefox/">Astuce précédente</a>
<a href="http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash/">Astuce suivante</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li></ul></section></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/'>De Linux (Debian) vers OS X &ndash; Raccourcis clavier pour changer de bureau</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/'>De Linux (Debian) vers OS X &ndash; Les bureaux virtuels</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
