<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-10T16:46:01+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - Utiliser les blocs pour faire du refactoring - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/10/ruby-utiliser-les-blocs-pour-faire-du-refactoring-partie-2/"/>
    <updated>2014-03-10T15:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/10/ruby-utiliser-les-blocs-pour-faire-du-refactoring-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Suite à l&#8217;article d&#8217;hier
(<a href="http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring/">Utiliser les blocs pour faire du refactoring</a>),
on m&#8217;a demandé la différence entre <code>block.call</code> et <code>yield</code>. C&#8217;est parti.</p>

<!-- more -->


<p>On s&#8217;était arrêté là:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essayons de remplacer <code>block.call</code> par <code>yield</code>:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lorsqu&#8217;on lance le programme, on voit qu&#8217;il n&#8217;y a pas de différences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby test.rb
</span><span class='line'>Début de la méthode un
</span><span class='line'>Au milieu de la méthode un
</span><span class='line'>Fin de la méthode un
</span><span class='line'>Début de la méthode deux
</span><span class='line'>Ceci est le milieu de la méthode deux
</span><span class='line'>Fin de la méthode deux
</span></code></pre></td></tr></table></div></figure>


<p>Ok, donc <code>block.call</code> et <code>yield</code> c&#8217;est pareil ? Attends encore. Essayons
maintenant de supprimer le <code>&amp;block</code>:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Toujours pas de différences ! Par contre, on ne pourra pas appeler
<code>block.call</code> sans avoir défini <code>&amp;block</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code ci-dessus donnera évidemment une erreur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby test.rb
</span><span class='line'>Début de la méthode un
</span><span class='line'>test.rb:16:in <span class="sb">`</span>helper<span class="s1">&#39;: undefined local variable or method `block&#39;</span> <span class="k">for</span>
</span><span class='line'><span class="c">#&lt;Bidule:0x9eaf6ec&gt; (NameError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Toutes ces expérimentations nous ammène à une première conclusion: <em>Les
blocs sont implicites, et donc ils sont partout</em>. Ce que confirme, s&#8217;il en
est encore besoin, la session irb suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">=&gt; :foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;ok&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;I am in a block&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="go">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le contenu du bloc n&#8217;est jamais évalué, mais ne provoque pas d&#8217;erreur
lors de l&#8217;appel de <code>foo</code>.</p>

<p>Seconde conclusion, <code>block.call</code> et <code>yield</code> fonctionnent à l&#8217;identique.
Bien que je préfère <code>block.call</code>, qui me force à documenter la méthode
avec le <code>&amp;block</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring/'>Ruby &ndash; Utiliser les blocs pour faire du refactoring</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement/'>Astuce Ruby &ndash; Utiliser les variables d&#8217;environnement</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/'>Ruby 2.1: Les nouvelles méthodes de Set</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Utiliser les blocs pour faire du refactoring]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring/"/>
    <updated>2014-03-09T15:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Suivant le(s) langage(s) que vous pratiquiez avant de vous mettre à Ruby,
les blocs peuvent vous sembler plus ou moins obscurs. Voici un
exemple d&#8217;utilisation possible, lorsque vous faites du refactoring.</p>

<!-- more -->


<p>Prenons le programme suivant:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode un&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode deux&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici ce que ça donne quand on le lance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby test1.rb
</span><span class='line'>Début de la méthode un
</span><span class='line'>Au milieu de la méthode un
</span><span class='line'>Fin de la méthode un
</span><span class='line'>Début de la méthode deux
</span><span class='line'>Au milieu de la méthode deux
</span><span class='line'>Fin de la méthode deux
</span></code></pre></td></tr></table></div></figure>


<p>Le problème de la classe <code>Bidule</code> est que ses méthodes <code>un</code> et <code>deux</code>
sont identiques (ou presque). On aura donc intérêt à extraire une
méthode helper:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Au milieu de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, c&#8217;était du refactoring classique.</p>

<p>Maintenant imaginons que la classe <code>Bidule</code> soit ainsi:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode un&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode deux&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous avez remarqué la différence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois les méthodes <code>un</code> et <code>deux</code> se distinguent un peu plus, bien
que la logique reste identique. On peux donc tirer avantage des blocs:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/10/ruby-utiliser-les-blocs-pour-faire-du-refactoring-partie-2/'>Ruby &ndash; Utiliser les blocs pour faire du refactoring &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement/'>Astuce Ruby &ndash; Utiliser les variables d&#8217;environnement</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/'>Ruby 2.1: Les nouvelles méthodes de Set</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Débarassez vous des buffers inutilisés]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/08/vim-debarassez-vous-des-buffers-inutilises/"/>
    <updated>2014-03-08T20:37:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/08/vim-debarassez-vous-des-buffers-inutilises</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>J&#8217;avais envie d&#8217;écrire un truc comme ça depuis quelques mois déjà.
Un plugin pour effacer tous les buffers inutilisés. Mais comme je ne
m&#8217;en servirais que 3 ou 4 fois par mois, et encore, j&#8217;ai toujours remis à
plus tard.</p>

<p>Quoiqu&#8217;il en soit, on l&#8217;a fait à ma place, parfait.</p>

<!-- more -->


<p>Le plugin
<a href="http://www.vim.org/scripts/script.php?script_id=4882">Wipeout</a>
permet de supprimer tous les buffers qui ne sont pas liés à une
fenêtre, ni à un onglet. On l&#8217;appelera comme ça:</p>

<pre><code>:Wipeout
</code></pre>

<p>Si vous n&#8217;utilisez pas les onglets, <a href="https://twitter.com/madx">@madx</a> en
a écrit un similaire qui supprimera les buffers qui ne sont pas affichés
(et donc du même coup les onglets autres que le courant):
<a href="https://github.com/madx/vim-plugins/blob/master/plugin/clean-buffers.vim">CleanBuffers</a>.
On le lancera avec:</p>

<pre><code>:CleanBuffers
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers/'>Vim &ndash; Sauvegarder et quitter les fichiers</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques raccourcis pour Firefox]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/07/quelques-raccourcis-pour-firefox/"/>
    <updated>2014-03-07T20:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/07/quelques-raccourcis-pour-firefox</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>C&#8217;est vendredi. Fin de la semaine. Je vais la faire courte. Voici trois
raccourcis clavier pour Firefox, dont deux que je viens de découvrir
aujourd&#8217;hui, et un qui ne fonctionne que sur OS X.</p>

<!-- more -->


<p><strong>Ctrl $</strong></p>

<p>Permet d&#8217;afficher le groupe d&#8217;onglets suivants. Je l&#8217;ai découvert
aujourd&#8217;hui par hasard. Fonctionne sur OS X, mais pas sur Linux :(</p>

<p><strong>/</strong></p>

<p>Affiche une boite de dialogue pour chercher du texte dans la page.
Appuyez sur F3 pour chercher le suivant.</p>

<p><strong>&lsquo;</strong></p>

<p>Affiche une boite de dialogue pour chercher du texte dans la page <em>seulement
dans les liens</em>.
Là aussi, appuyez sur F3 pour chercher le suivant.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/20/de-linux-debian-a-os-x-quitter-firefox/'>De Linux (Debian) à OS X &ndash; Quitter Firefox</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/26/de-linux-debian-vers-os-x-supprimer-un-fichier-dans-le-finder/'>De Linux (Debian) vers OS X &ndash; Supprimer un fichier dans le finder</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/17/afficher-larborescence-dun-dossier-dans-le-terminal/'>Afficher l&#8217;arborescence d&#8217;un dossier dans le terminal</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un éditeur pour le terminal - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/"/>
    <updated>2014-03-06T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans l&#8217;article d&#8217;aujourd&#8217;hui, on regarde comment utiliser la couleur.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">has_colors?</span>
</span><span class='line'>    <span class="n">close_screen</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Your terminal has no colors&quot;</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">start_color</span>
</span><span class='line'>  <span class="n">init_pair</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">COLOR_RED</span><span class="p">,</span> <span class="no">COLOR_BLACK</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attron</span><span class="p">(</span><span class="n">color_pair</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">setpos</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="s2">&quot;In colors...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attroff</span><span class="p">(</span><span class="n">color_pair</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'>  <span class="n">getch</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut savoir si le terminal est capable d&#8217;afficher en couleur grâce à
<code>has_colors?</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">unless</span> <span class="n">has_colors?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avant de pouvoir utiliser la couleur, il faut faire appel à <code>start_color</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">start_color</span>
</span></code></pre></td></tr></table></div></figure>


<p>On crée un «assemblage» de couleurs avec <code>init_pair</code>, en lui passant un
identifiant, auquel on pourra se référer plus tard, une couleur de premier
plan et une couleur d&#8217;arrière plan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">init_pair</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">COLOR_RED</span><span class="p">,</span> <span class="no">COLOR_BLACK</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On active un «assemblage» comme ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">attron</span><span class="p">(</span><span class="n">color_pair</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et on le désactive comme cela:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">attroff</span><span class="p">(</span><span class="n">color_pair</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/'>Écrire un éditeur pour le terminal &ndash; partie 5</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprenez Vim comme vous voulez]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/05/apprenez-vim-comme-vous-voulez/"/>
    <updated>2014-03-05T20:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/05/apprenez-vim-comme-vous-voulez</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Un jour j&#8217;ai commis ça : <a href="http://lkdjiin.github.io/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois/">Ayez confiance dans le mode normal</a>.
En gros, j&#8217;expliquai dans cet article qu&#8217;un débutant sur Vim doit se
<em>forcer</em> à rester le plus longtemps possible en mode normal. Parce que
c&#8217;est le mode le plus important de Vim, que c&#8217;est la <em>Vim way</em>, toussa…</p>

<p><strong>Bullshit !</strong></p>

<!-- more -->


<p>En le relisant, cet article, j&#8217;ai pensé à toutes celles et ceux qui ont
tentés de passer à Vim de cette manière, et qui sont revenus en arrière,
parfois plusieurs fois ; à celles et ceux qui voudraient franchir le pas
mais qui n&#8217;osent pas, ou qui remettent à plus tard, à cause de personnes
comme moi, qui disent «c&#8217;est ainsi qu&#8217;il faut faire et pas autrement».</p>

<p>Alors <em>mea culpa</em>, en y refléchissant un peu mieux, je ne vois <em>aucunes</em>
raisons pour ne pas vous mettre à Vim de la manière qui vous plaira. Ce
que je décrivais dans cet ancien article a fonctionné pour moi. Et ça
ne dois pas avoir valeur universelle. Faites comme vous l&#8217;entendez.
On peut très bien apprendre Vim en étant scotché en mode insertion pendant
des semaines, et en introduisant les autres modes tout doucement.
Si ça vous semble plus naturel, allez y comme ça. Ce qui compte vraiment, c&#8217;est
de franchir le pas, pas la manière dont on le franchit.</p>

<p>Bon Vim…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf/'>Bien débuter avec Vim: conseil numéro neuf</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/05/bien-debuter-avec-vim-conseil-numero-huit/'>Bien débuter avec Vim: conseil numéro huit</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/31/bien-debuter-avec-vim-conseil-numero-sept/'>Bien débuter avec Vim: conseil numéro sept</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/"/>
    <updated>2014-03-04T21:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Notre futur éditeur aura un certain nombre de fenêtre (au sens de
<em>curses</em>) et pour les gérer, on sera bien inspiré d&#8217;utiliser un peu
de POO.
Voici donc une réécriture du programme vu
<a href="http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/">ici</a>.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StatusWindow</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@filename</span> <span class="o">=</span> <span class="n">filename</span>
</span><span class='line'>    <span class="vi">@win</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display</span>
</span><span class='line'>    <span class="vi">@win</span><span class="o">.</span><span class="n">setpos</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="vi">@win</span><span class="o">.</span><span class="n">maxx</span> <span class="o">-</span> <span class="vi">@filename</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@win</span><span class="o">.</span><span class="n">addstr</span><span class="p">(</span><span class="vi">@filename</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@win</span><span class="o">.</span><span class="n">refresh</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">close</span>
</span><span class='line'>    <span class="vi">@win</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FileWindow</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@filename</span> <span class="o">=</span> <span class="n">filename</span>
</span><span class='line'>    <span class="vi">@win</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">lines</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display</span>
</span><span class='line'>    <span class="vi">@win</span><span class="o">.</span><span class="n">setpos</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@filename</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="vi">@win</span><span class="o">.</span><span class="n">addstr</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="vi">@win</span><span class="o">.</span><span class="n">refresh</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">close</span>
</span><span class='line'>    <span class="vi">@win</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'>  <span class="n">status_window</span> <span class="o">=</span> <span class="no">StatusWindow</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file_window</span> <span class="o">=</span> <span class="no">FileWindow</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">status_window</span><span class="o">.</span><span class="n">display</span>
</span><span class='line'>  <span class="n">file_window</span><span class="o">.</span><span class="n">display</span>
</span><span class='line'>  <span class="n">getch</span>
</span><span class='line'>  <span class="n">status_window</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="n">file_window</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code est plus conséquent, c&#8217;est vrai, mais la structure sera plus
claire, surtout quand on coupera le code en plusieurs fichiers, et
qu&#8217;on utilisera un peu, ou plutôt beaucoup, d&#8217;héritage.</p>

<p>Le détail à retenir, curieusement, est celui-ci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">refresh</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut rafraichir l&#8217;écran juste après l&#8217;initialisation de <em>curses</em>, sinon
aucune fenêtre ne s&#8217;affichera…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/'>Écrire un éditeur pour le terminal &ndash; partie 5</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/"/>
    <updated>2014-03-03T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir vu
<a href="http://lkdjiin.github.io/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4/">comment centrer du texte</a>
et
<a href="http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/">comment faire du fenêtrage</a>,
on peut réunir les deux pour afficher un fichier, et le nom de ce fichier
centré sur la première ligne du terminal.</p>

<!-- more -->




<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">display_filename</span>
</span><span class='line'>  <span class="n">setpos</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">cols</span> <span class="o">-</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">display_file</span>
</span><span class='line'>  <span class="n">setpos</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">addstr</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">display_filename</span>
</span><span class='line'>  <span class="n">display_file</span>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'>  <span class="n">getch</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/'>Écrire un éditeur pour le terminal &ndash; partie 5</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/"/>
    <updated>2014-03-02T20:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La bibliothèque <em>curses</em> sait gérer le fenêtrage. Voici un programme qui
montre comment faire.</p>

<!-- more -->


<p>C&#8217;est une traduction en ruby d&#8217;un programme C issu d&#8217;un tutoriel
sur <em>ncurses</em> (dont je ne retrouve plus la référence dans l&#8217;immédiat).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_newwin</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">left</span><span class="p">)</span>
</span><span class='line'>  <span class="n">local_win</span> <span class="o">=</span> <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">left</span><span class="p">)</span>
</span><span class='line'>  <span class="n">local_win</span><span class="o">.</span><span class="n">box</span><span class="p">(</span><span class="sc">?|</span><span class="p">,</span> <span class="sc">?-</span><span class="p">)</span>
</span><span class='line'>  <span class="n">local_win</span><span class="o">.</span><span class="n">refresh</span>
</span><span class='line'>  <span class="n">local_win</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">destroy_win</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">refresh</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">cbreak</span>
</span><span class='line'>  <span class="n">stdscr</span><span class="o">.</span><span class="n">keypad</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">height</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">width</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="n">top</span> <span class="o">=</span> <span class="p">(</span><span class="n">lines</span> <span class="o">-</span> <span class="n">height</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">left</span> <span class="o">=</span> <span class="p">(</span><span class="n">cols</span> <span class="o">-</span> <span class="n">width</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="s2">&quot;Press F1 to exit&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'>  <span class="n">my_win</span> <span class="o">=</span> <span class="n">create_newwin</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">left</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">ch</span> <span class="o">=</span> <span class="n">getch</span><span class="p">)</span> <span class="o">!=</span> <span class="no">KEY_F1</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">ch</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_LEFT</span> <span class="k">then</span> <span class="n">left</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_RIGHT</span> <span class="k">then</span> <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_UP</span> <span class="k">then</span> <span class="n">top</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_DOWN</span> <span class="k">then</span> <span class="n">top</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">destroy_win</span><span class="p">(</span><span class="n">my_win</span><span class="p">)</span>
</span><span class='line'>    <span class="n">my_win</span> <span class="o">=</span> <span class="n">create_newwin</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">left</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>En étudiant ce programme avec en parallèle la documentation ruby
de <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/curses/rdoc/Curses.html">curses</a>,
vous devriez comprendre sans problèmes la gestion des fenêtres.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4/"/>
    <updated>2014-03-01T17:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on voit comment écrire un message centré horizontalement et
verticalement, comment lire une chaîne de caractères, et comment être
tranquille avec les caractères non ASCII.</p>

<!-- more -->


<p>Voici un programme qui montre tout ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Enter a string: &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">setpos</span><span class="p">(</span><span class="n">lines</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">cols</span> <span class="o">-</span> <span class="n">message</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="n">getstr</span>
</span><span class='line'>  <span class="n">setpos</span><span class="p">(</span><span class="n">lines</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;You entered: %s&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">))</span>
</span><span class='line'>  <span class="n">getch</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quelques brèves explications maintenant:</p>

<p>Tout d&#8217;abord, on affiche un message centré ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">setpos</span><span class="p">(</span><span class="n">lines</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">cols</span> <span class="o">-</span> <span class="n">message</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour lire une chaîne de caractères, on utilise <code>getstr</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="n">getstr</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on affiche ce qu&#8217;on vient de lire sur l&#8217;avant-dernière ligne du
terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">setpos</span><span class="p">(</span><span class="n">lines</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;You entered: %s&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <a href="http://www.ruby-doc.org/core-2.1.1/Kernel.html#method-i-sprintf">sprintf</a>,
qui vous rappelera des choses si vous avez fait du C, est ce que j&#8217;ai
trouvé de mieux pour ne pas avoir de soucis avec les caractères
non ASCII.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtrer ses logs en direct]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/28/filtrer-ses-logs-en-direct/"/>
    <updated>2014-02-28T20:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/28/filtrer-ses-logs-en-direct</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on voit comment filtrer nos fichiers de log en direct à l&#8217;aide
des commandes UNIX <code>tail</code> et <code>sed</code>.</p>

<!-- more -->


<p>Pour afficher un fichier en direct live sur le terminal, autrement dit pour
visualiser au fur et à mesure les ajouts dans ce fichier, on utilise
<code>tail -f</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f un/fichier/de/log
</span></code></pre></td></tr></table></div></figure>


<p>Pour afficher <strong>uniquement</strong> les lignes d&#8217;un fichier qui contiennent la
chaîne de caractères <code>ERROR</code>, on va utiliser <code>sed</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -n <span class="s1">&#39;/ERROR/p&#39;</span> un/fichier/de/log
</span></code></pre></td></tr></table></div></figure>


<p>Ou bien pour afficher toutes les lignes d&#8217;un fichier <strong>sauf</strong> celles qui
contiennent la chaîne de caractères <code>bruit</code>, on utilisera:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;/bruit/d&#39;</span> un/fichier/de/log
</span></code></pre></td></tr></table></div></figure>


<p>Et en combinant les deux, on aura un log en direct et filtré:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tail -f un/fichier/de/log | sed -n <span class="s1">&#39;/ERROR/p&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et vous, vous utilisez quelle(s) commande(s) ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/17/afficher-larborescence-dun-dossier-dans-le-terminal/'>Afficher l&#8217;arborescence d&#8217;un dossier dans le terminal</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal/'>Raccourcis clavier pour le terminal</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/07/quelques-raccourcis-pour-firefox/'>Quelques raccourcis pour Firefox</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La commande cat peut aussi afficher les numéros de lignes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/27/la-commande-cat-peut-aussi-afficher-les-numeros-de-lignes/"/>
    <updated>2014-02-27T20:48:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/27/la-commande-cat-peut-aussi-afficher-les-numeros-de-lignes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je crois bien que je n&#8217;avais jamais regardé la documentation de la commande
unix <code>cat</code> jusqu&#8217;à il y a quelques jours. Je viens donc tout juste
d&#8217;apprendre qu&#8217;on pouvait afficher les numéros de lignes.</p>

<!-- more -->


<p>Afficher un fichier avec <code>cat</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat exemple
</span><span class='line'>Je suis
</span><span class='line'>un fichier
</span><span class='line'>exemple.
</span></code></pre></td></tr></table></div></figure>


<p>Afficher avec les numéros de ligne:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat -n exemple
</span><span class='line'>     1    Je suis
</span><span class='line'>     2    un fichier
</span><span class='line'>     3    exemple.
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, ça peut servir de temps en temps…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/17/afficher-larborescence-dun-dossier-dans-le-terminal/'>Afficher l&#8217;arborescence d&#8217;un dossier dans le terminal</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal/'>Raccourcis clavier pour le terminal</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/07/quelques-raccourcis-pour-firefox/'>Quelques raccourcis pour Firefox</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Supprimer un fichier dans le finder]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/26/de-linux-debian-vers-os-x-supprimer-un-fichier-dans-le-finder/"/>
    <updated>2014-02-26T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/26/de-linux-debian-vers-os-x-supprimer-un-fichier-dans-le-finder</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment supprimer un fichier dans le finder en gardant
ses doigts sur le clavier.</p>

<!-- more -->


<h2>Pour supprimer un fichier au clavier</h2>

<p>Sur Linux, il faut appuyer sur la touche «Suppression» pour supprimer un
fichier depuis l&#8217;exporateur.</p>

<p>Sur OS X, il faudra appuyer sur «Meta Backspace».</p>

<p><a href="http://lkdjiin.github.io/blog/2014/02/14/de-linux-debian-vers-os-x-un-terminal-qui-dechire/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/14/de-linux-debian-vers-os-x-un-terminal-qui-dechire/'>De Linux (Debian) vers OS X &ndash; Un terminal qui déchire</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/13/de-linux-debian-vers-os-x-lauto-completion-dans-irb/'>De Linux (Debian) vers OS X &ndash; L&#8217;auto-complétion dans Irb</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Dossier parent dans l&#8217;explorateur</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed - Remplacer la n-ième occurence]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/25/sed-remplacer-la-n-ieme-occurence/"/>
    <updated>2014-02-25T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/25/sed-remplacer-la-n-ieme-occurence</id>
    <content type="html"><![CDATA[<p>J&#8217;adore Sed. Je l&#8217;utilise depuis de longues années. Et pourtant je n&#8217;avais
jamais remarqué qu&#8217;on pouvait remplacer la n-ième occurence d&#8217;un pattern
dans une ligne.</p>

<!-- more -->


<p>Soit le fichier <code>test</code> suivant:</p>

<pre><code>Bonjour le monde !
</code></pre>

<p>Pour remplacer le premier <code>o</code> par un <code>-</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;s/o/-/&#39;</span> <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour remplacer tous les <code>o</code> par des <code>-</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;s/o/-/g&#39;</span> <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour remplacer le deuxième <code>o</code> par un <code>-</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;s/o/-/2&#39;</span> <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sed, c&#8217;est magique !</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/28/filtrer-ses-logs-en-direct/'>Filtrer ses logs en direct</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/24/ecrire-un-editeur-pour-le-terminal-partie-3/"/>
    <updated>2014-02-24T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/24/ecrire-un-editeur-pour-le-terminal-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Comment connaitre le nombre de lignes et de colonnes du terminal ?
Voici la réponse…</p>

<!-- more -->


<p>Le programme suivant utilise les méthodes <code>cols</code> et <code>lines</code> de la
bibliothèque <code>Curses</code> pour avoir ces informations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">addstr</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">cols</span><span class="si">}</span><span class="s2"> x </span><span class="si">#{</span><span class="n">lines</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">getch</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redimensionnez votre terminal et relancez le programme pour être sûr
que ça fonctionne ;)</p>

<p>Ces informations nous seront bien utiles pour l&#8217;écriture d&#8217;un éditeur…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/23/ecrire-un-editeur-pour-le-terminal-partie-2/"/>
    <updated>2014-02-23T16:33:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/23/ecrire-un-editeur-pour-le-terminal-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Comme j&#8217;ai eu un peu trop de problêmes à faire tourner <em>ncurses</em> sur
plusieurs machines, j&#8217;ai décidé de repasser à <em>curses</em>.</p>

<!-- more -->


<p>Voici donc le programme de <a href="http://lkdjiin.github.io/blog/2014/02/22/ecrire-un-editeur-pour-le-terminal-partie-1/">la dernière fois</a>, réécrit pour <em>curses</em>:</p>

<figure class='code'><figcaption><span>redvim.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">addstr</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'>  <span class="n">getch</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Un problème avec Unicode ?</h2>

<p>Il se peut que vous ayez des problèmes pour afficher correctement les
caractères unicode. À tous les coups, c&#8217;est parce que la gem <em>curses</em>
à été compilée sans les headers indispensables.
Installez donc ces headers: libncurses5.dev et libncurses5w.dev, ensuite
vous avez deux solutions:</p>

<ol>
<li>Si vous utilisez Ruby 2.1, désinstallez <em>curses</em> et réinstallez la:
<code>gem uninstall curses &amp;&amp; gem install curses</code>.</li>
<li>Si vous utilisez Ruby 2.0 ou inférieur, <em>curses</em> fait partie de la
bibliothèque standard, c&#8217;est donc Ruby qu&#8217;il faudra recompiler.</li>
</ol>


<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/22/ecrire-un-editeur-pour-le-terminal-partie-1/"/>
    <updated>2014-02-22T15:14:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/22/ecrire-un-editeur-pour-le-terminal-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir parler quelque peu de ncurses, on passe à la première étape
de l&#8217;écriture d&#8217;un éditeur qui ressemblerait à Vim: afficher le contenu
d&#8217;un fichier.</p>

<!-- more -->


<p>Le progamme est très proche de ce qu&#8217;on avait obtenu
<a href="http://lkdjiin.github.io/blog/2014/02/16/curses-et-ncurses-en-ruby/">la dernière fois</a>,
et pour cause, la seule différence étant l&#8217;ouverture/affichage du
fichier passé en argument:</p>

<figure class='code'><figcaption><span>redvim.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ffi-ncurses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="ss">FFI</span><span class="p">:</span><span class="ss">:NCurses</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">initscr</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">printw</span> <span class="n">line</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'>  <span class="n">getch</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">endwin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>N&#8217;oubliez pas de donner les droits d&#8217;exécution à ce programme:</p>

<pre><code>chmod +x redvim.rb
</code></pre>

<p>Et lancez-le ainsi pour qu&#8217;il s&#8217;affiche lui-même:</p>

<pre><code>./redvim.rb redvim.rb
</code></pre>

<p>Si vous essayez de lui faire afficher un fichier trop long pour tenir
dans le terminal, il va se passer des choses bizarres. On corrigera
ça plus tard. Pour l&#8217;instant notre programme affiche un fichier, c&#8217;est
déjà le début de la gloire ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/21/lauto-completion-programmable-en-bash-partie-11/"/>
    <updated>2014-02-21T20:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/21/lauto-completion-programmable-en-bash-partie-11</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/">L&#8217;auto complétion programmable en bash: partie 10</a>.</p>

<h2>Complétion des options longues &ndash; suite</h2>

<p>Aujourd&#8217;hui on voit que <code>_get_comp_words_by_ref</code> peut être appellée
avec une option bien utile qui modifie <code>COMP_WORDBREAKS</code>.</p>

<!-- more -->


<p>La variable <code>COMP_WORDBREAKS</code> contient les caractères qui permettent
de splitter les mots pour la complétion. Voici son contenu:</p>

<pre><code>$  echo $COMP_WORDBREAKS 
"'&gt;&lt;=;|&amp;(:
</code></pre>

<p>On voit que <code>=</code> en fait partie, et c&#8217;est ce qui rendait un peu compliqué
le <a href="http://lkdjiin.github.io/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/">code de la dernière fois</a>.
Grâce à l&#8217;option <code>-n</code> de la fonction <code>_get_comp_words_by_ref</code>, on va pouvoir
simplifier ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool_long_options<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">$1</span> in
</span><span class='line'>        --format<span class="o">)</span>
</span><span class='line'>            <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;dot documentation&#39;</span>
</span><span class='line'>            ;;
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">    </span><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$options&quot;</span> -- <span class="s2">&quot;$2&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span>cur prev <span class="nb">command </span>options
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="o">)</span>
</span><span class='line'>    _get_comp_words_by_ref -n <span class="o">=</span> cur prev
</span><span class='line'>    <span class="nv">commands</span><span class="o">=</span><span class="s1">&#39;new compile test&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$COMP_CWORD</span> -eq 1 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$commands&quot;</span> -- <span class="s2">&quot;$cur&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">&quot;$cur&quot;</span> <span class="o">==</span> --*<span class="o">=</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span>_split_longopt
</span><span class='line'>        _mytool_long_options <span class="s2">&quot;$prev&quot;</span> <span class="s2">&quot;$cur&quot;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">&quot;$cur&quot;</span> <span class="o">==</span> -* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">command</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[1]</span><span class="k">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="nv">$command</span> in
</span><span class='line'>            new<span class="o">)</span>
</span><span class='line'>                <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--without-test&#39;</span>
</span><span class='line'>                ;;
</span><span class='line'>            compile<span class="o">)</span>
</span><span class='line'>                <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--verbose&#39;</span>
</span><span class='line'>                ;;
</span><span class='line'>            <span class="nb">test</span><span class="o">)</span>
</span><span class='line'>                <span class="nv">options</span><span class="o">=</span><span class="s1">&#39;--format=&#39;</span>
</span><span class='line'>                compopt -o nospace
</span><span class='line'>                ;;
</span><span class='line'>        <span class="k">esac</span>
</span><span class='line'><span class="k">        </span><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s2">&quot;$options&quot;</span> -- <span class="s2">&quot;$cur&quot;</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Ce code fait la même chose que celui du <a href="http://lkdjiin.github.io/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/">dernier article</a>,
mais est bien plus simple et lisible.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 10</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 8</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Bash - Améliorer l'historique]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/"/>
    <updated>2014-02-20T21:02:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans Bash, chaque appui sur la touche «flêche vers le haut» fait défiler
l&#8217;historique des commandes. Si la commande recherchée se situe à quelques
dizaines d&#8217;appuis, ça n&#8217;est pas très pratique. Voici une astuce pour
aller plus vite.</p>

<!-- more -->


<p>Ajoutez les lignes suivantes dans votre fichier <code>~/.inputrc</code>. Si ce dernier
n&#8217;existe pas, créez le.</p>

<figure class='code'><figcaption><span>~/.input</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;\e[A&quot;</span>: <span class="nb">history</span>-search-backward
</span><span class='line'><span class="s2">&quot;\e[B&quot;</span>: <span class="nb">history</span>-search-forward
</span><span class='line'><span class="nb">set </span>show-all-if-ambiguous on
</span><span class='line'><span class="nb">set </span>completion-ignore-case on
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant il suffit de saisir les premières lettres de la commande
recherchée et la flêche vers le haut ne fera défilée que les commandes
de votre historique qui commencent par ces caractères.</p>

<p>Quand j&#8217;aurais plus de temps, j&#8217;aimerais revenir sur ces lignes pour
fournir une explication, en attendant je vous souhaite une bonne
utilisation de votre historique boosté ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande/'>Astuce pour Git &ndash; merge et checkout en une commande</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git/'>Comment mettre temporairement de coté ses modifications de code avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/17/afficher-larborescence-dun-dossier-dans-le-terminal/'>Afficher l&#8217;arborescence d&#8217;un dossier dans le terminal</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce pour Git - merge et checkout en une commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande/"/>
    <updated>2014-02-19T20:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui, je vous présente un petit script pour Git. Il vous permettra,
en une commande, de merger la branche courante dans <code>master</code> et de vous
retrouver sur <code>master</code>.</p>

<!-- more -->


<p>Ce script, <code>merge-me</code>, est a placer quelquepart dans votre <code>$PATH</code>.
N&#8217;oubliez pas de lui fournir les droits d&#8217;exécution (<code>chmod +x</code>).</p>

<figure class='code'><figcaption><span>merge-me</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">BRANCH_TO_MERGE</span><span class="o">=</span><span class="sb">`</span>git rev-parse --abbrev-ref HEAD<span class="sb">`</span>
</span><span class='line'>git checkout master
</span><span class='line'>git merge <span class="nv">$BRANCH_TO_MERGE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une fois installé, en partant d&#8217;une branche <code>ma-branche</code>, vous tapez:</p>

<pre><code>git merge-me
</code></pre>

<p>et la branche <code>ma-branche</code> sera mergée dans la branche <code>master</code>.</p>

<p>N&#8217;hésitez pas à vous en servir comme d&#8217;un point de départ et à le modifier,
à lui ajouter des fonctionnalités.</p>

<p>Tiens, d&#8217;ailleurs ! Vous y ajouteriez quoi ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/12/quelques-commandes-git-par-michael-hartl/'>Quelques commandes Git par Michael Hartl</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/'>Astuce Bash &ndash; Améliorer l&#8217;historique</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git/'>Comment mettre temporairement de coté ses modifications de code avec Git</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
