<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-01-19T14:14:32+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby vs Crystal - 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/"/>
    <updated>2016-01-19T13:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie</id>
    <content type="html"><![CDATA[<p>J’ai testé le langage Crystal le week end dernier. Rien de très poussé, juste
140 lignes de Ruby traduites en Crystal et <a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">un benchmark</a>. Je vais tenté de
synthétiser mes premières impressions sur ce langage.</p>

<p>Dans cet article
mon point de vue est celui d’un développeur Ruby qui cherche à rendre
ses programmes plus rapide avec l’aide de Crystal.</p>

<h2 id="crystal-nest-pas-ruby">Crystal n’est pas Ruby</h2>

<p>Si je devais retenir une seule chose, ce serait celle-ci: <strong>Crystal n’est pas un
Ruby compilé</strong>.  Si sa syntaxe ressemble beaucoup à celle de Ruby,
c’est vraiment un langage différent. La plus grande différence étant qu’il est
statiquement typé.</p>

<!-- more -->

<h2 id="pas-de-repl">Pas de REPL</h2>

<p>Les développeurs de Crystal ont l’air de penser que c’est compliqué de lui
ajouter un REPL, et ça l’est sûrement. Ne pas avoir accès à un REPL n’est pas
rédhibitoire pour un langage statique. Mais cela implique un processus de
développement totalement différent de celui de Ruby et des langages dynamiques,
même si le compilateur semble pour l’instant assez rapide.</p>

<h2 id="plusieurs-mthodes-sont-absentes">Plusieurs méthodes sont absentes</h2>

<p>Ou bien elles fonctionnent différemment. Il n’y a pas de <code>require_relative</code>, par
exemple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;./xpm&quot;</span>
</span><span class="line"><span class="c1"># De plus le fichier doit être nommé `xpm.cr`</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="n">require_relative</span> <span class="s2">&quot;xpm&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bien plus surprenant, il n’y a pas de <code>attr_reader</code>, il faut définir la méthode.
Peut-être que les développeurs n’ont pas encore eu le temps de s’y atteler ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="k">def</span> <span class="nf">foobar</span>
</span><span class="line">  <span class="vi">@foobar</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="kp">attr_reader</span> <span class="ss">:foobar</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pas-de-private-global">Pas de private «global»</h2>

<p>Avec Crystal, on définit une méthode privée au coup par coup.
C’est une syntaxe qui est possible en Ruby depuis la version 2 (2.1 je crois),
mais qui n’a jamais <em>pris</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="kp">private</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="typage-statique">Typage statique</h2>

<p>Est-ce que j’ai déjà mentionné que Crystal est un langage statiquement typé ?
Oui ?
Il est donc très <strike>gonflant</strike> tatillon avec les types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="s2">&quot;%i&quot;</span> <span class="o">%</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>   <span class="c1">#=&gt; erreur !</span>
</span><span class="line">
</span><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="s2">&quot;%i&quot;</span> <span class="o">%</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>   <span class="c1">#=&gt; &quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="linfrence-de-types">L’inférence de types</h2>

<p>L’inférence de types, c’est bien, non ? Ça permet au compilateur de <em>deviner</em> le
type d’une variable pour que nous n’ayons pas à les spécifier nous même. Sauf
que dans l’optique d’une traduction d’un programme Ruby en Crystal je ne suis
pas convaincu du truc. Si on écrit un programme Crystal <em>from scratch</em>, pas de
soucis. Mais Ruby est bourré d’idiomes et de tics en tout genres qui vont
rendre le portage pas du tout trivial, à mon avis. Par exemple le code ruby
suivant initialise le tableau <code>@free_cells</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">  <span class="vi">@free_cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">FREE_TOTAL</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis, dans la méthode <code>move</code>, les éléments de ce tableau sont modifiés. Il est
possible que certains éléments soient mis à <code>nil</code>. Mais comme vous pouvez le
voir à la fin de la méthode, avant de <em>relacher le tableau dans la nature</em>,
les éléments <code>nil</code> sont supprimés. C’est pour moi un cas d’utilisation
légitime de <code>nil</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">move</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">  <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">    <span class="c1"># Modification des éléments, certains peuvent devenir nil.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="vi">@free_cells</span><span class="o">.</span><span class="n">compact!</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais un compilateur n’avalera pas cette belle histoire. Le tableau a été
initialisé avec un certain type et vous ne pourrez donc pas en utiliser
d’autres. Vous devrez dire à Crystal quels types peut contenir le tableau,
c’est une syntaxe spécifique à Crystal, inconnue de Ruby:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># crystal</span>
</span><span class="line"><span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@free_cells</span> <span class="o">=</span> <span class="o">[]</span> <span class="n">of</span> <span class="nb">Array</span><span class="p">(</span><span class="no">Int32</span><span class="p">)</span> <span class="o">|</span> <span class="no">Nil</span>
</span><span class="line">    <span class="no">FREE_TOTAL</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@free_cells</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais si maintenant je peux insérer des <code>nil</code> dans mon tableau, plus question de
pouvoir lire ses éléments ainsi:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">  <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et non ! Puisque <code>@free_cells</code> a été déclaré comme pouvant contenir <code>nil</code> !
Même si <strong>je sais</strong> qu’à ce moment le tableau est exempt de <code>nil</code>, le
compilateur, lui, ne peut pas le savoir.
Il faut donc faire quelque chose comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">  <span class="k">if</span> <span class="n">cell</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class="line">    <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ou bien il faut repenser différemment le code. Et on commence a bien sentir
l’influence du typage statique, hein ? Encore une fois, ça n’est pas un
problème en soi, mais ça n’est pas Ruby.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Si on a de l’expérience avec les langages à typage statique, traduire un
programme Ruby en un programme Crystal n’est pas difficile et le gain de
performance peut-être intéressant.
Dans tout les cas, <strong>Crystal n’est pas Ruby</strong>. Travailler avec ce langage sera
différent et demandera des processus différents.
Reste à savoir quels programmes Ruby on va pouvoir réécrire en Crystal sans
avoir à réécrire, au hasard, tout ActiveRecord. Et là, je ne suis pas certain
qu’on va en trouver beaucoup.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">Ruby vs Crystal</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">Les arbres browniens - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">Les arbres browniens</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs Crystal]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/"/>
    <updated>2016-01-19T09:23:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal</id>
    <content type="html"><![CDATA[<p>Après avoir produit <a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">quelques variations</a> sur le thème des 
<a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">arbres browniens</a> le
week end dernier, le moment semblait idéal pour tester le langage
<a href="http://crystal-lang.org/">Crystal</a>.</p>

<p>J’ai donc réécrit le programme de base que j’avais fait pour produire des
arbres browniens, en supprimant l’UI et en enregistrant (à la place d’une
image écran)
un fichier image
<em>— au format XPM, peut-être le sujet d’un prochain article —</em>.</p>

<p>Je calcule le temps que prends la construction de l’image, sans son
enregistrement:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/bench-crystal.png" /></p>

<!-- more -->

<p>Les deux programmes sont quasiment identiques, la version Crystal est
l’adaption au plus près de la version Ruby. Pour ce
programme particulier, Crystal est de 3 à 7 fois plus rapide que Ruby.</p>

<p>Je suis deçu car j’attendais mieux que ça. On m’avait vendu Crystal comme étant
plus rapide. En fait environ 20 fois plus rapide que Ruby.</p>

<p>Et c’est vrai qu’avec un petit truc comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="n">n</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class="line">  <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">fibonacci</span> <span class="mi">40</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ou alors encore ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="mi">50_000_000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="n">x</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>j’obtiens bien un programme Crystal 20 à 35 fois plus rapide que sa version
Ruby. Mais avec un programme plus «réel», c’est 3 à 7. Alors je ne boude pas,
hein, même un gain de 3 est toujours bon à prendre. Par contre, passer de Ruby à
Crystal a un coût, et savoir si ce coût justifie un si petit gain est une autre
histoire.</p>

<p>La prochaine fois j’espère vous donner mes premières impressions sur Crystal.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/">Ruby vs Crystal - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier/">Des benchmarks en général et de Ruby en particulier</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">Les arbres browniens - 2ème partie</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les arbres browniens - 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/"/>
    <updated>2016-01-18T09:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie</id>
    <content type="html"><![CDATA[<p>Dans <a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">le dernier article</a>, je présentais un code de base en JRuby
pour construire des arbres browniens. À partir de ce code de base on peut
tester plusieurs variations.</p>

<h2 id="des-couleurs-au-hasard">Des couleurs au hasard</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree51.png" /></p>

<p>Pour cela, quand on <em>gèle</em> une cellule on lui attribue au hasard une valeur
entre 1 et le nombre maximum de couleur (ici seulement deux).</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">move</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">      <span class="k">if</span> <span class="n">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="n">frozen</span>
</span><span class="line">  <span class="c1"># [...]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">frozen</span>
</span><span class="line">  <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># [...]</span>
</span><span class="line">      <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:MAGENTA</span><span class="p">)</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">j</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">      <span class="k">elsif</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:GREEN</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># [...]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="une-ligne-entire-de-graines">Une ligne entière de graines</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree52.png" /></p>

<p>En plaçant une ligne de graine, au lieu d’une seule, on obtient quelque chose
qui ressemble plus à des arbres.</p>

<h2 id="couleurs-suivant-le-temps-darrive">Couleurs suivant le temps d’arrivée</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree53.png" /></p>

<p>Par exemple cyan pour les 800 premières itérations, magenta pour les 600
suivantes, et vert pour les dernières.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">frozen</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@iteration</span> <span class="o">&lt;</span> <span class="mi">800</span>
</span><span class="line">      <span class="mi">1</span>
</span><span class="line">    <span class="k">elsif</span> <span class="vi">@iteration</span> <span class="o">&lt;</span> <span class="mi">1400</span>
</span><span class="line">      <span class="mi">2</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="mi">3</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mouvement-biais">Mouvement biaisé</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree55.png" /></p>

<p>Pour produire l’image ci-dessus les cellules <em>montent</em> plus souvent qu’elles ne
descendent.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="et-encore">Et encore</h2>

<p>On peut trouver encore des tas de variations, et les mélanger. Par exemple dans
l’image suivante la couleur d’une cellule dépend du nombre de ses voisines et
la longueur du mouvement des cellules suit, en gros, une
<a href="https://en.wikipedia.org/wiki/Cauchy_distribution">distribution de Cauchy</a>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree56.png" /></p>

<p>Si vous pensez à d’autres variations possibles, n’hésitez pas à m’en faire part.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/">Les arbres browniens</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/">Ruby vs Crystal - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">Ruby vs Crystal</a></li></ul></section>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les arbres browniens]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens/"/>
    <updated>2016-01-17T23:30:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/17/les-arbres-browniens</id>
    <content type="html"><![CDATA[<p>Ce week end j’ai joué avec les arbres browniens (<em>brownian trees</em>).
Ce sont des agglomérats de cellules qui ressemblent vaguement à des arbres,
obtenus à partir d’un mouvement brownien. Et le mouvement brownien, c’est cool.</p>

<p>C’est Robert Brown, un
botaniste, qui le décrit en 1827 en observant des petites particules qui
semblaient bouger toutes seules. Il voit ses particules avoir la tremblote, mais
sans pouvoir expliquer pourquoi.</p>

<p>C’est d’autant plus cool qu’en 1905, en donnant l’explication du mouvement
brownien, Albert Enstein va fournir la preuve de l’existence des atomes.</p>

<p>Le mouvement brownien c’est simplement les atomes qui <em>cognent</em> dans tout les
sens sur des particules.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/brownian-tree.png" /></p>

<!-- more -->

<p>L’algorithme pour créer un arbre brownien est enfantin:</p>

<ol>
  <li>Positionner au hasard une première cellule gelée qui sert de <em>graine</em>.</li>
  <li>Positionner au hasard une cellule libre.</li>
  <li>Mouvoir au hasard la cellule libre, c’est le mouvement brownien.</li>
  <li>Quand la cellule libre <em>rencontre</em> une cellule gelée, elle gèle elle-même
et on recommence au point 2.</li>
</ol>

<p>Mettre les cellules libres une par une, c.à.d attendre qu’une rencontre avec une
cellule gelée se produise avant de passer à la cellule libre suivante est trop
long. Avec un dispositif d’affichage assez grand on pourrait y passer plusieurs
jours.
Donc je met toutes les cellules libres dès le départ, ainsi il se passe très
vite beaucoup de choses.</p>

<p>J’ai fait <a href="https://www.youtube.com/watch?v=wQnTUZHfSKA&amp;feature=youtu.be">une vidéo de la construction d’un arbre brownien</a> pour que vous puissiez visualiser comment ça fonctionne.</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/wQnTUZHfSKA" frameborder="0" allowfullscreen=""></iframe>

<p>J’ai écrit un programme en JRuby pour faire un arbre brownien basique.  Le code
n’est pas beau car il n’a pas été pensé pour durer plus que le temps d’un
week-end. Malgré tout, je pense qu’il est compréhensible et qu’il peut servir
de base pour des idées plus sophistiquées.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="kp">include</span> <span class="no">Java</span>
</span><span class="line">
</span><span class="line"><span class="c1"># It&#39;s Ruby… but it&#39;s also Java… so… import…</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JPanel</span>
</span><span class="line"><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">Timer</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Color</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Dimension</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">Toolkit</span>
</span><span class="line"><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">awt</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">ActionListener</span>
</span><span class="line">
</span><span class="line"><span class="no">SIZE</span> <span class="o">=</span> <span class="mi">200</span>        <span class="c1"># Both width and height of the *image*.</span>
</span><span class="line"><span class="no">SCALE</span> <span class="o">=</span> <span class="mi">2</span>         <span class="c1"># Multiply size by scale to obtain the *window* size.</span>
</span><span class="line"><span class="no">FREE_TOTAL</span> <span class="o">=</span> <span class="mi">6000</span> <span class="c1"># Number of particles to agregate.</span>
</span><span class="line"><span class="no">DELAY</span> <span class="o">=</span> <span class="mi">20</span>        <span class="c1"># Time to wait between *screen refreshes*.</span>
</span><span class="line">
</span><span class="line"><span class="no">VOID</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1"># A cell with nothing in itself.</span>
</span><span class="line"><span class="no">FROZEN</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># A cell already agregated.</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BrownianTree</span> <span class="o">&lt;</span> <span class="no">JFrame</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">ActionListener</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="s2">&quot;Brownian Tree&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">init_ui</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">init_ui</span>
</span><span class="line">    <span class="vi">@board</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">setPreferredSize</span><span class="p">(</span><span class="no">Dimension</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SIZE</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">))</span>
</span><span class="line">    <span class="n">add</span><span class="p">(</span><span class="vi">@board</span><span class="p">)</span>
</span><span class="line">    <span class="n">pack</span>
</span><span class="line">    <span class="n">setDefaultCloseOperation</span><span class="p">(</span><span class="ss">JFrame</span><span class="p">:</span><span class="ss">:EXIT_ON_CLOSE</span><span class="p">)</span>
</span><span class="line">    <span class="n">setVisible</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@timer</span> <span class="o">=</span> <span class="no">Timer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">DELAY</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@timer</span><span class="o">.</span><span class="n">start</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Called every DELAY millisecond, thanks to the *magic* of</span>
</span><span class="line">  <span class="c1"># ActionListener.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">actionPerformed</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">move</span>
</span><span class="line">    <span class="vi">@board</span><span class="o">.</span><span class="n">repaint</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Board</span> <span class="o">&lt;</span> <span class="no">JPanel</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">    <span class="n">init_board</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">init_board</span>
</span><span class="line">    <span class="n">setBackground</span><span class="p">(</span><span class="no">Color</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># An array of SIZE x SIZE.</span>
</span><span class="line">    <span class="vi">@cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SIZE</span><span class="p">,</span> <span class="no">VOID</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># The cell in the middle is the seed.</span>
</span><span class="line">    <span class="vi">@cells</span><span class="o">[</span><span class="no">SIZE</span> <span class="o">/</span> <span class="mi">2</span><span class="o">][</span><span class="no">SIZE</span> <span class="o">/</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="no">FROZEN</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># All free cells from the start, at random (x y) positions.</span>
</span><span class="line">    <span class="vi">@free_cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">FREE_TOTAL</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Called by `repaint` in BrownianTree. Yep, that&#39;s right, `repaint`</span>
</span><span class="line">  <span class="c1"># call `paint`. It&#39;s also Java, after all…</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">paint</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="no">Toolkit</span><span class="o">.</span><span class="n">getDefaultToolkit</span><span class="o">.</span><span class="n">sync</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">dispose</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Display frozen cells in white and free cells in red.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:WHITE</span><span class="p">)</span>
</span><span class="line">    <span class="no">SIZE</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="no">SIZE</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
</span><span class="line">        <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span>
</span><span class="line">          <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">j</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setColor</span><span class="p">(</span><span class="ss">Color</span><span class="p">:</span><span class="ss">:RED</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="n">g</span><span class="o">.</span><span class="n">fillRect</span><span class="p">(</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">,</span> <span class="no">SCALE</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">move</span>
</span><span class="line">    <span class="c1"># Move each free cell, one cell up or up-right or right or etc...</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="n">c</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">        <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span><span class="p">,</span>
</span><span class="line">        <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">shuffle</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">      <span class="o">]</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="no">SIZE</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="no">SIZE</span>
</span><span class="line">        <span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="no">SIZE</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">c</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Freeze each free cell that have at least 1 neighbor.</span>
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class="line">      <span class="k">if</span> <span class="n">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="no">FROZEN</span>
</span><span class="line">        <span class="kp">nil</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">cell</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@free_cells</span><span class="o">.</span><span class="n">compact!</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">has_neighbors?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="no">SIZE</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">cell</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="no">SIZE</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class="line">      <span class="k">return</span> <span class="kp">false</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span> <span class="o">||</span>
</span><span class="line">       <span class="vi">@cells</span><span class="o">[</span><span class="n">cell</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">cell</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="no">FROZEN</span>
</span><span class="line">      <span class="kp">true</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="kp">false</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">BrownianTree</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On se retrouve bientôt pour que je vous parle des quelques variations que j’ai
essayé autour du thème des arbres browniens.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2016/01/18/les-arbres-browniens-2eme-partie/">Les arbres browniens - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal-2eme-partie/">Ruby vs Crystal - 2ème partie</a></li><li><a href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/">Ruby vs Crystal</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je ne voterai pas]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/12/13/je-ne-voterai-pas/"/>
    <updated>2015-12-13T17:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/12/13/je-ne-voterai-pas</id>
    <content type="html"><![CDATA[<p>Il est 16h00, nous sommes le 13 décembre 2015, le FN va peut-être remporter
plusieurs régions et je ne voterai pas. J’ouvre twitter et je lis beaucoup de
conneries. Je me ferai bien un ptit coup de gueule maintenant puisque d’après
certains, vu que je ne vote pas, je devrai la fermer ensuite…</p>

<!-- more -->

<blockquote>
  <p>Voter est un droit mais c’est avant tout un devoir</p>
</blockquote>

<p>Ne pas voter est tout autant un droit. Je me sens même le devoir de ne pas
voter, pour en aucun cas légitimer les politiques (hommes, femmes, partis) qui
depuis 25 ans que je vote (car oui j’ai déjà voté) n’ont jamais, pas une fois,
tenu leur programme. Chaque fois que j’ai voté, ils (les politiques, les
hommes, les femmes, les partis) ont toujours pris ma voix pour ensuite se
torcher les fesses avec.</p>

<blockquote>
  <p>Celui qui ne vote pas n’a pas le droit de se plaindre des résultats</p>
</blockquote>

<p>Bah voyons, compte là-dessus. Quel que soit le résultat dans ma région, PS, LR
ou FN, je me plaindrai. Parce que quel que soit le résultat, ces gens ne me
représentent pas. Sûr que si c’est le FN qui passe, <a href="https://www.youtube.com/watch?v=FpH0gre8AQw">je gueulerai un peu plus</a>.</p>

<blockquote>
  <p>J’espère sincèrement que le taux d’abstention sera faible aujourd’hui.</p>
</blockquote>

<p>J’espère justement le contraire mais je pense que tu auras raison dans une
certaine mesure. Le taux d’abstention sera sûrement plus bas que la semaine
dernière. La raison ? PS et LR sont rodés depuis plusieurs décennies, ils
savent se servir du FN pour recueillir quelques votes de plus. Je ne jouerai pas à leur jeu, il me dégoute.</p>

<blockquote>
  <p>Si les gens lisaient plus, se cultivaient plus, le #FHaine ne serait pas si haut aux #electionsregionales. Vote d’ignorance et de peur.</p>
</blockquote>

<p>Ça fait 30 ans que certains se sentant supérieurs (à qui je ne sais
pas) font le coup de culpabiliser les électeurs du FN et/ou de les traiter de
gros cons. 30 ans ! Visiblement ça ne marche pas.</p>

<blockquote>
  <p>Faites vous entendre en allant voter</p>
</blockquote>

<p>Encore une fois, non. Ça ne marche pas. Un candidat te promet une chose. Tu
votes pour lui. Il est élu. Il a la légitimité. Il ne fait pas ce qu’il a
promis. Tu ne peux rien y changer. On recommence à la prochaine élection. Ah
mais si au fait, tu peux y faire quelque chose en refusant de voter…</p>

<blockquote>
  <p>On devrait interdire de voter au seconde tour au gens qui n’ont pas voter au premier , tout le monde se bougerai le cul</p>
</blockquote>

<p>Et allez donc, et pourquoi pas le vote obligatoire !</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabriquer un sablier à thé électronique 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/"/>
    <updated>2015-12-12T16:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2</id>
    <content type="html"><![CDATA[<p>Après avoir appris à programmer un ATtiny45 avec l’IDE Arduino, il fallait
maintenant s’en passer. Pour cela je suis passé du langage Arduino au
langage C, avec le cross compilateur <code>avr-gcc</code> et l’outil <code>avrdude</code>.</p>

<p>Je vais profiter de vous montrer cela pour comparer la taille d’un même
programme, écrit une fois en langage Arduino et l’autre en C.</p>

<!-- more -->

<p><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Lire la partie 1</a></p>

<p>Le programme, c’est deux boutons/deux LEDs. Le bouton A s’occupe de la LED A.
Le bouton B s’occupe de la LED B. Quand un bouton est pressé puis relâché, sa
LED respective change d’état. Si elle était éteinte elle s’allume, et vice-versa.
C’était un peu mon <em>hello world!</em></p>

<p>Voilà le programme en langage Arduino:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sketch/sketch.ino</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">INPUT_PULLUP</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">INPUT_PULLUP</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">;</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">bitRead</span><span class="p">(</span><span class="n">PORTB</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">^</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">;</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">bitRead</span><span class="p">(</span><span class="n">PORTB</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">^</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le dossier contient juste deux sous dossiers:</p>

<pre><code>$ dirtree
.
├── build
└── sketch
</code></pre>

<p>Je compile avec l’IDE (en ligne de commande mais avec l’IDE quand même):</p>

<pre><code>$ ~/local/bin/arduino-1.6.5/arduino --verify sketch/sketch.ino
--pref build.path=build
Picked up JAVA_TOOL_OPTIONS: 
Loading configuration...
Initializing packages...
Preparing boards...
Verifying...

Le croquis utilise 972 octets (23%) de l'espace de stockage de programmes.
Le maximum est de 4 096 octets.
Les variables globales utilisent 9 octets de mémoire dynamique.
</code></pre>

<p>La taille du programme a déjà était annoncée, mais on peut la vérifier avec
<code>avr-size</code>, 972 octets:</p>

<pre><code>$ avr-size -d build/sketch.cpp.hex 
   text	   data	    bss	    dec	    hex	filename
      0	    972	      0	    972	    3cc	build/sketch.cpp.hex
</code></pre>

<p>Maintenant voici le même programme, cette fois directement en C. Donc sans
toutes les aides et fioritures de l’Arduino:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;avr/io.h&gt;</span>
</span><span class="line"><span class="cp">#define F_CPU 1000000UL</span>
</span><span class="line"><span class="cp">#include &lt;util/delay.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">DDRB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">  <span class="n">DDRB</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="n">PORTB</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)))</span> <span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">^=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">PINB</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">;</span>
</span><span class="line">      <span class="n">_delay_ms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">      <span class="n">PORTB</span> <span class="o">^=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La chaîne de compilation est cette fois un peu plus longue:</p>

<pre><code>$ avr-gcc -O -mmcu=attiny45 -c main.c
$ avr-gcc -mmcu=attiny45 -o main.elf main.o
$ avr-objcopy -O ihex main.elf main.hex
</code></pre>

<p>Même avec une option d’optimisation au minimum, la différence de taille est… sidérale:</p>

<pre><code>$ avr-size -d main.hex 
   text	   data	    bss	    dec	    hex	filename
      0	    158	      0	    158	     9e	main.hex
</code></pre>

<p>Pour transférer le code vers le micro processeur il n’y a plus besoin de l’IDE
Arduino. Je place l’ATtiny45 sur le <a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">shield programmateur</a> et j’utilise le
programme avrdude :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">avrdude</span> <span class="o">-</span><span class="n">p</span> <span class="n">attiny45</span> <span class="o">-</span><span class="n">P</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">ttyUSB0</span> <span class="o">-</span><span class="n">c</span> <span class="n">arduino</span> <span class="o">-</span><span class="n">U</span> <span class="n">flash</span><span class="o">:</span><span class="n">w</span><span class="o">:</span><span class="n">main</span><span class="p">.</span><span class="n">hex</span> <span class="o">-</span><span class="n">b</span> <span class="mi">19200</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Rendez vous une prochaine fois pour le code du sablier électronique avec son
Makefile et tout et tout.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/">Fabriquer un sablier à thé électronique</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/">Connaitre la taille d&#8217;un programme pour Arduino</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/03/arduino-un-metronome-tap-tempo/">Arduino : Un métronome tap tempo</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabriquer un sablier à thé électronique]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique/"/>
    <updated>2015-10-29T14:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/29/fabriquer-un-sablier-a-the-electronique</id>
    <content type="html"><![CDATA[<p>Voici un projet que j’avais en route depuis quelques semaines.  L’objectif était de
fabriquer mon premier «objet» grâce à l’arduino, en l’occurrence un <em>sablier à
thé électronique</em>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/hourglass.jpg" /></p>

<p>Un quoi ? En fait il s’agit tout simplement d’un minuteur. Mais je trouve le
nom <em>sablier à thé électronique</em> bien plus évocateur ;) Quand je me fais du thé
je laisse passer 9 fois sur 10 le temps d’infusion et je me retrouve avec un
breuvage imbuvable. J’avais donc envie d’un minuteur simple avec deux boutons,
un buzzer et une LED. Un des boutons lance un décompte de 3 minutes pour le thé
vert, l’autre c’est 5 minutes pour le thé noir. À la fin ça bip bip et ça
clignote jusqu’à ce qu’on l’arrête. Du vraiment simple, quoi. Sauf que je ne
voulais pas mettre un arduino entier dans ce projet alors qu’un petit micro
contrôleur à 60 centimes pourrait faire l’affaire.</p>

<!-- more -->

<p>J’allais donc devoir apprendre à programmer les micro contrôleurs ATtiny de
chez Atmel. Pourquoi ceux-là ? Parce qu’ils sont proches du micro contrôleur
utilisé par l’arduino (le ATmega 328). Bref je gardais quand même un pied en
terrain connu.</p>

<p>J’ai d’abord créé un prototype de ce <em>sablier sonore</em> avec l’arduino, pour être
sûr que je savais comment faire. Niveau schéma ça pourrait donner quelque chose
comme ça:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/attiny45-step4.png" /></p>

<p>Au final je n’utilise qu’une seule LED, mais dans le prototype original il y en
avait deux. Et c’est en utilisant ce premier prototype que je me suis aperçu
qu’une seule LED était suffisante.</p>

<p>L’étape suivante fut de réaliser ce montage, et le code, pour un ATtiny45.
Pourquoi ce micro contrôleur précisément ? Parce que 1) j’en avais un dans un
tiroir, et 2) on trouve une pléthore de tutoriels pour programmer un ATtiny45
en se servant d’un arduino. Si vous n’êtes pas familier du terme,
<strong>programmer</strong> un micro contrôleur c’est, en gros, lui transférer son programme
depuis un ordinateur. Pour que les deux cotés communiquent, on utilise un
<strong>programmateur</strong>. Il y a plusieurs façons de faire ça, je voulais utiliser un
arduino comme base de programmateur pour ne rien avoir à acheter de nouveau.
Vous pouvez trouver un bon tutoriel ici:
<a href="http://www.instructables.com/id/Program-an-ATtiny44458485-with-Arduino/">Program an ATtiny44/45/84/85 with Arduino</a>.</p>

<p>Finalement, on peut se créer le programmateur assez facilement pour l’ATtiny45:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/hello_world_bb.png" /></p>

<p>Comme j’allais programmer un certain nombre de micro contrôleurs, j’ai préféré
fabriquer un shield. D’abord un temporaire:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/arduino-temp-shield.jpg" /></p>

<p>Puis finalement un définitif:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/arduino-shield-attiny45.jpg" /></p>

<p>Trop pressé de le réaliser, je me suis trompé de sens pour le socket, ce qui
explique les câbles qui passent d’un coté à l’autre, puisque je n’ai pas
voulu le dessouder. C’est pas grave et il fonctionne très bien ;)</p>

<p>J’étais donc capable de programmer un ATtiny45 (4K de ROM) en utilisant
l’arduino <strong>ET</strong> l’IDE Arduino. C’était un bon début, mais ça n’était pas
suffisant. D’abord je ne voulais pas utiliser l’IDE Arduino, mais plutôt des
outils en ligne de commande, pour des raisons de reproductibilité et d’automatisation, et ensuite
je soupçonnais que le code de mon <em>sablier sonore</em> pouvait tenir sur un
ATtiny13 qui ne posséde que 1K de ROM et est pratiquement deux fois moins cher
que l’ATtiny45.</p>

<p><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Lire la partie 2</a></p>

<p>À suivre…</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/12/12/fabriquer-un-sablier-a-the-electronique-2/">Fabriquer un sablier à thé électronique 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/">Connaitre la taille d&#8217;un programme pour Arduino</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/03/arduino-un-metronome-tap-tempo/">Arduino : Un métronome tap tempo</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un quine en R - Le retour]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/"/>
    <updated>2015-10-13T14:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour</id>
    <content type="html"><![CDATA[<p>Dans l’article précédent <a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a>
je présentais un <a href="https://fr.wikipedia.org/wiki/Quine_%28informatique%29">quine</a> en langage R. Le code était un peu long, 19 lignes,
surtout comparé au code Ruby de l’article original:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">src</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">puts </span><span class="se">\&quot;</span><span class="s2">src = </span><span class="se">\&quot;</span><span class="s2"> + src.inspect + src&quot;</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;src = &quot;</span> <span class="o">+</span> <span class="n">src</span><span class="o">.</span><span class="n">inspect</span> <span class="o">+</span> <span class="n">src</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En Ruby, c’est court en partie grâce à la méthode <code>inspect</code> qui <em>échappe</em>
automatiquement les caractères non imprimables et les guillemets:</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">puts </span><span class="se">\&quot;</span><span class="s2">src</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line"><span class="go">&quot;\nputs \&quot;src\&quot;&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="o">.</span><span class="n">inspect</span>
</span><span class="line"><span class="go">&quot;\&quot;\\nputs \\\&quot;src\\\&quot;\&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bien entendu j’ai cherché une fonction similaire en R, du moins pour les
chaînes de caractères. J’ai laissé tombé après un quart d’heure de recherches
infructueuses, et j’ai pondu <a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">le code</a> de l’article précédent.</p>

<p>C’est là que Hadley Wickham <em>himself</em> m’a suggéré l’utilisation de la fonction
<code>encodeString</code>. C’est ce que j’avais cherché sans le trouver. Du coup, un
quine en R prends beaucoup moins de place et deviens plus compréhensible:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>quine2.r</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">src <span class="o">&lt;-</span> <span class="s">&quot;\nwriteLines(c(paste(\&quot;src &lt;-\&quot;, encodeString(src, quote=&#39;\&quot;&#39;)), src))&quot;</span>
</span><span class="line">
</span><span class="line">writeLines<span class="p">(</span>c<span class="p">(</span>paste<span class="p">(</span><span class="s">&quot;src &lt;-&quot;</span><span class="p">,</span> encodeString<span class="p">(</span>src<span class="p">,</span> quote<span class="o">=</span><span class="s">&#39;&quot;&#39;</span><span class="p">)),</span> src<span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette version me plait bien, je l’ai donc ajouté sur le <a href="http://rosettacode.org/wiki/Quine#R">rosettacode.org</a>.</p>

<p>Comme dit la dernière fois, il est bon d’utiliser <code>diff</code> pour s’assurer qu’on
a bien écrit un quine:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">diff -u quine2.r &lt;<span class="o">(</span>Rscript quine2.r<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà le résultat:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>Rscript quine3.r
</span><span class="line">src &lt;- <span class="s2">&quot;\nwriteLines(c(paste(\&quot;src &lt;-\&quot;, encodeString(src, quote=&#39;\&quot;&#39;)), src))&quot;</span>
</span><span class="line">
</span><span class="line">writeLines<span class="o">(</span>c<span class="o">(</span>paste<span class="o">(</span><span class="s2">&quot;src &lt;-&quot;</span>, encodeString<span class="o">(</span>src, <span class="nv">quote</span><span class="o">=</span><span class="s1">&#39;&quot;&#39;</span><span class="o">))</span>, src<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre/">Les langages que j&#8217;aimerais (ré)apprendre</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un quine en R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/"/>
    <updated>2015-10-10T18:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r</id>
    <content type="html"><![CDATA[<p>J’ai lu récemment l’article <a href="http://blog.chaps.io/2015/10/01/generating-quines-in-ruby.html">generating Quines in Ruby</a> qui m’a beaucoup plu. Et j’ai eu envie d’en faire un dans le langage R.</p>

<p>Alors c’est quoi un quine ? Un quine est un programme informatique
auto répliquant (<em>self-reproducing</em>).  Il doit satisfaire à deux conditions:</p>

<ol>
  <li>Il produit son code source en tant que unique sortie.</li>
  <li>Il ne prend aucune entrée, ce qui exclus par exemple de lire un fichier.</li>
</ol>

<!-- more -->

<p>Voici ma solution en R, elle affiche son code source sur la sortie standard
quand on l’exécute. Je me suis beaucoup inspiré de la solution en C de l’article
original:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>quine.r</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">src <span class="o">&lt;-</span><span class="s">&quot;\nescape &lt;- function(x) {\n    cat(&#39;\&quot;&#39;)\n    for(e in strsplit(x, &#39;&#39;)[[1]]) {\n        if(e == &#39;\\n&#39;) {\n            cat(&#39;\\\\n&#39;)\n        } else if(e == &#39;\\\\&#39;) {\n            cat(&#39;\\\\\\\\&#39;)\n        } else if(e == &#39;\&quot;&#39;) {\n            cat(&#39;\\\\\&quot;&#39;)\n        } else {\n            cat(e)\n        }\n    }\n    cat(&#39;\&quot;&#39;)\n}\ncat(\&quot;src &lt;-\&quot;)\nescape(src)\nwriteLines(src)&quot;</span>
</span><span class="line">escape <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">    cat<span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="kr">for</span><span class="p">(</span>e <span class="kr">in</span> strsplit<span class="p">(</span>x<span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)[[</span><span class="m">1</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="kr">if</span><span class="p">(</span>e <span class="o">==</span> <span class="s">&#39;\n&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span><span class="s">&#39;\\n&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="kr">else</span> <span class="kr">if</span><span class="p">(</span>e <span class="o">==</span> <span class="s">&#39;\\&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span><span class="s">&#39;\\\\&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="kr">else</span> <span class="kr">if</span><span class="p">(</span>e <span class="o">==</span> <span class="s">&#39;&quot;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span><span class="s">&#39;\\&quot;&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span> <span class="kr">else</span> <span class="p">{</span>
</span><span class="line">            cat<span class="p">(</span>e<span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    cat<span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">cat<span class="p">(</span><span class="s">&quot;src &lt;-&quot;</span><span class="p">)</span>
</span><span class="line">escape<span class="p">(</span>src<span class="p">)</span>
</span><span class="line">writeLines<span class="p">(</span>src<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Comme il est noté dans l’article original, il est bon de tester sa solution à
l’aide de <code>diff</code>. Si la sortie de votre programme et le source sont identiques,
<code>diff</code> ne produira aucune sortie, sinon bon débogage ;)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>diff -u quine.r &lt;<span class="o">(</span>Rscript quine.r<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ma solution est beaucoup plus longue que celle qui se trouve sur le <a href="http://rosettacode.org/wiki/Quine#R">rosetta code</a> par exemple. Mais c’est pas grave, c’était marrant à faire, c’était un bon petit casse-tête qui m’a bien fait réfléchir. Et j’ai même appris une fonction R qui m’était inconnue (<code>writeLines</code>).</p>

<p>À vous de jouer maintenant ; tenez moi au courant si vous écrivez un quine, quel
que soit le langage ;)</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/">Un quine en R - Le retour</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre/">Les langages que j&#8217;aimerais (ré)apprendre</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combien de fois par jour est-ce-que je m'assois à mon bureau]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/10/06/combien-de-fois-par-jour-est-ce-que-je-massois-a-mon-bureau/"/>
    <updated>2015-10-06T12:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/10/06/combien-de-fois-par-jour-est-ce-que-je-massois-a-mon-bureau</id>
    <content type="html"><![CDATA[<p>Depuis le 21 septembre j’enregistre chaque jour les moments où je suis assis à
mon bureau. Je vais mener cette expérience un peu bizarre pendant encore quelques
semaines. Je voudrais savoir combien de fois par jour je m’assois à mon bureau,
et si certains patterns se dégagent. J’enregistre ces données avec un arduino
relié à un
<a href="http://www.interlinkelectronics.com/FSR406.php">capteur de pression FSR</a>.
Vous trouverez <a href="https://github.com/lkdjiin/sit-down">le code arduino et quelques photos</a>
sur Github.</p>

<p>Cet article est un compte-rendu de la première semaine d’enregistrement.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/raw.jpg" /></p>

<!-- more -->

<p>La pression est enregistrée sur une échelle allant de 0 à 1023. Zéro
représentant l’absence de pression et 1023 étant la pression maximale que le
dispositif peut mesurer. Je fais une mesure toutes les 30 secondes.</p>

<p>Sur le graphique précédent, à gauche, on peut voir les données brutes de la
semaine. Toute l’échelle des valeurs est représentée. Suivant comment je suis
assis sur mon fauteuil, comment le poids est réparti, le dispositif capte des
valeurs différentes. Les points bleus, en bas, indiquent clairement quand je
ne suis pas assis (zéro pression ou presque). Après quelques essais empiriques, j’ai trouvé que la valeur 20
était un bon seuil pour séparer les données brutes en deux catégories :
assis (<em>seated</em>) et pas assis (<em>not seated</em>).</p>

<p>Voici le résultat pour la première semaine :</p>

<pre><code>| Jour       | Combien de fois assis |
| ---------- | --------------------- |
| 2015-09-21 | 32                    |
| 2015-09-22 | 30                    |
| 2015-09-23 | 33                    |
| 2015-09-24 | 33                    |
| 2015-09-25 | 40                    |
| 2015-09-26 | 26                    |
| 2015-09-27 | 26                    |
</code></pre>

<p>On peut visualiser les données retravaillées de manière sympathique, par
exemple pour le lundi ; les périodes de couleur marron sont les périodes
durant lesquelles je suis assis à mon bureau :</p>

<p><img class="center" src="http://lkdjiin.github.io/images/visualize-day.png" /></p>

<p>On peut étendre ce genre de visualisation sur une semaine entière. C’est un
premier moyen pour repérer des patterns. Mais cette semaine ayant été spéciale
(<em>j’ai travaillé aussi le week-end, ce que je ne fait pas normalement</em>),
j’attendrai d’avoir récolté plus de données avant de tirer des conclusions.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/visualize-week.png" /></p>

<p>J’écrirai certainement un prochain article plus technique sur le code R qui a
été nécessaire pour traiter les données et obtenir ces graphiques.</p>

<p>Si vous avez des projets de ce genre, en tête ou en cours de réalisation,
j’aimerais beaucoup en entendre parler, alors n’hésitez pas à laisser votre
commentaire.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li><li><a href="http://lkdjiin.github.io/blog/2014/04/09/projet-de-client-twitter-en-console/">Projet de client Twitter en console</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commencer le développement web en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/09/16/commencer-le-developpement-web-en-ruby/"/>
    <updated>2015-09-16T15:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/09/16/commencer-le-developpement-web-en-ruby</id>
    <content type="html"><![CDATA[<h2 id="guest-post-"><code>{ Guest Post }</code></h2>

<p>Grâce au framework <a href="http://rubyonrails.org/">Ruby on Rails</a>, Ruby est maintenant très populaire pour le développement d’application web.
Ce domaine est un pleine croissance et Ruby on Rails attire beaucoup de débutants de tout horizons.</p>

<p>Je pense que commencer l’apprentissage d’un framework web nécessite de bien comprendre le rôle de chacun de ses composants.
Des composants, Ruby on Rails en comporte beaucoup et chacun d’entre eux répond à une problématique bien précise.
ORM, routeur, templates, controlleurs, tâches de fond et bien d’autres ; il y a de quoi se perdre.</p>

<p>Mon conseil à ceux qui débutent dans le domaine est de bien comprendre la raison d’être de chaque chose.
Une manière amusante de cerner les problématiques qui ont donnés naissance aux frameworks tel que Rails,
c’est de se passer complètement de ces briques. C’est à dire partir du strict minimum et ajouter, petit à petit,
les composants dont on ressent le besoin.</p>

<!-- more -->

<h2 id="rack">Rack</h2>

<p><a href="https://rack.github.io/">Rack</a> est la brique de base de la plupart des frameworks web Ruby actuels. Rack est avant tout une API définissant
la manière pour un programme Ruby de prendre en charge et de répondre à une requête HTTP. Voici un exemple simple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ./config.ru</span>
</span><span class="line">
</span><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="o">[</span>
</span><span class="line">    <span class="mi">200</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="o">[</span> <span class="s2">&quot;&lt;h1&gt;Hello world&lt;/h1&gt;&quot;</span> <span class="o">]</span>
</span><span class="line">  <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">run</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans cet exemple, on voit que l’on declare une variable <code>app</code> à laquelle on assigne un object <code>Proc</code>.
Cet objet <code>app</code> est ensuite passé à la méthode <code>Rack::Builder#run</code> indiquant ainsi au serveur compatible
ce qu’il faut exectuter lorsqu’une requête arrivera.</p>

<p>Regardons de plus près comment se comporte le <code>Proc</code> ci-dessus. On voit qu’il prend un argument que l’on
appelle <em>l’environement Rack</em>. Le <code>Proc</code> retourne une <em>réponse Rack</em> qui est un tableau contenant les
informations nécessaire à la construction de la réponse HTTP : le code de retour, les entêtes et le corps
de la reponse.</p>

<p>Rack ne nécessite pas d’utiliser un <code>Proc</code>. La seule contrainte est d’être un objet répondant à la méthode
<code>#call</code> prenant en argument un environement Rack et retournant une réponse Rack telle que nous venons de le voir.</p>

<h3 id="excuter-lapplication">Exécuter l’application</h3>

<p>Pour executer ce <code>config.ru</code> on peut utiliser l’outil <code>rackup</code> fourni avec la gem <code>rack</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rack</span>
</span><span class="line"><span class="err">$</span> <span class="n">rackup</span> <span class="n">config</span><span class="o">.</span><span class="n">ru</span>
</span><span class="line"><span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">21</span> <span class="mi">10</span><span class="p">:</span><span class="mi">54</span><span class="p">:</span><span class="mi">21</span><span class="o">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span>
</span><span class="line"><span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">21</span> <span class="mi">10</span><span class="p">:</span><span class="mi">54</span><span class="p">:</span><span class="mi">21</span><span class="o">]</span> <span class="no">INFO</span>  <span class="n">ruby</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span> <span class="p">(</span><span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">13</span><span class="p">)</span> <span class="o">[</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">21</span> <span class="mi">10</span><span class="p">:</span><span class="mi">54</span><span class="p">:</span><span class="mi">21</span><span class="o">]</span> <span class="no">INFO</span>  <span class="ss">WEBrick</span><span class="p">:</span><span class="ss">:HTTPServer</span><span class="c1">#start: pid=24457 port=9292</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette commande va écouter sur le port 9292 et pour chaque requête appeller la méthode <code>#call</code> de l’objet <code>app</code>.</p>

<p>Lorsque l’on apportera es modification à notre code, il faudra bien penser à redémarrer le serveur : <code>CTRL-C</code> pour l’arrêter et le relancer avec la commande que l’on vient de voir.</p>

<h3 id="quy-a-t-il-dans-lenv">Qu’y a-t-il dans l’env</h3>

<p>Pour voir ce qui se trouve dans l’environement je vais utiliser <code>JSON.pretty_generate</code> qui va m’afficher la variable
<code>env</code> au format JSON.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ./config.ru</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;json&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">  <span class="o">[</span>
</span><span class="line">    <span class="mi">200</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="o">[</span> <span class="s2">&quot;&lt;h1&gt;Hello world&lt;/h1&gt;&quot;</span> <span class="o">]</span>
</span><span class="line">  <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">run</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Après avoir modifié le <code>config.ru</code>, il faut redémarrer le serveur.</p>

<p>Pour faire une requête, j’utilise <a href="https://github.com/jkbrzt/httpie">httpie</a> qui permet simplement d’envoyer des requêtes HTTP depuis le terminal et qui est équivalent à <code>curl</code> avec de jolies couleurs en plus. Vous pouvez utiliser le client de votre choix bien entendu. Chez moi cela donne :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">http</span> <span class="o">-</span><span class="n">v</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">9292</span>
</span><span class="line"><span class="no">GET</span> <span class="o">/</span> <span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span>
</span><span class="line"><span class="ss">Accept</span><span class="p">:</span> <span class="o">*/*</span>
</span><span class="line"><span class="no">Accept</span><span class="o">-</span><span class="ss">Encoding</span><span class="p">:</span> <span class="n">gzip</span><span class="p">,</span> <span class="n">deflate</span>
</span><span class="line"><span class="ss">Connection</span><span class="p">:</span> <span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</span><span class="line"><span class="ss">Host</span><span class="p">:</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">9292</span>
</span><span class="line"><span class="no">User</span><span class="o">-</span><span class="ss">Agent</span><span class="p">:</span> <span class="no">HTTPie</span><span class="o">/</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="mi">200</span> <span class="no">OK</span>
</span><span class="line"><span class="ss">Connection</span><span class="p">:</span> <span class="no">Keep</span><span class="o">-</span><span class="no">Alive</span>
</span><span class="line"><span class="no">Content</span><span class="o">-</span><span class="ss">Type</span><span class="p">:</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span>
</span><span class="line"><span class="ss">Date</span><span class="p">:</span> <span class="no">Tue</span><span class="p">,</span> <span class="mi">21</span> <span class="no">Jul</span> <span class="mi">2015</span> <span class="mi">11</span><span class="p">:</span><span class="mi">21</span><span class="p">:</span><span class="mi">16</span> <span class="no">GMT</span>
</span><span class="line"><span class="ss">Server</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span> <span class="p">(</span><span class="no">Ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">13</span><span class="p">)</span>
</span><span class="line"><span class="no">Transfer</span><span class="o">-</span><span class="ss">Encoding</span><span class="p">:</span> <span class="n">chunked</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Hello</span> <span class="n">world</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À l’issue de cette requête, on a bien le body <code>&lt;h1&gt;Hello world&lt;/h1&gt;</code> qui s’affiche.
On remarque également que dans le terminal où notre serveur est lancé, on voit s’afficher
sur la sortie standard :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="s2">&quot;GATEWAY_INTERFACE&quot;</span><span class="o">:</span> <span class="s2">&quot;CGI/1.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;PATH_INFO&quot;</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;QUERY_STRING&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REMOTE_ADDR&quot;</span><span class="o">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REMOTE_HOST&quot;</span><span class="o">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REQUEST_METHOD&quot;</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REQUEST_URI&quot;</span><span class="o">:</span> <span class="s2">&quot;http://localhost:9292/&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SCRIPT_NAME&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_NAME&quot;</span><span class="o">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_PORT&quot;</span><span class="o">:</span> <span class="s2">&quot;9292&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_PROTOCOL&quot;</span><span class="o">:</span> <span class="s2">&quot;HTTP/1.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;SERVER_SOFTWARE&quot;</span><span class="o">:</span> <span class="s2">&quot;WEBrick/1.3.1 (Ruby/2.2.2/2015-04-13)&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_HOST&quot;</span><span class="o">:</span> <span class="s2">&quot;localhost:9292&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_CONNECTION&quot;</span><span class="o">:</span> <span class="s2">&quot;keep-alive&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_ACCEPT_ENCODING&quot;</span><span class="o">:</span> <span class="s2">&quot;gzip, deflate&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_ACCEPT&quot;</span><span class="o">:</span> <span class="s2">&quot;*/*&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_USER_AGENT&quot;</span><span class="o">:</span> <span class="s2">&quot;HTTPie/0.9.2&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.version&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">    <span class="mi">1</span><span class="p">,</span>
</span><span class="line">    <span class="mi">3</span>
</span><span class="line">  <span class="p">],</span>
</span><span class="line">  <span class="s2">&quot;rack.input&quot;</span><span class="o">:</span> <span class="s2">&quot;#&lt;Rack::Lint::InputWrapper:0x007fcac62086c0&gt;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.errors&quot;</span><span class="o">:</span> <span class="s2">&quot;#&lt;Rack::Lint::ErrorWrapper:0x007fcac6208698&gt;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.multithread&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.multiprocess&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.run_once&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.url_scheme&quot;</span><span class="o">:</span> <span class="s2">&quot;http&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.hijack?&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.hijack&quot;</span><span class="o">:</span> <span class="s2">&quot;#&lt;Proc:0x007fcac6208b70@/home/n25/.gem/ruby/2.2.2/gems/rack-1.6.4/lib/rack/lint.rb:525&gt;&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.hijack_io&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTTP_VERSION&quot;</span><span class="o">:</span> <span class="s2">&quot;HTTP/1.1&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;REQUEST_PATH&quot;</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;rack.tempfiles&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">
</span><span class="line">  <span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est uniquement à partir de cette variable <code>env</code> que notre application devra formuler une réponse Rack !</p>

<h2 id="de-rack-au-frameworks-web">De Rack au frameworks Web</h2>

<p>Dans cette partie, essayons de trouver des solutions a de petits problèmes.
Bien sûr on n’utilisera que Rack.</p>

<p>Comme support nous nous mettrons dans le cas d’un réseau social très simplifié.</p>

<h3 id="le-routage">Le routage</h3>

<p>Chaque membre de notre réseau social va avoir une page qui lui est propre.
Pour y accéder nous utilisons le chemin suivant : <code>/members/&lt;id&gt;</code> où <code>&lt;id&gt;</code> sera <em>l’identifiant du membre</em>.</p>

<p>Avec Rack nous pouvons écrire le code suivant pour parvenir à isoler l’identifiant du membre :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">member</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">  <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">%r{\A/members/([A-Za-z0-9]+)\z}</span> <span class="o">&amp;&amp;</span> <span class="vg">$1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette méthode va nous permettre d’obtenir l’identifiant du membre en fonction de l’environement Rack.
On peut introduire ce code dans notre application :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="n">member_id</span> <span class="o">=</span> <span class="n">member</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">  <span class="o">[</span>
</span><span class="line">    <span class="mi">200</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="o">[</span> <span class="s2">&quot;&lt;h1&gt;Hello </span><span class="si">#{</span><span class="n">member_id</span><span class="si">}</span><span class="s2">&lt;/h1&gt;&quot;</span> <span class="o">]</span>
</span><span class="line">  <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ici on a extrait un paramètre de l’URL. Si on visite <code>/members/Nicolas</code> on verra le texte <em>Hello Nicolas</em> s’afficher.
Par contre, si on visite <code>/signup</code>, on verra <em>Hello</em> s’afficher seul puisque <code>member_id</code> sera égal à <code>nil</code>.</p>

<p>En pratique, notre réseau social va avoir besoin d’identifier des dixaines voir des centaines d’URLs différentes.
Avec ce volume, il est nécessaire de s’organiser autrement et d’associer les URLs gérée par notre application avec
le code responsable de répondre à la requête. Dans le cas ou une URL n’est pas gérée, on souhaite répondre par un code
d’erreur.</p>

<p>Voici un extrait de code permettant de répondre à cette problématique :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ShowMember</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">match?</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">%r{\A/members/[A-Za-z0-9]+\z}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">member_id</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">].</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;/members/&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">}</span>
</span><span class="line">    <span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;&lt;h1&gt;Hello </span><span class="si">#{</span><span class="n">member_id</span><span class="si">}</span><span class="s2">&lt;/h1&gt;&quot;</span>
</span><span class="line">    <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="o">[</span> <span class="n">body</span> <span class="o">]</span> <span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">actions</span> <span class="o">=</span> <span class="o">[</span> <span class="no">ShowMember</span> <span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">app</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class="line">  <span class="n">action</span> <span class="o">=</span> <span class="n">actions</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span> <span class="n">action</span><span class="o">.</span><span class="n">match?</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="n">action</span> <span class="p">?</span> <span class="n">action</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">:</span> <span class="o">[</span> <span class="mi">404</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span> <span class="s2">&quot;Not Found&quot;</span> <span class="o">]</span> <span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On voit que j’ai implicitement définit une interface : <code>#match?(env)</code> et <code>call(env)</code> pour les actions que
l’application peut réaliser. Chaque action est responsable de formuler une réponse Rack lors d’un appel à la
méthode <code>call</code> et de savoir, via <code>match?</code>, si oui ou non elle doit s’executer.</p>

<p>L’ensemble des frameworks web font un traitement semblable en utilisant une solution que l’on appelle le routage.
Différentes approches concernant le routage existent, voir <a href="http://roda.jeremyevans.net/">Roda</a>, <a href="http://www.sinatrarb.com/">Sinatra</a> et <a href="http://guides.rubyonrails.org/routing.html">Rails</a>.</p>

<p>Voici par exemple un extrait de code qui utilise Sinatra pour faire exactement ce que nous avons fait :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s2">&quot;sinatra&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">get</span> <span class="s2">&quot;/members/:member_id&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member_id</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s2">&quot;member_id&quot;</span><span class="o">]</span>
</span><span class="line">  <span class="s2">&quot;&lt;h1&gt;Hello </span><span class="si">#{</span><span class="n">member_id</span><span class="si">}</span><span class="s2">&lt;/h1&gt;&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Remarque</em> :On voit dans cet exemple que Sinatra permet d’extraire les paramètres de l’URL automatiquement.</p>

<h3 id="les-templates">Les templates</h3>

<p>Lorsque l’on développe une fonctionnalité d’un site web, il est fréquent de le faire en deux phases.
Une phase de design où l’on va écrire HTML et CSS afin de visualiser le résultat voulu. Une autre phase
où l’on écrira le code métier qui va injecter les bonnes valeurs dans le HTML en fonction de l’action
effectuée.</p>

<p>Par exemple dans notre code : <code>"&lt;h1&gt;Hello #{member_id}&lt;/h1&gt;"</code> on injecte la variable <code>member_id</code> dans
du HTML. De manière générale, le HTML est beaucoup plus volumineux que dans notre exemple.</p>

<p>Dans la vie de tout les jours, il est fréquent qu’une équipe soit en charge de la phase plus visuelle
(HTML / CSS) et une autre en charge du code métier. Il est donc fréquent de séparer ces deux composantes
de notre code.</p>

<p>Pour effectuer cette séparation, on a recours à des <em>moteurs de templates</em>. Ces briques logicielles vont
nous permettre de séparer notre présentation du code métier. Voici un exemple, toujours en utilisant
Rack :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s2">&quot;erb&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;ostruct&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Template</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">erb</span><span class="p">(</span><span class="n">template_path</span><span class="p">,</span> <span class="n">locals</span><span class="o">=</span><span class="p">{})</span>
</span><span class="line">    <span class="n">file_content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">template_path</span><span class="p">)</span>
</span><span class="line">    <span class="n">context</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">locals</span><span class="p">)</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="nb">binding</span> <span class="p">}</span>
</span><span class="line">    <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">file_content</span><span class="p">)</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ShowMember</span>
</span><span class="line">  <span class="kp">extend</span> <span class="no">Templating</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">member_id</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;PATH_INFO&quot;</span><span class="o">].</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;/members/&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">}</span>
</span><span class="line">    <span class="n">body</span> <span class="o">=</span> <span class="no">Template</span><span class="o">.</span><span class="n">erb</span><span class="p">(</span><span class="s2">&quot;template.html.erb&quot;</span><span class="p">,</span> <span class="n">member_id</span><span class="p">:</span> <span class="n">member_id</span><span class="p">)</span>
</span><span class="line">    <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="o">[</span> <span class="n">body</span> <span class="o">]</span> <span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x">&lt;h1&gt;Hello </span><span class="cp">&lt;%=</span> <span class="n">member_id</span> <span class="cp">%&gt;</span><span class="x">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ici, on va utiliser <code>ERB</code> pour charger le fichier <code>template.html.erb</code>. Au sein de ce fichier,
la variable <code>member_id</code> sera injectée dans le HTML grâce à la notation <code>&lt;%= ... %&gt;</code>.</p>

<p>Les moteurs de templates sont nombreux : <a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/erb/rdoc/ERB.html">erb</a>, <a href="http://haml.info/">haml</a>, <a href="http://slim-lang.com/">slim</a>, <a href="https://github.com/jimweirich/builder">builder</a>,
<a href="http://www.liquidmarkup.org/">liquid</a> etc. Leur usage va plus loin que la simple séparation du code de présentation et
du code métier (voir les <a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials">partials</a>, <a href="http://www.rubydoc.info/gems/slim/frames#Control_code_-">stuctures de controle</a>…).</p>

<h3 id="tester-son-application">Tester son application</h3>

<p>Avant de continuer je vais déplacer le code de l’application du fichier <code>config.ru</code> vers <code>app.rb</code>.
Au passage, j’en profite pour extraire une classe <code>Router</code> ainsi qu’une constante <code>App</code> qui contiendra
notre application.</p>

<p>Les tests sont indispensables lors du développement d’une application. Tester une application Rack est
assez aisé grâce aux outils inclus dans la gem <code>rack-test</code>. Voici un exemple d’un fichier de test écrit
avec minitest :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># ./app_test.rb</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;minitest/autorun&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;rack/test&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">require_relative</span> <span class="s2">&quot;app&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">App</span> <span class="k">do</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Test</span><span class="o">::</span><span class="no">Methods</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s2">&quot;when the URL match no known action&quot;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s2">&quot;returns a 404 status code&quot;</span> <span class="k">do</span>
</span><span class="line">      <span class="n">get</span> <span class="s2">&quot;/unknown/path&quot;</span>
</span><span class="line">      <span class="n">last_response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">must_equal</span> <span class="mi">404</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s2">&quot;when the URL match the members&#39;s path&quot;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s2">&quot;displays the member&#39;s id&quot;</span> <span class="k">do</span>
</span><span class="line">      <span class="n">get</span> <span class="s2">&quot;/members/Nicolas&quot;</span>
</span><span class="line">      <span class="n">last_response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">must_include</span> <span class="s2">&quot;Nicolas&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">app</span>
</span><span class="line">    <span class="no">App</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour lancer les tests, la commande : <code>bundle exec ruby -Ilib:test *_test.rb --pride</code> suffit.</p>

<p>Le frameworks web tels que Rails instaurent des conventions et des outils par défaut pour le test
de ses applications. Les outils de tests fonctionnent également hors des frameworks comme le montre
notre exemple.</p>

<h2 id="pour-finir">Pour finir</h2>

<p>En continuant sur cette lancée, on peut rencontrer d’autres problématiques comme les sessions, la persistance,
l’organisation du coe métier, le caching et bien d’autres. Il est très facile, avec un peu de recul, de créer
son propre framework ou d’utiliser un micro-framework puis d’y ajouter ses propres conventions ainsi que les
outils de son choix.</p>

<p>Même si ce billet s’adresse principalement aux débutants, j’espère qu’il touchera également quelques
enseignants ou mentors. Peu importe votre profil, n’hésitez pas à partager vos premiers pas avec le
développement web en Ruby ainsi que la manière dont vous l’aborderiez aujourd’hui.</p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="https://secure.gravatar.com/avatar/510312aa405bc675fc275fad7648eb1c?s=200" /></p>

<p><strong>Nicolas Zermati</strong><br />
Software writer, building the backend of Sleekapp.io at Tigerlily</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment implémenter un algorithme bien connu]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/09/11/comment-implementer-un-algorithme-bien-connu/"/>
    <updated>2015-09-11T14:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/09/11/comment-implementer-un-algorithme-bien-connu</id>
    <content type="html"><![CDATA[<p>Quand tu implémentes un algorithme «bien connu», tu as tout intérêt à suivre
strictement l’algorithme tel qu’il est décrit.</p>

<p>Ne commence pas à vouloir modifier telle ou telle partie.</p>

<p>Ou pire, ne cherche pas à optimiser quoi que ce soit.</p>

<!-- more -->

<p>Si on l’appelle un algorithme «bien connu», il doit y avoir une bonne raison à
ça.</p>

<p>C’est sûrement que des tas et des tas de personnes s’y sont déjà cassé les
dents.</p>

<p>C’est qu’une armée de développeur s’est déjà arraché les cheveux en travaillant dessus.</p>

<p>Parfois depuis plus de 40 ans.</p>

<p>Un algorithme «bien connu» est bien assez bon pour toi.</p>

<p>Implémente le tel quel.</p>

<p>Gagne du temps.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connaitre la taille d'un programme pour Arduino]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino/"/>
    <updated>2015-08-20T16:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/08/20/connaitre-la-taille-dun-programme-pour-arduino</id>
    <content type="html"><![CDATA[<p>Si j’ai besoin de connaître la taille et la demande en RAM de mes
programmes Arduino, comment je fais ? Et puis d’abord pourquoi je voudrais
connaître leur taille ?</p>

<p><img class="center" src="http://lkdjiin.github.io/images/640-arduino-avr.jpg" /></p>

<!-- more -->

<h2 id="o-se-cache-le-programme">Où se cache le programme</h2>

<p>Le programme au format elf se trouve dans un dossier caché. Vous pouvez
constater que sa taille est assez conséquente. Ce n’est pas du tout sa taille
finale pour l’Arduino.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="se">\l</span>s -lh .build/uno/firmware.elf
</span><span class="line">-rwxr-xr-x 1 xavier xavier 40K août  19 21:01 .build/uno/firmware.elf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Un dossier caché est un dossier dont le nom commence par un point. On dit
«caché» car sous Linux et OS X ils sont invisibles par défaut.</em></p>

<h2 id="comment-connatre-les-besoins-en-mmoire-dun-programme-arduino">Comment connaître les besoins en mémoire d’un programme Arduino</h2>

<p>C’est le programme <code>avr-size</code> qui va tout nous dire:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>avr-size -dC .build/uno/firmware.elf
</span><span class="line">AVR Memory Usage
</span><span class="line">----------------
</span><span class="line">Device: Unknown
</span><span class="line">
</span><span class="line">Program:    2786 bytes
</span><span class="line"><span class="o">(</span>.text + .data + .bootloader<span class="o">)</span>
</span><span class="line">
</span><span class="line">Data:         34 bytes
</span><span class="line"><span class="o">(</span>.data + .bss + .noinit<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’utilise 34 octets de RAM et 2786 octets au total.</p>

<p>Le switch <code>-d</code> fournit les valeurs en décimal. Le switch <code>-C</code> spécifie le
format du rapport de <code>avr-size</code> (<code>$ avr-size --help</code> pour voir les autres).</p>

<h2 id="pourquoi-faire">Pourquoi faire</h2>

<p>Les micro contrôleurs ATMEL ont des tailles de mémoire
différentes (mémoire vive et mémoire programme). Par exemple l’ATtiny13 possède 1 Ko pour le programme et 64 octets
de RAM, tandis que le ATtiny85 fait 8 Ko pour le programme et 512 octets pour
la RAM.</p>

<p>Pour les programmes qui sont destinés à quitter la plateforme Arduino pour
rejoindre un micro contrôleur, connaître la taille mémoire permet de savoir
si il est intéressant de passer du temps et de l’énergie à <em>optimiser</em> ces
programmes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser Bash pour supprimer les encodages magiques de Ruby 1.9]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/08/06/utiliser-bash-pour-supprimer-les-encodages-magiques-de-ruby-1-dot-9/"/>
    <updated>2015-08-06T17:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/08/06/utiliser-bash-pour-supprimer-les-encodages-magiques-de-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>Si vous avez travaillé sur des projets écrit avec Ruby 1.9, vous avez peut-être
utilisé les encodages magiques (souvent appelés <em>magic comment</em>). Il s’agit
d’un commentaire en début de fichier qui définit l’encodage :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># -*- encoding: UTF-8 -*-</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Récemment j’ai passé plusieurs projets de Ruby 1.9.x à Ruby 2.x et j’ai
naturellement voulu supprimer ces <em>directives d’encodage</em> qui ne sont plus
nécessaires.</p>

<p>J’imagine qu’un IDE ou un autre doit être capable de faire ça (<code>&lt;mode troll&gt;</code>
sinon quel intérêt à utiliser un IDE ? <code>&lt;/mode troll&gt;</code>). Toujours est-il que
quelques commandes dans Bash et hop, terminé ;)</p>

<p>Voici comment faire, sans trop entrer dans les détails. J’espère juste vous
donner envie d’utiliser Bash, ou un autre shell (si ça n’est pas déjà le cas).</p>

<!-- more -->

<p>De quoi a-t-on besoin ?  <code>find</code>, <code>sed</code> et <code>xargs</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>find . -type f -name <span class="s1">&#39;*.rb&#39;</span> | xargs sed -i <span class="s1">&#39;1{/encoding/d}&#39;</span>
</span><span class="line"><span class="nv">$ </span>find . -type f -name <span class="s1">&#39;*.rb&#39;</span> | xargs sed -i -n <span class="s1">&#39;/./,$p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La première commande efface la première ligne des fichiers ruby si cette
ligne contient <code>encoding</code>. La seconde commande enlève la première ligne si
cette ligne est vide.</p>

<h2 id="find">find</h2>

<pre><code>find . -type f -name '*.rb'
</code></pre>

<p>Cherche tout les fichiers dont le nom se termine par <code>.rb</code> et les affichent
les uns après les autres.  Ça donne quelque chose comme ça :</p>

<pre><code>./fichier1.rb
./fichier2.rb
./dossier1/fichier1.rb
./dossier1/fichier2.rb
./dossier2/fichier1.rb
[...]
</code></pre>

<h2 id="xargs">xargs</h2>

<p>Pour donner les noms de fichier à manger à sed, il faut qu’ils soient sur une
seule ligne. C’est à dire les uns à coté des autres comme on écrirait des
paramètres, et pas les uns en dessous des autres comme ce qui sort de <code>find</code>.</p>

<p>Voilà donc <code>xargs</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;a\nb\nc&quot;</span>
</span><span class="line">a
</span><span class="line">b
</span><span class="line">c
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;a\nb\nc&quot;</span> | xargs
</span><span class="line">a b c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>– <em>Le switch <code>-e</code> de echo interprète la séquence \n comme un saut de ligne.</em> —</p>

<h2 id="sed">sed</h2>

<p>Le switch <code>-i</code> c’est pour <em>in place</em>. On modifie vraiment les fichiers.</p>

<pre><code>sed -i '1{/encoding/d}'
</code></pre>

<p>Supprime (<code>d</code>) la ligne qui contient <code>encoding</code>. Ne s’applique qu’à la 1ère
ligne <code>1{}</code>.</p>

<pre><code>sed -i -n '/./,$p'
</code></pre>

<p>Supprime la 1ère ligne si elle est vide. Je trouve que cette ligne mérite bien
un article à elle toute seule. Alors son explication sera pour une prochaine
fois ;)</p>

<p>Et vous, comment auriez vous fait ? Avec un shell ? Un IDE ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coco version 0.13.0]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/29/coco-version-0-dot-13-dot-0/"/>
    <updated>2015-07-29T10:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/29/coco-version-0-dot-13-dot-0</id>
    <content type="html"><![CDATA[<p>Je me rend compte que j’ai sorti la version 0.13.0 de
<a href="https://github.com/lkdjiin/coco">coco</a>
il y a près d’un mois et que je n’ai pas encore écrit une seule ligne sur le
sujet !</p>

<p>Coco est un outil de <strong>co</strong>uverture de <strong>co</strong>de pour Ruby — <strong>co</strong>de
<strong>co</strong>verage en anglais —. En gros, coco vous dit quels sont les fichiers d’un
projet qui ne sont pas suffisamment testés :</p>

<p><img class="center" src="http://lkdjiin.github.io/images/coco-shot-1.png" /></p>

<!-- more -->

<p>Puis, pour les fichiers qui ne sont pas couverts à 100% par les tests, vous
pouvez visualiser les parties du code qui ne sont pas couvertes (ici en rouge) :</p>

<p><img class="center" src="http://lkdjiin.github.io/images/coco-shot-2.png" /></p>

<p>Qu’y a-t-il de nouveau dans cette version 0.13.0 ? J’ai essentiellement
travaillé sur l’aspect du rapport HTML, afin qu’il soit un peu plus agréable
à regarder (je ne suis toujours ni graphiste ni designer, mais je crois que
cette fois ça n’est pas trop mal). On peut retenir aussi que les versions de
Ruby inférieures à 2 ne sont plus supportées.</p>

<p>Il ne reste plus grand chose à faire avant la <a href="https://github.com/lkdjiin/coco/issues">version 1.0</a>. Ça sera peut-être pour la fin de cette année, 5 ans après la première release, qui sait ?</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/">Couverture de code pour Ruby avec coco</a></li><li><a href="http://lkdjiin.github.io/blog/2014/05/24/sortie-de-coco-version-0-dot-11-dot-0/">Sortie de Coco version 0.11.0</a></li><li><a href="http://lkdjiin.github.io/blog/2014/02/11/sortie-de-coco-0-dot-9/">Sortie de coco 0.9</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to stay productive while working from home]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/27/how-to-stay-productive-while-working-from-home/"/>
    <updated>2015-07-27T13:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/27/how-to-stay-productive-while-working-from-home</id>
    <content type="html"><![CDATA[<p><em>Pour la première fois voici un article en anglais écrit par une développeuse qui
travaille pour une entreprise française, depuis le Mexique et le Brésil.</em></p>

<h2 id="guest-post-"><code>{ Guest Post }</code></h2>

<p>It’s been a bit more than year since I started remote working from Mexico and Brazil. I must admit it wasn’t easy to adapt myself to this way of working, as I consider myself someone who likes to talk and share some fun moments with my colleagues and friends.</p>

<!-- more -->

<p>The reasons why I took the decision of working remotely were purely personal, from spending more time with my family to visit friends in other countries. I took all this as my main motivation in this new adventure. </p>

<p>But even with this, motivation is not the only thing that can get you through a successful to remote working.</p>

<h2 id="distractions">Distractions</h2>

<p>If you don’t live alone, you won’t be the only one at your home adapting to remote working. Your family or roommates will have to adapt too.
Having your own space at your house, where you can focus during your working hours will help you a lot. It is a good idea to avoid common areas such as the living room or dinning. Neither working from your bedroom the best option. 
You should find a place dedicated only for work and where you feel confortable, that way you can disconnect from your duties once your working hours are finished, and the people in your house will think twice before interrupting you.</p>

<p>From time to time is nice to work from co working spaces, there you can meet other people that do remote working as well, it is nice to chat about their projects, and even how they handle remote working. If you will be doing remote working while travelling maybe it is worth for you to take a look at  <a href="https://www.desktimeapp.com/">Desktime App</a> there you can look for co working space by city.</p>

<h2 id="organization">Organization</h2>

<p>Organizing your day is one of the things that will lead you to achieving your objectives easily. 
People tend to think that remote working equals to “working in your own schedule”, which for some people might be true, I strongly advice to organize your day as if you were in your office or in a “regular job”. This way you can maintain a routine, stick to lunch hours and mainly you work only the hours you should work. Without a schedule you can easily find yourself having 2 lunches a day or working more time than you should. Resting is always important to maintain your productivity.</p>

<h2 id="communication">Communication</h2>

<p>One of trickiest thing about remote working is communication among your team, first off you have to work a lot in your writing and speaking skills. 
Also, I think it is important to maintain meetings like: <strong>Retrospective meetings</strong> so everyone can talk about the issues they encounter during the week and find a solution with your team.
Standups are important too, it is a really good way to communicate to your team what you are currently doing and if you might need a hand from them. 
In my case, communication is even harder, as I’m the only one in my team that works outside France, which means I start my day at 2 p.m. (Paris time). To handle this, we do asynchronous standups, which are written in Slack (our main communication tool), pinging if necessary the people we need to talk with. </p>

<p>At Tigerlily we even have a Slack room, where we come to say hi to everyone when we arrive and aware people if we will be away for some reason. This channel is also use to share articles or even fun stuff we found on the Internet is like a water cooler room.</p>

<p>Besides Slack, we use a lot Google Hangouts to do our meetings, and lately we have started using appear.in, which is a very simple app that allows you to start a video call without signing in, just by sharing a dedicated URL.</p>

<h2 id="breaks">Breaks</h2>

<p>It is important to take small breaks during your working hours, as you could do in your office. Some people find pomodoring a good way to manage their time, if you haven’t use it give it a try.</p>

<p>Finally, working from home or remotely doesn’t mean you don’t get to socialize with other people. With the extra time you gain from commuting you can use it to enroll in outside activities, or any kind of hobby you have been willing to practice, even assisting to your local meet up or why not organizing one :) </p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="http://lkdjiin.github.io/images/Ana.jpg" /></p>

<p><strong>Ana Rosas</strong><br />
Full-stack developer, working remotely at Tigerlily from Mexico and Brazil.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De meilleurs alias avec zsh]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh/"/>
    <updated>2015-07-20T13:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh</id>
    <content type="html"><![CDATA[<h2 id="guest-post-"><code>{ Guest Post }</code></h2>

<p>Pour m’améliorer en tant que dev, j’essaye au maximum de simplifier et d’automatiser mon workflow. L’idée est de passer moins de temps à faire des choses qu’un ordinateur peut faire à ma place, et plus de temps à réfléchir aux problèmes que je cherche à résoudre.</p>

<p>C’est dans cette optique que je me suis mis à ajouter énormément d’alias très courts à mon shell. Un alias revient à automatiser l’action de taper sur les touches pour des commandes fréquentes. Malheureusement, les alias sont sous-utilisés pour plusieurs raisons : on a peur d’oublier la commande qui se cache derrière, un autre dev avec qui on est en train de faire du pair programming aura du mal à comprendre quelles commandes sont exécutées, et souvent on oublie tout simplement qu’on a un alias pour la commande qu’on est en train de taper.</p>

<p>Pour remédier à ces problèmes, j’ai trouvé des solutions que des fonctions avancées de zsh permettent d’implémenter : les alias explicites, et les alias obligatoires.</p>

<!-- more -->

<h2 id="zsh">zsh</h2>

<p>zsh est un shell Unix similaire à bash, mais en mieux. On cite souvent son autocompletion et la quantité de plugins disponibles, notamment ceux de <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>, comme les principales raisons de passer de bash à zsh.</p>

<p>zsh est installé par défaut sur la plupart des distributions linux et OSX. Si vous ne l’utilisez pas encore, vous pouvez en faire votre shell par défaut avec cette commande :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chsh -s $(which zsh)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="les-alias-explicites">Les alias explicites</h2>

<p>C’est une fonction que @lkdjiin connait bien puisque c’est une des premières améliorations que j’ai apporté à mes alias quand j’ai commencé à travailler avec lui.
Voilà à quoi ça ressemble:</p>

<p><img src="https://cloud.githubusercontent.com/assets/1840367/8545448/16b25cfc-24af-11e5-85ab-69f77424b532.gif" alt="explicit_aliases" /></p>

<p>Afin de ne pas oublier la commande qui se cache derrière un alias, les alias explicite la font s’afficher comme si elle avait été entrée juste après l’alias.
Voici le code à rajouter dans votre .zshrc (le fichier de config que zsh charge avant chaque session) pour activer les alias explicites:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">preexec_functions=()
</span><span class="line">
</span><span class="line">function expand_aliases {
</span><span class="line">  input_command=$1
</span><span class="line">  expanded_command=$2
</span><span class="line">  if [ $input_command != $expanded_command ]; then
</span><span class="line">    print -nP $PROMPT
</span><span class="line">    echo $expanded_command
</span><span class="line">  fi
</span><span class="line">}
</span><span class="line">
</span><span class="line">preexec_functions+=expand_aliases</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Les preexec functions de zsh sont des fonctions qui sont appelées après qu’une commande soit lue, et avant qu’elle ne soit exécutée. zsh leur donne comme argument la commande telle qu’elle est entrée par l’utilisateur, et la même commande après l’expansion des alias.</p>

<p>Cette fonction vérifie donc que la version étendue est différente de la version entrée par l’utilisateur (c’est à dire qu’un alias a été utilisé), et le cas échéant affiche un prompt en utilisant la variable <code>$PROMPT</code> suivi de la commande.</p>

<h2 id="les-alias-obligatoires">Les alias obligatoires</h2>

<p>Cette idée plaît parfois un peu moins : pour ne pas oublier l’existence d’un alias, j’ai modifié mon setup pour que zsh refuse d’exécuter une commande si je la tape en entier plutôt que de me servir d’un alias.</p>

<p><img src="https://cloud.githubusercontent.com/assets/1840367/7302861/9e437a96-e9ec-11e4-9978-9f33f21bd7d9.gif" alt="mandatory_alias" /></p>

<p>Et voici l’implémentation dans le .zshrc:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function check-alias-and-accept {
</span><span class="line">  if [ $BUFFER ]; then
</span><span class="line">
</span><span class="line">    ALIAS=`alias -L | grep -e "=[\'\"]\?${BUFFER}[\'\"]\?$"`
</span><span class="line">
</span><span class="line">    if [ $ALIAS ]; then
</span><span class="line">      echo
</span><span class="line">      echo "You have this alias:"
</span><span class="line">      echo
</span><span class="line">      echo $ALIAS
</span><span class="line">      echo
</span><span class="line">      echo "Use it!"
</span><span class="line">
</span><span class="line">      zle kill-whole-line
</span><span class="line">      zle reset-prompt
</span><span class="line">    else
</span><span class="line">      zle accept-line
</span><span class="line">    fi
</span><span class="line">  else
</span><span class="line">    zle accept-line
</span><span class="line">  fi
</span><span class="line">}
</span><span class="line">
</span><span class="line">zle -N check-alias-and-accept
</span><span class="line">bindkey '^J' check-alias-and-accept
</span><span class="line">bindkey '^M' check-alias-and-accept</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’utilise ici une fonction peu connue de zsh: le Zsh Line Editor, ou zle. Il s’agit du programme que zsh execute pendant qu’il lit les évènements clavier de l’utilisateur (alors que les precommand functions sont exécutées après que l’utilisateur ai fini d’entrer la commande). C’est ce programme qui lance l’autocomplétion lorsque qu’on appuie sur TAB par exemple.</p>

<p>L’implémentation est un peu plus compliquée que pour les alias explicites. Regardons un peu plus en détails ce qui se passe:</p>

<ul>
  <li>Les trois dernières lignes sont pour enregistrer la fonction <code>check-alias-and-accept</code> à la liste des fonctions que zle peut appeler, et binder la touche Entrée à l’appel de cette fonction.</li>
  <li>A l’intérieur de <code>check-alias-and-accept</code>, on commence par vérifier que l’utilisateur a entré quelque chose, ce qui est indiqué par la variable <code>$BUFFER</code> initialisée par zle. Si rien n’a été entré (dans la branche du else), on appelle tout simplement la fonction <code>zle accept-line</code>, qui est celle que zle executerait normalement à l’appui sur la touche Entrée.</li>
  <li>Si il y a une commande, on cherche parmis tous les alias si il y en a un qui correspond. <code>alias -L</code> permet d’obtenir la liste de tous les alias de la config, et un grep avec une regexp un peu sauvage permet de les filtrer.</li>
  <li>Si un alias correspond, les fonctions <code>zle kill-whole-line</code> et <code>zle reset-prompt</code> permettent de revenir à un prompt vide. La commande est donc effacée et n’apparaitra même pas dans l’historique.</li>
</ul>

<h2 id="et-bien-plus-encore">Et bien plus encore</h2>

<p>zsh est un shell très puissant lorsqu’on a le courage de lire son manuel, et permet de customizer votre setup de manière très poussée. Pour plus de customization zsh et vim, jetez un coup d’oeil à mes <a href="https://github.com/victormours/dotfiles">dotfiles</a>, et si vous avez des idées pour d’autres améliorations à base de zsh, <a href="http://twitter.com/victormours">envoyez-les moi sur twitter</a> !</p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="https://avatars3.githubusercontent.com/u/1840367?v=3&amp;s=200" /></p>

<p><strong>Victor Mours</strong><br />
Lead developer chez sleekapp.io, obsessionnel des dotfiles</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment j'ai amélioré mon Ruby avec des contrats]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/13/comment-jai-ameliore-mon-ruby-avec-des-contrats/"/>
    <updated>2015-07-13T12:42:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/13/comment-jai-ameliore-mon-ruby-avec-des-contrats</id>
    <content type="html"><![CDATA[<h2 id="guest-post-"><code>{ Guest Post }</code></h2>

<p>Mes aventures avec une quantité de langages m’ont permis d’entrevoir de nouvelles approches et techniques.
Par exemple, un des gros apports d’Haskell sont les <a href="http://lyah.haskell.fr/creer-nos-propres-types-et-classes-de-types">Types</a> et dans Erlang/Elixir le <a href="http://learnyousomeerlang.com/syntax-in-functions">Pattern-matching</a> est roi.
Professionnellement je code principalement en Ruby et je rêvais d’avoir un système de Types avancé ainsi que du pattern-matching.
C’est ainsi que j’ai découvert une super gem <a href="https://github.com/egonSchiele/contracts.ruby">Contracts.ruby</a> et dans cet article je vais essayer de vous présenter le <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design par Contrats</a> à travers l’utilisation de cette gem.</p>

<!-- more -->

<h2 id="quest-ce-quun-contrat-">Qu’est-ce qu’un contrat ?</h2>

<p>Un contrat permet de s’assurer de ce qu’une méthode attend en entrée (pré-condition), de ce qu’elle produit en sortie (post-condition). Il va définir comment notre méthode se comporte mais aussi vérifier ce comportement.
La gem <code>Contracts.ruby</code> nous permet de décorer nos méthodes avec du code qui va vérifier que les entrées et les sorties correspondent à ce que le contrat spécifie. Bien sûr, on est pas obligé d’annoter chacune de nos méthodes mais je pense que spécifier le contrat sur toutes celles qui sont publiques ne peut qu’être bénéfique.</p>

<h2 id="un-premier-exemple">Un premier exemple</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le contrat de ma méthode est <code>Contract Num, Num =&gt; Num</code> ce qui nous indique que la méthode <em>add</em> prend deux nombres en entrée et retourne un nombre. Simple, non ?
Vous allez me dire que ok, c’est de la documentation, j’aurais pu juste ajouter un commentaire. Mais, puisqu’il s’agit d’un contrat, la gem Contracts.ruby va permettre de nous assurer que celui-ci est respecté.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;contracts&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Foo</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Contracts</span>
</span><span class="line">
</span><span class="line">  <span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">    <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Foo.add(1, 2)</code> nous retourne évidemmement <code>3</code> par contre <code>Foo.add(1, '2')</code> va retourner:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">ParamContractError</span><span class="p">:</span> <span class="no">Contract</span> <span class="n">violation</span> <span class="k">for</span> <span class="n">argument</span> <span class="mi">2</span> <span class="n">of</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="ss">Expected</span><span class="p">:</span> <span class="no">Num</span><span class="p">,</span>
</span><span class="line">        <span class="ss">Actual</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span>
</span><span class="line">        <span class="no">Value</span> <span class="n">guarded</span> <span class="k">in</span><span class="p">:</span> <span class="ss">Foo</span><span class="p">:</span><span class="ss">:add</span>
</span><span class="line">        <span class="no">With</span> <span class="ss">Contract</span><span class="p">:</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’erreur nous montre que le contrat de la méthode <em>add</em> n’a pas été respecté par le second paramètre que nous lui avons passé, ‘2’, car il n’est pas du type <em>Num</em>.</p>

<p>Notez que l’on doit toujours spécifier le type de la valeur retournée même si la méthode ne retourne rien:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="nb">String</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Par exemple, si notre méthode retourne plusieurs valeurs, sa signature sera <code>Contract Num =&gt; [Num, Num]</code>.</p>

<h2 id="les-diffrents-types--notre-disposition">Les différents Types à notre disposition</h2>

<p>Outre les classiques <em>Num</em>, <em>String</em>, <em>Bool</em>, nous avons à notre disposition des types plus intéressants comme:</p>

<ul>
  <li><code>Any</code> lorsque votre argument n’a pas de contrainte</li>
  <li><code>None</code> lorsqu’on n’a pas d’argument</li>
  <li><code>Or</code> si notre argument peut être de plusieurs types, par exemple <code>Or[Fixnum, Float]</code></li>
  <li><code>Not</code> si notre argument ne peut pas être d’un certain type, par exemple <code>Not[nil]</code></li>
  <li><code>Maybe</code> si notre argument est optionnel, par exemple <code>Maybe[String]</code></li>
</ul>

<p>Et bien d’autres que vous pourrez découvrir dans la documentation.</p>

<h2 id="contrats-sur-des-types-avancs">Contrats sur des Types avancés</h2>

<p>On peut utiliser des contrats avec des Types plus avancés comme des listes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">ArrayOf</span><span class="o">[</span><span class="no">Num</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line"><span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">vals</span><span class="p">)</span>
</span><span class="line">  <span class="n">vals</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:*</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le contrat de la méthode <em>multiply</em> nous indique qu’elle attend une liste de valeurs du type Num. Par conséquent on peut faire <code>multiply([2, 4, 16])</code> mais pas <code>multiply([2, 4, 'foo'])</code>.</p>

<p>Des Hash:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="p">({</span> <span class="ss">nom</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="no">Num</span><span class="p">,</span> <span class="ss">ville</span><span class="p">:</span> <span class="nb">String</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Des méthodes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">ArrayOf</span><span class="o">[</span><span class="no">Any</span><span class="o">]</span><span class="p">,</span> <span class="no">Proc</span> <span class="o">=&gt;</span> <span class="no">ArrayOf</span><span class="o">[</span><span class="no">Any</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous utilisez les arguments nommés de Ruby 2.x, le contrat ressemblera à:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">KeywordArgs</span><span class="o">[</span><span class="ss">foo</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">bar</span><span class="p">:</span> <span class="no">Num</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut aussi définir nos propres contrats grâce aux <code>synonymes</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Token</span> <span class="o">=</span> <span class="nb">String</span>
</span><span class="line"><span class="no">Client</span> <span class="o">=</span> <span class="no">Or</span><span class="o">[</span><span class="no">Hash</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="no">Token</span> <span class="o">=&gt;</span> <span class="no">Client</span>
</span><span class="line"><span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notre méthode est ainsi plus claire quant à ce qu’elle attend et ce qu’elle permet de faire. On désire un <code>Token</code> qui est de type <code>String</code> en entrée et on retourne un <code>Client</code> qui peut être un <code>Hash</code> ou rien (nil).</p>

<h2 id="le-pattern-matching">Le pattern-matching</h2>

<p>Le pattern-matching consiste, pour une valeur donnée, à tester si elle correspond à un motif ou pas. Si c’est le cas une action est déclenchée. C’est un peu comme de l’overloading de méthode en Java. On pourrait l’imaginer comme un switch case géant mais en beaucoup plus élégant.</p>

<p>Un exemple simple avec le calcul (pas efficace du tout) de la suite de Fibonacci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="mi">0</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="mi">0</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour un argument donné, chaque méthode va être essayée dans l’ordre. La première méthode qui ne génère pas d’erreur sera utilisée.</p>

<p>Un exemple un peu plus utile, la gestion d’une réponse HTTP en fonction de son code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="mi">200</span><span class="p">,</span> <span class="no">JsonString</span> <span class="o">=&gt;</span> <span class="no">JsonString</span>
</span><span class="line"><span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class="line">  <span class="n">transform_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">JsonString</span> <span class="o">=&gt;</span> <span class="no">JsonString</span>
</span><span class="line"><span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class="line">  <span class="n">response</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si le code de la réponse HTTP est 200 on va transformer la réponse, sinon on se contentera de retourner la réponse.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Les bénéfices sont nombreux. Les contrats nous permettent d’avoir une plus grande cohérence dans les entrées et les sorties. Le flux des données dans notre système est plus clair. Et la plupart des erreurs liées aux types dans notre système peuvent être corrigées rapidement et simplement. De plus ils permettent de rapidement comprendre ce que fait une méthode, ce qu’elle attend et ce qu’elle retourne, un peu comme de la documentation mais qui serait tout le temps à jour :p.
Je pense que l’on peut ainsi économiser pas mal de tests unitaires sur le type d’argument reçu par une méthode et se concentrer sur ce qu’elle produit avec ce système de contrats.</p>

<p>Voilà j’espère que cet article vous aura convaincu de l’utilité des contrats et du pattern-matching dans votre Ruby quotidien et vous donnera aussi l’envie d’explorer d’autres langages avec d’autres paradigmes.</p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="http://lkdjiin.github.io/images/julien.jpeg" /></p>

<p><strong>Julien Blanchard</strong><br />
M-x CTO RET Sush.io</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extraction des tags de mon blog en ligne de commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/"/>
    <updated>2015-07-11T17:08:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’aimerais savoir quels sont les tags que j’ai le plus employé sur ce blog.
Pour cela il va d’abord falloir les extraire, si possible dans un fichier csv.</p>

<p>Comment ? En Ruby ? En R ? Non non, en Bash, ça va être beaucoup plus drôle.</p>

<p>Petite étude de cas pour découvrir la puissance de la ligne de commande, ou
pour rafraichir ses connaissances ;)</p>

<p><img class="center" src="http://lkdjiin.github.io/images/tags-cloud.png" /></p>

<!-- more -->

<p>Si vous voulez reproduire l’analyse en même temps que moi, les
<a href="https://github.com/lkdjiin/lkdjiin.github.io/tree/source/source/_posts">articles sont ici</a>.</p>

<p>Voyons à quoi ressemble le début d’un article au hasard avec <code>head</code>.
Octopress, le framework que j’utilise pour ce blog, appelle les tags des
<em>categories</em>. Mais c’est pareil.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head 2013-10-20-les-algorithmes-genetiques-demystifies-35.markdown
</span><span class="line">---
</span><span class="line">layout: post
</span><span class="line">title: <span class="s2">&quot;Les algorithmes génétiques démystifiés 35&quot;</span>
</span><span class="line">date: 2013-10-20 21:21
</span><span class="line">comments: <span class="nb">true</span>
</span><span class="line">categories: <span class="o">[</span>imagerie, algorithme génétique, intermédiaire, javascript<span class="o">]</span>
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’entête d’un article a toujours la même structure. Avec <code>head *.markdown</code>
j’affiche le début de tous les articles, les uns à la suite des autres.
Avec <code>sed</code> je peux extraire uniquement les lignes qui commencent par <code>cat</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span>
</span><span class="line">categories: <span class="o">[</span>annonce, défi<span class="o">]</span>
</span><span class="line">categories: <span class="o">[</span>vim, conseil, débutant<span class="o">]</span>
</span><span class="line">categories: <span class="o">[</span>ruby, code propre, intermédiaire<span class="o">]</span>
</span><span class="line">categories: <span class="o">[</span>ruby, eigenclass, object, intermédiaire<span class="o">]</span>
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Gardons seulement les tableaux. <code>cut -f1</code> <em>découpe</em> le premier champ, <code>-d' '</code>
indique que le séparateur de champ est l’espace, et <code>--complement</code> indique
qu’on veut conserver le complément. Autrement dit tout sauf la première
colonne.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> |
</span><span class="line">&gt; cut -f1 -d<span class="s1">&#39; &#39;</span> --complement
</span><span class="line"><span class="o">[</span>annonce, défi<span class="o">]</span>
</span><span class="line"><span class="o">[</span>vim, conseil, débutant<span class="o">]</span>
</span><span class="line"><span class="o">[</span>ruby, code propre, intermédiaire<span class="o">]</span>
</span><span class="line"><span class="o">[</span>ruby, eigenclass, object, intermédiaire<span class="o">]</span>
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Supprimons les crochets à l’aide de <code>sed</code> et d’une regex rigolote.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span>
</span><span class="line">annonce, défi
</span><span class="line">vim, conseil, débutant
</span><span class="line">ruby, code propre, intermédiaire
</span><span class="line">ruby, eigenclass, object, intermédiaire
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Supprimons les espaces inutiles. Attention, certains tags contiennent des
espaces.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> |
</span><span class="line">&gt; sed <span class="s1">&#39;s/, /,/g&#39;</span>
</span><span class="line">annonce,défi
</span><span class="line">vim,conseil,débutant
</span><span class="line">ruby,code propre,intermédiaire
</span><span class="line">ruby,eigenclass,object,intermédiaire
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Grâce à <code>tr</code>, je remplace chaque virgule par un retour à la ligne. Ça
commence à prendre forme.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> |
</span><span class="line">&gt; tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span>
</span><span class="line">annonce
</span><span class="line">défi
</span><span class="line">vim
</span><span class="line">conseil
</span><span class="line">débutant
</span><span class="line">ruby
</span><span class="line">code propre
</span><span class="line">intermédiaire
</span><span class="line">ruby
</span><span class="line">eigenclass
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trions par ordre alphabétique.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> |
</span><span class="line">&gt; sort
</span><span class="line">
</span><span class="line">ack
</span><span class="line">activerecord
</span><span class="line">activerecord
</span><span class="line">ag
</span><span class="line">airline
</span><span class="line">airline
</span><span class="line">airline
</span><span class="line">airline
</span><span class="line">algorithme génétique
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Réduisons les occurrences et comptons les avec <code>uniq -c</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sort |
</span><span class="line">&gt; uniq -c
</span><span class="line">      1
</span><span class="line">      1 ack
</span><span class="line">      2 activerecord
</span><span class="line">      1 ag
</span><span class="line">      4 airline
</span><span class="line">     70 algorithme génétique
</span><span class="line">      1 <span class="nb">alias</span>
</span><span class="line"><span class="nb">     </span>16 annonce
</span><span class="line">      3 app
</span><span class="line">      1 application
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trions à nouveau, cette fois sur le nombre et du plus grand au plus petit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sort | uniq -c |
</span><span class="line">&gt; sort -nr
</span><span class="line">    213 ruby
</span><span class="line">    176 intermédiaire
</span><span class="line">    171 débutant
</span><span class="line">     70 algorithme génétique
</span><span class="line">     55 vim
</span><span class="line">     26 tutoriel
</span><span class="line">     26 julia
</span><span class="line">     26 javascript
</span><span class="line"><span class="c">#...</span>
</span><span class="line">      1 application
</span><span class="line">      1 <span class="nb">alias</span>
</span><span class="line"><span class="nb">      </span>1 ag
</span><span class="line">      1 ack
</span><span class="line">      1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous avez remarquez ? Un tag est vide. Ça pourrait poser problème pour la
suite. Avec <code>sed</code> on peut facilement supprimer la dernière ligne.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sort | uniq -c |
</span><span class="line">&gt; sort -nr | sed <span class="s1">&#39;$d&#39;</span>
</span><span class="line">    213 ruby
</span><span class="line">    176 intermédiaire
</span><span class="line">    171 débutant
</span><span class="line"><span class="c">#...</span>
</span><span class="line">      1 <span class="nb">alias</span>
</span><span class="line"><span class="nb">      </span>1 ag
</span><span class="line">      1 ack
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À la réflexion je préfère faire comme si il y avait plusieurs lignes vides et
les supprimer toutes. Ça pourrait être plus réutilisable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> |
</span><span class="line">&gt; sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il est temps de sortir une regex un peu plus complexe pour inverser les deux
champs et ajouter une virgule entre eux.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr |
</span><span class="line">&gt; sed -r <span class="s1">&#39;s/\s+([0-9]+) (.*)/\2,\1/&#39;</span>
</span><span class="line">ruby,213
</span><span class="line">intermédiaire,176
</span><span class="line">débutant,171
</span><span class="line">algorithme génétique,70
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est quasiment terminé. Il reste à ajouter l’entête du fichier csv. Pour cela
je vais utiliser une commande non standard mais bien pratique, <code>header</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt;  sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr | sed -r <span class="s1">&#39;s/\s+([0-9]+) (.*)/\2,\1/&#39;</span> |
</span><span class="line">&gt; header -a tag,frequency
</span><span class="line">tag,frequency
</span><span class="line">ruby,213
</span><span class="line">intermédiaire,176
</span><span class="line">débutant,171
</span><span class="line">algorithme génétique,70
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On a terminé. C’est un beau pipeline, non ? Enregistrons le résultat dans un
fichier.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt;  sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr | sed -r <span class="s1">&#39;s/\s+([0-9]+) (.*)/\2,\1/&#39;</span> |
</span><span class="line">&gt; header -a tag,frequency &gt; tags.csv
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En bonus, voici le code R qui produit l’image qui illustre cet article.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">library<span class="p">(</span>wordcloud<span class="p">)</span>
</span><span class="line">
</span><span class="line">d <span class="o">&lt;-</span> read.csv<span class="p">(</span><span class="s">&#39;tags.csv&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">colors <span class="o">&lt;-</span> brewer.pal<span class="p">(</span><span class="m">12</span><span class="p">,</span> <span class="s">&#39;Paired&#39;</span><span class="p">)</span>
</span><span class="line">colors <span class="o">&lt;-</span> colors<span class="p">[</span>seq<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> by<span class="o">=</span><span class="m">2</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">wordcloud<span class="p">(</span>d<span class="o">$</span>tag<span class="p">,</span> d<span class="o">$</span>frequency<span class="p">,</span> colors<span class="o">=</span>colors<span class="p">,</span> min.freq<span class="o">=</span><span class="m">1</span><span class="p">,</span> scale<span class="o">=</span>c<span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">.6</span><span class="p">),</span>
</span><span class="line">          rot.per<span class="o">=</span><span class="m">.25</span><span class="p">,</span> random.order<span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span> random.color<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/13/un-quine-en-r-le-retour/">Un quine en R - Le retour</a></li><li><a href="http://lkdjiin.github.io/blog/2015/10/10/un-quine-en-r/">Un quine en R</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ce blog à 2 ans]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/08/ce-blog-a-2-ans/"/>
    <updated>2015-07-08T14:28:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/08/ce-blog-a-2-ans</id>
    <content type="html"><![CDATA[<p>Bonjour à toutes et à tous.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/anniversaire.png" /></p>

<p>Aujourd’hui, le 8 juillet 2015, ce blog à
exactement 2 ans. Pour fêter dignement cet anniversaire, je publierai
plusieurs <em>guest posts</em> (des articles d’invités) pendant ce mois de juillet.
Quelques uns sont déjà prévus, à partir de lundi prochain.</p>

<p>Il reste encore de la place ; n’hésitez pas à me contacter si vous avez
envie de faire partie de la fête, pour que je publie votre article. Tous les
sujets sont à priori les bienvenus.</p>

<!-- more -->

<p>Joyeux anniversaire le blog ;)</p>
]]></content>
  </entry>
  
</feed>
