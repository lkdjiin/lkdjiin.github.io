<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-02-01T20:36:39+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim - Sauvegarder et quitter les fichiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers/"/>
    <updated>2014-02-01T20:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Il est temps pour moi de faire un point sur les différentes méthodes
qu&#8217;offre Vim pour quitter et/ou sauvegarder un fichier.</p>

<!-- more -->


<h2>Les basiques</h2>

<p>Voici, selon moi, les commandes à retenir en premier lieu.</p>

<p>Pour sauvegarder un fichier, utilisez la commande <code>write</code>, ou
plutôt son raccourci <code>w</code>:</p>

<pre><code>:w
:write
</code></pre>

<p>Je rappelle qu&#8217;on peut facilement obtenir une aide exhaustive sur une
commande quelconque:</p>

<pre><code>:h :write
</code></pre>

<p>Et je conseille de lire systématiquement l&#8217;aide de Vim sur les
commandes dont je vais vous parler. Vous découvrirez ainsi des tas
de variantes qui pourrait vous être utile.</p>

<p>Pour sauvegarder tous les fichiers en une seule fois:</p>

<pre><code>:wall
</code></pre>

<p>Pour quitter un fichier, on utilise <code>quit</code>, ou son raccourci <code>q</code>:</p>

<pre><code>:q
:quit
</code></pre>

<p>De même, pour quitter tous les fichiers (et fermer Vim):</p>

<pre><code>:qa
:qall
</code></pre>

<p>Si vous voulez fermer un fichier modifié <em>sans</em> enregistrer les
modifications, la commande suivante est indispensable:</p>

<pre><code>:q!
</code></pre>

<p>Voilà pour les basiques. Ces commandes sont simples à mémoriser.</p>

<h2>Les combinaisons</h2>

<p>Il arrive souvent qu&#8217;on veuille sauvegarder un fichier, <em>et en même
temps</em> le fermer. Je recommenderais aux débutants d&#8217;utiliser la
commande suivante:</p>

<pre><code>:wq
</code></pre>

<p>Elle est très facile à mémoriser, étant la combinaison de <code>write</code> et
de <code>quit</code>.</p>

<p>Quand du temps aura passé et que vous serez prêt à en apprendre
d&#8217;autres, essayez donc les deux qui suivent:</p>

<p>Un simple <code>:x</code> permet de sauver/quitter le fichier, vous gagnez une
touche par rapport à <code>:wq</code>:</p>

<pre><code>:x
</code></pre>

<p>Suivant le layout de votre clavier, la suivante peut vous convenir plus ou
moins. C&#8217;est la seule qui soit en mode normal et non pas en mode commande,
rapide comme l&#8217;éclair, je l&#8217;adore:</p>

<pre><code>ZZ
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Naviguer dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/"/>
    <updated>2014-01-31T20:48:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment ouvrir un dossier dans le Finder
(l&#8217;explorateur d&#8217;OS X), et notamment un dossier caché.</p>

<!-- more -->


<h2>Naviguer dans l&#8217;explorateur</h2>

<p>Bien sûr, on peut toujours cliquer sur le dossier à ouvrir. Mais en
fait non, sur mon poste les dossiers cachés (ceux qui commencent par
un point) refusent de s&#8217;ouvrir ainsi. Et puis si on a les mains sur
le clavier, c&#8217;est toujours agaçant d&#8217;aller chercher la souris.</p>

<p>Une fois le dossier sélectionné à l&#8217;aide des touches fléchées, sur
Linux on entre dans le dossier en appuyant sur la touche <code>Enter</code>.
Sur OS X, il faut appuyer sur <code>Meta</code> + <code>flèche bas</code>.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/'>De Linux (Debian) vers OS X : Coloriser la commande ls</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Afficher tous les fichiers dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/"/>
    <updated>2014-01-30T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment afficher tous les fichiers dans le Finder
(l&#8217;explorateur d&#8217;OS X).</p>

<!-- more -->


<h2>Afficher tous les fichiers dans l&#8217;explorateur</h2>

<p>Par défaut, l&#8217;explorateur d&#8217;OS X ne montre pas les fichiers et
dossiers cachés (ceux qui commencent par un point) et d&#8217;autres
(je ne sais pas trop lesquels).</p>

<p>Dans Linux, un <code>Ctrl h</code> dans l&#8217;explorateur affiche/masque ces fameux
fichiers et dossiers cachés. Sous OS X, c&#8217;est moins pratique, il
faut saisir ceci dans un terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.finder AppleShowAllFiles -bool <span class="nb">true</span>
</span><span class='line'>defaults write NSGlobalDomain AppleShowAllExtensions -bool <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faudra ensuite tuer toutes les instances de Finder pour que les
changements soient pris en compte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>killall Finder
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/">Astuce suivante</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/'>De Linux (Debian) vers OS X : Coloriser la commande ls</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6/"/>
    <updated>2014-01-29T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/">L&#8217;auto complétion programmable en bash: partie 5</a>.</p>

<h2>Un motif général et basique</h2>

<p>Nous avons écrit un petit <a href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/">programme pour tester</a>,
puis nous avons écrit <a href="http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/">un script d&#8217;auto-complétion très simple</a>.
Reprenons notre jeu de rôle: nous avons un programme <code>mytool</code> qui
attend une des trois commandes suivantes: <code>new</code>, <code>compile</code> ou
<code>test</code>. On va ajouter ceci: la commande <code>new</code> peut prendre
l&#8217;option <code>--without-test</code> et la commande <code>compile</code> peut prendre
l&#8217;option <code>--verbose</code>. Ça reste encore très simple, mais on ne peut
déjà plus se servir uniquement de la fonction <code>complete</code>, vue
la dernière fois.</p>

<p>Voyons donc le motif général utilisé par beaucoup de scripts
d&#8217;auto-complétion:</p>

<!-- more -->




<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">current</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">&quot;new compile test&quot;</span> -- <span class="nv">$current</span><span class="k">)</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Le script ci-dessus fait exactement la même chose que notre simple
script de la dernière fois, qui était le suivant:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">complete</span> -W <span class="s2">&quot;new compile test&quot;</span> mytool
</span></code></pre></td></tr></table></div></figure>


<p>Mais il le fait d&#8217;une manière plus compliquée. En effet,
pourquoi faire simple… Les explications viendront plus tard.</p>

<p>En fait, pour aller plus loin, il est important de comprendre le rôle
des variables <code>COMP_WORDS</code>, <code>COMP_CWORD</code> et <code>COMPREPLY</code>. Pour ça, on
va modifier notre script, et chercher à comprendre ce que
représente <code>COMPREPLY</code>:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> this is some replacement <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Pour qu&#8217;il soit pris en compte tout de suite, il faut le sourcer:</p>

<pre><code>$ source /etc/bash_completion.d/mytool
</code></pre>

<p>Alors, que fait-il ? Si je tapes <code>mytool foo bar[TAB]</code>, voici ce que
le script sort:</p>

<pre><code>$ mytool foo bar[TAB]
is           replacement  some         this   
</code></pre>

<p>COMPREPLY accepte un tableau de chaînes, qui sont les suggestions que
nous renvoit l&#8217;auto-complétion. On note au passage que ces suggestions
sont triées alphabétiquement.</p>

<p>Modifions à nouveau notre script:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>_mytool<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=(</span> replacement <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _mytool mytool
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois, COMPREPLY représente un tableau d&#8217;un seul élément.
N&#8217;oubliez pas de sourcer le script avant de le tester:</p>

<pre><code>$ mytool foo bar[TAB]
</code></pre>

<p>devient:</p>

<pre><code>$ mytool foo replacement
</code></pre>

<p>Vous devriez maintenant avoir bien compris à quoi sert la variable
<code>COMPREPLY</code>.</p>

<p>La prochaine fois, on regardera en détail les variables <code>COMP_WORDS</code>
et <code>COMP_CWORD</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/"/>
    <updated>2014-01-28T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Après <a href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/">avoir installé</a> le plugin Airline pour Vim,
après <a href="http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/">avoir configuré le thème</a>,
puis <a href="http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/">personnalisé quelques sections</a>,
vous pensiez en avoir fini. Mais il se peut que la branche git
n&#8217;apparaisse pas dans votre barre de statut ?
Comment faire pour que Airline affiche le nom de la branche git ?</p>

<!-- more -->


<p>En fait, il ne peut pas. Enfin pas vraiment. Airline ne fait pas tout.
Par contre il intègre très bien d&#8217;autres plugins. Et notamment
l&#8217;excellent vim-fugitive de Tim Pope. Donc, pour que Airline affiche
votre branche git, il vous suffit d&#8217;installer vim-fugitive. Par
exemple, avec Pathogen:</p>

<pre><code>git clone git://github.com/tpope/vim-fugitive.git ~/.vim/bundle/vim-fugitive
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/'>Installation du plugin Airline pour Vim &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/"/>
    <updated>2014-01-27T21:01:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant qu&#8217;on a personnalisé l&#8217;apparence de Airline, voyons
comment on peut personnaliser les informations des sections.</p>

<!-- more -->


<p>Tout d&#8217;abord, la section qui affiche le numéro de ligne et de
colonne du curseur (la section la plus à droite) ne me plait pas
du tout. Je voudrais supprimer le petit symbole (qui prend de la
place pour rien) et le pourcentage (dont je n&#8217;ai jamais compris
l&#8217;intérêt) et ajouter le nombre de lignes du fichier. Je voudrais
donc un truc comme ça:</p>

<pre><code>ligne courante / total lignes : colonne
</code></pre>

<p>La documentation de Airline (<code>:h airline</code>) nous apprends que chaque
section possède un petit nom (pour la dernière c&#8217;est <code>z</code>), est
personnalisable, et qu&#8217;on peut même en ajouter. La documentation de
Vim (<code>:h 'statusline'</code>) nous permet de savoir quoi mettre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_section_z <span class="p">=</span> <span class="s1">&#39; %l / %L : %c &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà.</p>

<p>Sur le même principe, je veux modifier la section centrale, celle qui
affiche le nom du fichier. Par défaut, c&#8217;est le nom complet, avec son
chemin, qui est affiché. Comme je dispose déjà de cette information dans
la barre de titre de la fenêtre, je n&#8217;en ai pas besoin et le nom du
fichier sans son chemin me suffira:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_section_c <span class="p">=</span> <span class="s1">&#39;%t %m&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>%t</code> est le nom du fichier et <code>%m</code> est la marque de modification
(le <code>[+]</code>).</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/'>Installation du plugin Airline pour Vim &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/"/>
    <updated>2014-01-26T16:03:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après <a href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/">l&#8217;installation basique du plugin Airline</a>, voyons maintenant
comment modifier quelque peu le thème.</p>

<!-- more -->


<p>On peut visualiser les thèmes disponibles pour Airline
<a href="https://github.com/bling/vim-airline/wiki/Screenshots">sur cette page</a>.
J&#8217;ai choisi wombat pour l&#8217;instant, puisque je trouve que c&#8217;est celui
qui <em>colle</em> le mieux avec mon jeu de couleurs actuel. Voici ce qu&#8217;il
faut ajouter au <code>.vimrc</code> pour changer de thème:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_theme<span class="p">=</span><span class="s1">&#39;wombat&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous n&#8217;êtes pas sûr du nom pour le thème que vous avez choisi,
regardez le nom du fichier dans le dossier
<code>vim-airline/autoload/airline/themes</code>.</p>

<p>J&#8217;ai ensuite installé quelques polices de caractères patchées pour Powerline,
trouvées
<a href="https://github.com/Lokaltog/powerline-fonts">ici</a>, mais aucunes
ne m&#8217;a vraiment séduite. J&#8217;utilise la font <code>Inconsolata-g</code>, qui me
convient parfaitement, je ne vois donc pas de raison d&#8217;en changer.</p>

<p>Il faut maintenant paramétrer les symboles pour les bords des sections,
la branche git, les fichiers en lectures seules, etc. Mettez donc
ceci dans votre <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> <span class="p">!</span>exists<span class="p">(</span><span class="s1">&#39;g:airline_symbols&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:airline_symbols <span class="p">=</span> {}
</span><span class='line'><span class="k">endif</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_left_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_left_alt_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_right_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_right_alt_sep <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_symbols.branch <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:airline_symbols.<span class="nb">readonly</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme il n&#8217;est pas certain que les symboles ci-dessus apparaissent dans
votre navigateur, en voici une version en image:</p>

<p><img src="http://lkdjiin.github.io/images/symboles-airline.png"></p>

<p>La prochaine fois, on verra comment modifier une section.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/'>Installation du plugin Airline pour Vim &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/"/>
    <updated>2014-01-25T18:34:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour disposer de quelques informations dans la barre de statut,
j&#8217;utilisais jusqu&#8217;ici statline, qui me convenait assez bien, rien de
tape à l&#8217;œil. Et puis j&#8217;ai décidé d&#8217;essayer quelque chose de
plus coloré, histoire de voir si ça m&#8217;était utile.</p>

<!-- more -->


<p>Avant d&#8217;installer <a href="https://github.com/bling/vim-airline">Airline</a>,
il faut bien entendu retirer Powerline, ou Statline (je n&#8217;en connais pas
d&#8217;autres).</p>

<p>Comme j&#8217;utilise Pathogen pour gérer mes plugins, voici comment rapatrier
le code d&#8217;Airline:</p>

<pre><code>git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline
</code></pre>

<p>La documentation est exhaustive et fournit
<a href="https://github.com/bling/vim-airline#installation">ici</a>
d&#8217;autres méthodes d&#8217;installation pour Vundle, NeoBundle et VAM.</p>

<p>Avec Pathogen, ne pas oublier de générer la documentation, vous en
aurez besoin pour personnaliser l&#8217;apparence et les fonctionnalités
de Airline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Helptags
</span></code></pre></td></tr></table></div></figure>


<p>Un rapide coup d&#8217;œil à la documentation, justement, montre que la
personnalisation aux petits oignons va prendre un peu plus longtemps
que quelques minutes. Bref, on va devoir se manger de la doc…</p>

<p>À ce stade, c&#8217;est à dire en ayant seulement installé Airline et rien
configuré encore, ça fonctionne déja. Mais curieusement (du moins c&#8217;est
curieux à mes yeux) Airline est configuré par défaut pour n&#8217;apparaître que
lorsqu&#8217;une fenêtre est splittée. Pour l&#8217;avoir tout le temps, il faut ajouter
ceci dans le <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">laststatus</span><span class="p">=</span><span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois, je m&#8217;attaquerais à la modification du thème.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/'>Installation du plugin Airline pour Vim &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X : Raccourcis claviers de Firefox]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/"/>
    <updated>2014-01-24T21:01:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Les raccourcis claviers de Firefox qui changent.</p>

<!-- more -->


<h2>Raccourcis claviers de Firefox</h2>

<p>J&#8217;utilise très peu de raccourcis clavier sur Firefox, mais je tiens
beaucoup à ceux que j&#8217;utilise:</p>

<ul>
<li>Pour augmenter la taille des caractères, c&#8217;est <code>Meta +</code> au lieu
de <code>Ctrl +</code>.</li>
<li>Pour ouvrir un nouvel onglet, c&#8217;est <code>Meta t</code> au lieu de <code>Ctrl t</code>.</li>
<li>Pour fermer un onglet, c&#8217;est <code>Meta w</code> au lieu de <code>Ctrl w</code>.</li>
<li>Pour aller à l&#8217;onglet numéro <em>n</em>, c&#8217;est <code>Meta 1</code>, au lieu de <code>Alt 1</code>,
<code>Meta 2</code> au lieu de <code>Alt 2</code>, etc… Ce raccourci est très pratique
quand vous avez des onglets épinglés dont vous vous servez
régulièrement (chat, webmail, réseaux sociaux, etc).</li>
<li>Pour aller à l&#8217;onglet précédent/onglet suivant, le raccourci est
identique: <code>Ctrl page-précédente</code> et <code>Ctrl page-suivante</code>.</li>
</ul>


<p><a href="http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/">Astuce précédente</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/">Astuce suivante</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/'>De Linux (Debian) vers OS X : Coloriser la commande ls</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X : Coloriser la commande ls]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/"/>
    <updated>2014-01-23T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment faire pour que la commande <code>ls</code> affiche sa sortie
en couleur dans un terminal.</p>

<!-- more -->


<h2>Comment coloriser la sortie de la commande ls </h2>

<p>Sous Linux, qui utilise normalement la commande <code>ls</code> du <strong>Gnu</strong>, c&#8217;est l&#8217;option
<code>--color</code> qui permet d&#8217;obtenir la sortie en couleurs. Ce qui donne
typiquement ce genre d&#8217;alias:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls --color=auto&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sous OS X, qui utilise <strong>la version Bsd</strong> de la commande <code>ls</code>, il s&#8217;agit
de l&#8217;option <code>-G</code>, ce qui donnera plutôt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls -G&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/">Astuce suivante</a>  <br/>
<a href="http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X : Le fichier de configuration de Bash]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash/"/>
    <updated>2014-01-22T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Dans quel fichier doit-on placer sa configuration Bash
sous OS X.</p>

<!-- more -->


<h2>Où mettre son fichier de configuration pour Bash ?</h2>

<p>Sous Linux, le fichier de configuration de Bash est généralement
placé dans <code>~/.bashrc</code>.</p>

<p>Sous OS X, il faut le mettre dans <code>~/.bash_profile</code>.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/01/23/de-linux-debian-vers-os-x-coloriser-la-commande-ls/">Astuce suivante</a>
<a href="http://lkdjiin.github.io/blog/2014/01/21/de-linux-debian-a-os-x-renommer-un-fichier-dans-lexplorateur/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) à OS X : Renommer un fichier dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/21/de-linux-debian-a-os-x-renommer-un-fichier-dans-lexplorateur/"/>
    <updated>2014-01-21T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/21/de-linux-debian-a-os-x-renommer-un-fichier-dans-lexplorateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui : Comment renommer un fichier dans l&#8217;explorateur de fichier.</p>

<!-- more -->


<h2>Renommer un fichier dans le navigateur de fichier</h2>

<p>On peut bien sûr renommer un fichier dans un terminal avec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv file newname
</span></code></pre></td></tr></table></div></figure>


<p>Mais comment faire de même dans l&#8217;explorateur de fichier alors qu&#8217;il
n&#8217;y a pas de menu contextuel du genre «renommer le fichier» ?
Il faut, après avoir sélectionné le fichier à l&#8217;aide des touches fléchées ou
d&#8217;un clic de souris, <strong>appuyer sur la touche Entrée</strong>. C&#8217;est tout.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/01/20/de-linux-debian-a-os-x-quitter-firefox/">Astuce précédente</a>
<a href="http://lkdjiin.github.io/blog/2014/01/22/de-linux-debian-vers-os-x-le-fichier-de-configuration-de-bash/">Astuce suivante</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li></ul></section></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) à OS X - Quitter Firefox]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/20/de-linux-debian-a-os-x-quitter-firefox/"/>
    <updated>2014-01-20T20:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/20/de-linux-debian-a-os-x-quitter-firefox</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Nouvelle série d&#8217;article pour faciliter le passage de
Linux (Debian dans mon cas) à OS X. Ces articles seront
très courts et montreront chacuns une seule petite astuce,
au fur et à mesure de mes découvertes. Trivial pour ceux qui
connaissent déjà OS X, j&#8217;espère que ces astuces aideront celles et
ceux (comme moi) qui le découvre.</p>

<p>Aujourd&#8217;hui : Comment quitter Firefox.</p>

<!-- more -->


<h2>Ne quitter jamais Firefox avec le petit bouton rouge !</h2>

<p>Pour quitter Firefox, n&#8217;utilisez jamais le petit bouton rouge
de fermeture de fenêtre. Jamais. Je répète : <strong>jamais !</strong></p>

<p>Si vous fermez Firefox de cette façon, vous allez perdre tous vos onglets.
Ce qui est plus que frustrant. Pour être tranquille, utilisez le menu
général «Quittez Firefox», ou bien utilisez le raccourci clavier
Meta-q.</p>

<p><a href="http://lkdjiin.github.io/blog/2014/01/21/de-linux-debian-a-os-x-renommer-un-fichier-dans-lexplorateur/">Astuce suivante</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiler votre Vim sous Linux]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux/"/>
    <updated>2014-01-19T12:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on voit comment compiler la dernière version de
Vim sur Linux (Debian, mais Ubuntu devrait marcher aussi).</p>

<!-- more -->


<h2>Pourquoi vouloir faire ça ?</h2>

<p>Tout d&#8217;abord, pourquoi voudrais-t-on compiler Vim alors que Debian nous
le fournit dans les paquets ? Je vois plusieurs raisons:</p>

<ol>
<li>Parce qu&#8217;on peut le faire. Mais je sens que cet argument n&#8217;est pas
fait pour vous convaincre.</li>
<li>Parce que c&#8217;est fun. Idem, pas convaincant, hein ?</li>
<li>Parce qu&#8217;on peut vouloir profiter d&#8217;une des dernières fonctionnalités
ajoutées, ou du dernier bugfix.</li>
<li>Parce que Debian est parfois à la ramasse lorsqu&#8217;il s&#8217;agit de nous
fournir des versions suffisament récentes de certains logiciels.
J&#8217;ai par exemple une machine qui est toujours en Debian 6 et que je
ne peux pas upgrader, Vim y est <em>coincé</em> en version 7.2.</li>
</ol>


<h2>On y va</h2>

<p>Assurez vous d&#8217;abord d&#8217;avoir toutes les dépendances:</p>

<pre><code>$ sudo apt-get build-dep vim
</code></pre>

<p>Ensuite, on va télécharger les sources depuis GitHub:</p>

<pre><code>$ git clone https://github.com/b4winckler/vim.git
</code></pre>

<p>Puis peut-être aller chercher une release particulière:</p>

<pre><code>$ cd vim
$ git checkout tags/v-7-4-155
</code></pre>

<p>Ensuite on va dans les sources:</p>

<pre><code>$ cd src
</code></pre>

<p>On nettoie (ça fait pas de mal):</p>

<pre><code>$ make distclean
</code></pre>

<p>On configure avec la plupart des features disponibles, notamment une
interface graphique et le support de perl, python et ruby:</p>

<pre><code>$ ./configure --with-features=huge --enable-gui=gnome2
  --with-compiledby=lkdjiin --enable-perlinterp  --enable-pythoninterp
  --enable-rubyinterp
</code></pre>

<p>Il reste à compiler:</p>

<pre><code>$ make
</code></pre>

<p>Et enfin à installer notre nouveau Vim:</p>

<pre><code>$ sudo make install
</code></pre>

<p>Et voilà:</p>

<p><img src="http://lkdjiin.github.io/images/vim-7-4-155.png"></p>

<h2>Désinstaller la version que vous avez compilé</h2>

<p>Si, pour une raison ou une autre, vous vouliez désinstaller
votre nouveau Vim, il faut d&#8217;abord trouver où il est installé.
Pour cela, lancez la commande suivante dans Vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>echo $VIMRUNTIME
</span></code></pre></td></tr></table></div></figure>


<p>Dans mon cas, cela donne: <code>/usr/local/share/vim/vim74</code>.</p>

<p>Rendez-vous ensuite dans les sources que vous avez téléchargées,
par exemple:</p>

<pre><code>$ cd ~/tmp/vim/src
</code></pre>

<p>Puis:</p>

<pre><code>$ make VIMRUNTIME=/usr/local/share/vim/vim74
$ sudo make uninstall
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers/'>Vim &ndash; Sauvegarder et quitter les fichiers</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/'>Installation du plugin Airline pour Vim &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/'>Installation du plugin Airline pour Vim &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sauvegarde automatique des fichiers dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/"/>
    <updated>2014-01-18T09:45:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je parle d&#8217;un petit truc qui me facilite
énormément la vie sous Vim: la sauvegarde automatique.</p>

<!-- more -->


<p>Grâce à ce truc, je n&#8217;enregistre pratiquement jamais
<em>intentionnellement</em> un fichier. Ce qui fait que je
n&#8217;oublie jamais de le faire. Vous savez ? : On modifie
un fichier, on lance l&#8217;appli et… arg… ça fonctionne pas !
Tout ça parce qu&#8217;on a oublié d&#8217;enregistrer les
modifications.</p>

<p>Donc pour enregistrer le fichier courant, la commande est:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">w</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour enregistrer tous les fichiers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">wall</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour les accros du Ctrl-S, on peut le reproduire avec le mapping
suivant dans le <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span><span class="k">s</span><span class="p">&gt;</span> :<span class="k">w</span><span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Et maintenant le truc promis</strong>. Je veux que mes fichiers soient enregistrés
quand un onglet perds le focus, ou quand Vim lui-même perds le focus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>autocmd <span class="nb">FocusLost</span><span class="p">,</span><span class="nb">TabLeave</span> * :<span class="k">wall</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec cette commande dans votre <code>.vimrc</code>, il est rare de devoir
enregistrer manuellement un fichier ;)</p>

<p>Et si vous voulez comprendre ce que fais exactement cette commande, je
vous laisse regarder l&#8217;aide:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">h</span> autocmd
</span><span class='line'><span class="p">:</span><span class="k">h</span> <span class="nb">FocusLost</span>
</span><span class='line'><span class="p">:</span><span class="k">h</span> <span class="nb">TabLeave</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes/'>Vim et les digraphes</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses/'>Vim: Coloration syntaxique des parenthèses</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raccourcis clavier pour le terminal]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal/"/>
    <updated>2014-01-17T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je parle des raccourcis clavier du terminal. Pas tous, il y
en a des tonnes, seulement ceux que j&#8217;utilise régulièrement.</p>

<!-- more -->


<h2>Linux et OS X</h2>

<p>Les raccourcis qui suivent fonctionnent aussi bien sous Linux et
OS X:</p>

<pre><code>Crtl-a   Aller en début de ligne
Crtl-e   Aller en fin de ligne
Crtl-k   Supprimer du curseur à la fin de la ligne
Crtl-u   Supprimer avant le curseur
Crtl-w   Supprimer le mot avant le curseur
Crtl-t   Échanger les 2 caractères avant le curseur
Esc-t    Échanger les 2 mots avant le curseur
</code></pre>

<p>Pour voir la liste de tous les mappings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">bind</span> -P
</span></code></pre></td></tr></table></div></figure>


<h2>Linux seulement</h2>

<pre><code>Shift-Ctrl-c  Copier le texte sélectionné
Shift-Ctrl-v  Coller le texte
</code></pre>

<h2>OS X seulement</h2>

<pre><code>Meta-c        Copier le texte sélectionné
Meta-v        Coller le texte
</code></pre>

<p>En bonus, voici un truc très pratique sous OS X, qu&#8217;un collègue
(<a href="https://twitter.com/julienXX">@julienXX</a>) m&#8217;a
montré la semaine dernière: Un triple clic sur une ligne la sélectionne en
entier, avec le caractère de fin de ligne mais sans le prompt. On peut ensuite
faire un copier/coller avec <code>Shift-Meta-v</code>, ce qui lance la commande
directement.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Naviguer dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/30/de-linux-debian-vers-os-x-afficher-tous-les-fichiers-dans-lexplorateur/'>De Linux (Debian) vers OS X &ndash; Afficher tous les fichiers dans l&#8217;explorateur</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/24/de-linux-debian-vers-os-x-raccourcis-claviers-de-firefox/'>De Linux (Debian) vers OS X : Raccourcis claviers de Firefox</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: Trouves mon nombre - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/"/>
    <updated>2014-01-16T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4</id>
    <content type="html"><![CDATA[<p>Suite à <a href="http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/">l&#8217;article précédent</a>,
on voit aujourd&#8217;hui la fonction <code>start</code> qui permet de démarrer le jeu avec
n&#8217;importe quelle étendue de nombres.</p>

<!-- more -->


<p>Voici tout d&#8217;abord le programme complet:</p>

<figure class='code'><figcaption><span>guess.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lower</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">upper</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">guess</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">+ </span><span class="nv">lower</span> <span class="nv">upper</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">smaller</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">sub1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bigger</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">min </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">add1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">start</span> <span class="nv">n</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">min </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut maintenant demander à la machine de <em>deviner</em> un nombre entre
n et m:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
-&gt; (start 1 10)
5
-&gt; (bigger)
8
-&gt; (smaller)
6
</code></pre>

<p>La fonction <code>start</code> utilise des notions déjà vues dans les articles
précédents.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">start</span> <span class="nv">n</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">min </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grâce à <code>set!</code>, on redéfini la valeur des variables <code>lower</code> et <code>upper</code>. Puis
on débute le jeu en lançant <code>guess</code>.</p>

<p>La variable <code>lower</code> se voit affecter la plus petite des valeurs passées en
arguments, grâce à <code>min</code>. Et <code>upper</code> se voit affecter la plus grande
grâce à <code>max</code>. Du coup, l&#8217;ordre des arguments de <code>start</code> n&#8217;a plus
d&#8217;importance:</p>

<pre><code>-&gt; (start 1000 1)
500
-&gt; (start 1 1000)
500
</code></pre>

<p>Voilà qui conclue cette petite introduction au langage Racket.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/'>Trouves mon nombre &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/'>Racket: Trouves mon nombre &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1/'>Racket: Trouves mon nombre &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion en Bash - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/"/>
    <updated>2014-01-15T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/">L&#8217;auto complétion programmable en bash: partie 4</a>.</p>

<h2>Les bases de l&#8217;auto complétion programmable</h2>

<p>Une application peut proposer ses services d&#8217;auto complétion en déposant
un fichier bash dans le dossier <code>/etc/bash_completion.d/</code>.
On y voit un tas de fichiers, pour des programmes bien connus:</p>

<pre><code>[~]⇒ ls /etc/bash_completion.d/
abook
ant
apache2.2-common
apache2ctl
apt
...
git
...
</code></pre>

<p>Il suffit juste de savoir quoi mettre dedans. Allons-y:</p>

<!-- more -->




<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">complete</span> -W <span class="s2">&quot;new compile test&quot;</span> mytool
</span></code></pre></td></tr></table></div></figure>


<p>Le fichier sera chargé automatiquement au lancement de bash. Donc pour que
ça fonctionne maintenant, soit vous le sourcez, soit vous lancez une
nouvelle console et, &ndash; <em>roulements de tambours</em>&ndash;</p>

<pre><code>[~]⇒ mytool [TAB]
compile  new      test     
[~]⇒ mytool 
</code></pre>

<p>Magique, non ? Il faut noter que l&#8217;auto complétion fonctionnera aussi
avec des options:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">complete</span> -W <span class="s2">&quot;new compile test --verbose&quot;</span> mytool
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ mytool c[TAB] -[TAB]
mytool compile --verbose
</code></pre>

<p>Donc, comment ça marche ? Voici la traduction de l&#8217;aide de <code>complete</code>,
simplifiée au maximum:</p>

<p><strong>complete</strong> [<em>options</em>] <em>name</em>   <br/>
Spécifie comment les arguments doivent être complétés, pour chaque <em>name</em>.</p>

<p>L&#8217;option <code>-W</code> permet de lui passer une liste de mots. Finalement c&#8217;était
facile ? Humm… En fait ce sera rarement aussi simple. Pour continuer notre
jeu de rôle, disons que l&#8217;option <code>--verbose</code> peut s&#8217;appliquer uniquement
à l&#8217;argument <code>new</code>, et pas aux deux autres. Du coup, notre commande
<code>complete</code> ne suffit plus. Il va falloir trouver autre chose et c&#8217;est ce
qu&#8217;on verra dans un prochain article.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en bash - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/"/>
    <updated>2014-01-14T20:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/">L&#8217;auto complétion programmable en bash: partie 3</a>.</p>

<h2>Un programme bidon pour tester</h2>

<p>On va faire un petit jeu de rôle : Vous avez écrit un nouveau langage
informatique revolutionnaire, et maintenant vous voulez lui adjoindre
un outil pour faciliter la gestion des projets. Ce fameux programme, qui
va s&#8217;appeller «mytool» aura 3 commandes: <code>new</code>, pour créer un projet,
<code>compile</code>, pour compiler le projet, et <code>test</code>, pour le tester. Et bien sûr,
vous voulez profiter des joies de l&#8217;auto complétion:</p>

<pre><code>mytool c[TAB]
</code></pre>

<p>devra devenir:</p>

<pre><code>mytool compile
</code></pre>

<!-- more -->


<p>Pour comprendre les prochains articles, on est pas obligé d&#8217;avoir un «vrai»
programme. Mais c&#8217;est quand même plus drôle pour faire tout un tas de tests.
Voici donc le magnifique programme <code>mytool</code>:</p>

<figure class='code'><figcaption><span>mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nv">$1</span> in
</span><span class='line'>  new <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>Project created ;;
</span><span class='line'>  <span class="nb">test</span> <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>Project tested ;;
</span><span class='line'>  compile <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>Project compiled ;;
</span><span class='line'>  * <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>error ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assurez vous que le programme ait les droits d&#8217;exécution (<code>chmod +x</code>)
et qu&#8217;il soit dans votre PATH:</p>

<pre><code>[~]⇒ mytool new
Project created
[~]⇒ mytool test
Project tested
[~]⇒ mytool compile
Project compiled
[~]⇒ mytool
error
</code></pre>

<p>La prochaine, promis, on commencera vraiment à faire de l&#8217;auto-complétion.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/"/>
    <updated>2014-01-13T20:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/">L&#8217;auto complétion programmable en bash: partie 2</a>.</p>

<p>Je joue donc quelques minutes avec la commande <code>compgen</code>, juste pour voir
de quoi il s&#8217;agit. L&#8217;option <code>-W</code> retient particulièrement mon attention.
On lui passe une liste de mots entre guillemets et ça nous les renvoient:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz"
foo
bar
baz
</code></pre>

<!-- more -->


<p>Ok, on va pas se mentir, vous ne voyez pas tellement l&#8217;intérêt, hein ?
Et si on passait un second argument à <code>compgen</code>, comme le début d&#8217;un
mot:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz" f
foo
</code></pre>

<p>Ou bien encore:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz" ba
bar
baz
</code></pre>

<p>Voilà qui est intéressant. Et si on lui donne un début de mot inexistant:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz" o
[~]⇒ 
</code></pre>

<p>Les sections <strong>complete</strong> et surtout <strong>programmable completion</strong> de la page
de man sont particulièrement indigestes. Je me doute que je devrais les lire
si je veux aller plus loin, mais ça attendra encore.
Donc je google «bash programmable completion» et je trouve ce qu&#8217;il me faut pour
commencer. La suite la prochaine fois.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
