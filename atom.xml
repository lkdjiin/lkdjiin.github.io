<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-03-18T13:30:35+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pour des raisons de sécurité il n'est pas possible de personnaliser votre mot de passe]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/18/pour-des-raisons-de-securite-il-nest-pas-possible-de-personnaliser-votre-mot-de-passe/"/>
    <updated>2015-03-18T09:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/18/pour-des-raisons-de-securite-il-nest-pas-possible-de-personnaliser-votre-mot-de-passe</id>
    <content type="html"><![CDATA[<p>J’ai coutume de râler sur twitter contre les sites web qui font n’importe quoi
avec les mots de passe : limitation du nombre de caractères, impossibilité
d’utiliser certains caractères, mail de confirmation avec mot de passe en
clair, etc. Mais avec le site de ma mutuelle, on atteint un niveau
d’incompétence hors catégorie.</p>

<!-- more -->

<p>Le mot de passe que ma mutuelle m’a attribué fait <strong>six</strong> caractères de long.
Cinq lettres majuscules et un chiffre. Gardez bien ça en tête pendant que vous
lisez la suite de l’article.</p>

<p>Naturellement j’ai eu envie de changer ce mot de passe pour un autre, plus
personnel et… un peu plus long. J’ai eu beau chercher, je n’ai rien vu sur leur
site qui me permette de modifier mon mot de passe. J’ai donc jeter un œil à
la F.A.Q., dont voici le copier coller:</p>

<blockquote>
  <p>Comment personnaliser mon mot de passe ?</p>

  <p>Pour des raisons de sécurité, il n’est pas possible de personnaliser votre mot
de passe. En effet, étant donné le caractère confidentiel de vos données,
votre mot de passe est généré selon un algorithme complexe, et se doit de
vérifier certaines contraintes de sécurité. C’est pour cette raison que les
assurés ne sont pas autorisés à personnaliser leur mot de passe.</p>
</blockquote>

<p>What the fuck !</p>

<p>Je me demande si un jour dans ma vie on s’est foutu de ma gueule plus fort que
ça ? Et en fait ça me pose une question de droit : «À qui appartient mon
mot de passe, à moi, ou au site web ?».</p>

<p>Laissez moi un commentaire si vous avez vécu des expériences similaires ou si
vous vous y connaissez en droit ;)</p>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/17/dis-digital-encore-une-fois/">Dis digital encore une fois</a></li><li><a href="http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/">Aidez-vous : traduisez !</a></li><li><a href="http://lkdjiin.github.io/blog/2013/11/20/quand-internet-menerve-ou-mes-principes-a-la-con/">Quand internet m&#8217;énerve (ou mes principes à la con</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un jeu de Simon - Étape 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1/"/>
    <updated>2015-03-01T21:00:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Lors d’un projet du dimanche avec ma fille, j’ai commencé un
<a href="http://fr.wikipedia.org/wiki/Simon_%28jeu%29">jeu de Simon</a> sur l’Arduino.
Nous avons simplifié les règles au maximum (ma fille n’a pas 3 ans) et obtenu
ce que je vous propose dans cet article.</p>

<p>C’est seulement un point de départ, j’ai bien envie d’implémenter le jeu en
entier et d’en faire un objet réel. Il devrait donc y avoir d’autres articles…</p>

<p><img class="center" src="http://lkdjiin.github.io/images/simon-1.jpg" /></p>

<!-- more -->

<h2 id="les-rgles">Les règles</h2>

<p>J’ai réduit les règles du jeu au plus simple : Il y a deux couleurs, rouge et
vert. La machine donne une couleur en allumant une LED et le joueur répond en
appuyant sur un bouton de couleur. Si la réponse est juste le joueur gagne et
une nouvelle partie commence. Si la réponse est fausse les LEDs clignotent
quelque temps pour signaler que le jeu est perdu et une nouvelle partie
commence.</p>

<p>Difficile de faire plus simple, hein ?</p>

<h2 id="les-composants">Les composants</h2>

<p>Nous aurons besoin de :</p>

<ul>
  <li>2 LEDs, une rouge et une verte</li>
  <li>2 boutons momentanés, si possible un rouge et un vert (sinon les gris
moches ça marche aussi)</li>
  <li>2 résistances de 220 Ohms pour les LEDs</li>
  <li>2 résistances de 10 kilo Ohms pour les boutons</li>
  <li>du câble</li>
</ul>

<h2 id="lassemblage">L’assemblage</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/simon-etape1-bb.png" /></p>

<h2 id="le-code">Le code</h2>

<p>Rien de spécial à dire pour le code, si ce n’est qu’il a été écrit sous la
pression de ma fille et la patience n’est pas son fort. Ça pourrait expliquer
pourquoi le code n’est pas très joli.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">const</span> <span class="n">byte</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="k">const</span> <span class="n">byte</span> <span class="n">GREEN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">byte</span> <span class="n">buttonRed</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">buttonGreen</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">ledRed</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">ledGreen</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">computerTurn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">lastPly</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">buttonRed</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">buttonGreen</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="n">randomSeed</span><span class="p">(</span><span class="n">analogRead</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">computerTurn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">lastPly</span> <span class="o">=</span> <span class="n">random</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line">    <span class="n">allLedsOff</span><span class="p">();</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">lastPly</span> <span class="o">==</span> <span class="n">RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
</span><span class="line">    <span class="n">allLedsOff</span><span class="p">();</span>
</span><span class="line">    <span class="n">computerTurn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">stateRed</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">buttonRed</span><span class="p">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">stateGreen</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">buttonGreen</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">stateRed</span> <span class="o">||</span> <span class="n">stateGreen</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="n">stateRed</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">lightTheLed</span><span class="p">(</span><span class="n">ledRed</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="n">lightTheLed</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="n">stateRed</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">stateGreen</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">GREEN</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="n">stateRed</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">GREEN</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">stateGreen</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">RED</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="n">blinkLeds</span><span class="p">();</span>
</span><span class="line">        <span class="n">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="n">computerTurn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">allLedsOff</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">lightTheLed</span><span class="p">(</span><span class="n">byte</span> <span class="n">led</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">delay</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">blinkLeds</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">    <span class="n">allLedsOff</span><span class="p">();</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="la-suite">La suite</h2>

<p>Il reste beaucoup de choses à faire… Ajouter le bleu et le jaune ; ajouter du son ;
enregistrer les séquences de couleur ; le vrai jeu de Simon, quoi.
Et ensuite il faudra en faire un objet autonome, sans Arduino.</p>

<p>Alors à la prochaine.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino/">Mes premiers pas avec Arduino</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri/">Les maths derrière V=RI</a></li><li><a href="http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/">Racket: Trouves mon nombre - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dis digital encore une fois]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/17/dis-digital-encore-une-fois/"/>
    <updated>2015-02-17T10:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/17/dis-digital-encore-une-fois</id>
    <content type="html"><![CDATA[<p>Je suis un pessimiste optimiste. C’est à dire que ma raison sait
qu’une cause est irrémédiablement perdue depuis longtemps, et malgré tout, mon
cœur me pousse à faire quand même quelque chose, parce qu’on ne
sait jamais.</p>

<p>Le combat «digital» vs «numérique» illustre parfaitement mon pessimisme
optimiste. La cause est entendue depuis longtemps, l’anglicisme «digital» a
gagné et écrasé haut la main (haha) le mot «numérique», et pourtant je tente
quand même de réhabiliter «numérique», à mon petit niveau, en l’employant
toujours et partout à la place de digital.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/dis-digital-encore-une-fois-512.jpg" /></p>

<!-- more -->

<p>Deux phrases que j’aime beaucoup sur la page Wikipédia de
<a href="http://fr.wikipedia.org/wiki/Digital">Digital</a> :</p>

<blockquote>
  <p>Le seul vrai calculateur digital est un instrument très ancien, toujours très employé en Asie, le boulier</p>
</blockquote>

<blockquote>
  <p>L’emploi du terme digital à la place de numérique […] est donc un abus de langage, mais très en vogue pour des raisons de marketing</p>
</blockquote>

<p>Comme c’est déjà perdu, marrons nous un peu. Je suis tombé ce matin sur
<a href="http://www.lesechos.fr/idees-debats/cercle/cercle-123423-lentreprise-a-lere-du-digital-savoir-propulser-sa-transformation-numerique-1092355.php">cet article</a>
 joliment intitulé «L’entreprise à l’ère du digital».</p>

<p>Et si on remplaçait quelques occurrences de «digital» par «lié aux doigts», autrement dit le vrai sens de digital ? C’est parti :</p>

<blockquote>
  <p>L’investissement dans les technologies liées aux doigts va forcer la réflexion sur deux axes fondamentaux : le modèle économique et social lié aux doigts et les capacités liées aux doigts de l’entreprise.</p>
</blockquote>

<blockquote>
  <p>De nouveaux métiers apparaissent, comme […] le scientifique lié aux doigts.</p>
</blockquote>

<blockquote>
  <p>créer de nouvelles offres liées aux doigts sont au cœur de ce nouveau challenge</p>
</blockquote>

<blockquote>
  <p>Être partie prenante dans l’économie liée aux doigts c’est aussi savoir connecter l’entreprise et son organisation au monde extérieur à travers les nouveaux médias comme les réseaux sociaux, les blogs</p>
</blockquote>

<p>Alors j’arrête là, parce que je me rends compte que ça n’est pas drôle en fait.
C’est tout au plus pathétique. Ça c’est le pessimisme qui reprends le dessus.</p>

<p>Vas y, dis «digital» encore une fois !</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/03/18/pour-des-raisons-de-securite-il-nest-pas-possible-de-personnaliser-votre-mot-de-passe/">Pour des raisons de sécurité il n&#8217;est pas possible de personnaliser votre mot de passe</a></li><li><a href="http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/">Aidez-vous : traduisez !</a></li><li><a href="http://lkdjiin.github.io/blog/2013/11/20/quand-internet-menerve-ou-mes-principes-a-la-con/">Quand internet m&#8217;énerve (ou mes principes à la con</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les maths derrière V=RI]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri/"/>
    <updated>2015-02-11T11:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>\(V = RI\), la formule est simple. V pour le voltage (en Volts), R pour la
résistance (en Ohms) et I pour l’intensité (en Ampères).  Grâce à elle nous
pouvons calculer l’ampérage si nous connaissons le voltage et la résistance:</p>

<script type="math/tex; mode=display">
\begin{align}

  I= \frac{V}{R}
\end{align}
</script>

<p>Et nous pouvons aussi calculer la résistance si nous connaissons le voltage et
l’intensité:</p>

<script type="math/tex; mode=display">
\begin{align}

  R= \frac{V}{I}
\end{align}
</script>

<p>Pas besoin d’être fort en math pour pouvoir appliquer ces 3 formules. On a
juste à faire une multiplication, ou bien une division. Mais si on veut
comprendre pourquoi les deux dernières formules <em>découlent</em> de la première, il
faut un minimum de bagage en math.</p>

<p><strong>Cet article est pour celles et ceux qui ont séchés les cours de math au
collège</strong> et qui voudraient maintenant comprendre pourquoi \(V = RI\) implique
nécessairement \(I = V / R\). Je vais tâcher de tirer et d’expliquer tous les
fils qui nous amène à déduire la seconde formule à partir de la première.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/math.jpg" /></p>

<!-- more -->

<h2 id="le-symbole-de-la-multiplication">Le symbole de la multiplication</h2>

<p>Le plus simple d’abord, \(RI\) est la multiplication de R par I.
Donc \(RI\) est la même chose que \(R \times I\).
Pour simplifier les choses (<em>ironie…</em>) on peut aussi
écrire le signe le la multiplication avec un point.
Les 3 lignes suivantes sont donc équivalentes:</p>

<script type="math/tex; mode=display">
\begin{align}

  RI            \\
  R \times I    \\
  R \cdot I
\end{align}
</script>

<h2 id="lgalit">L’égalité</h2>

<p>Parlons maintenant du signe <code>=</code>. Il signifie qu’on a une égalité entre ce qui
se trouve à sa gauche et ce qui se trouve à sa droite. En d’autres termes, ce
qui est à gauche du signe <code>=</code> à la même valeur que ce qui est à sa droite.
Donc si V vaut 12 (c’est un exemple), alors R × I vaut
aussi exactement 12. Si je remplace V par 12 dans la formule, on voit bien que
RI vaut 12:</p>

<script type="math/tex; mode=display">
\begin{align}

  12 = RI
\end{align}
</script>

<p>Ça ne nous
dit pas combien vaut exactement R ni combien vaut exactement I mais on sait
que la multiplication de ces deux là vaut 12. On a peut-être R = 1 et I = 12, ou
encore R = 3 et I = 4. Tout est possible du moment que \(R \times I = 12\).</p>

<p>Cette dernière égalité ( \(R \times I = 12\) ) m’amène à préciser ceci:
\(V = RI\) est la
même chose que \(RI = V\). Si vous avez du mal à penser avec des lettres,
n’hésitez pas à les remplacer régulièrement par des nombres pour voir de quoi
ça a l’air. Par exemple, si on dit que V = 12, R = 3 et I = 4, on peut écrire:</p>

<script type="math/tex; mode=display">
\begin{align}

  12 = 3 \times 4
\end{align}
</script>

<p>Ou encore :</p>

<script type="math/tex; mode=display">
\begin{align}

  3 \times 4 = 12
\end{align}
</script>

<p>C’est bien la même chose.</p>

<h2 id="jouons-avec-lgalit">Jouons avec l’égalité</h2>

<p>On peut faire subir aux deux cotés de l’égalité la même opération sans que cela
pose problème.</p>

<p>Par exemple on peut ajouter 1 de chaque coté:</p>

<script type="math/tex; mode=display">
\begin{align}

  V + 1 = RI + 1
\end{align}
</script>

<p>Essayons avec des nombres. Si V = 12, R = 3 et I = 4 :</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

12 + 1 &= 3 \times 4 + 1 \\
13 &= 12 + 1 \\
13 &= 13
\end{align}
 %]]&gt;</script>

<p>Ça marcherait aussi avec une soustraction ou tiens, avec une multiplication:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

V \times 2 &= R \times I \times 2 \\
12 \times 2 &= 3 \times 4 \times 2 \\
24 &= 12 \times 2 \\
24 &= 24
\end{align}
 %]]&gt;</script>

<p>Et bien sûr, ça fonctionne aussi avec la division, tant qu’on divise par
autre chose que zéro:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

V / 2 &= R \times I / 2 \\
12 / 2 &= 3 \times 4 / 2 \\
6 &= 12 / 2 \\
6 &= 6
\end{align}
 %]]&gt;</script>

<h2 id="un-truc-intressant--propos-de-la-division">Un truc intéressant à propos de la division</h2>

<p>Puisqu’on parle de division, voici un truc intéressant à propos de la division.
Quand on divise un nombre (n’importe lequel à part zéro) par lui-même on obtient toujours 1.
Toujours. Par exemple:</p>

<script type="math/tex; mode=display">
\begin{align}

  12 / 12 = 1
\end{align}
</script>

<p>Si on généralise : \(A / A = 1\). Donc c’est pareil avec R ou I :</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

  R / R &= 1 \\
  I / I &= 1
\end{align}
 %]]&gt;</script>

<h2 id="division-et-fraction">Division et fraction</h2>

<p>Jusqu’ici j’ai utilisé le signe <code>/</code> pour la division, mais celui-ci n’est pas
toujours très pratique et on le remplace souvent par une fraction. Et oui:
division et fraction c’est la même chose.</p>

<script type="math/tex; mode=display">
\begin{align}

  X / Y= \frac{X}{Y}
\end{align}
</script>

<p>Reprenons notre formule de base :</p>

<script type="math/tex; mode=display">
\begin{align}

  V = R \times I
\end{align}
</script>

<p>Si on divise les deux cotés par R, ça donne :</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{V}{R}= \frac{R \times I}{R}
\end{align}
</script>

<p>On y est presque, je vous assure ! Il faut encore comprendre une dernière chose :</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{R \times I}{R}=I
\end{align}
</script>

<p>Wait</p>

<p><img class="center" src="http://lkdjiin.github.io/images/wut.jpg" /></p>

<p>Rappelez vous qu’une fraction, c’est la même chose qu’une division. Si je
généralise:</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{X \times Y}{Z}=X \times Y / Z
\end{align}
</script>

<p>Il faut aussi savoir qu’il n’y a pas de priorité entre la multiplication et
la division, ainsi \(10 \times 2 / 5 = 4\), tout aussi bien que
\(10 / 5 \times 2 = 4\) ou que \(2 / 5 \times 10 = 4\).</p>

<p>Donc :</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{R \times I}{R}
\end{align}
</script>

<p>Équivaut à :</p>

<script type="math/tex; mode=display">
\begin{align}

  R \times I / R
\end{align}
</script>

<p>Ce qui est exactement pareil que :</p>

<script type="math/tex; mode=display">
\begin{align}

  R / R \times I
\end{align}
</script>

<p>Et nous avons vu que <code>R / R</code> vaut 1, ce qui donne :</p>

<script type="math/tex; mode=display">
\begin{align}

  1 \times I
\end{align}
</script>

<p>Ou plus simplement :</p>

<script type="math/tex; mode=display">
\begin{align}

  I
\end{align}
</script>

<h2 id="conclusion">Conclusion</h2>

<p>Notre formule de base nous permet de calculer V à partir de R et de I:</p>

<script type="math/tex; mode=display">
\begin{align}

  V = RI
\end{align}
</script>

<p>On joue avec en divisant chaque coté par R:</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{V}{R} = \frac{RI}{R}
\end{align}
</script>

<p>Ce qui donne:</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{V}{R} = I
\end{align}
</script>

<p>Qu’on remet dans le bon sens si on préfère, on peut maintenant calculer I à
partir de V et R:</p>

<script type="math/tex; mode=display">
\begin{align}

  I = \frac{V}{R}
\end{align}
</script>

<p>Si nous avons un voltage de 5 Volts et une résistance de 1000 Ohms, combien
aurons nous d’ampères:</p>

<script type="math/tex; mode=display">
\begin{align}

  I = \frac{5}{1000} = 0.005
\end{align}
</script>

<p>Vous venez de déduire une formule mathématique à partir d’une autre et de
l’utiliser !
Et de rattraper plusieurs heures de sèche du collège en quelques minutes ;)</p>

<p>À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1/">Un jeu de Simon - Étape 1</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino/">Mes premiers pas avec Arduino</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - Une bande de données infinie]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/"/>
    <updated>2015-02-05T18:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Dans la définition d’une machine de Turing on trouve:</p>

<blockquote>
  <p>Le ruban est supposé être de longueur infinie vers la gauche ou vers la droite, en d’autres termes la machine doit toujours avoir assez de longueur de ruban pour son exécution.
— Wikipédia</p>
</blockquote>

<p>C’était une grande limitation de l’implémentation de <a href="https://github.com/lkdjiin/turing_machine">ma machine de Turing</a>
que d’avoir une bande de taille fixe. Avec la nouvelle version, cette limitation
est désormais levée.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/infinity.jpg" /></p>

<!-- more -->

<p>Permettre à la bande de grandir à l’infini (en théorie, hein, parce que en
pratique on est toujours limité par la mémoire de l’ordinateur) est finalement
très simple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/turing_machine/tape.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">TuringMachine</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Tape</span>
</span><span class="line">
</span><span class="line">    <span class="no">BLANK_SYMBOL</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="no">BLANK_SYMBOL</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@symbols</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">shift_left</span>
</span><span class="line">      <span class="k">if</span> <span class="vi">@index</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class="line">        <span class="vi">@symbols</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="no">BLANK_SYMBOL</span><span class="p">)</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="vi">@index</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">shift_right</span>
</span><span class="line">      <span class="vi">@symbols</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">BLANK_SYMBOL</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@index</span> <span class="o">==</span> <span class="vi">@symbols</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">      <span class="vi">@index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici quelques explications.</p>

<pre><code>@symbols = data.scan(/./)
</code></pre>

<p>Dans le constructeur, on se sert de <code>String#scan</code> pour construire un tableau
avec les données initiales de la bande. Par exemple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;110&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span>
</span><span class="line"><span class="go">#=&gt;[&quot;1&quot;, &quot;1&quot;, &quot;0&quot;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>@index = 0
</code></pre>

<p>Dans le constructeur toujours, la position de la tête de lecture est
initialement à zéro.</p>

<pre><code>def shift_left
  if @index == 0
    @symbols.unshift(BLANK_SYMBOL)
  else
    @index -= 1
  end
end
</code></pre>

<p>Lorsqu’on bouge la tête de lecture à gauche, nous avons deux cas possibles.
Soit la tête de lecture est déjà dans la position la plus à gauche
(<code>if @index == 0</code>) et dans ce cas il faut créer une nouvelle cellule en tête
du tableau:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">].</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">)</span>
</span><span class="line"><span class="go">#=&gt;[&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Soit la tête de lecture est dans une autre position, et il suffit de la décaler
d’un cran vers la gauche (<code>@index -= 1</code>).</p>

<pre><code>def shift_right
  @symbols.push(BLANK_SYMBOL) if @index == @symbols.size - 1
  @index += 1
end
</code></pre>

<p>Lorsqu’on bouge la tête de lecture à droite, il faut ajouter une cellule à la
fin du tableau (<code>@symbols.push</code>) seulement si la tête de lecture est placée
toute à droite du tableau (<code>@index == @symbols.size - 1</code>).</p>

<p>Dans tous les cas, il faut déplacer la tête de lecture d’un cran à droite
(<code>@index += 1</code>).</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/">Une machine de Turing en Ruby - Le parser</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/">Une machine de Turing en Ruby - La routine de copie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/">Une machine de Turing en Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - La routine de copie]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/"/>
    <updated>2015-02-04T10:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>La routine de copie est une brique élémentaire d’un programme pour une machine
de Turing. Par exemple, si les données de la bande sont <code>111</code>, la routine de
copie va doubler ces trois symboles en insérant un zéro au milieu: <code>1110111</code>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/copie-clone.jpg" /></p>

<!-- more -->

<p>Je ne vais pas expliquer la routine de copie
— <a href="http://en.wikipedia.org/wiki/Turing_machine_examples#A_copy_subroutine">cet article de Wikipédia</a>
le fait très bien — mais plutôt montrer comment j’ai du adapter
<a href="https://github.com/lkdjiin/turing_machine">ma machine de Turing</a>
pour pouvoir faire tourner cette routine.</p>

<p>Voici le jeu d’instructions de la routine de copie:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>copy_with_data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">0 A  =&gt; 1 L B</span>
</span><span class="line"><span class="err">0 B  =&gt; 1 N s1</span>
</span><span class="line"><span class="err">0 s1 =&gt; N N HALT</span>
</span><span class="line"><span class="err">1 s1 =&gt; 0 R s2</span>
</span><span class="line"><span class="err">0 s2 =&gt; 0 R s3</span>
</span><span class="line"><span class="err">1 s2 =&gt; 1 R s2</span>
</span><span class="line"><span class="err">0 s3 =&gt; 1 L s4</span>
</span><span class="line"><span class="err">1 s3 =&gt; 1 R s3</span>
</span><span class="line"><span class="err">0 s4 =&gt; 0 L s5</span>
</span><span class="line"><span class="err">1 s4 =&gt; 1 L s4</span>
</span><span class="line"><span class="err">0 s5 =&gt; 1 R s1</span>
</span><span class="line"><span class="err">1 s5 =&gt; 1 L s5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est en deux parties, les deux premières lignes écrivent des données sur la
bande (le nombre <code>11</code>) et les neuf dernières lignes sont effectivement la
routine de copie. Une des limitations actuelles de ma machine de Turing est de
ne pas pouvoir initialiser la bande avec des données spécifiques, il faut donc
le faire depuis le programme, comme ici les deux premières lignes.</p>

<p>Les nouveautés dans ce jeu d’instructions sont les caractères <code>N</code>, qu’on peut
trouver dans les symboles à écrire et dans le mouvement de la tête de lecture,
par exemple dans la 3ème ligne:</p>

<pre><code>0 s1 =&gt; N N HALT
</code></pre>

<p>Cela signifie pas d’écriture et pas de mouvement (<strong>N</strong>o write, <strong>N</strong>o move).</p>

<p>Le parser étant déjà capable d’attraper n’importe quel mot/symbole, il suffit de
faire évoluer la méthode de mise à jour de la bande ainsi (c’est un peu lourd
comme écriture mais ça reste clair et pragmatique):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/turing_machine/instance.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">TuringMachine</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Instance</span>
</span><span class="line">
</span><span class="line">  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">update_tape</span><span class="p">(</span><span class="n">current_action</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@tape</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:write</span><span class="o">]</span> <span class="k">unless</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:write</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;N&#39;</span>
</span><span class="line">      <span class="vi">@tape</span><span class="o">.</span><span class="n">shift_left</span> <span class="k">if</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:move</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;L&#39;</span>
</span><span class="line">      <span class="vi">@tape</span><span class="o">.</span><span class="n">shift_right</span> <span class="k">if</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:move</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;R&#39;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et maintenant la routine de copie fonctionne !</p>

<pre><code>$ turing_machine instruction_sets/copy_with_data
  1 0000000000000000000000000000000000000000 A -&gt; 1LB
                       ^
  2 0000000000000000000100000000000000000000 B -&gt; 1Ns1
                      ^
  3 0000000000000000001100000000000000000000 s1 -&gt; 0Rs2
                      ^
  4 0000000000000000000100000000000000000000 s2 -&gt; 1Rs2
                       ^
  5 0000000000000000000100000000000000000000 s2 -&gt; 0Rs3
                        ^
  6 0000000000000000000100000000000000000000 s3 -&gt; 1Ls4
                         ^
  7 0000000000000000000101000000000000000000 s4 -&gt; 0Ls5
                        ^
  8 0000000000000000000101000000000000000000 s5 -&gt; 1Ls5
                       ^
  9 0000000000000000000101000000000000000000 s5 -&gt; 1Rs1
                      ^
 10 0000000000000000001101000000000000000000 s1 -&gt; 0Rs2
                       ^
 11 0000000000000000001001000000000000000000 s2 -&gt; 0Rs3
                        ^
 12 0000000000000000001001000000000000000000 s3 -&gt; 1Rs3
                         ^
 13 0000000000000000001001000000000000000000 s3 -&gt; 1Ls4
                          ^
 14 0000000000000000001001100000000000000000 s4 -&gt; 1Ls4
                         ^
 15 0000000000000000001001100000000000000000 s4 -&gt; 0Ls5
                        ^
 16 0000000000000000001001100000000000000000 s5 -&gt; 1Rs1
                       ^
 17 0000000000000000001101100000000000000000 s1 -&gt; NNHALT
                        ^
 18 0000000000000000001101100000000000000000 HALT
</code></pre>

<p>Le code est <a href="https://github.com/lkdjiin/turing_machine">sur Github</a>, à plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/">Une machine de Turing en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/">Une machine de Turing en Ruby - Le parser</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - Le parser]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/"/>
    <updated>2015-02-02T18:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>La machine de Turing réalisée dans le <a href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/">dernier article</a>
était seulement un brouillon, et elle souffre de plusieurs limitations.
J’aimerais maintenant faire évoluer le programme en permettant à l’utilisateur
de charger un jeu d’instructions quelconque. Pour cela j’aurai besoin
d’un <em>parser</em>, qui sera vite écrit grâce à Ruby.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gears4.jpg" /></p>

<!-- more -->

<p>Un jeu d’instruction pour la machine de Turing ressemblera à ceci (si vous avez
besoin du code, <a href="https://github.com/lkdjiin/turing_machine">il est ici</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>instruction_sets/busy_beaver_3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">0 A =&gt; 1 R B</span>
</span><span class="line"><span class="err">1 A =&gt; 1 L C</span>
</span><span class="line"><span class="err">0 B =&gt; 1 L A</span>
</span><span class="line"><span class="err">1 B =&gt; 1 R B</span>
</span><span class="line"><span class="err">0 C =&gt; 1 L B</span>
</span><span class="line"><span class="err">1 C =&gt; 1 R HALT</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est l’algorithme <em>busy beaver à 3 états</em> que j’ai utilisé pour coder la
première version de la machine. Il faut écrire un <em>parser</em> qui va transformer
ce <em>code source</em> en ce hash Ruby, utilisé en interne par la machine:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>instruction_sets/busy_beaver_3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">{</span>
</span><span class="line"><span class="err">  [&#39;0&#39;, &#39;A&#39;] =&gt; {write: &#39;1&#39;, move: &#39;R&#39;, next_state: &#39;B&#39;},</span>
</span><span class="line"><span class="err">  [&#39;1&#39;, &#39;A&#39;] =&gt; {write: &#39;1&#39;, move: &#39;L&#39;, next_state: &#39;C&#39;},</span>
</span><span class="line"><span class="err">  [&#39;0&#39;, &#39;B&#39;] =&gt; {write: &#39;1&#39;, move: &#39;L&#39;, next_state: &#39;A&#39;},</span>
</span><span class="line"><span class="err">  [&#39;1&#39;, &#39;B&#39;] =&gt; {write: &#39;1&#39;, move: &#39;R&#39;, next_state: &#39;B&#39;},</span>
</span><span class="line"><span class="err">  [&#39;0&#39;, &#39;C&#39;] =&gt; {write: &#39;1&#39;, move: &#39;L&#39;, next_state: &#39;B&#39;},</span>
</span><span class="line"><span class="err">  [&#39;1&#39;, &#39;C&#39;] =&gt; {write: &#39;1&#39;, move: &#39;R&#39;, next_state: &#39;HALT&#39;},</span>
</span><span class="line"><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici le parser, qui est construit autour de la méthode <code>String#split</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/turing_machine/instructions_parser.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">TuringMachine</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">InstructionsParser</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">raw_instructions</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@lines</span> <span class="o">=</span> <span class="n">raw_instructions</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@instructions</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">parse</span>
</span><span class="line">      <span class="n">build_instructions</span>
</span><span class="line">      <span class="vi">@instructions</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">private</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">build_instructions</span>
</span><span class="line">      <span class="vi">@lines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">instruction</span><span class="o">|</span>
</span><span class="line">        <span class="n">keys</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">instruction</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;=&gt;&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">key_symbol</span><span class="p">,</span> <span class="n">key_state</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="n">split</span>
</span><span class="line">        <span class="n">write</span><span class="p">,</span> <span class="n">move</span><span class="p">,</span> <span class="n">next_state</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">split</span>
</span><span class="line">        <span class="vi">@instructions</span><span class="o">[[</span><span class="n">key_symbol</span><span class="p">,</span> <span class="n">key_state</span><span class="o">]]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">          <span class="ss">write</span><span class="p">:</span> <span class="n">write</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="n">move</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="n">next_state</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On va l’utiliser comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">raw_instructions</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">parser</span> <span class="o">=</span> <span class="no">InstructionsParser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">raw_instructions</span><span class="p">)</span>
</span><span class="line"><span class="n">instructions</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je vais expliquer plus en détail. Tout d’abord dans le constructeur, on divise
la grande chaîne de caractères en entrée en autant de lignes indépendantes:</p>

<pre><code>@lines = raw_instructions.split("\n")
</code></pre>

<p>Puis dans la méthode privée <code>build_instructions</code>, on itère sur chacune des
lignes pour construire le hash:</p>

<pre><code>@lines.each do |instruction|
</code></pre>

<p>Chaque ligne est d’abord divisé en deux parties, de chaque coté de <code>=&gt;</code>:</p>

<pre><code>keys, value = instruction.split('=&gt;')
</code></pre>

<p>La partie des clés (celle de gauche) est à son tour divisé en deux, le symbole
sous la tête de lecture et l’état de la machine:</p>

<pre><code>key_symbol, key_state = keys.split
</code></pre>

<p>Ensuite c’est au tour de la partie de droite, celle qui représente la prochaine
instruction:</p>

<pre><code>write, move, next_state = value.split
</code></pre>

<p>Enfin, on ajoute clé et valeur dans le hash:</p>

<pre><code>@instructions[[key_symbol, key_state]] = {
  write: write, move: move, next_state: next_state
}
</code></pre>

<p>Pour finir, voici mon premier jeu d’instructions pour une machine de Turing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>instruction_sets/write101</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">0 A =&gt; 1 R B</span>
</span><span class="line"><span class="err">0 B =&gt; 0 R C</span>
</span><span class="line"><span class="err">0 C =&gt; 1 R HALT</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fait quoi ? Ça écrit 101, tout simplement :</p>

<pre><code> turing_machine instruction_sets/write101 
  1 0000000000000000000000000000000000000000 A -&gt; 1RB
                       ^
  2 0000000000000000000100000000000000000000 B -&gt; 0RC
                        ^
  3 0000000000000000000100000000000000000000 C -&gt; 1RHALT
                         ^
  4 0000000000000000000101000000000000000000 HALT
</code></pre>

<p>Je vous rappelle que vous pouvez consulter le code de la
<a href="https://github.com/lkdjiin/turing_machine">machine de Turing</a>.</p>

<p>Voilà, avec l’aide de <code>String#split</code> il est facile d’écrire un parser simple.
Alors bien sûr, ce parser n’est pas vraiment complet, il manque par exemple la
gestion des erreurs. Mais il y a des choses plus urgentes à implémenter, comme
le mouvement nul, le ruban infini, ou la possibilité de commencer le programme
avec un ruban qui contient des données…</p>

<p>À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/">Une machine de Turing en Ruby - La routine de copie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/">Une machine de Turing en Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/"/>
    <updated>2015-02-01T10:11:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>Avec le film <em>Imitation Game</em> sorti récemment, Alan Turing, qu’on peut considérer
comme un père fondateur de l’informatique, fait l’actualité.
Je vous propose, dans cet article, de réaliser une machine de Turing en Ruby.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/alan-turing2.jpg" /></p>

<!-- more -->

<h2 id="dfinition-de-la-machine-de-turing">Définition de la machine de Turing</h2>

<p>Ma définition personnelle sera la suivante:</p>

<p><strong>Une machine de Turing est une machine imaginaire et hyper-minimale, pouvant
faire tourner un algorithme.</strong></p>

<p>Si vous ressentez le besoin d’une définition plus formelle, les articles de
Wikipédia, en <a href="http://en.wikipedia.org/wiki/Turing_machine">anglais</a>
et en <a href="http://fr.wikipedia.org/wiki/Machine_de_Turing">français</a>
sont très bien fourni. Il y a aussi une présentation sympathique de la machine de
Turing dans une petite <a href="http://videotheque.cnrs.fr/doc=3001">vidéo en français</a>
de 7 minutes, par le CNRS.</p>

<p>Dans la suite de l’article, je prends comme hypothèse que vous savez ce qu’est
une machine de Turing. Si ça n’est pas le cas, ou si vous avez besoin de vous
rafraichir la mémoire, n’hésitez pas à visiter les liens précédents.</p>

<h2 id="on-fait-une-gem-">On fait une gem ?</h2>

<p>À terme, j’aimerais un programme qui puisse faire tourner n’importe quel jeu
d’instructions. Mais pour un premier jet, concret, rapidement réalisable, et
malgré tout intéressant,
on va faire tourner un <a href="http://en.wikipedia.org/wiki/Busy_beaver">busy beaver</a>
à 3 états.</p>

<p>Deux trucs à noter:</p>

<ol>
  <li><em>Busy beaver à 3 états</em> ça peut faire peur. Je vous assure qu’il n’y a pas
de quoi. C’est un algorithme relativement simple.</li>
  <li><em>Busy beaver</em> se traduit par <em>castor affairé</em>, c’est bien la preuve qu’il n’y
a pas de quoi avoir peur.</li>
</ol>

<p>Comme je veux une structure bien claire dès le départ, et pas un script vite
fait qu’on aura toutes les peines du monde à étendre, je vais faire une gem:</p>

<pre><code>$ bundle gem turing_machine -btV
      create  turing_machine/Gemfile
      create  turing_machine/Rakefile
      create  turing_machine/LICENSE.txt
      create  turing_machine/README.md
      create  turing_machine/.gitignore
      create  turing_machine/turing_machine.gemspec
      create  turing_machine/lib/turing_machine.rb
      create  turing_machine/lib/turing_machine/version.rb
      create  turing_machine/bin/turing_machine
      create  turing_machine/.rspec
      create  turing_machine/spec/spec_helper.rb
      create  turing_machine/spec/turing_machine_spec.rb
      create  turing_machine/.travis.yml
Initializing git repo in /home/xavier/devel/ruby/turing_machine
</code></pre>

<p>Vous pouvez trouver le code sur Github : <a href="https://github.com/lkdjiin/turing_machine">lkdjiin/turing_machine</a>.</p>

<h2 id="objectif-de-la-premire-version">Objectif de la première version</h2>

<p>Mon objectif est d’obtenir cette sortie quand je lance le programme
<code>turing_machine</code>:</p>

<pre><code>$ turing_machine 
  1 0000000000 A -&gt; 1RB
        ^
  2 0000100000 B -&gt; 1LA
         ^
  3 0000110000 A -&gt; 1LC
        ^
  4 0000110000 C -&gt; 1LB
       ^
  5 0001110000 B -&gt; 1LA
      ^
  6 0011110000 A -&gt; 1RB
     ^
  7 0111110000 B -&gt; 1RB
      ^
  8 0111110000 B -&gt; 1RB
       ^
  9 0111110000 B -&gt; 1RB
        ^
 10 0111110000 B -&gt; 1RB
         ^
 11 0111110000 B -&gt; 1LA
          ^
 12 0111111000 A -&gt; 1LC
         ^
 13 0111111000 C -&gt; 1RHALT
        ^
 14 0111111000 HALT
         ^
</code></pre>

<p>Explication d’une ligne de la sortie:</p>

<pre><code>  5 0001110000 B -&gt; 1LA
      ^ - Le `5` est le numéro de la séquence. - La suite de `0` et de `1` est le ruban. - Le `^` est la position de la tête de lecture. - Le `B` est l'état courant. - La fin, ici `1LA`, est la prochaine instruction à exécuter.
</code></pre>

<p>Une instruction est composé a) du symbole à écrire, b) du mouvement de la
tête de lecture et, c) du nouvel état. Par exemple <code>1LA</code> signifie: écrire <code>1</code>,
bouger la tête de lecture à gauche (<code>L</code>) et passer dans l’état <code>A</code>.</p>

<h2 id="une-classe-pour-le-ruban-et-la-tte-de-lecture">Une classe pour le ruban et la tête de lecture</h2>

<p>On commence par une classe <code>Tape</code> (ruban), que je combine avec <code>head</code> (tête de
lecture) pour aller plus vite.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Tape</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@symbols</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;0&#39;</span> <span class="p">}</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:index</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">head</span>
</span><span class="line">    <span class="vi">@symbols</span><span class="o">[</span><span class="vi">@index</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">head</span><span class="o">=</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@symbols</span><span class="o">[</span><span class="vi">@index</span><span class="o">]</span> <span class="o">=</span> <span class="n">symbol</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">shift_left</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">shift_right</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class="line">    <span class="vi">@symbols</span><span class="o">.</span><span class="n">join</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il faut noter qu’une machine de Turing possède un ruban avec un nombre infini
de cellules. Ici ça n’est pas le cas puisqu’il n’y en a que 10. C’est un
raccourci qui permet d’aller plus vite, de garder le code simple, et 10 cellules
sont largement suffisantes pour le <em>busy beaver à 3 états</em>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/castor2.png" /></p>

<h2 id="une-classe-pour-le-registre-dtat">Une classe pour le registre d’état</h2>

<p>Avoir une classe dédiée à conserver l’état peut sembler
<a href="http://fr.wikipedia.org/wiki/Overkill">overkill</a>. Et pour être honnête, je dois
dire que ça l’est certainement. Une simple variable aurait été suffisante pour
cette première version. Mais bon, je suis sûr que cette classe sera bientôt
utile ;)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">StateRegister</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@state</span> <span class="o">=</span> <span class="n">state</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">current</span>
</span><span class="line">    <span class="vi">@state</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="n">new_state</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@state</span> <span class="o">=</span> <span class="n">new_state</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class="line">    <span class="vi">@state</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="une-classe-pour-la-table-dinstructions">Une classe pour la table d’instructions</h2>

<p>Ici aussi, j’aurais pu (du ?) faire appel au
<a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a>.
Un simple hash pourrait faire l’affaire pour l’instant.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Instruction</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@table</span> <span class="o">=</span> <span class="n">table</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">for</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@table</span><span class="o">[[</span><span class="n">symbol</span><span class="p">,</span> <span class="n">state</span><span class="o">]]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="une-instance-dune-machine-de-turing">Une instance d’une machine de Turing</h2>

<p>Les trois petites classes ci-dessus vont se combiner à l’intérieur de la
classe <code>Instance</code> suivante, pour simuler une machine de Turing. Même si elle
est un peu plus complexe que les précédentes, cette classe reste malgré tout
très simple.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Instance</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">instructions</span><span class="p">,</span> <span class="n">initial_state</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@instruction</span> <span class="o">=</span> <span class="no">Instruction</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">instructions</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@state</span> <span class="o">=</span> <span class="no">StateRegister</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">initial_state</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@tape</span> <span class="o">=</span> <span class="no">Tape</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@sequence</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="s1">&#39;%3d&#39;</span> <span class="o">%</span> <span class="vi">@sequence</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@tape</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@state</span><span class="si">}#{</span><span class="n">instr_to_s</span><span class="si">}</span><span class="se">\n</span><span class="s2">    &quot;</span> <span class="o">+</span>
</span><span class="line">    <span class="s1">&#39; &#39;</span> <span class="o">*</span> <span class="vi">@tape</span><span class="o">.</span><span class="n">index</span> <span class="o">+</span> <span class="s1">&#39;^&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">proceed</span>
</span><span class="line">    <span class="n">current</span> <span class="o">=</span> <span class="n">action</span>
</span><span class="line">    <span class="n">update_sequence</span>
</span><span class="line">    <span class="n">update_tape</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
</span><span class="line">    <span class="n">update_state</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">halted?</span>
</span><span class="line">    <span class="vi">@state</span><span class="o">.</span><span class="n">current</span> <span class="o">==</span> <span class="s1">&#39;HALT&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_sequence</span>
</span><span class="line">    <span class="vi">@sequence</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_tape</span><span class="p">(</span><span class="n">current_action</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@tape</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:write</span><span class="o">]</span>
</span><span class="line">    <span class="n">current_action</span><span class="o">[</span><span class="ss">:move</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;L&#39;</span> <span class="p">?</span> <span class="vi">@tape</span><span class="o">.</span><span class="n">shift_left</span> <span class="p">:</span> <span class="vi">@tape</span><span class="o">.</span><span class="n">shift_right</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update_state</span><span class="p">(</span><span class="n">current_action</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@state</span><span class="o">.</span><span class="n">change</span><span class="p">(</span><span class="n">current_action</span><span class="o">[</span><span class="ss">:next_state</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">action</span>
</span><span class="line">    <span class="vi">@instruction</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="vi">@tape</span><span class="o">.</span><span class="n">head</span><span class="p">,</span> <span class="vi">@state</span><span class="o">.</span><span class="n">current</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">instr_to_s</span>
</span><span class="line">    <span class="k">if</span> <span class="n">halted?</span>
</span><span class="line">      <span class="s1">&#39;&#39;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="s2">&quot; -&gt; &quot;</span> <span class="o">+</span> <span class="n">action</span><span class="o">[</span><span class="ss">:write</span><span class="o">]</span> <span class="o">+</span> <span class="n">action</span><span class="o">[</span><span class="ss">:move</span><span class="o">]</span> <span class="o">+</span> <span class="n">action</span><span class="o">[</span><span class="ss">:next_state</span><span class="o">]</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="le-binaire">Le binaire</h2>

<p>Enfin quand je dis le binaire c’est un abus de langage puisque ça reste un
fichier texte ;) Quoiqu’il en soit voici le programme <code>turing_machine</code> qui
implémente le <em>busy beaver à 3 états</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bin/turing_machine</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#!/usr/bin/env ruby</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;turing_machine&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kp">include</span> <span class="no">TuringMachine</span>
</span><span class="line">
</span><span class="line"><span class="n">instructions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="o">[</span><span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">write</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="s1">&#39;R&#39;</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="s1">&#39;B&#39;</span><span class="p">},</span>
</span><span class="line">  <span class="o">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">write</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="s1">&#39;C&#39;</span><span class="p">},</span>
</span><span class="line">  <span class="o">[</span><span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">write</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="s1">&#39;A&#39;</span><span class="p">},</span>
</span><span class="line">  <span class="o">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">write</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="s1">&#39;R&#39;</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="s1">&#39;B&#39;</span><span class="p">},</span>
</span><span class="line">  <span class="o">[</span><span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">write</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="s1">&#39;B&#39;</span><span class="p">},</span>
</span><span class="line">  <span class="o">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">write</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="s1">&#39;R&#39;</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="s1">&#39;HALT&#39;</span><span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">initial_state</span> <span class="o">=</span> <span class="s1">&#39;A&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">instance</span> <span class="o">=</span> <span class="no">Instance</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">instructions</span><span class="p">,</span> <span class="n">initial_state</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kp">loop</span> <span class="k">do</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">instance</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">  <span class="k">break</span> <span class="k">if</span> <span class="n">instance</span><span class="o">.</span><span class="n">halted?</span>
</span><span class="line">  <span class="n">instance</span><span class="o">.</span><span class="n">proceed</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette version (<a href="https://github.com/lkdjiin/turing_machine">voir le code complet</a>) est juste une mise en train. Il faudrait maintenant disposer
d’un ruban infini et pouvoir entrer n’importe quel jeu d’instructions.</p>

<p>À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/">Une machine de Turing en Ruby - La routine de copie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/">Une machine de Turing en Ruby - Le parser</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mes premiers pas avec Arduino]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino/"/>
    <updated>2015-01-25T18:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Ça faisait un ou deux ans que l’envie me titillait. Jouer avec Arduino,
Raspberry Pi, etc. Mais essentiellement par manque de temps, je n’avais pas
encore franchi le pas. Et puis dernièrement, on m’a offert le
<a href="http://arduino.cc/en/Main/ArduinoStarterKit">Starter Kit Arduino</a>. Plus de faux pretextes, je devais m’y mettre ;)</p>

<p><img class="center" src="http://lkdjiin.github.io/images/projet-1-paral.jpg" /></p>

<!-- more -->

<h2 id="les-premiers-projets-du-bouquin">Les premiers projets du bouquin</h2>

<p>Le premier projet pose les très grandes bases de l’éléctricité. Tu apprends
à allumer une LED avec un ou deux boutons, en série puis en parallèle.
Tu révises aussi la <a href="http://fr.wikipedia.org/wiki/Loi_d%27Ohm">loi d’Ohm</a>:</p>

<p><strong><em>V = R x I</em></strong></p>

<p>Avec <strong>V</strong> pour voltage (mesuré en volts), <strong>R</strong> pour résistance (mesuré en ohms)
et <strong>I</strong> pour intensité (mesuré en ampères). J’avais appris cette loi au lycée
sous la forme U = RxI,
en français le <strong>V</strong> devient donc <strong>U</strong>, pour des raisons de normalisation de
l’AFNOR.</p>

<p>Dans le second projet, tu allumes plusieurs LEDs, avec un peu de code pour les
faire clignoter. Pour le troisième projet, toujours des LEDs à allumer mais
cette fois-ci à l’aide d’un détecteur de chaleur.</p>

<p>Le quatrième projet te propose devine quoi ? Gagné ! il te propose d’allumer
une LED, cette fois en la contrôlant avec des photo-résistances:</p>

<p><img class="center" src="http://lkdjiin.github.io/images/projet-4.jpg" /></p>

<h2 id="lenvironnement-de-dveloppement">L’environnement de développement</h2>

<p>Arduino est aussi un IDE, dans lequel tu tapes du code, avec lequel tu compiles
tes programmes arduino, etc. Mais comment te dire, quand tu es habitué à bosser
avec autre chose (Vim dans mon cas), tu n’imagines pas une seconde devoir
utiliser cet IDE Arduino.</p>

<p>J’ai trouvé <a href="http://inotool.org">ino</a> qui permet de travailler en console, c’est parfait pour moi.
Pour pouvoir installer ino, il faut le gestionnaire de package <code>pip</code> pour
Python.</p>

<p>Pour installer (et comprendre) pip:
<a href="http://sametmax.com/votre-python-aime-les-pip/">Sam et Max - Votre python aime les pip</a>.</p>

<p>Pour ensuite installer ino: <a href="http://inotool.org/">inotool.org</a>.</p>

<p>Maintenant vous avez accès à ces commandes:</p>

<pre><code>ino init
ino build
ino upload
ino serial # C-A C-X pour sortir ?
</code></pre>

<p>Le fichier qui nous intéresse, celui où l’on va écrire notre code, est créé
par <code>ino init</code>. C’est le fichier <code>src/sketch.ino</code>.</p>

<pre><code>$ tree
.
├── lib
└── src
    └── sketch.ino
</code></pre>

<p>Pour finir, si vous avez besoin d’un fichier de syntaxe pour Vim, c’est ici:
<a href="https://github.com/sudar/vim-arduino-syntax">sudar/vim-arduino-syntax</a>.</p>

<p>Vivement les prochains projets, qui vont me faire contrôler des servo-moteurs,
produire de la musique, etc. Parce que j’en ai un peu marre d’allumer des
LEDs ;)</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1/">Un jeu de Simon - Étape 1</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri/">Les maths derrière V=RI</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mieux utiliser le programme gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem/"/>
    <updated>2015-01-23T11:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Le programme <code>gem</code> est bien connu des rubyistes, et ce pour une bonne raison:
il est au coeur de l’utilisation de Ruby. Si je veux par exemple profiter
de <a href="https://github.com/michaeldv/awesome_print">awesome_print</a>
dans ma console irb, je vais l’installer grâce à <code>gem</code>:</p>

<pre><code>$ gem install awesome_print
</code></pre>

<p>De même, avez-vous déjà vu une appli Rails se passer d’un Gemfile ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class="line"><span class="n">ruby</span> <span class="s1">&#39;2.0.0&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.0&#39;</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class="line"><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En fait, si vous avez fait seulement 3 jours de Ruby dans votre vie, vous savez
utiliser <code>gem</code>. Mais l’utilisez-vous à fond ? Moi, non. Enfin pas encore.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/diamond-1_512.png" /></p>

<!-- more -->

<p>Depuis 5 ou 6 ans que j’utilise quotidiennement Ruby, je n’avais jamais
écrit <code>gem --help</code>. Jamais. Pas une seule fois.</p>

<pre><code>$ gem --help
RubyGems is a sophisticated package manager for Ruby.  This is a
...
  Further help:
    gem help commands            list all 'gem' commands
    gem help examples            show some examples of usage
    gem help gem_dependencies    gem dependencies file guide
    gem help platforms           gem platforms guide
    gem help &lt;COMMAND&gt;           show help on COMMAND
    gem server                   present a web page at
...
</code></pre>

<p>J’ai l’impression qu’il y a de quoi lire et de quoi faire. Voici donc un rapide
tour d’horizon des possibilités offertes par <code>gem</code>.</p>

<h2 id="gem-help-commands">gem help commands</h2>

<p>Commençons par regarder les différentes commandes:</p>

<pre><code>$ gem help commands
GEM commands are:

    build                  Build a gem from a gemspec
    cert                   Manage RubyGems certificates and signing settings
...
    wrappers               Re run generation of environment wrappers for gems.
    yank                   Remove a pushed gem from the index
...
Commands may be abbreviated, so long as they are unambiguous.
</code></pre>

<p>J’ai abrégé la sortie ci-dessus car il y a <strong>33 commandes</strong>, je n’avais vraiment
pas la moindre idée d’un nombre si important de commande. En voici la liste:</p>

<ul>
  <li>build</li>
  <li>cert</li>
  <li>check</li>
  <li>cleanup</li>
  <li>contents</li>
  <li>dependency</li>
  <li>environment</li>
  <li>fetch</li>
  <li>generate_index</li>
  <li>help</li>
  <li>install</li>
  <li>list</li>
  <li>lock</li>
  <li>mirror</li>
  <li>open</li>
  <li>outdated</li>
  <li>owner</li>
  <li>pristine</li>
  <li>push</li>
  <li>query</li>
  <li>rdoc</li>
  <li>regenerate_binstubs</li>
  <li>search</li>
  <li>server</li>
  <li>sources</li>
  <li>specification</li>
  <li>stale</li>
  <li>uninstall</li>
  <li>unpack</li>
  <li>update</li>
  <li>which</li>
  <li>wrappers</li>
  <li>yank</li>
</ul>

<p>Personnellement j’ai déjà utilisé <code>build</code>, <code>cleanup</code>, <code>install</code>, <code>list</code>,
<code>push</code>, <code>uninstall</code>, <code>update</code> et c’est tout. 7 commandes sur 33, je suis loin du compte.</p>

<p>En regardant d’un peu plus près la sortie de <code>gem help commands</code>,
je m’aperçois qu’on peut abréger chaque commande:</p>

<pre><code>$ gem install my_gem
</code></pre>

<p>seras donc identique à:</p>

<pre><code>$ gem i my_gem
</code></pre>

<p>J’aime beaucoup cette idée.</p>

<h2 id="gem-help-acommand">gem help a_command</h2>

<p>On peut obtenir de l’aide sur une commande spécifique.
Par exemple, avec <code>gem help install</code>, j’apprend que les options permettant de
ne pas générer la documentation:</p>

<pre><code>--no-rdoc
--no-ri
</code></pre>

<p>sont des options dépréciées. On peut maintenant utiliser:</p>

<pre><code>-N, --no-document
</code></pre>

<h2 id="gem-help-examples">gem help examples</h2>

<p>Évidemment cette commande affiche plusieurs exemples ;) Comme la manière
d’installer une version spécifique d’une gem:</p>

<pre><code>$ gem install rake --version 0.3.1
</code></pre>

<p>Je ne sais pas pourquoi je ne me souviens jamais de cette manière de faire,
pourtant évidente. Maintenant je n’aurais plus besoin de poser la question à
un moteur de recherche, je me contenterais de <code>gem help examples</code>.</p>

<h2 id="gem-server">gem server</h2>

<p>Une petite curiosité : <code>gem server</code> fournit une page html, à consulter à
l’adresse <code>localhost:8808</code> avec la liste des gems installées. Ça semble un peu
gadget, d’autant plus qu’on peut avoir ces informations rapidement dans la
console avec la commande <code>list</code>:</p>

<pre><code>$ gem list

*** LOCAL GEMS ***

awesome_print (1.6.1)
bigdecimal (1.2.6)
bundler (1.7.9)
...
</code></pre>

<p>Et puis avec <code>gem help list</code>, j’ai trouvé comment obtenir des détails sur les
gems:</p>

<pre><code>$ gem list -d

*** LOCAL GEMS ***

awesome_print (1.6.1)
    Author: Michael Dvorkin
    Homepage: http://github.com/michaeldv/awesome_print
    License: MIT
    Installed at: /home/xavier/.rvm/gems/ruby-2.2.0

    Pretty print Ruby objects with proper indentation and colors

bigdecimal (1.2.6)
    Authors: Kenta Murata, Zachary Scott, Shigeo Kobayashi
    Homepage: http://www.ruby-lang.org
    Installed at (default): /home/xavier/.rvm/rubies/ruby-2.2.0/lib/ruby/gems/2.2.0

Arbitrary-precision decimal floating-point number library.

...
</code></pre>

<h2 id="encore-du-boulot">Encore du boulot…</h2>

<p>Je n’ai pas fini de la lire, cette documentation. Elle semble prometteuse, et
je sens que je vais apprendre encore pas mal de choses.</p>

<p>J’espère vous avoir donné envie de regarder certaines commandes plus en détails.
Dans un monde idéal, il faudrait que je regarde les 33…</p>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem/">Utiliser une version particulière d&#8217;une gem Ruby&#8230; dans une gem</a></li><li><a href="http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/">Mettre à jour des gems ayants des références circulaires avec Bundle</a></li><li><a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">Remplacer Sed et Awk par Ruby 11: La gem English</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je ne vais pas terminer le jeu de la vie en Rust]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/"/>
    <updated>2015-01-22T17:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Je ne vais pas terminer le jeu de la vie en Rust. Si vous voulez vraiment savoir
pourquoi, continuez à lire cet article. Sinon passez au suivant qui devrait
être plus intéressant :-)</p>

<!-- more -->

<pre><code>$ rustc --version
rustc 1.0.0-nightly (29bd9a06e 2015-01-20 23:03:09 +0000)
</code></pre>

<p>Après avoir procédé à la mise à jour de Rust, j’ai commencé à vouloir régler
les conflits :/ Parce que oui, même avec le petit bout de code que j’ai obtenu
jusqu’ici il y a déjà plusieurs conflits après le changement de version.  Pour
les plus simples, il suffit de renommer <code>uint</code> en <code>usize</code> et les suffixes <code>u</code>
sur les nombres entiers en <code>us</code>.</p>

<p>Par contre il y a d’autres erreurs qui me donnent mal à la tête d’avance, comme
par exemple:</p>

<pre><code>   Compiling game_of_life v0.0.1 (file:///home/xavier/code/rust/game_of_life)
src/main.rs:13:20: 13:39 error: unresolved name `std::rand::task_rng`
src/main.rs:13         let cell = std::rand::task_rng().gen_range(0us, 2us);
                                  ^~~~~~~~~~~~~~~~~~~ et aussi:

src/main.rs:7:20: 7:23 error: the trait `core::fmt::String` is not implemented for the type `collections::vec::Vec&lt;usize&gt;`
src/main.rs:7     println!("{}", gen);
</code></pre>

<p>Comme j’ai plusieurs projets, grands et petits, en cours en ce moment, je
préfère me concentrer sur ceux qui ont une chance d’aboutir, et le jeu de la vie
en Rust ne fait clairement pas partie de mes priorités.</p>

<p>Je reviendrais (peut-être) à Rust après la version 1.0 finale, quand
le langage et la documentation seront suffisamment stables.</p>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2/">Le jeu de la vie en Rust - partie 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1/">Le jeu de la vie en Rust - partie 1</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/">Le jeu de la vie en Haskell - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To tap or not to tap en Ruby ? C'est la question]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/14/to-tap-or-not-to-tap-en-ruby-cest-la-question/"/>
    <updated>2015-01-14T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/14/to-tap-or-not-to-tap-en-ruby-cest-la-question</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Le monde des Rubyistes est divisé en deux: ceux qui utilisent <code>Object#tap</code> à tout
propos, et ceux qui ne connaissent pas cette méthode.
Dans l’article <a href="https://blog.engineyard.com/2015/five-ruby-methods-you-should-be-using">Five Ruby Methods You Should Be Using</a>
sur le blog d’Engine Yard, Ben Lewis nous parle justement, entre autre, de <code>Object#tap</code>
en expliquant très bien son mécanisme.</p>

<p>Mon article d’aujourd’hui sera lui aussi divisé en deux, d’abord une traduction en
français de l’article original de Ben Lewis sur <code>Object#tap</code>, puis une critique
(que j’espère constructive)
à la fois de l’article et de la méthode <code>tap</code></p>

<!-- more -->

<h3 id="traduction-de-larticle-original-objecttap">Traduction de l’article original Object#tap</h3>

<p>Vous êtes vous déjà trouvé dans la situation d’appeler une méthode sur un
objet, et que la valeur de retour ne soit pas ce que vous vouliez ? Vous
espériez recevoir l’objet en question, mais à la place vous avez reçu une autre
valeur. Peut-être que vous vouliez ajouter une valeur arbitraire à un ensemble
de paramètres enregistrés dans un hash. Vous mettez à jour cette valeur avec
<code>Hash.[]</code>, mais vous recevez <code>'bar'</code> au lieu de l’objet hash <code>params</code>, donc vous
devez le renvoyer explicitement.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="n">params</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span>
</span><span class="line">  <span class="n">params</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La ligne qui contient <code>params</code> à la fin de cette méthode semble être de trop.</p>

<p>On peut arranger ça avec <code>Object#tap</code>.</p>

<p>C’est facile à utiliser. Appeler simplement <code>tap</code> sur l’objet, puis passer à
<code>tap</code> un bloc avec le code que vous voulez lancer sur cet objet. L’objet sera
donné au bloc, puis retourné. Voici comment nous pouvons l’utiliser pour
améliorer <code>update_params</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="n">params</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il y a des douzaines d’excellents endroits où utiliser <code>Object#tap</code>. Cherchez
simplement les méthodes appelées sur un objet qui ne renvoient pas l’objet
lui-même, alors que c’est ce que vous voudriez.</p>

<h3 id="fin-de-la-traduction-et-dbut-de-la-critique">Fin de la traduction et début de la critique</h3>

<p>L’article explique très bien la mécanique de <code>Object#tap</code>, sur ce point pas de souci.
Mais j’ai un problème avec l’exemple choisi, que je trouve peu adapté.
— <em>Pour être tout à fait honnête, j’ai plutôt un problème avec <code>tap</code>.</em> —
Si on rapproche les deux versions,
je trouve que la première est beaucoup plus facile à lire. Même si celle-ci
comporte une ligne de plus. Même si cette ligne supplémentaire ne fait <em>pas
très pro</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="n">params</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span>
</span><span class="line">  <span class="n">params</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="n">params</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans la première version, voici comment se passe la lecture dans ma tête:</p>

<p><em>«Dans l’objet <code>params</code> on enregistre la clé <code>:foo</code> avec la valeur <code>'bar'</code> puis on
renvoie <code>params</code>»</em></p>

<p>C’est cristallin, précis, simple, rapide.</p>

<p>Dans la seconde version, ça donne ceci (toujours dans ma tête, hein):</p>

<p><em>«On se branche sur l’objet <code>params</code>, donc il sera renvoyé à la fin de la méthode.
Dans le bloc on utilise <code>p</code>, qui est… ? … qui est <code>params</code>, ok, donc on enregistre
la clé <code>:foo</code> avec la valeur <code>'bar'</code> dans <code>params</code>.»</em></p>

<p>C’est loin d’être aussi fluide. Y a plein de parasites. Ce qui fait que dans ce
cas précis, je préfere très nettement la première version.</p>

<p>Au passage, je trouve que <code>p</code> est très mal choisi, ça me donne la fausse sensation que le
bloc va itérer sur chaque paramètre. Selon moi il n’y a aucune raison pour ne pas
réutiliser <code>params</code>, bien au contraire:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">update_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="n">params</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">params</span><span class="o">|</span> <span class="n">params</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Là où <code>tap</code> peut améliorer légèrement la lecture, c’est lorsqu’il y a beaucoup
d’opérations sur un objet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">create_an_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="n">item</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="n">item</span><span class="o">.</span><span class="n">do_something</span>
</span><span class="line">  <span class="n">item</span><span class="o">.</span><span class="n">do_another_thing</span>
</span><span class="line">  <span class="n">item</span><span class="o">.</span><span class="n">send_email_confirmation_to_admin</span>
</span><span class="line">  <span class="n">item</span><span class="o">.</span><span class="n">do_something_else</span>
</span><span class="line">  <span class="n">item</span><span class="o">.</span><span class="n">important_stuff</span>
</span><span class="line">  <span class="n">item</span><span class="o">.</span><span class="n">less_important_stuff_to_do</span>
</span><span class="line">  <span class="n">item</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On n’y comprend rien, hein ?  Avec <code>tap</code>, ça permet de voir rapidement que ce
code ne comporte rien d’autre que des opérations sur un <em>item</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">create_an_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">  <span class="no">Item</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class="line">    <span class="n">item</span><span class="o">.</span><span class="n">do_something</span>
</span><span class="line">    <span class="n">item</span><span class="o">.</span><span class="n">do_another_thing</span>
</span><span class="line">    <span class="n">item</span><span class="o">.</span><span class="n">send_email_confirmation_to_admin</span>
</span><span class="line">    <span class="n">item</span><span class="o">.</span><span class="n">do_something_else</span>
</span><span class="line">    <span class="n">item</span><span class="o">.</span><span class="n">important_stuff</span>
</span><span class="line">    <span class="n">item</span><span class="o">.</span><span class="n">less_important_stuff_to_do</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais encore une fois, l’amélioration apportée est légère. Et elle est
seulement visuelle. Je vois régulièrement ce genre de code et je ne l’aime pas.
<code>Item.new.tap</code>, par exemple, c’est la <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">loi de Démeter</a> qu’on foule du pied.
Et le code à l’intérieur du bloc reste une bouillie qu’on ferait mieux
de refactorer.</p>

<p>Bref, la méthode <code>Object#tap</code> me semble poser plus de problèmes qu’elle n’en
résout. Vous avez un avis sur le sujet ?</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/">Une machine de Turing en Ruby - La routine de copie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/">Une machine de Turing en Ruby - Le parser</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Rust - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2/"/>
    <updated>2015-01-13T10:14:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<h2 id="tests-unitaires-avec-rust">Tests unitaires avec Rust</h2>

<p>Je vais ajouter des tests unitaires au code du dernier article. Il s’agissait
simplement d’une seule fonction pour créer une génération aléatoire de cellule.
Voici tout le code, l’implémentation et les tests dans le même fichier <code>src/main.rs</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/main.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#[cfg(not(test))]</span>
</span><span class="line"><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">gen</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span>
</span><span class="line">    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">gen</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">fn</span> <span class="n">create_generation</span><span class="p">(</span><span class="n">width</span><span class="o">:</span> <span class="k">uint</span><span class="p">,</span> <span class="n">height</span><span class="o">:</span> <span class="k">uint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="k">uint</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">size</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">;</span>
</span><span class="line">    <span class="k">let</span> <span class="k">mut</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="n">_</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">task_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="m">2</span><span class="k">u</span><span class="p">);</span>
</span><span class="line">        <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cell</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">result</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cp">#[cfg(test)]</span>
</span><span class="line"><span class="k">mod</span> <span class="n">tests</span> <span class="p">{</span>
</span><span class="line">    <span class="k">use</span> <span class="n">super</span><span class="o">::</span><span class="n">create_generation</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cp">#[test]</span>
</span><span class="line">    <span class="k">fn</span> <span class="n">test_create_generation_length</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">3</span><span class="p">);</span>
</span><span class="line">        <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="m">12</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cp">#[test]</span>
</span><span class="line">    <span class="k">fn</span> <span class="n">test_create_generation_has_1_and_0</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">let</span> <span class="n">gen</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="n">gen</span><span class="p">.</span><span class="n">len</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">            <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">gen</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="m">2</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>On lance les tests grâce à l’outil à tout faire, Cargo:</p>

<pre><code>$ cargo test
   Compiling game_of_life v0.0.1 (file:///home/xavier/code/rust/game_of_life)
     Running target/game_of_life-f45ebd9dc330e3e4

running 2 tests
test test::test_create_generation_has_1_and_0 ... ok
test test::test_create_generation_length ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured
</code></pre>

<p>Concernant le code, il se comprend assez facilement de lui-même, voici tout de même quelques
éclaircissements:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="cp">#[cfg(not(test))]</span>
</span><span class="line"><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Sans cette annotation (pardon, attribut en langage Rust) <code>cargo test</code> produirait
un avertissement assez ennuyeux, car la fonction <code>main</code> n’est pas utilisé par
les tests:</p>

<pre><code>$ cargo test
   Compiling game_of_life v0.0.1 (file:///home/xavier/code/rust/game_of_life)
/home/.../main.rs:3:1: 6:2 warning: function is never used: `main`, #[warn(dead_code)] on by default
/home/.../main.rs:3 fn main() {
/home/.../main.rs:4     let gen = create_generation(3, 4);
/home/.../main.rs:5     println!("{}", gen);
/home/.../main.rs:6 }
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="cp">#[cfg(test)]</span>
</span><span class="line"><span class="k">mod</span> <span class="n">tests</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est la déclaration d’un <strong>mod</strong>ule nommé <code>tests</code>, avec un attribut permettant
à Rust de savoir que ce qui suit concerne des tests et ne devra pas être compilé
dans le programme final.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="k">use</span> <span class="n">super</span><span class="o">::</span><span class="n">create_generation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On va utiliser la fonction <code>create_generation</code>, définie dans le parent du
module courant. <code>tests</code> est le module courant, le parent est créé automatiquement.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="cp">#[test]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ceci n’est pas un commentaire, vous l’avez compris, on appelle ça un attribut. C’est une sorte d’annotation.
Ça dit à Rust que la prochaine fonction est un test et ça nous permet d’écrire des fonctions utilitaires
dans le module <code>tests</code>.</p>

<h2 id="tests-unitaires-et-implmentation-dans-le-mme-fichier">Tests unitaires et implémentation dans le même fichier</h2>

<p>C’est la recommendation de Rust : placer les tests unitaires dans le même fichier
que l’implémentation. Bien sûr, les tests d’intégration ont un dossier et des
fichiers bien à eux.
L’idée est originale même si elle ne doit pas être nouvelle. Je dis que
l’idée n’est pas nouvelle parce que je l’ai environ deux ou trois fois par an.
Par contre je n’y ai jamais cru suffisamment pour tenter de l’implémenter. Rust
l’a fait et je suis très curieux de voir ce que cela va donner.</p>

<p>Cette façon de faire a des avantages, comme ne pas perdre de temps à
trouver les tests unitaires ou aider à rester <em>focus</em> sur ce qui doit être
testé. Mais je m’interroge quand même sur ce que cela peut poser comme problèmes à l’usage.</p>

<p>Ma première interrogation concerne la taille des fichiers.
Le code Rust, sans être le plus verbeux qui soit, est quand même loin de la concision.
Un exemple simple, en Rust:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">task_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="m">2</span><span class="k">u</span><span class="p">);</span>
</span><span class="line"><span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cell</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le même en Ruby:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je ne serais pas étonné de trouver des fichiers Rust avec 200 lignes de code
d’implémentation (je vois ça régulièrement en Ruby).
Et si on respecte la <a href="http://martinfowler.com/bliki/TestPyramid.html">pyramide des tests</a> on se retrouve
vite avec 3 ou 4 tests par fonction, d’où des fichiers assez imposants,
d’un bon millier de lignes.
En fouillant un peu dans le code de Rust, par exemple le fichier <a href="https://github.com/rust-lang/rust/blob/master/src/libserialize/json.rs">json.rs</a>,
on peut voir que je suis encore loin de la réalité (presque 4000 lignes).</p>

<p>Une autre interrogation concerne le refactoring. Il faut pouvoir facilement casser
un fichier en plusieurs autres, plus petits. Dans quelle mesure ce type de
«couplage» entre test et implémentation va faciliter, ou au contraire compliquer,
cette tâche ?</p>

<p>Bref, je trouve l’idée très séduisante en théorie, et j’attend de voir si sa mise
en pratique fonctionne. Il y a encore d’autres choses à dire sur les tests avec
Rust, et j’y reviendrais certainement dans un prochain article.</p>

<p>N’oubliez pas que votre opinion m’intéresse, alors si vous pensez quelque chose
de ces tests unitaires à même le code, laissez donc un commentaire.</p>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/">Je ne vais pas terminer le jeu de la vie en Rust</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1/">Le jeu de la vie en Rust - partie 1</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/">Le jeu de la vie en Haskell - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Rust - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1/"/>
    <updated>2015-01-04T18:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/04/le-jeu-de-la-vie-en-rust-partie-1</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<h2 id="premiers-pas-avec-rust">Premiers pas avec Rust</h2>

<p>On va écrire une version simple du jeu de la vie en Rust.</p>

<h3 id="installer-rust">Installer Rust</h3>

<p>Rendez-vous <a href="http://www.rust-lang.org/install.html">sur cette page</a> pour trouver
le type d’installation qui vous convient. Même si on peut trouver que cela pose
des problèmes, j’ai opté pour la méthode la plus simple:</p>

<pre><code>$ curl -s https://static.rust-lang.org/rustup.sh | sudo sh
</code></pre>

<p>Cela installe la version <em>nightly</em> et le gestionnaire de paquet <code>Cargo</code>.
L’installation est très rapide.</p>

<p>Pour information, voici la version que j’ai installé:</p>

<pre><code>$ rustc --version
rustc 0.13.0-nightly (636663172 2014-12-28 16:21:58 +0000)
</code></pre>

<!-- more -->

<h3 id="cargo">Cargo</h3>

<p>Rust fournit un outil très proche du Bundler des rubyistes, il s’agit
de Cargo. On s’en sert pour la création d’un projet, faire les builds,
lancer les tests, gérer les dépendances, etc…</p>

<p>Je crée le projet <code>game_of_life</code>:</p>

<pre><code>$ cargo new game_of_life --bin
$ cd game_of_life
</code></pre>

<p>Ça donne ceci:</p>

<pre><code>$ tree
.
├── Cargo.toml
└── src
    └── main.rs
</code></pre>

<p>Le fichier <code>Cargo.toml</code> est un manifeste et ne nous intéresse pas trop pour
l’instant.</p>

<h3 id="cration-dune-gnration-de-cellules">Création d’une génération de cellules</h3>

<p>Je ne vais pas parler de test aujourd’hui, ça sera pour plus tard. Je vais seulement écrire une
fonction <code>create_generation</code> (ma toute première fonction Rust !) qui va produire un tableau de
cellules, c’est à dire un tableau de 0 et de 1.</p>

<p>Pour représenter une génération, j’ai déjà utilisé dans les articles précédents des tableaux de
tableaux et des tableaux à 2 dimensions. C’est ma dernière chance d’utiliser des tableaux plats.
Voici le code complet du fichier <code>main.rs</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/main.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">gen</span> <span class="o">=</span> <span class="n">create_generation</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span>
</span><span class="line">    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">gen</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">fn</span> <span class="n">create_generation</span><span class="p">(</span><span class="n">width</span><span class="o">:</span> <span class="k">uint</span><span class="p">,</span> <span class="n">height</span><span class="o">:</span> <span class="k">uint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="k">uint</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">size</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">;</span>
</span><span class="line">    <span class="k">let</span> <span class="k">mut</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="n">_</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="o">::</span><span class="n">task_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="m">0</span><span class="k">u</span><span class="p">,</span> <span class="m">2</span><span class="k">u</span><span class="p">);</span>
</span><span class="line">        <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cell</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">result</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour le compiler et le lancer, on peut utiliser Cargo:</p>

<pre><code>$ cargo run
     Running `target/game_of_life`
[1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0]
</code></pre>

<p>Je ne suis pas très content de cette fonction <code>create_generation</code>, j’ai bien
conscience qu’elle est maladroite, mais elle a
au moins un mérite: elle fonctionne ! Alors, place aux explications.</p>

<pre><code>fn create_generation(width: uint, height: uint) -&gt; Vec&lt;uint&gt; {
</code></pre>

<p>Rust est statiquement typé, le compilateur doit connaître la signature d’une
fonction. Donc on déclare le type des paramêtres (ici <code>uint</code> pour <em>unsigned int</em>)
et le type de la valeur de retour (ici un <code>Vec</code>teur).</p>

<pre><code>let size = width * height;
</code></pre>

<p>On déclare une variable avec <code>let</code>. Pas besoin de préciser le type de <code>size</code>
puisque le compilateur peut l’inférer.</p>

<pre><code>let mut result = Vec::new();
</code></pre>

<p>Par défaut, une variable ne peut pas être modifiée, comme je désire ajouter des
éléments à <code>result</code>, je dois spécifier <code>mut</code> (pour <em>mutable</em>).</p>

<pre><code>for _ in range(0u, size) {
    let cell = std::rand::task_rng().gen_range(0u, 2u);
    result.push(cell);
}
</code></pre>

<p><code>0u</code> est une autre manière de préciser le type. Ici c’est <code>0</code> de type <code>uint</code>.
Dans la boucle on génère un nombre aléatoire et on l’ajoute dans <code>result</code>.</p>

<pre><code>result
</code></pre>

<p>Finalement on renvoie <code>result</code>. Notez qu’il n’y a pas de point-virgule après
<code>result</code>, c’est voulu, ça ne fonctionnerait pas avec. Par contre j’aurais pu
écrire <code>return result;</code>, et là il faudrait le point-virgule. Je n’ai pas encore
très bien compris le pourquoi du comment, donc je ne vais pas me risquer à vous
fournir une explication foireuse.</p>

<p>Voilà, c’est tout pour ma première approche de Rust. La prochaine fois je
parlerais des tests unitaires.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/">Je ne vais pas terminer le jeu de la vie en Rust</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/13/le-jeu-de-la-vie-en-rust-partie-2/">Le jeu de la vie en Rust - partie 2</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/">Le jeu de la vie en Haskell - partie 4</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/"/>
    <updated>2014-12-30T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Je dois maintenant pouvoir extraire 9 cellules d’une génération (la cellule
cible et ses 8 voisines). Pour cela, je vais avoir besoin de la fonction
suivante:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">extractNeighborhood</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Elle prendra en entrée la génération, l’index de la rangée et l’index de la
colonne. Mais pour simplifier l’implémentation de <code>extractNeighborhood</code> j’ai
ressenti le besoin d’une fonction utilitaire <code>sliceAround</code> qui ferait ça:</p>

<pre><code>$ ghci
&gt; :load Slice.hs 
&gt; let list = [0,1,2,3,4,5]
&gt; sliceAround 1 list
[0,1,2]
&gt; sliceAround 4 list
[3,4,5]
&gt; sliceAround 0 list
[0,1]
&gt; sliceAround 5 list
[4,5]
</code></pre>

<!-- more -->

<p>J’ai donc écrit les tests (que vous pouvez trouvez sur <a href="https://github.com/lkdjiin/game-of-life-haskell">Github</a>) et le module
<code>Slice</code> qui en découle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Slice.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">module</span> <span class="nn">Slice</span> <span class="p">(</span><span class="nf">sliceAround</span><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">
</span><span class="line"><span class="nf">sliceAround</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">sliceAround</span> <span class="mi">0</span> <span class="n">list</span> <span class="ow">=</span> <span class="n">take</span> <span class="mi">2</span> <span class="n">list</span>
</span><span class="line"><span class="nf">sliceAround</span> <span class="n">n</span> <span class="n">list</span> <span class="ow">=</span> <span class="n">take</span> <span class="mi">3</span> <span class="o">$</span> <span class="n">drop</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’était facile. J’ai quand même été étonné de ne pas trouver une fonction
<code>slice</code> de base (ou j’ai mal cherché, c’est toujours possible ;) ). Même s’il
est vrai qu’avec <code>take</code> et <code>drop</code> c’est très simple à obtenir.
Ensuite j’utilise <code>sliceAround</code> pour écrire <code>extractNeighborhood</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>GameOfLife.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">extractNeighborhood</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class="line"><span class="nf">extractNeighborhood</span> <span class="n">generation</span> <span class="n">row</span> <span class="n">column</span>
</span><span class="line">  <span class="o">|</span> <span class="n">row</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="n">row1</span> <span class="o">++</span> <span class="n">row2</span>
</span><span class="line">  <span class="o">|</span> <span class="n">row</span> <span class="o">==</span> <span class="p">(</span><span class="n">length</span> <span class="n">generation</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="ow">=</span> <span class="n">row0</span> <span class="o">++</span> <span class="n">row1</span>
</span><span class="line">  <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">row0</span> <span class="o">++</span> <span class="n">row1</span> <span class="o">++</span> <span class="n">row2</span>
</span><span class="line">    <span class="kr">where</span> <span class="n">row0</span> <span class="ow">=</span> <span class="n">getRow</span> <span class="o">$</span> <span class="n">row</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">          <span class="n">row1</span> <span class="ow">=</span> <span class="n">getRow</span> <span class="n">row</span>
</span><span class="line">          <span class="n">row2</span> <span class="ow">=</span> <span class="n">getRow</span> <span class="o">$</span> <span class="n">row</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">          <span class="n">getRow</span> <span class="n">r</span> <span class="ow">=</span> <span class="n">sliceAround</span> <span class="n">column</span> <span class="o">$</span> <span class="n">generation</span> <span class="o">!!</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je n’arrive pas à simplifier plus cette fonction, mais il doit y avoir moyen.
Si vous connaissez Haskell, j’aimerais beaucoup avoir votre avis.</p>

<p>Avant de pouvoir en terminé avec ce jeu de la vie en Haskell, il me faut une
fonction <code>nextGeneration</code>, et j’ai eu bien peur que celle-ci me fasse mal à la
tête.</p>

<p>En fait ça n’a pas été si violent que ça. En décomposant, j’y suis arrivé
rapidement:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">nextGeneration</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span>
</span><span class="line"><span class="nf">nextGeneration</span> <span class="n">generation</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">nextRow</span> <span class="n">y</span> <span class="n">generation</span><span class="p">)</span> <span class="o">|</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">height</span><span class="p">]]</span>
</span><span class="line">  <span class="kr">where</span> <span class="n">height</span> <span class="ow">=</span> <span class="p">(</span><span class="n">length</span> <span class="n">generation</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="nf">nextRow</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class="line"><span class="nf">nextRow</span> <span class="n">y</span> <span class="n">generation</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">nextCell</span> <span class="n">y</span> <span class="n">x</span> <span class="n">generation</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">width</span><span class="p">]]</span>
</span><span class="line">  <span class="kr">where</span> <span class="n">row</span> <span class="ow">=</span> <span class="n">generation</span> <span class="o">!!</span> <span class="n">y</span>
</span><span class="line">        <span class="n">width</span> <span class="ow">=</span> <span class="p">(</span><span class="n">length</span> <span class="n">row</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="nf">nextCell</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">Cell</span>
</span><span class="line"><span class="nf">nextCell</span> <span class="n">y</span> <span class="n">x</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span>
</span><span class="line">  <span class="kr">where</span> <span class="n">neighborhood</span> <span class="ow">=</span> <span class="n">extractNeighborhood</span> <span class="n">generation</span> <span class="n">y</span> <span class="n">x</span>
</span><span class="line">        <span class="n">cell</span> <span class="ow">=</span> <span class="p">(</span><span class="n">generation</span> <span class="o">!!</span> <span class="n">y</span><span class="p">)</span> <span class="o">!!</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais là encore, j’ai l’impression qu’il y a moyen de simplifier…</p>

<p>Il ne me reste plus qu’à faire une boucle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">GameOfLife</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Control.Concurrent</span>
</span><span class="line">
</span><span class="line"><span class="nf">loop</span> <span class="mi">0</span> <span class="kr">_</span> <span class="ow">=</span> <span class="n">return</span> <span class="nb">()</span>
</span><span class="line"><span class="nf">loop</span> <span class="n">n</span> <span class="n">g</span> <span class="ow">=</span>
</span><span class="line"> <span class="kr">do</span>
</span><span class="line">   <span class="n">displayGeneration</span> <span class="n">g</span>
</span><span class="line">   <span class="n">threadDelay</span> <span class="mi">1000000</span>
</span><span class="line">   <span class="n">loop</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">nextGeneration</span> <span class="n">g</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span><span class="nb">()</span>
</span><span class="line"><span class="nf">main</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">width</span> <span class="ow">=</span> <span class="mi">80</span>
</span><span class="line">      <span class="n">height</span> <span class="ow">=</span> <span class="mi">23</span>
</span><span class="line">      <span class="n">cells</span> <span class="ow">=</span> <span class="n">randomCells</span> <span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">)</span> <span class="p">(</span><span class="n">mkStdGen</span> <span class="mi">1234</span><span class="p">)</span>
</span><span class="line">      <span class="n">generation</span> <span class="ow">=</span> <span class="n">createGeneration</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class="line">   <span class="kr">in</span> <span class="n">loop</span> <span class="mi">40</span> <span class="n">generation</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notez <code>threadDelay</code>, pour faire une pause, qui prend un
nombre de micro-secondes ! Je ne sais pas si ça fonctionne à ce niveau de
granularité, mais ça m’impressionne.</p>

<p>Finalement, on peut compiler et lancer le programme \o/</p>

<pre><code>$ ghc -o gol Slice.hs GameOfLife.hs gol.hs
$ ./gol
</code></pre>

<p>Je vous rappelle que le code se trouve sur <a href="https://github.com/lkdjiin/game-of-life-haskell">Github</a> et que tous vos
commentaires sur ce code seront les bienvenus.</p>

<p>Voilà, j’en ai terminé avec Haskell. Je suis à la fois content, parce que
impatient de commencer la version Rust, et à la fois un peu triste parce que
je commence à peine à entrevoir les possibilités de Haskell. J’espère être en
mesure de me dégager un peu de temps pour continuer à étudier ce langage.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/">Le jeu de la vie en Haskell - partie 3</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/">Le jeu de la vie en Haskell - partie 2</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/">Le jeu de la vie en Haskell - partie 1</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/"/>
    <updated>2014-12-30T08:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Cette fois je met des tests en place avec <a href="https://www.haskell.org/haskellwiki/HUnit_1.0_User%27s_Guide">HUnit</a>.
Pour cela, je dois d’abord <em>modulariser</em> mon code. J’ai donc déplacé le code
de la dernière fois, sans la fonction <code>main</code>, dans un fichier <code>GameOfLife</code>.
Puis j’ai ajouté la déclaration du module.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>GameOfLife.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">module</span> <span class="nn">GameOfLife</span>
</span><span class="line"><span class="p">(</span> <span class="nf">randomCells</span>
</span><span class="line"><span class="p">,</span> <span class="nf">createGeneration</span>
</span><span class="line"><span class="p">,</span> <span class="nf">formatGeneration</span>
</span><span class="line"><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">
</span><span class="line"><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class="line">
</span><span class="line"><span class="kr">type</span> <span class="kt">Cell</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class="line"><span class="kr">type</span> <span class="kt">Generation</span> <span class="ow">=</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class="line"><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span><span class="line">
</span><span class="line"><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Generation</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="n">width</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">line</span><span class="kt">:</span><span class="p">(</span><span class="n">createGeneration</span> <span class="n">width</span> <span class="n">rest</span><span class="p">)</span>
</span><span class="line">  <span class="kr">where</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">=</span> <span class="n">splitAt</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class="line">
</span><span class="line"><span class="nf">formatGeneration</span> <span class="ow">::</span> <span class="kt">Generation</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class="line"><span class="nf">formatGeneration</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">intercalate</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">concatMap</span> <span class="n">show</span><span class="p">)</span> <span class="n">generation</span><span class="p">)</span>
</span><span class="line">   <span class="kr">in</span> <span class="n">map</span> <span class="n">replaceChar</span> <span class="n">rows</span>
</span><span class="line">
</span><span class="line"><span class="nf">replaceChar</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">Char</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="sc">&#39;1&#39;</span> <span class="ow">=</span> <span class="sc">&#39;@&#39;</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="sc">&#39;0&#39;</span> <span class="ow">=</span> <span class="sc">&#39; &#39;</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Une déclaration de module, c’est ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">module</span> <span class="nn">GameOfLife</span>
</span><span class="line"><span class="p">(</span> <span class="nf">randomCells</span>
</span><span class="line"><span class="p">,</span> <span class="nf">createGeneration</span>
</span><span class="line"><span class="p">,</span> <span class="nf">formatGeneration</span>
</span><span class="line"><span class="p">)</span> <span class="kr">where</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’ai donc un module <code>GameOfLife</code> qui exporte, pour l’instant, trois fonctions.
Au fait, le code est sur <a href="https://github.com/lkdjiin/game-of-life-haskell">Github</a>.</p>

<p>Je vais créer la fonction <code>cellNextState</code>, je la rajoute donc dans les exports
du module:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">module</span> <span class="nn">GameOfLife</span>
</span><span class="line"><span class="p">(</span> <span class="nf">randomCells</span>
</span><span class="line"><span class="p">,</span> <span class="nf">createGeneration</span>
</span><span class="line"><span class="p">,</span> <span class="nf">formatGeneration</span>
</span><span class="line"><span class="p">,</span> <span class="nf">cellNextState</span>
</span><span class="line"><span class="p">)</span> <span class="kr">where</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et j’en crée une version qui ne fonctionne pas ;)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">cellNextState</span> <span class="ow">::</span> <span class="kt">Cell</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Cell</span>
</span><span class="line"><span class="nf">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span> <span class="ow">=</span> <span class="n">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est parti pour mon premier test en Haskell. Je crée un fichier
<code>GameOfLife_Test.hs</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>GameOfLife_Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">module</span> <span class="nn">GameOfLife_Test</span> <span class="kr">where</span>
</span><span class="line">
</span><span class="line"><span class="kr">import</span> <span class="nn">GameOfLife</span><span class="p">(</span><span class="n">cellNextState</span><span class="p">)</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Test.HUnit</span>
</span><span class="line">
</span><span class="line"><span class="nf">testCellNextState3</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class="line">  <span class="s">&quot;Gets live cell when neighborhood&#39;sum is 3&quot;</span> <span class="mi">1</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="n">runTestTT</span> <span class="n">testCellNextState3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est du bon vieux test unitaire à l’ancienne. Je mentirais en disant que
je trouve la syntaxe sexy.</p>

<pre><code>$ runhaskell GameOfLife_Test.hs 
### Error:                                
Prelude.undefined
Cases: 1  Tried: 1  Errors: 1  Failures: 0
Counts {cases = 1, tried = 1, errors = 1, failures = 0}
</code></pre>

<p>Bon, si maintenant ma fonction renvoie 1, le test devrait passer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span> <span class="ow">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ runhaskell GameOfLife_Test.hs 
Cases: 1  Tried: 1  Errors: 0  Failures: 0
Counts {cases = 1, tried = 1, errors = 0, failures = 0}
</code></pre>

<p>J’aimerais bien avoir une sortie en couleur. Si il y a moyen, je n’ai pas
encore trouvé…</p>

<p>Quoiqu’il en soit, je peux tester mon code Haskell, et ça c’est cool. Je vais
donc en finir avec <code>cellNextState</code> en faisant quelques tests de plus:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>GameOfLife_Test.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">module</span> <span class="nn">GameOfLife_Test</span> <span class="kr">where</span>
</span><span class="line">
</span><span class="line"><span class="kr">import</span> <span class="nn">GameOfLife</span><span class="p">(</span><span class="n">cellNextState</span><span class="p">)</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Test.HUnit</span>
</span><span class="line">
</span><span class="line"><span class="nf">testCellNextState3</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class="line">  <span class="s">&quot;Gets 1 when neighborhood&#39;s sum is 3&quot;</span>
</span><span class="line">  <span class="mi">1</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="nf">testCellNextState4AndAlive</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class="line">  <span class="s">&quot;Gets 1 when neighborhood&#39;s sum is 4 and cell is alive&quot;</span>
</span><span class="line">  <span class="mi">1</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">1</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="nf">testCellNextState4AndDead</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class="line">  <span class="s">&quot;Gets 0 when neighborhood&#39;s sum is 4 and cell is dead&quot;</span>
</span><span class="line">  <span class="mi">0</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="nf">testCellNextState6</span> <span class="ow">=</span> <span class="kt">TestCase</span> <span class="o">$</span> <span class="n">assertEqual</span>
</span><span class="line">  <span class="s">&quot;Gets 0 when neighborhood&#39;s sum is 6&quot;</span>
</span><span class="line">  <span class="mi">0</span> <span class="p">(</span><span class="n">cellNextState</span> <span class="mi">1</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="n">runTestTT</span> <span class="o">$</span> <span class="kt">TestList</span> <span class="p">[</span><span class="n">testCellNextState3</span><span class="p">,</span>
</span><span class="line">                            <span class="n">testCellNextState4AndAlive</span><span class="p">,</span>
</span><span class="line">                            <span class="n">testCellNextState4AndDead</span><span class="p">,</span>
</span><span class="line">                            <span class="n">testCellNextState6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ runhaskell GameOfLife_Test.hs 
### Failure in: 2                         
Gets 0 when neighborhood's sum is 4 and cell is dead
expected: 0
 but got: 1
### Failure in: 3                         
Gets 0 when neighborhood's sum is 6
expected: 0
 but got: 1
Cases: 4  Tried: 4  Errors: 0  Failures: 2
Counts {cases = 4, tried = 4, errors = 0, failures = 2}
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>GameOfLife.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">cellNextState</span> <span class="ow">::</span> <span class="kt">Cell</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Cell</span>
</span><span class="line"><span class="nf">cellNextState</span> <span class="n">cell</span> <span class="n">neighborhood</span>
</span><span class="line">  <span class="o">|</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">4</span> <span class="ow">=</span> <span class="n">cell</span>
</span><span class="line">  <span class="o">|</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="kr">where</span> <span class="n">total</span> <span class="ow">=</span> <span class="n">sum</span> <span class="n">neighborhood</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ runhaskell GameOfLife_Test.hs 
Cases: 4  Tried: 4  Errors: 0  Failures: 0
Counts {cases = 4, tried = 4, errors = 0, failures = 0}
</code></pre>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/">Le jeu de la vie en Haskell - partie 4</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/">Le jeu de la vie en Haskell - partie 2</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/">Le jeu de la vie en Haskell - partie 1</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/"/>
    <updated>2014-12-29T15:07:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Je vais commencer par une amélioration du code du
<a href="http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/">dernier article</a>
(merci <a href="https://twitter.com/julienXX">@julienXX</a> pour les indices).</p>

<p>La fonction <code>createGeneration</code> était comme ceci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="kt">[]</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">generation</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="n">cells</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class="line">    <span class="kr">let</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class="line">     <span class="kr">in</span> <span class="n">createGeneration</span> <span class="p">(</span><span class="n">drop</span> <span class="n">width</span> <span class="n">cells</span><span class="p">)</span> <span class="n">width</span> <span class="p">(</span><span class="n">line</span><span class="kt">:</span><span class="n">generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je l’ai transformé comme cela:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">type</span> <span class="kt">Cell</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class="line">
</span><span class="line"><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="n">width</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">line</span><span class="kt">:</span><span class="p">(</span><span class="n">createGeneration</span> <span class="n">width</span> <span class="n">rest</span><span class="p">)</span>
</span><span class="line">  <span class="kr">where</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">=</span> <span class="n">splitAt</span> <span class="n">width</span> <span class="n">cells</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Elle utilise maintenant <code>splitAt</code>, une fonction de base, qui simplifie la
transformation d’une liste en une liste de listes. J’ai aussi créé un type
<code>Cell</code>, qui me semble utile à des fins de documentation.</p>

<h2 id="affichage-dune-gnration">Affichage d’une génération</h2>

<p>Le sujet principal de cet article, c’est l’affichage d’une génération dans le
terminal. Voici ma solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class="line">
</span><span class="line"><span class="nf">formatGeneration</span> <span class="ow">::</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class="line"><span class="nf">formatGeneration</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">intercalate</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">concatMap</span> <span class="n">show</span><span class="p">)</span> <span class="n">generation</span><span class="p">)</span>
</span><span class="line">   <span class="kr">in</span> <span class="n">map</span> <span class="n">replaceChar</span> <span class="n">rows</span>
</span><span class="line">
</span><span class="line"><span class="nf">replaceChar</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">Char</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="sc">&#39;1&#39;</span> <span class="ow">=</span> <span class="sc">&#39;@&#39;</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="sc">&#39;0&#39;</span> <span class="ow">=</span> <span class="sc">&#39; &#39;</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En avant pour les explications pas à pas. <code>concat</code> concatène une liste de
<em>string</em> et <code>show</code> transforme un élément en <em>string</em>.</p>

<pre><code>&gt; concat ["1", "0"]
"10"
&gt; show 1
"1"
</code></pre>

<p>Je <em>mappe</em> la fonction <code>show</code> sur chaque élément d’une liste de nombres.</p>

<pre><code>&gt; map show [1,0]
["1","0"]
</code></pre>

<p>Puis je peux les concaténer.</p>

<pre><code>&gt; concat (map show [1,0])
"10"
</code></pre>

<p><code>concatMap</code> est un raccourci pour <code>concat (map ...)</code>.</p>

<pre><code>&gt; concatMap show [1,0]
"10"
</code></pre>

<p>On <em>mappe</em> le code précédent sur une génération complête.</p>

<pre><code>&gt; map (concatMap show) [[1,0], [0,0], [1,1]]
["10","00","11"]
</code></pre>

<p>Puis, grâce à <code>intercalate</code>, on joint les éléments avec un saut de ligne.</p>

<pre><code>&gt; import Data.List
&gt; intercalate "\n" (map (concatMap show) [[1,0], [0,0], [1,1]]) 
"10\n00\n11"
</code></pre>

<p>Pour ce qui est de <code>replaceChar</code>, l’exemple suivant parle de lui-même.</p>

<pre><code>&gt; :load gol.hs 
&gt; map replaceChar "10\n00\n11"
"@ \n  \n@@"
</code></pre>

<p>Voici le code actuel, n’hésitez pas à me faire part des améliorations possibles.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class="line">
</span><span class="line"><span class="kr">type</span> <span class="kt">Cell</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class="line">
</span><span class="line"><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span>
</span><span class="line"><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span><span class="line">
</span><span class="line"><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Cell</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="n">width</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">line</span><span class="kt">:</span><span class="p">(</span><span class="n">createGeneration</span> <span class="n">width</span> <span class="n">rest</span><span class="p">)</span>
</span><span class="line">  <span class="kr">where</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span> <span class="ow">=</span> <span class="n">splitAt</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class="line">
</span><span class="line"><span class="nf">formatGeneration</span> <span class="ow">::</span> <span class="p">[[</span><span class="kt">Cell</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class="line"><span class="nf">formatGeneration</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">rows</span> <span class="ow">=</span> <span class="n">intercalate</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">concatMap</span> <span class="n">show</span><span class="p">)</span> <span class="n">generation</span><span class="p">)</span>
</span><span class="line">   <span class="kr">in</span> <span class="n">map</span> <span class="n">replaceChar</span> <span class="n">rows</span>
</span><span class="line">
</span><span class="line"><span class="nf">replaceChar</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">Char</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="sc">&#39;1&#39;</span> <span class="ow">=</span> <span class="sc">&#39;@&#39;</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="sc">&#39;0&#39;</span> <span class="ow">=</span> <span class="sc">&#39; &#39;</span>
</span><span class="line"><span class="nf">replaceChar</span> <span class="n">c</span>   <span class="ow">=</span> <span class="n">c</span>
</span><span class="line">
</span><span class="line"><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span><span class="nb">()</span>
</span><span class="line"><span class="nf">main</span> <span class="ow">=</span>
</span><span class="line">    <span class="kr">let</span> <span class="n">width</span> <span class="ow">=</span> <span class="mi">80</span>
</span><span class="line">        <span class="n">height</span> <span class="ow">=</span> <span class="mi">24</span>
</span><span class="line">        <span class="n">cells</span> <span class="ow">=</span> <span class="n">randomCells</span> <span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="p">)</span> <span class="p">(</span><span class="n">mkStdGen</span> <span class="mi">123</span><span class="p">)</span>
</span><span class="line">        <span class="n">generation</span> <span class="ow">=</span> <span class="n">createGeneration</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class="line">     <span class="kr">in</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">formatGeneration</span> <span class="n">generation</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ runhaskell gol.hs
@@@    @  @ @@@ @@@@@@ @ @  @ @   @ @ @  @@@@   @   @@  @  @@@@ @ @ @@@ @@  @  @
  @  @ @@ @@@ @@@@  @@ @@@@ @ @@@    @@ @ @ @@  @          @ @@@ @ @@@ @@@ @  @ 
  @ @@@ @@ @ @@ @@      @   @@@  @@    @  @ @@ @@ @@@   @@@@@@     @@  @@@@ @@ @
[...]
</code></pre>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/">Le jeu de la vie en Haskell - partie 4</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/">Le jeu de la vie en Haskell - partie 3</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/">Le jeu de la vie en Haskell - partie 1</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Haskell - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1/"/>
    <updated>2014-12-28T18:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/28/le-jeu-de-la-vie-en-haskell-partie-1</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<h2 id="premire-rencontre-avec-haskell">Première rencontre avec Haskell</h2>

<p>L’histoire qui suit a du arriver à de nombreux développeurs rencontrant Haskell
pour la première fois.</p>

<p>— Bon, comment produire un nombre aléatoire ?<br />
— Ah OK, je vois.<br />
— Euh, attends, tu veux dire que je dois passer un générateur avec une <em>seed</em> à
chaque fois ?<br />
— Ah OK, c’est l’histoire des fonctions <em>pures</em>, quand tu as le même argument en
entrée, tu produis <strong>toujours</strong> la même valeur en sortie. Du coup, tu ne peux
pas avoir une fonction <code>random</code> qui te sortirait une valeur différente à chaque
appel. Oui, d’accord, c’est logique.<br />
— Ah mais non, attends, je fais comment pour lui donner une <em>seed</em> différente à
chaque lancement du programme ? Ah, bin oui, j’ai qu’a prendre l’heure système,
ou un truc comme ça.<br />
— Comment ça le générateur n’accepte pas mon heure système comme <em>seed</em> !?
— Comment ça c’est pas le bon type ?! Qu’est-ce que c’est que cette histoire de
monade IO ? Qu’est-ce que c’est que ce langage où je ne peux pas convertir
l’heure système en un entier qui me servirait à quelque chose ???!!!</p>

<p>Bref, bonjour Haskell…</p>

<!-- more -->

<h2 id="cration-dune-gnration">Création d’une génération</h2>

<p>Toute cette histoire n’est peut-être pas si importante. Une fois
accepté que Haskell a certainement une bonne raison de ne pas nous laisser faire
une chose particulière, on peut avancer. Finalement, si je produis toujours les
mêmes nombres, ça devrait être plus simple pour tester.</p>

<p>Le code suivant produit une liste de <code>0</code> et de <code>1</code>. En entrée, la fonction
prend la taille de la liste et un générateur de nombre aléatoire.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class="line">
</span><span class="line"><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class="line"><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour essayer ce code, j’utilise <code>ghci</code>, le REPL Haskell. C’est une vieille
version qui était déjà installée sur ma machine.</p>

<pre><code>$ ghci
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
</code></pre>

<p>Dans <code>ghci</code>, on charge notre fichier avec <code>:l gol.hs</code>. (<code>:l</code> est l’abbréviation
de <code>:load</code>).</p>

<pre><code>Prelude&gt; :l gol.hs 
[1 of 1] Compiling Main             ( gol.hs, interpreted )
Ok, modules loaded: Main.
</code></pre>

<p>On va produire une liste de 12 nombres. Pour obtenir un générateur de nombre
aléatoire, on utilise <code>mkStdGen</code>, que j’initialise ici avec le nombre <code>4567</code>.</p>

<pre><code>*Main&gt; randomCells 12 (mkStdGen 4567)
[1,0,1,0,1,1,1,1,1,0,1,0]
</code></pre>

<p>Alors, on pourrait s’arrêter là pour la création des cellules. On pourrait très
bien se débrouiller avec une liste simple. Mais je préfère quand même avoir une
liste de listes (une liste de rangées).</p>

<p>Voilà donc une jolie fonction récursive <code>createGeneration</code> qui prend en entrée
la liste de cellules aléatoires, la largeur d’une rangée, et la génération en
cours de production (l’accumulateur).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="kt">[]</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">generation</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="n">cells</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class="line">    <span class="kr">let</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class="line">     <span class="kr">in</span> <span class="n">createGeneration</span> <span class="p">(</span><span class="n">drop</span> <span class="n">width</span> <span class="n">cells</span><span class="p">)</span> <span class="n">width</span> <span class="p">(</span><span class="n">line</span><span class="kt">:</span><span class="n">generation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>*Main&gt; let cells = randomCells 12 (mkStdGen 4567)
*Main&gt; createGeneration cells 4 []
[[1,0,1,0],[1,1,1,1],[1,0,1,0]]
</code></pre>

<p>Pour finir, voici le listing complet du fichier <code>gol.hs</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gol.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class="line">
</span><span class="line"><span class="nf">randomCells</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">StdGen</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class="line"><span class="nf">randomCells</span> <span class="n">size</span> <span class="n">gen</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">size</span> <span class="o">$</span> <span class="n">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">gen</span>
</span><span class="line">
</span><span class="line"><span class="nf">createGeneration</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="kt">[]</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span> <span class="n">generation</span>
</span><span class="line"><span class="nf">createGeneration</span> <span class="n">cells</span> <span class="n">width</span> <span class="n">generation</span> <span class="ow">=</span>
</span><span class="line">    <span class="kr">let</span> <span class="n">line</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">width</span> <span class="n">cells</span>
</span><span class="line">     <span class="kr">in</span> <span class="n">createGeneration</span> <span class="p">(</span><span class="n">drop</span> <span class="n">width</span> <span class="n">cells</span><span class="p">)</span> <span class="n">width</span> <span class="p">(</span><span class="n">line</span><span class="kt">:</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">main</span> <span class="ow">=</span>
</span><span class="line">    <span class="kr">let</span> <span class="n">cells</span> <span class="ow">=</span> <span class="n">randomCells</span> <span class="mi">12</span> <span class="p">(</span><span class="n">mkStdGen</span> <span class="mi">123</span><span class="p">)</span>
</span><span class="line">     <span class="kr">in</span> <span class="n">print</span> <span class="p">(</span><span class="n">createGeneration</span> <span class="n">cells</span> <span class="mi">4</span> <span class="kt">[]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>$ runhaskell gol.hs 
[[0,0,1,0],[0,0,0,1],[1,1,1,0]]
</code></pre>

<p>Comme il s’agit de mon tout premier code en Haskell, n’hésitez surtout pas à me
remonter mes erreurs, ou bien des trucs pour améliorer le code.</p>

<p><strong>P.S.</strong></p>

<p>Vous avez peut-être remarqué que je n’ai pas écrit de tests ?
J’avais remarqué <a href="http://hspec.github.io/">Hspec</a>, que j’aurais aimé utilisé.
Mais <code>cabal</code> refuse de l’installer. Je pense que ma version d’Haskell est trop
datée et qu’il me faudrait refaire une installation sans passer par les paquets
de mon OS. Je sais qu’il y a <a href="https://www.haskell.org/haskellwiki/HUnit_1.0_User%27s_Guide">HUnit</a>
de base, mais ça m’a l’air bien compliqué à mettre en place pour mon niveau de
débutant. Si je continue Haskell après avoir écrit le jeu de la vie, il est sûr
que je m’y mettrais.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-4/">Le jeu de la vie en Haskell - partie 4</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/30/le-jeu-de-la-vie-en-haskell-partie-3/">Le jeu de la vie en Haskell - partie 3</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/29/le-jeu-de-la-vie-en-haskell-partie-2/">Le jeu de la vie en Haskell - partie 2</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.2 - Une sélection des nouvelles méthodes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/27/ruby-2-dot-2-une-selection-des-nouvelles-methodes/"/>
    <updated>2014-12-27T15:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/27/ruby-2-dot-2-une-selection-des-nouvelles-methodes</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Ça y est, noël est passé et Ruby 2.2.0 est arrivé.
Je vous ai préparé une sélection (personnelle) des nouveautés de cette dernière
version de Ruby.</p>

<p>Vous pouvez voir la liste exhaustive des changements ici:
<a href="https://github.com/ruby/ruby/blob/v2_2_0/NEWS">ruby v2.2.0 NEWS</a></p>

<!-- more -->

<h2 id="les-symboles-pour-les-cls-dun-hash-peuvent-tre-entre-guillemets">Les symboles pour les clés d’un Hash peuvent être entre guillemets</h2>

<p>Ce qui autorise l’utilisation des espaces.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;foo bar&quot;</span><span class="p">:</span> <span class="s2">&quot;baz&quot;</span> <span class="p">}</span>
</span><span class="line"><span class="go">=&gt; {:&quot;foo bar&quot;=&gt;&quot;baz&quot;}</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">hash</span><span class="o">[</span><span class="ss">:&quot;foo bar&quot;</span><span class="o">]</span>
</span><span class="line"><span class="go">=&gt; &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="enumerableslicewhen">Enumerable#slice_when</h2>

<p>J’ai le tableau suivant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je veux rassembler ensemble les séries de nombre qui se suivent. Autrement dit,
je veux obtenir ceci:</p>

<pre><code>[ [1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21] ]
</code></pre>

<p><code>slice_when</code> me fait ça facilement:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">slice_when</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">|</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">j</span> <span class="p">}</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line"><span class="go">=&gt; [[1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="max-et-min-peuvent-retourner-plusieurs-valeurs">max et min peuvent retourner plusieurs valeurs</h2>

<p>Plutôt que d’obtenir la seule et unique valeur limite, on peut maintenant
obtenir une liste.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">max</span>
</span><span class="line"><span class="go">=&gt; 3</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">max</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="go">=&gt; [3, 2]</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">max</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="go">=&gt; [3, 3]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="methodcurry">Method#curry</h2>

<p>Tout d’abord, voici une méthode <code>add</code>, qui prend 3 arguments:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class="line">  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On <em>currifie</em> cette méthode:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">proc</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:add</span><span class="p">)</span><span class="o">.</span><span class="n">curry</span>
</span><span class="line"><span class="go">=&gt; #&lt;Proc:0x8f945a4 (lambda)&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je peux maintenant l’appliquer partiellement:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">proc</span> <span class="o">=</span> <span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="go">=&gt; #&lt;Proc:0x9407dfc (lambda)&gt;</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="go">=&gt; 6</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="go">=&gt; 13</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="la-lib-etc">La lib Etc</h2>

<p>Pour finir, voici deux nouvelles méthodes de la bibliothèque standard <code>Etc</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;etc&#39;</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Etc</span><span class="o">.</span><span class="n">uname</span>
</span><span class="line"><span class="go">=&gt; {:sysname=&gt;&quot;Linux&quot;, ... }</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="no">Etc</span><span class="o">.</span><span class="n">nprocessors</span>
</span><span class="line"><span class="go">=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/">Une machine de Turing en Ruby - Le parser</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem/">Mieux utiliser le programme gem</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le jeu de la vie en Julia - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/12/26/le-jeu-de-la-vie-en-julia-partie-3/"/>
    <updated>2014-12-26T15:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/12/26/le-jeu-de-la-vie-en-julia-partie-3</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>C’est la troisième et dernière partie du jeu de la vie en Julia. Déjà.
J’aime tellement découvrir et utiliser ce langage que ça me rend triste.</p>

<p>Tout d’abord, le code du <a href="https://github.com/lkdjiin/game-of-life-julia">jeu de la vie en Julia</a>
est disponible sur Github, pour celles et ceux qui veulent y jeter un oeil.</p>

<h2 id="calculer-la-gnration-suivante">Calculer la génération suivante</h2>

<p>Maintenant, en avant pour la suite. Encore une fonction, et ça sera terminé. Il faut calculer la génération
suivante à partir de la génération courante:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>test.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">generation</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class="line">               <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class="line">               <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class="line">               <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c"># ...</span>
</span><span class="line">
</span><span class="line"><span class="p">@</span><span class="n">test</span> <span class="n">Generation</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class="line">                                       <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class="line">                                       <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class="line">                                       <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>generation.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="kr">module</span> <span class="n">Generation</span>
</span><span class="line">
</span><span class="line"><span class="n">using</span> <span class="o">..</span><span class="n">Neighborhood</span><span class="p">:</span> <span class="n">extract</span><span class="p">,</span> <span class="n">state</span>
</span><span class="line"><span class="n">using</span> <span class="o">..</span><span class="n">Cell</span>
</span><span class="line">
</span><span class="line"><span class="c"># ...</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">duplicate</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span>
</span><span class="line">        <span class="k">for</span> <span class="n">y</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span>
</span><span class="line">            <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">            <span class="n">newstate</span> <span class="o">=</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class="line">            <span class="n">duplicate</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">newstate</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">duplicate</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le code est un peu plus complexe que dans les 2 premiers articles, et il m’a
fallu un peu de temps avant de réussir à utiliser les modules.</p>

<p>Je vais utiliser les fonctions <code>extract</code> et <code>state</code> du module <code>Neighborhood</code>,
module qui est défini dans le module parent, d’où les <code>..</code>.</p>

<pre><code>using ..Neighborhood: extract, state
</code></pre>

<p>Je crée un nouveau tableau, aux mêmes dimensions que <code>generation</code>, et remplis
de zéros.</p>

<pre><code>duplicate = zeros(generation)
</code></pre>

<p>Ensuite, c’est une boucle dans une boucle qui se sert du code des articles
précédents, avant de renvoyer le tableau <code>duplicate</code>. C’est pas très beau, mais
comme le test passe, ça me va pour l’instant.</p>

<p>Il reste à se servir de ce code dans le fichier principal:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">include</span><span class="p">(</span><span class="s">&quot;neighborhood.jl&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">include</span><span class="p">(</span><span class="s">&quot;cell.jl&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">include</span><span class="p">(</span><span class="s">&quot;generation.jl&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">include</span><span class="p">(</span><span class="s">&quot;display.jl&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="nf"> main</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">number_of_generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">generation</span> <span class="o">=</span> <span class="n">Generation</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">number_of_generation</span>
</span><span class="line">        <span class="n">Display</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">        <span class="n">sleep</span><span class="p">(</span><span class="mf">0.8</span><span class="p">)</span>
</span><span class="line">        <span class="n">generation</span> <span class="o">=</span> <span class="n">Generation</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà, c’est terminé ! Le reste de l’article se consacre à l’amélioration
de la fonction <code>Generation.next</code>.</p>

<h2 id="un-peu-de-refactoring">Un peu de refactoring</h2>

<p>Pour améliorer <code>Generation.next</code>, il y a la fonction
<a href="http://julia.readthedocs.org/en/latest/stdlib/base/#Base.eachindex">eachindex</a>,
malheureusement elle n’est pas encore disponible dans la dernière version stable.
J’ai donc cherché autre chose.</p>

<p>Ma première tentative : utiliser une compréhension de liste avec <code>reshape</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">duplicate</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">indexes</span> <span class="o">=</span> <span class="n">reshape</span><span class="p">([(</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="k">for</span> <span class="n">h</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span><span class="p">,</span> <span class="n">w</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span><span class="p">],</span> <span class="n">length</span><span class="p">(</span><span class="n">generation</span><span class="p">))</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">in</span> <span class="n">indexes</span>
</span><span class="line">        <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">        <span class="n">newstate</span> <span class="o">=</span> <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class="line">        <span class="n">duplicate</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">newstate</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">duplicate</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>La compréhension de liste génère la liste des indexs:</p>

<pre><code>julia&gt; [(h,w) for h in 1:3, w in 1:4]
3x4 Array{(Int32,Int32),2}:
 (1,1)  (1,2)  (1,3)  (1,4)
 (2,1)  (2,2)  (2,3)  (2,4)
 (3,1)  (3,2)  (3,3)  (3,4)
</code></pre>

<p>Et <code>reshape</code> change les dimensions du tableau, ici pour une seule dimension de la bonne longueur:</p>

<pre><code>julia&gt; reshape([(h,w) for h in 1:3, w in 1:4], 3 * 4)
12-element Array{(Int32,Int32),1}:
 (1,1)
 (2,1)
 (3,1)
 (1,2)
 (2,2)
 (3,2)
 (1,3)
 (2,3)
 (3,3)
 (1,4)
 (2,4)
 (3,4)
</code></pre>

<p>Vous avez peut-être remarqué le pattern (a-t-il un nom ?):</p>

<ol>
  <li>Création d’une variable</li>
  <li>Transformation de cette variable</li>
  <li>Renvoi de la variable</li>
</ol>

<p>En général, on peut se passer de la création et du retour explicite en utilisant
un <code>map</code>. Ici, j’ai créé une fonction <code>newstate</code> à l’intérieur de <code>next</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">indexes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="k">for</span> <span class="n">h</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span><span class="p">,</span> <span class="n">w</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span><span class="p">]</span>
</span><span class="line">    <span class="k">function</span><span class="nf"> newstate</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">        <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">        <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">map</span><span class="p">((</span><span class="n">yx</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">newstate</span><span class="p">(</span><span class="n">first</span><span class="p">(</span><span class="n">yx</span><span class="p">),</span> <span class="n">last</span><span class="p">(</span><span class="n">yx</span><span class="p">)),</span> <span class="n">indexes</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut simplifier la fonction anonyme à l’aide du <em>splat</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line">  <span class="n">map</span><span class="p">((</span><span class="n">yx</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">newstate</span><span class="p">(</span><span class="n">yx</span><span class="o">...</span><span class="p">),</span> <span class="n">indexes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finalement, deux fonctions séparées me semble bien plus lisibles:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="k">function</span><span class="nf"> next</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class="line">    <span class="n">indexes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">height</span><span class="p">,</span> <span class="n">x</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">width</span><span class="p">]</span>
</span><span class="line">    <span class="n">map</span><span class="p">((</span><span class="n">yx</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">newstate</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">yx</span><span class="o">...</span><span class="p">),</span> <span class="n">indexes</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="nf"> newstate</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">    <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">    <span class="n">Cell</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">generation</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">state</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">))</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà. Le code est disponible sur Gitub : <a href="https://github.com/lkdjiin/game-of-life-julia">le jeu de la vie en Julia</a>.</p>

<p>La prochaine fois, ce sera du Haskell.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/12/24/le-jeu-de-la-vie-en-julia-partie-2/">Le jeu de la vie en Julia - partie 2</a></li><li><a href="http://lkdjiin.github.io/blog/2014/12/23/le-jeu-de-la-vie-en-julia-partie-1/">Le jeu de la vie en Julia - partie 1</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/22/je-ne-vais-pas-terminer-le-jeu-de-la-vie-en-rust/">Je ne vais pas terminer le jeu de la vie en Rust</a></li></ul></section>
]]></content>
  </entry>
  
</feed>
