<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-28T21:38:58+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - extend self]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/"/>
    <updated>2014-03-28T21:16:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous débutez en Ruby et vous vous demandez ce que peut bien signifier
ce <code>extend self</code> qu&#8217;on rencontre parfois dans un module utilitaire ?</p>

<!-- more -->


<p>Voici un exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="c1">#=&gt; foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne <code>extend self</code> nous permet de définir toutes les méthodes du
module comme étant des méthodes de classe. C&#8217;est pas plus compliqué que
ça.</p>

<p>On aurait pu écrire à la place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou bien encore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a quand même une subtilité qui fait toute la différence !
Sinon ça ne serait pas drôle. En utilisant la syntaxe <code>extend self</code>,
<strong>toutes les méthodes sont des méthodes de classe</strong>, ou de module si
vous préférez ;) La différence est importante puisqu&#8217;ainsi on ne pourra
pas mélanger méthodes utilitaires et méthodes à inclure dans une classe.
Ce qui est parfois tentant, mais c&#8217;est mal. Mais tentant. Mais mal…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord - Executer une commande SQL quelconque]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque/"/>
    <updated>2014-03-27T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Chaque SGBD (Systême de Gestion de Base de Données), comme postgresql ou
mysql par exemple, définissent des tables avec des infos très
intéressantes (appelées meta-data, shéma, catalogue, etc.).</p>

<p>Ces <em>méta-données</em> ne sont pas reliées à un modèle ActiveRecord, alors
comment y accéder si vous en avez besoin ?</p>

<!-- more -->


<p>En utilisant la méthode <code>execute</code> sur la méthode <code>connection</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;ma requete SQL&quot;</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>result</code> possède maintenant les lignes dont vous aviez tant besoin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">row</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/13/un-editeur-pour-le-terminal-partie-9/'>Un éditeur pour le terminal &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Comment ouvrir la fenêtre courante dans un nouvel onglet]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/"/>
    <updated>2014-03-26T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous avez un écran bien large ? Vous travaillez régulierement avec 4 ou 5
fenêtres dans le même onglet, voir plus ?
Parfois vous aimeriez bien ouvrir rapidement une de ces fenêtres dans un
nouvel onglet ?</p>

<!-- more -->


<p>Alors ça va peut-être bien être l&#8217;article le plus court de l&#8217;histoire de ce
blog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">tab</span> <span class="k">sp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et la fenêtre courante s&#8217;ouvre dans un nouvel onglet (<code>sp</code> est l&#8217;abréviation
de <code>split</code>).</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/'>Vim &ndash; Un plugin minimal pour les titres markdown</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/"/>
    <updated>2014-03-25T19:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Comme me le faisait remarquer ce matin un lecteur, il manque un cas à
mon article d&#8217;hier sur l&#8217;utilisation de <code>super</code> en Ruby. C&#8217;est d&#8217;autant
plus impardonnable que c&#8217;est un cas où, pour une fois, les parenthèses
sont <strong>obligatoires</strong> à la fin d&#8217;une méthode.</p>

<!-- more -->


<p>Voici donc une classe de base et une classe fille:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Base#foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Child#foo with </span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant on essaye le tout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="c1">#=&gt; ArgumentError: wrong number of arguments (0 for 1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boum ! Comme on l&#8217;a vu hier, <code>super</code> passe automatiquement tous les
paramètres de la méthode dans laquelle il est appelé vers la classe
de base. Et là, notre méthode <code>foo</code> dans la classe de base est sans
argument.</p>

<p>Pour résoudre ce problème, on est obligé de mettre des parenthèses
à la suite de <code>super</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Child#foo with </span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;ok&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Base</span><span class="c1">#foo</span>
</span><span class='line'><span class="no">Child</span><span class="c1">#foo with ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, oubli réparé.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/'>Quelques trucs pour lancer Rspec</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/"/>
    <updated>2014-03-24T21:21:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui un aperçu de la méthode <code>super</code> pour les débutants en Ruby.
C&#8217;est une méthode dont le comportement peut surprendre si vous venez
de certains autres langages…</p>

<!-- more -->


<p>Pour étudier le comportement de <code>super</code> il va nous falloir utiliser
l&#8217;héritage. Voici une classe de base toute simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> from Base&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici comment l&#8217;utiliser:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="no">Base</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">base</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Base</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant créons une classe fille qui hérite de <code>Base</code> et
<em>redéfinissons</em> la méthode <code>foo</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> from Child&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici ce que ça donne:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Base</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Child</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter que:</p>

<ol>
<li>La méthode éponyme <code>foo</code> de la classe de base n&#8217;est pas appelée
implicitement. Il faut le faire explicitement avec <code>super</code>.</li>
<li>On est pas limité à un <em>constructeur</em>, on peut appeler <code>super</code> dans
une <em>simple</em> méthode.</li>
<li>Dans ce cas précis, pas besoin de passer l&#8217;argument <code>bar</code> à la
méthode <code>super</code>, c&#8217;est fait <strong>automagiquement</strong>.</li>
</ol>


<p>Allons plus loin et faisons faire plus de choses à la méthode <code>foo</code> de la
classe fille:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">baz</span><span class="si">}</span><span class="s2"> from Child&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois-ci la magie n&#8217;opère plus et nous avons droit à une belle erreur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; super.rb:2:in `foo&#39;: wrong number of arguments (2 for 1) (ArgumentError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby nous signale que la méthode <code>foo</code> de la classe <code>Base</code> a reçu 2
arguments, alors qu&#8217;elle n&#8217;en attendait qu&#8217;un seul ! Pourquoi, alors que
nous n&#8217;avons même pas passé un seul argument ? Parce que <code>super</code>, sans
arguments, prends <strong>tous</strong> les arguments passés à la méthode dans
laquelle il se trouve et les envoient tous vers la méthode éponyme de la
classe de base…</p>

<p>Alors comment on s&#8217;en sort ? Très simplement en passant à <code>super</code> les
paramètres que l&#8217;on veut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">baz</span><span class="si">}</span><span class="s2"> from Child&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et cette fois-ci, ça fonctionne parfaitement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Base</span>
</span><span class='line'><span class="c1">#=&gt; Hello world from Child</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/'>Quelques trucs pour lancer Rspec</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/"/>
    <updated>2014-03-23T20:57:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On fait un peu de nettoyage en mettant du code en commun, et on voit un
mapping plus intéressant.</p>

<!-- more -->


<p>Voici ce que ça donne après un refactoring:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> <span class="k">s</span>:build_big_title<span class="p">(</span>char<span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">s</span>:line_content <span class="p">=</span> substitute<span class="p">(</span>getline<span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">a</span>:char<span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">s</span>:line_content<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="k">s</span>:build_little_title<span class="p">(</span>str<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> setline<span class="p">(</span>line<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span> <span class="k">a</span>:str . getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span>level<span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">1</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">2</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">3</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">4</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;#### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">5</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;##### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">6</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;###### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>plugin/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownTitle1 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle2 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle3 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle4 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">4</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle5 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle6 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">6</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On n&#8217;a plus qu&#8217;un seule fonction <code>quickmarkdown#title</code>, à laquelle on passe
en paramêtre le niveau du titre.</p>

<p>J&#8217;ai aussi changé le mapping.
Tout d&#8217;abord j&#8217;utilise leader+q, au lieu de leader+m. Pourquoi, parce que
je voulais m&#8217;en servir aussi en mode insertion avec la touche Control. Et
en mode insertion, Control+m est équivalent à la touche Entrée, ce qui pose
bien sûr quelques problèmes ;) Voici le mapping pour un clavier qwerty:</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q1 :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q2 :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q3 :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q4 :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q5 :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q6 :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">1</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">2</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">3</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">4</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">5</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">6</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au fait, vous pouvez trouver ce plugin sur <a href="https://github.com/lkdjiin/quickmarkdown">Github</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/'>Vim &ndash; un plugin pour markdown &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/"/>
    <updated>2014-03-22T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant on fait tous les titres, jusqu&#8217;au niveau 6 donc.</p>

<!-- more -->




<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> <span class="k">s</span>:build_big_title<span class="p">(</span>char<span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">s</span>:line_content <span class="p">=</span> substitute<span class="p">(</span>getline<span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">a</span>:char<span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">s</span>:line_content<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="k">s</span>:build_little_title<span class="p">(</span>str<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> setline<span class="p">(</span>line<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span> <span class="k">a</span>:str . getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title2<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title3<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title4<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;#### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title5<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;##### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title6<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;###### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>plugin/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownTitle1 <span class="k">call</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle2 <span class="k">call</span> quickmarkdown#title2<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle3 <span class="k">call</span> quickmarkdown#title3<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle4 <span class="k">call</span> quickmarkdown#title4<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle5 <span class="k">call</span> quickmarkdown#title5<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle6 <span class="k">call</span> quickmarkdown#title6<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai aussi changé mon mapping pour qu&#8217;il soit plus homogène.</p>

<p><strong>En qwerty:</strong></p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m1 :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m2 :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m3 :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m4 :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m5 :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m6 :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>En azerty:</strong></p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&amp; :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>é :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&quot; :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&#39; :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">(</span> :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">-</span> :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>En bépo:</strong></p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&quot; :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>« :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>» :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">(</span> :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">)</span> :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>@ :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/'>Vim &ndash; Un plugin pour markdown &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis - Comment supprimer un ensemble de clés]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/21/redis-comment-supprimer-un-ensemble-de-cles/"/>
    <updated>2014-03-21T21:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/21/redis-comment-supprimer-un-ensemble-de-cles</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Tiens, mon premier article sur Redis ! Normal, c&#8217;est une technologie que
j&#8217;ai découvert il y a peu…</p>

<!-- more -->


<p>Pour supprimer une clé dans Redis, on se connecte et on utilise la commande
<code>del</code>:</p>

<pre><code>$ redis-cli
&gt; del "nom:de:la:clef"
</code></pre>

<p>Mais quand on a des dizaines/centaines de clés, bof… Bien souvent (toujours
même ça vaut mieux) le nom des clés suit un motif. Par exemple:</p>

<pre><code>"motif:foo"
"motif:bar"
"motif:baz"
etc...
</code></pre>

<p>Dans ce cas on peut utiliser Bash pour s&#8217;en sortir rapidement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis-cli keys <span class="s2">&quot;*motif*&quot;</span> | xargs redis-cli del
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, au revoir toutes les clés.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande/'>Astuce pour Git &ndash; merge et checkout en une commande</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/12/quelques-commandes-git-par-michael-hartl/'>Quelques commandes Git par Michael Hartl</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques trucs pour lancer Rspec]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/"/>
    <updated>2014-03-20T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><a href="http://rspec.info/">Rspec</a> est un framework de test très utilisé dans le monde Ruby.
Il y a bien des manières différentes de le lancer et aujourd&#8217;hui on
voit quelques options basiques qu&#8217;on peut utiliser tous les jours.</p>

<!-- more -->


<p>Tout d&#8217;abord, on peut lancer Rspec avec ses options par défaut:</p>

<pre><code>$ rspec spec/
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>À noter que le programme repose, comme souvent dans l&#8217;éco-système Ruby,
sur certaines conventions. Si le répertoire qui comporte vos tests est
nommé <code>spec</code>, vous pouvez vous contentez de:</p>

<pre><code>$ rspec
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>Parfois, on a envie de voir le nom des tests, plutôt que des petits points:</p>

<pre><code>$ rspec --format=documentation spec/
Coco::Configuration
  should respond to #user_wants_to_run?
  with no config file
    should give a default threshold of 100%
    should give a default list of directories
    should give an empty default list of files to excludes
    should give false for 'single_line_report'
    #user_wants_to_run? returns true
    give false for 'show_link_in_terminal'
[...]
Finished in 0.08854 seconds
65 examples, 0 failures
</code></pre>

<p>Nos tests doivent fonctionner en isolation, le résultat doit être le même
quel que soit l&#8217;ordre:</p>

<pre><code>$ rspec --order=random spec/
.................................................................
Finished in 0.08785 seconds
65 examples, 0 failures
Randomized with seed 8689
</code></pre>

<p>Vous pouvez mettre ses options, et d&#8217;autres, dans un fichier <code>.rspec</code> à la
racine de votre projet pour qu&#8217;elles deviennent les options par défaut.
Par exemple, le fichier suivant vous donnera une sortie en couleur et des
tests joués aléatoirement à chaque lancement de <code>rspec</code>:</p>

<figure class='code'><figcaption><span>.rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">--color</span>
</span><span class='line'><span class="err">--order=random</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour lancer les tests d&#8217;un seul fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb 
.......................
Finished in 0.03708 seconds
23 examples, 0 failures
</code></pre>

<p>Pour lancer un seul test, ajouter le numéro de la ligne derrière le nom du
fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb:41
Run options: include {:locations=&gt;{"./spec/configuration_spec.rb"=&gt;[41]}}
Coco::Configuration
  with no config file
    #user_wants_to_run? returns true
Finished in 0.00333 seconds
1 example, 0 failures
</code></pre>

<p>Pour terminer ce <em>Rspec basics</em>, on peut désactiver un test en écrivant <code>xit</code>
à la place de <code>it</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">xit</span> <span class="s2">&quot;should give a default threshold of 100%&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@config</span><span class="o">[</span><span class="ss">:threshold</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un badge pour la documentation pour vos projets Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby/"/>
    <updated>2014-03-19T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Un nouveau badge à afficher dans vos README vient de voir le jour. Celui-ci
est consacré à la documentation du code Ruby.</p>

<!-- more -->


<p>Le projet s&#8217;appelle <a href="http://inch-pages.github.io/">inch-pages</a> et s&#8217;appuie
sur la gem <a href="http://trivelop.de/inch/">inch</a>.</p>

<p>Parmi les utilisateurs ont notera entre autre Haml, Pry, Reek, Rubocop
et Tweeter.</p>

<p>N&#8217;hésitez pas à l&#8217;utiliser pour faire savoir au monde entier que vos projets
sont bien documentés ;)</p>

<p>Pour ma part, je vais tester ça dès que possible…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le format JSON et les caractères de fin de lignes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/18/le-format-json-et-les-caracteres-de-fin-de-lignes/"/>
    <updated>2014-03-18T21:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/18/le-format-json-et-les-caracteres-de-fin-de-lignes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans un fichier au format JSON, on ne met pas tout ce qu&#8217;on veut…
Notamment en ce qui concerne les caractères de fin de ligne et les
tabulations.</p>

<!-- more -->


<p>En effet, ceux-ci ne sont pas autorisés à l&#8217;intérieur des chaines de
caractères. Voici un exemple.</p>

<p>Tout d&#8217;abord, pas de caractères spéciaux:</p>

<figure class='code'><figcaption><span>doc.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;item&quot;</span> <span class="p">:</span> <span class="s2">&quot;article&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ rvm use 2.1.0</span>
</span><span class='line'><span class="go">Using /home/xavier/.rvm/gems/ruby-2.1.0</span>
</span><span class='line'><span class="go">$ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="go">=&gt; file = IO.read File.expand_path(&#39;./doc.json&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">file</span>
</span><span class='line'><span class="go">=&gt; {&quot;item&quot;=&gt;&quot;Article&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout va bien.</p>

<p>Maintenant avec des caractères de fin de lignes échappés:</p>

<figure class='code'><figcaption><span>doc.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;item&quot;</span> <span class="p">:</span> <span class="s2">&quot;article\ndescription\nprice&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">=&gt; file = IO.read File.expand_path(&#39;./doc.json&#39;)</span>
</span><span class='line'><span class="go">=&gt; &quot;{\n  \&quot;item\&quot; : \&quot;article\\ndescription\\nprice\&quot;\n}\n&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">file</span>
</span><span class='line'><span class="go">=&gt; {&quot;item&quot;=&gt;&quot;article\ndescription\nprice&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est toujours bon.</p>

<p>Par contre, avec des fins de lignes «en dur» dans le fichier:</p>

<figure class='code'><figcaption><span>doc.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;item&quot;</span> <span class="p">:</span> <span class="s2">&quot;Article</span>
</span><span class='line'><span class="s2">    description</span>
</span><span class='line'><span class="s2">    price&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">file</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;./doc.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; &quot;{\n  \&quot;item\&quot; : \&quot;Article\n    description\n    price\&quot;\n}\n&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">file</span>
</span><span class='line'><span class="go">JSON::ParserError: 757: unexpected token at &#39;{</span>
</span><span class='line'><span class="go">  &quot;item&quot; : &quot;Article</span>
</span><span class='line'><span class="go">    description</span>
</span><span class='line'><span class="go">    price&quot;</span>
</span><span class='line'><span class="go">}</span>
</span><span class='line'><span class="go">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rien ne va plus. C&#8217;est pareil avec les tabulations.</p>

<p>Si vous récupérez ce genre de fichier, vous pouvez les nettoyer en
remplaçant par exemple les tabulations et les fins de ligne par un
espace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[\t\n]/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/"/>
    <updated>2014-03-17T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>J&#8217;ai ajouté les titres de niveau 2 et 3, nettoyer un peu le code et
et remplacer l&#8217;utilisation des commandes en mode normal <code>yy</code> et <code>p</code>
(qu&#8217;un utilisateur peut toujours avoir remappé) par des fonctions
d&#8217;évaluations:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> <span class="k">s</span>:build_title<span class="p">(</span>char<span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">s</span>:line_content <span class="p">=</span> substitute<span class="p">(</span>getline<span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">a</span>:char<span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">s</span>:line_content<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_title<span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title2<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_title<span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title3<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> setline<span class="p">(</span>line<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span> <span class="s1">&#39;### &#39;</span> . getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/'>Vim &ndash; Un plugin pour markdown &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/'>Vim &ndash; un plugin pour markdown &ndash; partie 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vader, un framework de test pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim/"/>
    <updated>2014-03-16T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/junegunn/vader.vim">Vader</a> est un framework de test pour Vim, écrit en VimScript. Sa syntaxe très simple
fait penser un peu à un mélange de Cucumber et de Python. Il est vraiment sympa
à utiliser.</p>

<!-- more -->


<p>Voici à quoi ressemble un test simple avec Vader:</p>

<pre><code>Given (A line of text):
  Make a title of this

Execute (To level 1 title):
  QuickMarkdownTitle1

Expect (to be a level 1 title):
  Make a title of this
  ====================
</code></pre>

<p>Le bloc <code>Given</code> permet de remplir un buffer de test avec des données.</p>

<p>Le bloc <code>Execute</code> lance des fonctions Vim.</p>

<p>Le bloc <code>Expect</code> vérifie que le buffer de test est bien celui attendu
après le passage du bloc <code>Execute</code>.</p>

<p>Il existe aussi un bloc <code>Do</code>, qui simule le mode normal:</p>

<pre><code>Given (Some text):
  Make a title of this
  and not of this one

Do (To title 1):
  gg
  :QuickMarkdownTitle1\&lt;Enter&gt;

Expect (to be a level 1 title):
  Make a title of this
  ====================
  and not of this one
</code></pre>

<p>On lance Vader simplement avec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Vader
</span></code></pre></td></tr></table></div></figure>


<p>et le framework ouvre un nouveau buffer avec toutes les informations
nécessaires:</p>

<pre><code>Starting Vader: 1 suite(s), 6 case(s)
  Starting Vader: /home/xavier/devel/vim/quickmarkdown/test/titles.vader
    (1/6) [  GIVEN] A line of text
    (1/6) [EXECUTE] To level 1 title
    (1/6) [ EXPECT] to be a level 1 title
    (2/6) [  GIVEN] A line of text
    (2/6) [EXECUTE] To level 2 title
    (2/6) [ EXPECT] to be a level 2 title
    (3/6) [  GIVEN] A line of text
    (3/6) [EXECUTE] To level 3 title
    (3/6) [ EXPECT] to be a level 3 title
    (4/6) [  GIVEN] Some text
    (4/6) [     DO] To title 1
    (4/6) [ EXPECT] to be a level 1 title
    (5/6) [  GIVEN] Some text
    (5/6) [     DO] To title 2
    (5/6) [ EXPECT] to be a level 2 title
    (6/6) [  GIVEN] Some text
    (6/6) [     DO] To title 3
    (6/6) [ EXPECT] to be a level 3 title
  Success/Total: 6/6
Success/Total: 6/6 (assertions: 0/0)
Elapsed time: 0.419884 sec.
</code></pre>

<p>Vader est «livré» avec coloration syntaxique, ftplugin, plusieurs exemples
d&#8217;utilisations. Il peut aussi faire des hooks <code>before</code> et <code>after</code>, inclure des
fichiers et d&#8217;autres choses encore…</p>

<p>Une très bonne découverte, très agréable à utiliser.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/'>Vim &ndash; Un plugin pour markdown &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/'>Vim &ndash; un plugin pour markdown &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - plugin pour markdown - la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/"/>
    <updated>2014-03-15T20:24:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>L&#8217;embryon de plugin Vim pour les titres en markdown écrit
<a href="http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/">la dernière fois</a>
ne me satisfait pas du tout. En effet, il ne fonctionne pas avec ma
configuration personnelle, adapté pour le clavier bépo.</p>

<!-- more -->


<p>La fonction pour faire un titre était la suivante:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal yypVr=&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chez moi, la touche pour la fonction de remplacement n&#8217;est pas <code>r</code>, mais <code>h</code>.
Voici donc une nouvelle fonction qui devrait marcher pour tout type de
configuration (enfin j&#8217;espère):</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal yyp&quot;</span>
</span><span class='line'>  execute <span class="s2">&quot;:s/./=/g&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plutôt que de remplacer la ligne avec <code>Vr=</code>, on la remplace avec une
substitution. Pour être <em>vraiment</em> utilisable partout, il me reste à
trouver comment me passer du <code>yyp</code> pour dupliquer une ligne, histoire
que ça fonctionne même si vous avez remappé <code>y</code> ou <code>p</code>…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/'>Vim &ndash; Un plugin pour markdown &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/'>Vim &ndash; un plugin pour markdown &ndash; partie 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourquoi je passe à Vundle]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/14/pourquoi-je-passe-a-vundle/"/>
    <updated>2014-03-14T20:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/14/pourquoi-je-passe-a-vundle</id>
    <content type="html"><![CDATA[<p>Je suis (j&#8217;étais) un utilisateur de <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>, le plugin Vim pour gérer
les plugins Vim (!). De base, le système offert par Vim pour maintenir son
pool de plugin à jour est tellement exécrable qu&#8217;il faut bien un plugin
pour gérer ça ! En janvier dernier j&#8217;ai commencé à utiliser OS X au boulot,
et suite à quelques soucis, Pathogen refusait de fonctionner (pour être
honnête, ça n&#8217;était pas de sa faute). J&#8217;ai donc péniblement installé mes
plugins les plus importants à la main… avant d&#8217;essayer <a href="https://github.com/gmarik/Vundle.vim">Vundle</a>.</p>

<!-- more -->


<p>Et j&#8217;ai trouvé Vundle excellent. À tel point que je vais migrer ma configuration
à la maison ce week-end. Pourquoi je trouve Vundle meilleur que Pathogen ?</p>

<ul>
<li>BundleInstall installe le plugin tout seul comme un grand, et aussi la
documentation.</li>
<li>BundleInstall! met à jour les plugins.</li>
<li>BundleClean désinstalle automatiquement les plugins inutilisés.</li>
</ul>


<p>En un mot : <strong>comfort</strong>.</p>

<p>Bon, le système n&#8217;est pas parfait. Il manque quelque chose pour
installer une révision particulière d&#8217;un plugin et je ne peux plus <em>hacker</em>
directement le code source quand un plugin me pose problème en bépo (mais c&#8217;est
pas plus mal de trouver une autre solution).</p>

<p>Et vous, vous utilisez quoi, et pourquoi, pour gérer vos plugins Vim ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/'>Vim &ndash; Comment ouvrir la fenêtre courante dans un nouvel onglet</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/'>Vim &ndash; Un plugin pour markdown &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/'>Vim &ndash; un plugin pour markdown &ndash; partie 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un éditeur pour le terminal - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/13/un-editeur-pour-le-terminal-partie-9/"/>
    <updated>2014-03-13T21:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/13/un-editeur-pour-le-terminal-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le programme d&#8217;aujourd&#8217;hui, on s&#8217;occupe de déplacer le curseur.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Curses</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">init_screen</span>
</span><span class='line'>  <span class="n">cbreak</span>
</span><span class='line'>  <span class="n">noecho</span>
</span><span class='line'>  <span class="n">stdscr</span><span class="o">.</span><span class="n">keypad</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">ch</span> <span class="o">=</span> <span class="n">getch</span><span class="p">)</span> <span class="o">!=</span> <span class="no">KEY_F1</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">ch</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_LEFT</span> <span class="k">then</span> <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_RIGHT</span> <span class="k">then</span> <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_UP</span> <span class="k">then</span> <span class="n">y</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">KEY_DOWN</span> <span class="k">then</span> <span class="n">y</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">setpos</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">refresh</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_screen</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les détails:</p>

<p>Pour éviter que les caractères s&#8217;affiche sur le terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">noecho</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour rappel, le code suivant permet d&#8217;activer le pavé numérique, les
flèches, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">stdscr</span><span class="o">.</span><span class="n">keypad</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Positionner le curseur est aussi simple que ce qui suit. Comme toujours,
attention, c&#8217;est y d&#8217;abord et x ensuite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">setpos</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par contre, si vous jouer un peu avec ce programme, on voit que les
sauts de lignes ne sont pas gérer automatiquement (quand j&#8217;arrive à la
fin de la ligne et que j&#8217;appuie sur flèche droite, on ne passe pas à
la ligne suivante par exemple). Ce sera à nous de le gérer…</p>

<p>Si on veut utiliser HJKL (comme dans Vim) pour se déplacer, on peut
remplacer le contenu du <code>case</code> par:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">when</span> <span class="sc">?h</span> <span class="k">then</span> <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">when</span> <span class="sc">?l</span> <span class="k">then</span> <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">when</span> <span class="sc">?k</span> <span class="k">then</span> <span class="n">y</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">when</span> <span class="sc">?j</span> <span class="k">then</span> <span class="n">y</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/06/un-editeur-pour-le-terminal-partie-8/'>Un éditeur pour le terminal &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/04/ecrire-un-editeur-pour-le-terminal-partie-7/'>Écrire un éditeur pour le terminal &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/'>Écrire un éditeur pour le terminal &ndash; partie 6</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin minimal pour les titres markdown]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/"/>
    <updated>2014-03-12T21:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Hier on a vu <a href="http://lkdjiin.github.io/blog/2014/03/11/vim-cas-pratique-pour-les-debutants-les-titres-en-markdown/">comment faire rapidement des titres au format markdown</a>.
Aujourd&#8217;hui on transforme ça en plugin. Enfin, en un embryon de plugin.</p>

<!-- more -->


<p>Voici donc un plugin bricolé en deux minutes qui fait des titres de niveau 1
en markdown.</p>

<figure class='code'><figcaption><span>plugin/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> exists<span class="p">(</span><span class="s1">&#39;g:loaded_quickmarkdown&#39;</span><span class="p">)</span> <span class="p">||</span> &amp;<span class="k">cp</span> <span class="p">||</span> <span class="k">v</span>:<span class="k">version</span> <span class="p">&lt;</span> <span class="m">700</span>
</span><span class='line'>  <span class="k">finish</span>
</span><span class='line'><span class="k">endif</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:loaded_quickmarkdown <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle1 <span class="k">call</span> quickmarkdown#title1<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal yypVr=&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et en mettant ce qui suit dans votre vimrc, on peut l&#8217;activer avec
leader puis <code>=</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map<span class="p">&lt;</span>Leader<span class="p">&gt;=</span> :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quand j&#8217;aurais le temps j&#8217;ajouterais les niveaux 2, 3, 4, etc. Et aussi
la documentation et quelques explications ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/'>Vim &ndash; Un plugin pour markdown &ndash; partie 5</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Cas pratique pour les débutants : les titres en markdown]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/11/vim-cas-pratique-pour-les-debutants-les-titres-en-markdown/"/>
    <updated>2014-03-11T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/11/vim-cas-pratique-pour-les-debutants-les-titres-en-markdown</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous débutez sur Vim ? Je vous propose aujourd&#8217;hui des exercices pratiques
pour définir des titres au format markdown.</p>

<!-- more -->


<p>Un titre de niveau 1 en markdown s&#8217;écrit comme ceci:</p>

<pre><code>Titre de niveau 1
=================
</code></pre>

<p>On est pas obligé de mettre autant de <code>=</code> que de caractères dans le titre
(de mémoire je crois que 3 suffisent), mais c&#8217;est quand même agréable à
l&#8217;œil.</p>

<p>La suite de commandes pour obtenir ça est: <code>yypVr=</code>. On décortique:</p>

<ul>
<li><code>yy</code> copie la ligne du titre dans un buffer.</li>
<li><code>p</code> affiche ce buffer sur la ligne du dessous et nous place sur cette
nouvelle ligne.</li>
<li><code>V</code> passe cette nouvelle ligne en mode selection.</li>
<li><code>r=</code> remplace toute la selection par autant de <code>=</code>.</li>
</ul>


<p>Pour les titres de niveau 2, on remplace le <code>=</code> par un <code>-</code>.</p>

<p>Voilà, la prochaine fois on en fera peut-être un plugin, allez savoir…</p>

<p>Et vous, vous faites comment ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/'>Vim &ndash; Un plugin minimal pour les titres markdown</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Utiliser les blocs pour faire du refactoring - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/10/ruby-utiliser-les-blocs-pour-faire-du-refactoring-partie-2/"/>
    <updated>2014-03-10T15:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/10/ruby-utiliser-les-blocs-pour-faire-du-refactoring-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Suite à l&#8217;article d&#8217;hier
(<a href="http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring/">Utiliser les blocs pour faire du refactoring</a>),
on m&#8217;a demandé la différence entre <code>block.call</code> et <code>yield</code>. C&#8217;est parti.</p>

<!-- more -->


<p>On s&#8217;était arrêté là:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essayons de remplacer <code>block.call</code> par <code>yield</code>:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lorsqu&#8217;on lance le programme, on voit qu&#8217;il n&#8217;y a pas de différences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby test.rb
</span><span class='line'>Début de la méthode un
</span><span class='line'>Au milieu de la méthode un
</span><span class='line'>Fin de la méthode un
</span><span class='line'>Début de la méthode deux
</span><span class='line'>Ceci est le milieu de la méthode deux
</span><span class='line'>Fin de la méthode deux
</span></code></pre></td></tr></table></div></figure>


<p>Ok, donc <code>block.call</code> et <code>yield</code> c&#8217;est pareil ? Attends encore. Essayons
maintenant de supprimer le <code>&amp;block</code>:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Toujours pas de différences ! Par contre, on ne pourra pas appeler
<code>block.call</code> sans avoir défini <code>&amp;block</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code ci-dessus donnera évidemment une erreur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby test.rb
</span><span class='line'>Début de la méthode un
</span><span class='line'>test.rb:16:in <span class="sb">`</span>helper<span class="s1">&#39;: undefined local variable or method `block&#39;</span> <span class="k">for</span>
</span><span class='line'><span class="c">#&lt;Bidule:0x9eaf6ec&gt; (NameError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Toutes ces expérimentations nous ammène à une première conclusion: <em>Les
blocs sont implicites, et donc ils sont partout</em>. Ce que confirme, s&#8217;il en
est encore besoin, la session irb suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">=&gt; :foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;ok&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;I am in a block&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="go">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le contenu du bloc n&#8217;est jamais évalué, mais ne provoque pas d&#8217;erreur
lors de l&#8217;appel de <code>foo</code>.</p>

<p>Seconde conclusion, <code>block.call</code> et <code>yield</code> fonctionnent à l&#8217;identique.
Bien que je préfère <code>block.call</code>, qui me force à documenter la méthode
avec le <code>&amp;block</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring/'>Ruby &ndash; Utiliser les blocs pour faire du refactoring</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Utiliser les blocs pour faire du refactoring]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring/"/>
    <updated>2014-03-09T15:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/09/ruby-utiliser-les-blocs-pour-faire-du-refactoring</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Suivant le(s) langage(s) que vous pratiquiez avant de vous mettre à Ruby,
les blocs peuvent vous sembler plus ou moins obscurs. Voici un
exemple d&#8217;utilisation possible, lorsque vous faites du refactoring.</p>

<!-- more -->


<p>Prenons le programme suivant:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode un&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode deux&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bidule</span> <span class="o">=</span> <span class="no">Bidule</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">un</span>
</span><span class='line'><span class="n">bidule</span><span class="o">.</span><span class="n">deux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici ce que ça donne quand on le lance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby test1.rb
</span><span class='line'>Début de la méthode un
</span><span class='line'>Au milieu de la méthode un
</span><span class='line'>Fin de la méthode un
</span><span class='line'>Début de la méthode deux
</span><span class='line'>Au milieu de la méthode deux
</span><span class='line'>Fin de la méthode deux
</span></code></pre></td></tr></table></div></figure>


<p>Le problème de la classe <code>Bidule</code> est que ses méthodes <code>un</code> et <code>deux</code>
sont identiques (ou presque). On aura donc intérêt à extraire une
méthode helper:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Au milieu de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, c&#8217;était du refactoring classique.</p>

<p>Maintenant imaginons que la classe <code>Bidule</code> soit ainsi:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode un&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Début de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Fin de la méthode deux&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous avez remarqué la différence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois les méthodes <code>un</code> et <code>deux</code> se distinguent un peu plus, bien
que la logique reste identique. On peux donc tirer avantage des blocs:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">un</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;un&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;Au milieu de la méthode un&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deux</span>
</span><span class='line'>    <span class="n">helper</span><span class="p">(</span><span class="s1">&#39;deux&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Ceci est le milieu de la méthode deux&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">argument</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Début de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fin de la méthode </span><span class="si">#{</span><span class="n">argument</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/10/ruby-utiliser-les-blocs-pour-faire-du-refactoring-partie-2/'>Ruby &ndash; Utiliser les blocs pour faire du refactoring &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
