<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-05T21:24:50+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Une histoire de git diff]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff/"/>
    <updated>2014-06-05T21:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je devais fusionner notre branche <code>development</code> dans la branche
<code>master</code> et envoyer cette nouvelle version en production.</p>

<p>Mais avant d&#8217;envoyer quoi que ce soit, en production ou même sur Github,
je lance toujours la suite de tests. Vu notre <em>workflow</em>, quand il s&#8217;agit
de <em>merger</em> <code>development</code> dans <code>master</code>, c&#8217;est plus une formalité, une
habitude, qu&#8217;autre chose.</p>

<p>Sauf que cette fois-ci, certains tests ne passaient pas.</p>

<!-- more -->


<p>Comme je l&#8217;ai dit, vu notre <em>workflow</em>, c&#8217;est normalement impossible !
À moins que…</p>

<p>À moins qu&#8217;un collêgue &ndash;<em> pas moi bien sûr ;) </em>&ndash; ai fusionné un <em>hotfix</em>
dans <code>master</code> et oublié de le mettre dans <code>development</code> ? Vu qu&#8217;on déploit
plusieurs fois par semaines, ça a été vite à controler. C&#8217;était pas ça…</p>

<p>En regardant de plus près ce que racontaient les tests qui échouaient, j&#8217;ai
remarqué un truc très bizarre. Une des lignes d&#8217;où était sensée partir
l&#8217;erreur dans le code était … vide ! <code>Rspec</code> me disait que l&#8217;erreur partait
de la ligne 6, alors qu&#8217;elle partait en réalité de la ligne 7 ! Et c&#8217;est pas
tout, <code>Rspec</code> me soutenait que j&#8217;envoyais deux arguments à telle méthode
(c&#8217;était ça les erreurs), alors
qu&#8217;en réalité j&#8217;en envoyais bien un seul ! J&#8217;avais le code sous les yeux !</p>

<p>Qui mentait ? <code>Rspec</code> ou le code ?</p>

<p>C&#8217;est là qu&#8217;intervient la commande Git du titre de cet article, si vous avez
lu jusqu&#8217;ici.</p>

<pre><code>git diff master..development
</code></pre>

<p>Ça m&#8217;a permis de voir les différences entre les deux branches. Il y avait
simplement un fichier qui avait été déplacé et remanié. Seulement l&#8217;ancienne
version de ce fichier était elle aussi toujours là, à son ancien emplacement.</p>

<p>Après la suppression de ce fichier indélicat, j&#8217;ai pu envoyer le tout
en production. Je ne sais toujours pas pourquoi il y avait cette différence.
Je n&#8217;ai pas eu (<em>pris ?</em>) le temps de chercher. Enfin bref, merci Git :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github/'>Hub &ndash; Git plus facile avec Github</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git/'>Comment mettre temporairement de coté ses modifications de code avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 17]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/"/>
    <updated>2014-06-04T21:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui j&#8217;ai envie de faire une version récursive de la fonction
<code>run</code>. Voici la version actuelle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> run</span><span class="p">(</span><span class="n">population_size</span><span class="p">,</span> <span class="n">genes_size</span><span class="p">,</span> <span class="n">generations</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">)</span>
</span><span class='line'>  <span class="n">current</span> <span class="o">=</span> <span class="n">create_population</span><span class="p">(</span><span class="n">population_size</span><span class="p">,</span> <span class="n">genes_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">generations</span>
</span><span class='line'>    <span class="n">scores</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="n">best</span> <span class="o">=</span> <span class="n">maximum</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Generation </span><span class="si">$</span><span class="s">i Best </span><span class="si">$</span><span class="s">best&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">selection</span> <span class="o">=</span> <span class="n">tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">reproduction</span><span class="p">([],</span> <span class="n">current</span><span class="p">,</span> <span class="n">selection</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Et en voici une version récursive (avec un <em>helper</em>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> run</span><span class="p">(</span><span class="n">population_size</span><span class="p">,</span> <span class="n">genes_size</span><span class="p">,</span> <span class="n">generations</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">)</span>
</span><span class='line'>  <span class="n">current</span> <span class="o">=</span> <span class="n">create_population</span><span class="p">(</span><span class="n">population_size</span><span class="p">,</span> <span class="n">genes_size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">run_helper</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">population_size</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">,</span> <span class="n">generations</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> run_helper</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">population_size</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">,</span> <span class="n">generations</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">generation</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scores</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>  <span class="n">best</span> <span class="o">=</span> <span class="n">maximum</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Generation </span><span class="si">$</span><span class="s">generation Best </span><span class="si">$</span><span class="s">best&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">generation</span> <span class="o">&lt;</span> <span class="n">generations</span>
</span><span class='line'>    <span class="n">selection</span> <span class="o">=</span> <span class="n">tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">reproduction</span><span class="p">([],</span> <span class="n">current</span><span class="p">,</span> <span class="n">selection</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">run_helper</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">population_size</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">,</span> <span class="n">generations</span><span class="p">,</span> <span class="n">generation</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors je me doute que je suis sûrement assez maladroit avec Julia, que
j&#8217;apprend, et avec le style récursif, qui ne coule pas de source chez moi,
mais j&#8217;ai quand même l&#8217;impression que ça n&#8217;apporte rien du tout au
programme !</p>

<p>Pour l&#8217;instant, je pense que je vais me limiter souvent à des boucles
<code>for</code> ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/01/un-algorithme-genetique-en-julia-partie-14/'>Un algorithme génétique en Julia &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 16]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/"/>
    <updated>2014-06-03T21:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>J&#8217;ai retiré les nombres magiques et renommé les quelques variables qui étaient
abrégées. Puis j&#8217;ai voulu commencer à documenter le code. Là je me suis
aperçu que le <em>typage</em> était une bonne façon de documenter Julia. Par
exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span><span class="p">::</span><span class="n">Array</span><span class="p">{</span><span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>m&#8217;apparait quasiment comme étant <em>auto-documenté</em>, comparé à la version
précédente:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Plus de documentation plus tard, quand j&#8217;aurais trouvé si il y a un
<em>standard</em> en Julia (j&#8217;ai bien l&#8217;impression qu&#8217;il n&#8217;y en a pas :( ).</p>

<p>Pour l&#8217;instant, voici le code après son enième remaniement:</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span><span class="p">::</span><span class="n">Array</span><span class="p">{</span><span class="kt">Int</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_genes</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_genes</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">chromosome</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">,</span> <span class="n">rate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">rand</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">rate</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index2</span> <span class="p">:</span> <span class="n">index1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rate</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">selection_size</span> <span class="o">=</span> <span class="n">population_size</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rate</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">selection_size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mutate</span><span class="p">(</span><span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">]),</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">],</span>
</span><span class='line'>                 <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">gene</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">gene</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="k">for</span> <span class="n">gene</span> <span class="k">in</span> <span class="n">chromosome</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> run</span><span class="p">(</span><span class="n">population_size</span><span class="p">,</span> <span class="n">genes_size</span><span class="p">,</span> <span class="n">generations</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">)</span>
</span><span class='line'>  <span class="n">current</span> <span class="o">=</span> <span class="n">create_population</span><span class="p">(</span><span class="n">population_size</span><span class="p">,</span> <span class="n">genes_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">generations</span>
</span><span class='line'>    <span class="n">scores</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="n">best</span> <span class="o">=</span> <span class="n">maximum</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Generation </span><span class="si">$</span><span class="s">i Best </span><span class="si">$</span><span class="s">best&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">selection</span> <span class="o">=</span> <span class="n">tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">fight_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">reproduction</span><span class="p">([],</span> <span class="n">current</span><span class="p">,</span> <span class="n">selection</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/01/un-algorithme-genetique-en-julia-partie-14/'>Un algorithme génétique en Julia &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 15]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/"/>
    <updated>2014-06-02T21:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir pondu <a href="blog/2014/06/01/un-algorithme-genetique-en-julia-partie-14/">une première version</a>
de l&#8217;algorithme hier, je me demande ce que je pourrais améliorer. C&#8217;était
un programme sympa pour découvrir Julia, mais je n&#8217;ai fait que gratter la
surface de ce langage.</p>

<!-- more -->


<p>Donc, voici ce que je compte/espère faire encore avec ce programme pour
comprendre un peu mieux Julia:</p>

<ul>
<li>Retirer les nombres magiques restants.</li>
<li>Retirer les abbreviations restantes.</li>
<li>Documenter les fonctions, sinon dans un mois, j&#8217;aurais tout oublié !</li>
<li>Essayer une version récursive de la fonction <code>run</code>.</li>
<li>Lire quelques tutos pour voir ce que je peux en tirer.</li>
<li>Lire du code julia pour mieux <em>sentir</em> (le code source de Julia <em>itself</em>
serait un bon début).</li>
<li>Mettre le code sur github et le donner à lire/critiquer à des développeurs qui
connaissent le langage.</li>
<li>Comprendre pourquoi avec 10.000 individus de 100 gènes, l&#8217;empreinte
mémoire est de 800 Mo ! Ça me semble beaucoup…</li>
<li>Écrire le même en Ruby et comparer le temps d&#8217;exécution.</li>
</ul>


<p>Voilà, il devrait donc y avoir encore pas mal d&#8217;articles sur le langage
Julia ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/01/un-algorithme-genetique-en-julia-partie-14/'>Un algorithme génétique en Julia &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 14]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/01/un-algorithme-genetique-en-julia-partie-14/"/>
    <updated>2014-06-01T18:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/01/un-algorithme-genetique-en-julia-partie-14</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Ça y est ! J&#8217;ai enfin un algorithme génétique écrit en Julia. Le programme
est certainement maladroit par endroit, mais il fonctionne.</p>

<!-- more -->




<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_genes</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_genes</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">rand</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mf">0.8</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index2</span> <span class="p">:</span> <span class="n">index1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">selection_size</span> <span class="o">=</span> <span class="n">population_size</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">selection_size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mutate</span><span class="p">(</span><span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">]))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">])</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">400</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">g</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">g</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">x</span><span class="p">)::</span><span class="kt">Int</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">ch</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> run</span><span class="p">()</span>
</span><span class='line'>  <span class="n">current</span> <span class="o">=</span> <span class="n">create_population</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="mi">50</span>
</span><span class='line'>    <span class="n">scores</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="n">best</span> <span class="o">=</span> <span class="n">maximum</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Generation </span><span class="si">$</span><span class="s">i Best </span><span class="si">$</span><span class="s">best&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">selection</span> <span class="o">=</span> <span class="n">tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">reproduction</span><span class="p">([],</span> <span class="n">current</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici un exemple d&#8217;utilisation:</p>

<pre><code>julia&gt; include("main.jl")
run (generic function with 1 method)

julia&gt; run()
Generation 1 Best 18
Generation 2 Best 18
Generation 3 Best 17
Generation 4 Best 17
Generation 5 Best 18
Generation 6 Best 17
Generation 7 Best 18
Generation 8 Best 19
Generation 9 Best 19
Generation 10 Best 19
Generation 11 Best 20
...
</code></pre>

<p>Il me reste encore pas mal de choses à faire pour améliorer ce programme,
mais c&#8217;était un bon début pour apprendre le langage Julia.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13/"/>
    <updated>2014-05-31T21:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/31/un-algorithme-genetique-en-julia-partie-13</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On peut améliorer la fonction <code>fight</code>, pour qu&#8217;elle ne choisisse pas toujours
le meilleur individu. Il serait bon que, dans une faible proportion, elle
choisisse parfois le plus faible des deux combattants ; ceci pour assurer
qu&#8217;on ne perde pas de matériel génétique.</p>

<!-- more -->


<p>Voici donc la nouvelle fonction <code>fight</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">rand</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mf">0.8</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index2</span> <span class="p">:</span> <span class="n">index1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans 80% des cas, elle selectionne le meilleur individu, et dans 20% des
cas, elle selectionne le plus faible.</p>

<p>Je pense qu&#8217;on a maintenant tous les éléments nécessaire à la finalisation
de l&#8217;algorithme.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12/"/>
    <updated>2014-05-30T21:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/30/un-algorithme-genetique-en-julia-partie-12</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Avec ce que j&#8217;ai compris au <a href="blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/">dernier épisode</a>
à propos des types, je peux améliorer la fonction <code>mutate</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">g</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">g</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">x</span><span class="p">)::</span><span class="kt">Int</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">ch</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Maintenant les gènes des chromosomes restent toujours des tableaux de
<em>Int</em>:</p>

<pre><code>julia&gt; include("main.jl")
mutate (generic function with 1 method)

julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1])
 Chromosome([1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1])
 Chromosome([1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,1,0])
 Chromosome([0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,1,1])
 Chromosome([0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,0,0,0,1,1])
 Chromosome([0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0])
 Chromosome([0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1])
 Chromosome([0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1])

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
  9
  9
 10
  8
 10
  7
  8
  6

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 7
 2
 7
 5
 2
 7
 3
 7
 2
 2
 1
 3
 6
 5
 2
 3

julia&gt; gen2 = reproduction([], pop, selection)
8-element Array{Chromosome,1}:
 Chromosome([1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1])
 Chromosome([0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,1])
 Chromosome([1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1])
 Chromosome([0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1])
 Chromosome([1,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0])
 Chromosome([0,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,1,0,0])
 Chromosome([0,0,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1])
 Chromosome([1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0])
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11/"/>
    <updated>2014-05-29T21:13:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/29/un-algorithme-genetique-en-julia-partie-11</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier on a vu qu&#8217;il y avait une légère différence de <em>type</em> entre les gènes
d&#8217;un chromosome avant et après la mutation:</p>

<pre><code>julia&gt; c = Chromosome(create_genes(10))
Chromosome([0,0,0,1,1,1,1,1,0,1])

julia&gt; d = mutate(c)
Chromosome({0,0,0,1,1,1,1,1,0,1})

julia&gt; c.genes
10-element Array{Int32,1}:

julia&gt; d.genes
10-element Array{Any,1}:
</code></pre>

<p>C&#8217;est l&#8217;occasion de regarder un peu les types en Julia.</p>

<!-- more -->


<p>Voici une fonction <code>foo</code> qui additionne deux nombres:</p>

<pre><code>julia&gt; foo(a, b) = a + b
foo (generic function with 1 method)

julia&gt; foo(1, 2)
3
</code></pre>

<p>Que se passe-t-il si je lui passe deux chaînes de caractères ?</p>

<pre><code>julia&gt; foo("he", "llo")
ERROR: no method +(ASCIIString, ASCIIString)
</code></pre>

<p>C&#8217;est une erreur, puisque la fonction <code>+</code> ne sait pas additionner des
chaînes.</p>

<p>Très bien, apprenons à <code>foo</code> l&#8217;addition de chaînes. Pour cela, on indique
à Julia ce qu&#8217;il faut faire lorsque les arguments reçus par <code>foo</code> sont de
type <code>String</code>:</p>

<pre><code>julia&gt; foo(a::String, b::String) = "$a$b"
foo (generic function with 2 methods)

julia&gt; foo("he", "llo")
"hello"
</code></pre>

<p>Et <code>foo</code> fonctionne toujours avec des nombres:</p>

<pre><code>julia&gt; foo(1, 2)
3
</code></pre>

<p>La fonction <code>foo</code> possède 2 <em>méthodes</em>, une à utiliser quand elle reçoit des
arguments <em>String</em>, et une autre, à utiliser dans tous les autres cas:</p>

<pre><code>julia&gt; methods(foo)
# 2 methods for generic function "foo":
foo(a::String,b::String) at none:1
foo(a,b) at none:1
</code></pre>

<p>La prochaine fois on arrangera notre fonction <code>mutate</code> pour que les gènes
conservent le même type.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/28/un-algorithme-genetique-en-julia-partie-10/"/>
    <updated>2014-05-28T21:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/28/un-algorithme-genetique-en-julia-partie-10</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici le nouveau code de l&#8217;algorithme:</p>

<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_genes</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_genes</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">selection_size</span> <span class="o">=</span> <span class="n">population_size</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">selection_size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mutate</span><span class="p">(</span><span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">]))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">])</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">g</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">g</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">ch</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>J&#8217;ai simplement ajouter la fonction <code>mutate</code> dans <code>crossover</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mutate</span><span class="p">(</span><span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">]))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et ça fonctionne:</p>

<pre><code>julia&gt; include("main.jl")

julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([0,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1])
 Chromosome([1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1])
 Chromosome([1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1])
 Chromosome([1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,0,1])
 Chromosome([0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0])
 Chromosome([0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1])
 Chromosome([1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0])
 Chromosome([1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0])

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
  9
 11
  9
 11
  8
  9
 10
  6

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 7
 7
 7
 7
 ...
 4
 1
 1

julia&gt; gen2 = reproduction([], pop, selection)
8-element Array{Chromosome,1}:
 Chromosome({1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,0})
 Chromosome({1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0})
 Chromosome({0,1,0,0,1,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1})
 Chromosome({1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,0,1,0,1,1})
 Chromosome({1,0,1,1,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1})
 Chromosome({1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0})
 Chromosome({0,1,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0,1})
 Chromosome({0,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,0,1})
</code></pre>

<p>Mais un truc me dérange toujours, le tableau est <em>modifié</em> après passage
dans <code>mutate</code>:</p>

<pre><code>julia&gt; c = chromosome(create_genes(10))
chromosome([0,0,0,1,1,1,1,1,0,1])

julia&gt; d = mutate(c)
Chromosome({0,0,0,1,1,1,1,1,0,1})

julia&gt; c.genes
10-element Array{Int32,1}:
...

julia&gt; d.genes
10-element Array{Any,1}:
...
</code></pre>

<p>C&#8217;est bien ça, le tableau n&#8217;est pas du même type. Bon, ça ne dérange pas
l&#8217;algorithme et c&#8217;est l&#8217;occasion d&#8217;un prochain article sur Julia ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/27/un-algorithme-genetique-en-julia-partie-9/"/>
    <updated>2014-05-27T21:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/27/un-algorithme-genetique-en-julia-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici une fonction de mutation pour nos chromosomes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> mutate</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mutator</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="o">=</span> <span class="k">if</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">gene</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">gene</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">mutator</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">ch</span><span class="o">.</span><span class="n">genes</span> <span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Le code me semble un peu <em>maladroit</em>, mais a l&#8217;air de fonctionner pas trop
mal ;) La fonction <code>mutate</code> prend en entrée un chromosome et produit un autre
chromosome en sortie. On peut voir qu&#8217;une seconde fonction, <code>mutator</code>, est
définie à l&#8217;intérieur.</p>

<p>Ça marche pas mal, même si il faudra faire quelque chose pour l&#8217;<em>intervalle magique</em> <code>rand(1:10)</code>:</p>

<pre><code>julia&gt; include("main.jl")
mutate (generic function with 1 method)

julia&gt; c = Chromosome(create_genes(20))
Chromosome([0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1])

julia&gt; mutate(c)
Chromosome({0,1,1,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1})
</code></pre>

<p>Le seul petit truc qui me dérange, c&#8217;est qu&#8217;on a <code>[...]</code> en entrée et
<code>{...}</code> en sortie. Je ne sais ni pourquoi, ni ce que c&#8217;est… On verra bien
au prochain épisode si c&#8217;est grave ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cherchez avec grep dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim/"/>
    <updated>2014-05-26T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Comment cherchez un mot ou un <em>pattern</em> dans votre base de code sans
quitter Vim ? Voici une réponse.</p>

<!-- more -->


<p>La commande <code>:grep</code> fait appel au programme <code>grep</code> installé sur votre
machine. La ligne suivante va chercher dans ma base de code le texte
<code>TODO</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">grep</span> TODO */*.rb
</span></code></pre></td></tr></table></div></figure>


<p>Sauf que, peut-être, ça ne marche pas chez vous. Si c&#8217;est le cas, il y
a fort à parier que le répertoire courant de Vim est, non pas celui du
fichier actif, mais votre <em>home</em>. Pour en être sûr, vous pouvez afficher
le répertoire courant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">pwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour changer le répertoire courant et qu&#8217;il coincide avec celui du fichier
courant, le plus rapide est:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">autochdir</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après, ça <em>devrait</em> marcher ;) Je vous invite à lire
<a href="http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file">cette page</a>
pour les histoires de dossier courant.</p>

<p>Personnellement, ce truc de répertoire courant m&#8217;a toujours pris la tête,
et je préfère utiliser un plugin comme <a href="https://github.com/mileszs/ack.vim">Ack.vim</a> ou <a href="https://github.com/rking/ag.vim">Ag.vim</a>,
ou plus souvent encore, faire la recherche directement dans une console. Mais chacun
ses goûts ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim/'>Le thème Gruvbox pour Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/'>Insérer le contenu d&#8217;un fichier ou d&#8217;une commande shell dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/'>Plugin vim-refactor pour Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/25/un-algorithme-genetique-en-julia-partie-8/"/>
    <updated>2014-05-25T19:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/25/un-algorithme-genetique-en-julia-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici le programme actuel, qui tient compte de l&#8217;utilisation du type
<code>Chromosome</code>, ajouté dans la partie 7.</p>

<!-- more -->




<figure class='code'><figcaption><span>main.jl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_genes</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_genes</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">index1</span><span class="p">,</span> <span class="n">index2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scores</span><span class="p">[</span><span class="n">index1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">index2</span><span class="p">]</span> <span class="o">?</span> <span class="n">index1</span> <span class="p">:</span> <span class="n">index2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> tournament</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
</span><span class='line'>  <span class="n">selection_size</span> <span class="o">=</span> <span class="n">population_size</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">fight</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">population_size</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">selection_size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first_part</span> <span class="o">=</span> <span class="n">chromosome1</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">]</span>
</span><span class='line'>  <span class="n">second_part</span> <span class="o">=</span> <span class="n">chromosome2</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span>
</span><span class='line'>  <span class="n">Chromosome</span><span class="p">([</span> <span class="n">first_part</span><span class="p">,</span> <span class="n">second_part</span><span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">])</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le changement le plus important est l&#8217;utilisation d&#8217;une fonction anonyme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">score</span><span class="p">(</span><span class="n">population</span><span class="p">)</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">genes</span><span class="p">),</span> <span class="n">population</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On arrive bien à calculer la génération suivante:</p>

<pre><code>julia&gt; include("main.jl")
reproduction (generic function with 1 method)

julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1])
 Chromosome([0,1,0,0,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0])
 Chromosome([0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0])
 Chromosome([0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0])
 Chromosome([1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0])
 Chromosome([1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1])
 Chromosome([1,1,0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,1])
 Chromosome([0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0])

julia&gt; scores = score(pop)
8-element Array{Int32,1}:
  7
  9
  5
  7
  9
 10
 11
 10

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 2
 4
 6
 1
 6
 5
 8
 7
 5
 7
 5
 6
 8
 4
 6
 6

julia&gt; generation2 = reproduction([], pop, selection)
8-element Array{Chromosome,1}:
 Chromosome([0,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0])
 Chromosome([1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1])
 Chromosome([1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0])
 Chromosome([0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,1])
 Chromosome([1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1])
 Chromosome([1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1])
 Chromosome([0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,0])
 Chromosome([1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1])
</code></pre>

<p>La première version de l&#8217;algorithme est bientôt finie…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sortie de Coco version 0.11.0]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/24/sortie-de-coco-version-0-dot-11-dot-0/"/>
    <updated>2014-05-24T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/24/sortie-de-coco-version-0-dot-11-dot-0</id>
    <content type="html"><![CDATA[<p>Je viens juste de mettre en ligne la version 0.11.0 de Coco, une gem de
<em>code coverage</em> pour Ruby.</p>

<!-- more -->


<p>Ce que fait cette nouvelle version:</p>

<ul>
<li>Échappe proprement les entités HTML dans les rapports.</li>
<li>Implémente des compteurs de <em>hit</em>.</li>
<li>Sortie d&#8217;avertissement sur la console lors de l&#8217;utilisation de
fonctionnalités dépréciées.</li>
</ul>


<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/11/sortie-de-coco-0-dot-9/'>Sortie de coco 0.9</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/25/sortie-de-coco-0-dot-8/'>Sortie de coco 0.8</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/'>Couverture de code pour Ruby avec coco</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/23/un-algorithme-genetique-en-julia-partie-7/"/>
    <updated>2014-05-23T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/23/un-algorithme-genetique-en-julia-partie-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le <a href="blog/2014/05/18/un-algorithme-genetique-en-julia-partie-6/">dernier article</a> sur Julia, j&#8217;avais eu un problème avec les
tableaux. En effet, leur comportement n&#8217;est pas celui que j&#8217;attendais:</p>

<pre><code>julia&gt; a = [1, 2]
julia&gt; b = [3, 4]

julia&gt; [a, b]
4-element Array{Int32,1}:
 1
 2
 3
 4

julia&gt; append!(a, b)
4-element Array{Int32,1}:
 1
 2
 3
 4
</code></pre>

<p>Alors que j&#8217;attendais plutôt ceci : <code>[ [1, 2], [3, 4] ]</code>.</p>

<!-- more -->


<p>Pour régler ça, on doit pouvoir utiliser les tableaux multi-dimensionnels,
que Julia à tendance à nommer des «matrices». Vu mon niveau en math, ça
ne m&#8217;a pas vraiment attiré ;)</p>

<p>J&#8217;ai préféré regarder du coté des types. Pour l&#8217;instant, je comprends les
types comme des structures dans le genre de C, c&#8217;est-à-dire un ensemble de
donnés regroupées au sein d&#8217;une même référence.</p>

<p>J&#8217;ai donc besoin d&#8217;un type, que j&#8217;appelerais <code>Chromosome</code>, qui va contenir
le tableau des gènes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">type</span><span class="nc"> Chromosome</span>
</span><span class='line'>  <span class="n">genes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On l&#8217;utilise comme ceci:</p>

<pre><code>julia&gt; Chromosome([1, 2, 3])
Chromosome([1,2,3])
</code></pre>

<p>Je vais devoir modifier un peu les fonctions définies jusqu&#8217;ici pour qu&#8217;elle
fonctionnent avec des <code>Chromosome</code>s. Par exemple, pour créer la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">create_chromosome</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="nf"> create_population</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">Chromosome</span><span class="p">(</span><span class="n">create_chromosome</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">size</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui donne:</p>

<pre><code>julia&gt; pop = create_population(8, 20)
8-element Array{Chromosome,1}:
 Chromosome([0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0])
 Chromosome([1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1])
 Chromosome([1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1])
 Chromosome([1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1])
 Chromosome([0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,1,0,1])
 Chromosome([1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1])
 Chromosome([1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0])
 Chromosome([1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0])
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rechercher avec grep dans un fichier compressé]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse/"/>
    <updated>2014-05-22T21:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Il vous arrive peut-être parfois d&#8217;avoir à fouiller des fichiers de log ?
Vous utiliser <code>grep</code> pour ça ? Et comment faire quand les logs sont
compressés ?</p>

<!-- more -->


<p>Lorsque le log est normal, c&#8217;est à dire non-compressé, on peut utiliser la
commande <code>grep</code> suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grep --color <span class="s1">&#39;LOWER&#39;</span> test.log
</span><span class='line'>  User Exists <span class="o">(</span>0.8ms<span class="o">)</span>  SELECT 1 AS one FROM <span class="s2">&quot;users&quot;</span> WHERE LOWER<span class="o">(</span><span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;email&quot;</span><span class="o">)</span>   <span class="o">=</span> LOWER<span class="o">(</span><span class="s1">&#39;foo@example.com&#39;</span><span class="o">)</span> LIMIT 1
</span></code></pre></td></tr></table></div></figure>


<p>Elle va afficher toutes les lignes du fichier <code>test.log</code> qui contiennent le
mot <code>LOWER</code>.</p>

<p>Mais si on fait la même chose sur un log compressé:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grep --color <span class="s1">&#39;LOWER&#39;</span> test.log.1.gz
</span><span class='line'><span class="nv">$ </span>1
</span></code></pre></td></tr></table></div></figure>


<p>Ça ne fonctionne pas. Ci-dessus, le <code>$ 1</code>, c&#8217;est mon shell qui m&#8217;affiche
une erreur sous la forme du code de retour (une idée pour un futur article).</p>

<p>Pour chercher dans un fichier compressé avec <code>grep</code>, on peut utiliser très
simplement la commande <code>zgrep</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zgrep --color <span class="s1">&#39;LOWER&#39;</span> test.log.1.gz
</span><span class='line'>  User Exists <span class="o">(</span>0.8ms<span class="o">)</span>  SELECT 1 AS one FROM <span class="s2">&quot;users&quot;</span> WHERE LOWER<span class="o">(</span><span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;email&quot;</span><span class="o">)</span>   <span class="o">=</span> LOWER<span class="o">(</span><span class="s1">&#39;foo@example.com&#39;</span><span class="o">)</span> LIMIT 1
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/'>Insérer le contenu d&#8217;un fichier ou d&#8217;une commande shell dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/'>Vim &ndash; Comment ouvrir la fenêtre courante dans un nouvel onglet</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/'>Astuce Bash &ndash; Améliorer l&#8217;historique</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser une version particulière d'une gem Ruby... dans une gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem/"/>
    <updated>2014-05-21T20:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>On connait tous le moyen d&#8217;utiliser une gem d&#8217;une version précise dans un
projet Rails. Il suffit de mettre ceci dans le Gemfile:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;=1.2.3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et hop, Rails, avec son coté <em>magique</em>, fait automatiquement le <code>require</code>
nécéssaire pour charger la gem <code>foo</code>, avec la version <code>1.2.3</code>.
Mais qu&#8217;en est-il lorsqu&#8217;on veut faire la même chose dans une gem, ou bien
dans un simple script ?</p>

<!-- more -->


<p>Si j&#8217;écris un article sur ce sujet c&#8217;est parce que j&#8217;oublie régulièrement
comment faire. Et qu&#8217;à chaque fois je dois perdre quelques minutes à chercher.
En l&#8217;écrivant une fois pour toutes, j&#8217;éspère que ça va rentrer ;)</p>

<p>La solution est évidemment très simple, on écrit ce qui suit dans son script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;=1.2.3&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;foo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/'>Mettre à jour des gems ayants des références circulaires avec Bundle</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png/'>Prise en main de la gem chunky_png</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hub - Git plus facile avec Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github/"/>
    <updated>2014-05-20T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui j&#8217;ai découvert <a href="http://hub.github.com/">Hub</a>.
Un programme (en Ruby) qui étend les fonctionnalités de Git en ligne de
commande quand on travaille avec un dépot Github. Je n&#8217;est pas encore
eu le temps de le tester, ni même de l&#8217;installer, mais je voulais tout
de même vous en parler au cas où, comme moi, vous seriez passé à coté.</p>

<!-- more -->


<p>Ne l&#8217;ayant pas tester, je me contente de paraphraser la page d&#8217;acceuil
pour vous donner l&#8217;eau à la bouche ;)</p>

<p>Pour cloner un de vos propre projet, il suffit de:</p>

<pre><code>git clone projet
</code></pre>

<p>Si le projet ne vous appartient pas, il faut faire:</p>

<pre><code>git clone github/projet
</code></pre>

<p>Rien que ça, c&#8217;est déjà sympathique. Mais je suis impatient d&#8217;essayer la
commande suivante:</p>

<pre><code>git pull-request
</code></pre>

<p>Il y plusieurs autres commandes avec lesquelles j&#8217;ai hâte de m&#8217;amuser.
Si vous avez déjà utiliser Hub, dites moi donc ce que vous en pensez.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff/'>Une histoire de git diff</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git/'>Comment mettre temporairement de coté ses modifications de code avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le thème Gruvbox pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim/"/>
    <updated>2014-05-19T20:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ça fait quelques semaines maintenant que j&#8217;utilise le thème
<a href="https://github.com/morhetz/gruvbox">Gruvbox</a> pour Vim. Je le trouve
excellent.</p>

<!-- more -->


<p>Il propose deux modes, un sombre et un clair, comme le fameux thème
Solarized, qu&#8217;on active ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">bg</span><span class="p">=</span><span class="nb">dark</span>
</span><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">bg</span><span class="p">=</span><span class="nb">light</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est comfortable de pouvoir changer selon l&#8217;humeur, ou la lumière… Il y a
pas mal de langages supportés, regardez donc les
<a href="https://github.com/morhetz/gruvbox/wiki/Gallery">captures d&#8217;écrans</a>
pour voir si ça vous convient.</p>

<p>Mais ce que j&#8217;aime vraiment, c&#8217;est la très bonne intégration de base avec
plusieurs plugins que j&#8217;utilise : Easy Motion, Rainbow Parentheses, Airline,
Git Gutter, Syntastic, CtrlP, etc.</p>

<p>Je vous recommande chaudement de l&#8217;essayer.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim/'>Cherchez avec grep dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/'>Insérer le contenu d&#8217;un fichier ou d&#8217;une commande shell dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/'>Plugin vim-refactor pour Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/18/un-algorithme-genetique-en-julia-partie-6/"/>
    <updated>2014-05-18T20:47:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/18/un-algorithme-genetique-en-julia-partie-6</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui je tente d&#8217;écrire une fonction de reproduction.
Je me dis qu&#8217;une fonction récursive serait ici la bienvenue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> reproduction</span><span class="p">(</span><span class="n">new_population</span><span class="p">,</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">selection</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_population</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">father</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">mother</span> <span class="o">=</span> <span class="n">current_population</span><span class="p">[</span><span class="n">selection</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">father</span><span class="p">,</span> <span class="n">mother</span><span class="p">)</span>
</span><span class='line'>    <span class="n">reproduction</span><span class="p">([</span><span class="n">new_population</span><span class="p">,</span> <span class="n">child</span><span class="p">],</span> <span class="n">current_population</span><span class="p">,</span> <span class="n">selection</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="k">end</span><span class="p">])</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Explications ligne par ligne:</p>

<pre><code>function reproduction(new_population, current_population, selection)
</code></pre>

<p><code>new_population</code> est un accumulateur, qui débute comme un tableau vide.
<code>current_population</code> est un tableau qui contient la génération courante et qui
ne changera pas. <code>selection</code> est un tableau qui contient les indexs des
reproducteurs par rapport à <code>current_population</code>.</p>

<pre><code>if selection == []
  return new_population
</code></pre>

<p>C&#8217;est la condition de sortie de cette fonction récursive. Au fur et à mesure,
<code>selection</code> va être vidé des ses éléments.</p>

<pre><code>father = current_population[selection[1]]
mother = current_population[selection[2]]
child = crossover(father, mother)
</code></pre>

<p>On produit un nouvel individu (<code>child</code>) par le croisement de deux éléments de
<code>current_population</code>, pointés par les deux premiers éléments de <code>selection</code>.</p>

<pre><code>reproduction([new_population, child], current_population, selection[3:end])
</code></pre>

<p>On appelle à nouveau la fonction <code>reproduction</code>, en ajoutant le nouvel individu
et en retirant les deux premiers éléments de <code>selection</code>.</p>

<p>Ça fonctionne presque, mais pas tout à fait !
En effet:</p>

<pre><code>julia&gt; include("main.jl")
reproduction (generic function with 1 method)

julia&gt; population = create_population(8, 20)
8-element Array{Array{Int32,1},1}:
 [1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0]
 [0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1]
 [0,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,0,1,0,1]
 [1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1]
 [1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1]
 [0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0]
 [1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1]
 [0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,1]

julia&gt; scores = score(population)
8-element Array{Int32,1}:
  9
  9
  9
 11
 11
  5
 11
  8

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 2
 5
 4
 1
 5
 6
 5
 5
 4
 4
 6
 5
 4
 1
 1
 6

julia&gt; selection = tournament(scores)
16-element Array{Int32,1}:
 2
 7
 3
 1
 3
 3
 1
 4
 7
 7
 7
 8
 5
 4
 7
 4

julia&gt; generation2 = reproduction([], population, selection)
160-element Array{Int32,1}:
 0
 1
 0
 1
 0
 0
 0
 0
 1
 1
 ⋮
 1
 1
 0
 1
 0
 0
 0
 0
 1
 1
</code></pre>

<p>La fonction <code>reproduction</code> ne produit pas un tableau de 8 chromosomes de
longueur 20, mais un tableau de 160 entiers. Je sens qu&#8217;il y a un truc
vraiment cool avec les tableaux en Julia, mais j&#8217;ai la preuve que je n&#8217;ai pas
encore tout compris ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/17/un-algorithme-genetique-en-julia-partie-5/"/>
    <updated>2014-05-17T15:38:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/17/un-algorithme-genetique-en-julia-partie-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui je cherche à faire une fonction <code>crossover</code>, pour effectuer un
croisement entre deux chromosomes.</p>

<p>Soit les deux chromosomes suivants:</p>

<pre><code>julia&gt; a = [1, 2, 3, 4, 5]

julia&gt; b = [6, 7, 8, 9, 0]
</code></pre>

<!-- more -->


<p>Pour obtenir la taille d&#8217;un tableau:</p>

<pre><code>julia&gt; length(a)
5
</code></pre>

<p>Pour obtenir le <em>point de croisement</em>, on tire au hasard:</p>

<pre><code>julia&gt; cut_point = rand(1:length(a))
4
</code></pre>

<p>Le nouveau chromosome sera composé du début du premier, jusqu&#8217;au point de
croisement:</p>

<pre><code>julia&gt; cut_point = 3
3
julia&gt; a[1:cut_point]
3-element Array{Int32,1}:
 1
 2
 3
</code></pre>

<p>Puis de la fin du second chromosome:</p>

<pre><code>julia&gt; a[cut_point + 1:end]
2-element Array{Int32,1}:
 4
 5
</code></pre>

<p>Si on rassemble tout ça dans un tableau, on obtient notre nouveau
chromosome:</p>

<pre><code>julia&gt; [ a[1:cut_point], b[cut_point + 1:end] ]
5-element Array{Int32,1}:
 1
 2
 3
 9
 0
</code></pre>

<p>Il ne reste plus qu&#8217;à en faire une fonction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">function</span><span class="nf"> crossover</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">,</span> <span class="n">chromosome2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cut_point</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">length</span><span class="p">(</span><span class="n">chromosome1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">chromosome1</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">cut_point</span><span class="p">],</span> <span class="n">chromosome2</span><span class="p">[</span><span class="n">cut_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="p">]</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/04/un-algorithme-genetique-en-julia-partie-17/'>Un algorithme génétique en Julia &ndash; partie 17</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/03/un-algorithme-genetique-en-julia-partie-16/'>Un algorithme génétique en Julia &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/02/un-algorithme-genetique-en-julia-partie-15/'>Un algorithme génétique en Julia &ndash; partie 15</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
