<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-12-30T20:49:51+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1: Les nouvelles méthodes de Set]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/"/>
    <updated>2013-12-30T19:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Avec la sortie de Ruby 2.1, la bibliothèque standard <code>Set</code> s&#8217;enrichie de
deux méthodes supplémentaires: <code>disjoint?</code> et <code>intersect?</code>.</p>

<!-- more -->


<p><code>Set</code> permet de créer un ensemble d&#8217;éléments uniques:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;set&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Set</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; #&lt;Set: {1, 2}&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La nouvelle méthode <code>intersect?</code> permet de tester si deux sets ont au moins
un élément en commun:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">s1</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">s2</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">s3</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">s1</span><span class="o">.</span><span class="n">intersect?</span> <span class="n">s2</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">s1</span><span class="o">.</span><span class="n">intersect?</span> <span class="n">s3</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>La seconde méthode, <code>disjoint?</code>, est son opposée. Elle teste si deux sets n&#8217;ont
aucuns éléments communs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">s1</span><span class="o">.</span><span class="n">disjoint?</span> <span class="n">s2</span>
</span><span class='line'><span class="go">=&gt; true</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">s1</span><span class="o">.</span><span class="n">disjoint?</span> <span class="n">s3</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce genre de méthode n&#8217;est pas très compliqué à coder soi-même, comme le
montre le code source de <code>intersect?</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">intersect?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>  <span class="n">set</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Set</span><span class="p">)</span> <span class="ow">or</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;value must be a set&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="n">set</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span> <span class="n">set</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">o</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">set</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span> <span class="kp">include</span><span class="p">?(</span><span class="n">o</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais l&#8217;avoir en standard permet de ne pas réinventer la roue…
Quant au code source de <code>disjoint?</code>, c&#8217;est très exactement comme je
le disais plus haut, l&#8217;opposé de <code>intersect?</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">disjoint?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>  <span class="o">!</span><span class="n">intersect?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/29/ruby-2-dot-1-la-methode-array-number-to-h/'>Ruby 2.1: la méthode Array#to_h</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1: la méthode Array#to_h]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/29/ruby-2-dot-1-la-methode-array-number-to-h/"/>
    <updated>2013-12-29T11:31:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/29/ruby-2-dot-1-la-methode-array-number-to-h</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La version 2.1 de Ruby est sortie comme promis à Noël. La classe Array y gagne
une nouvelle méthode: <code>to_h</code>.</p>

<!-- more -->


<p>Pour transformer ce tableau:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[[</span><span class="ss">:key1</span><span class="p">,</span> <span class="s2">&quot;one&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="ss">:key2</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="ss">:key3</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>en un Hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">:key1</span><span class="o">=&gt;</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="ss">:key2</span><span class="o">=&gt;</span><span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="ss">:key3</span><span class="o">=&gt;</span><span class="s2">&quot;three&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode était jusqu&#8217;ici la suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">my_array</span> <span class="o">=</span> <span class="o">[[</span><span class="ss">:key1</span><span class="p">,</span> <span class="s2">&quot;one&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="ss">:key2</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="ss">:key3</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="o">]]</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Hash</span><span class="o">[*</span><span class="n">my_array</span><span class="o">.</span><span class="n">flatten</span><span class="o">]</span>
</span><span class='line'><span class="go">=&gt; {:key1=&gt;&quot;one&quot;, :key2=&gt;&quot;two&quot;, :key3=&gt;&quot;three&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby 2.1 rend ceci plus simple, plus lisse, en ajoutant une méthode
de transformation à la classe Array, <code>to_h</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">my_array</span><span class="o">.</span><span class="n">to_h</span>
</span><span class='line'><span class="go">=&gt; {:key1=&gt;&quot;one&quot;, :key2=&gt;&quot;two&quot;, :key3=&gt;&quot;three&quot;}</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/'>Ruby 2.1: Les nouvelles méthodes de Set</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La fonction d'identité en lambda calculus]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/"/>
    <updated>2013-12-28T20:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Après avoir introduit les expressions du λ calculus, on voit
aujourd&#8217;hui comment appliquer une fonction sur un argument, à
travers la fonction d&#8217;identité.</p>

<!-- more -->


<p>La fonction d&#8217;identité est <code>λx.x</code>. Sa particularité est qu&#8217;elle renvoie
l&#8217;argument sur lequel elle est appliquée. Les noms utilisés n&#8217;ont aucune
importance: on pourrait l&#8217;écrire <code>λa.a</code>, ou encore <code>λtruc.truc</code>.</p>

<p>Voyons le mécanisme pour appliquer une fonction, en appliquant la fonction
d&#8217;identité sur l&#8217;argument <code>foo</code>:</p>

<pre><code>(λx.x foo)
</code></pre>

<p>Les parenthèses nous disent qu&#8217;il s&#8217;agit d&#8217;une application. L&#8217;expression qui
tient lieu de fonction est la fonction:</p>

<pre><code>λx.x
</code></pre>

<p>Et l&#8217;expression qui tient lieu d&#8217;argument est le nom:</p>

<pre><code>foo
</code></pre>

<p>Dans la fonction <code>λx.x</code>, le premier <code>x</code> est la variable liée, le second
<code>x</code> est le corps de la fonction.</p>

<p>Pour appliquer la fonction <code>λx.x</code> sur <code>foo</code>, il faut substituer chaque
occurences de la variable liée (x) dans le corps de la fonction par l&#8217;argument.
Le nom <code>x</code> dans le corps de la fonction est substitué par le nom
<code>foo</code>. Le résultat est donc:</p>

<pre><code>foo
</code></pre>

<p>Voilà, j&#8217;ai cherché à décomposer au maximum ce mécanisme fort simple de
substitution. N&#8217;ayez pas peur, il se pourrait que cela se complique
quelque peu par la suite ;&ndash;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/27/introduction-a-lambda-calculus/'>Introduction à Lambda Calculus</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/'>Ruby 2.1: Les nouvelles méthodes de Set</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/29/ruby-2-dot-1-la-methode-array-number-to-h/'>Ruby 2.1: la méthode Array#to_h</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction à Lambda Calculus]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/27/introduction-a-lambda-calculus/"/>
    <updated>2013-12-27T14:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/27/introduction-a-lambda-calculus</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour mieux comprendre la programmation fonctionnelle, j&#8217;ai décidé
de plonger aux racines de ce paradigme, à savoir le langage λ calculus
(λ se prononce lambda).
Je rédigerais quelques articles sur ce sujet, en tentant à chaque fois
d&#8217;expliquer le plus simplement possible ce que j&#8217;aurais compris de ce
langage.</p>

<!-- more -->


<p>Le langage λ calculus, inventé dans la décennie 1930 par
<a href="http://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</a>, repose sur
3 types d&#8217;expressions:</p>

<ol>
<li>Les noms</li>
<li>Les fonctions</li>
<li>Les applications</li>
</ol>


<h2>Les noms</h2>

<p>Un nom peut être n&#8217;importe quelle suite de caractères affichables, à
l&#8217;exception des caractères utilisés pour définir une fonction ou
une application. Voici quelques exemples de noms possibles en
lambda calculus:</p>

<pre><code>x
xavier
1
123
0,345
foo_BAR
-
@!^
</code></pre>

<p>Autrement dit, tout et n&#8217;importe quoi.</p>

<h2>Les fonctions</h2>

<p>Une fonction débute par le caractère lambda, est suivie d&#8217;un nom, puis d&#8217;un
point et enfin du corps de la fonction. Le corps de la fonction est
une expression, ce qui signifie que cela peut être un nom, une fonction ou
même une application.
Quelques exemples:</p>

<pre><code>λx.x
λfoo.bar
λa.λb.c
λfoo.(λbar.ba truc)
</code></pre>

<p>Il faut noter que les fonctions lambda sont anonymes, elles n&#8217;ont pas de noms.
Le nom qui suit le caractère λ n&#8217;est donc pas le nom de la fonction, mais le
nom d&#8217;une variable liée, ou <em>bound variable</em>, qui sera utilisée dans les
applications pour transformer le corps de la fonction.</p>

<p>Si on décortique la fonction <code>λa.λb.c</code>, cela donne:</p>

<pre><code>variable liée: a
corps        : λb.c
</code></pre>

<h2>Les applications</h2>

<p>Plutôt que d&#8217;<em>appeler</em> une fonction, en λ calculus on va <em>appliquer</em> une
fonction à un argument. Pour cela on écrit entre parenthèses une fonction,
suivie d&#8217;un argument. Par exemple:</p>

<pre><code>(λx.x foo)
</code></pre>

<p>signifie que l&#8217;on applique la fonction <code>λx.x</code> à l&#8217;argument <code>foo</code>.</p>

<p>Il faut encore signaler qu&#8217;en λ calculus tout est fonction. Donc:</p>

<pre><code>(a b)
</code></pre>

<p>est une application valide.</p>

<p>La prochaine fois, on verra comment évaluer une application.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/'>La fonction d&#8217;identité en lambda calculus</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/21/racket-premiere-approche-de-lambda/'>Racket: première approche de lambda</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/'>Racket pour les Rubyists 8: Tests unitaires simples</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 48: Économie - Résolution du problème]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/"/>
    <updated>2013-12-26T20:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On termine le problème d&#8217;investissement, qui je le rappelle est basiquement
un problème de sac à dos avec des objets multiples.</p>

<!-- more -->


<p>Le code complet sur trouve sur Github: <a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/invest.rb">invest.rb</a>.</p>

<p>Il restait à voir la classe <code>Mutator</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mutator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">mutation_rate</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="n">items</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="n">chromosome</span><span class="o">.</span><span class="n">map</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">gene</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span>
</span><span class='line'>        <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="vi">@items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">gene</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La formule pour muter un gène est basique, on crée aléatoirement un
nombre compris entre 0 et le nombre d&#8217;actions maximum pour cette
action particulière:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span>
</span><span class='line'>    <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="vi">@items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">number</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il reste à initialiser l&#8217;algorithme et à le lancer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">population</span> <span class="o">=</span> <span class="no">Population</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Initialized!&quot;</span>
</span><span class='line'><span class="no">GeneticAlgorithm</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">generations</span><span class="p">:</span> <span class="mi">1_000</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">population</span><span class="p">:</span> <span class="n">population</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">capacity</span><span class="p">:</span> <span class="mi">15_000</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mutation_rate</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">items</span><span class="p">:</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>On dispose de 1 000 individus dans la population. On s&#8217;arrête
à la 1 000ème génération. Notre capacité d&#8217;investissement est
de 15 000 €. Et le taux de mutation est fixé classiquement
comme étant l&#8217;inverse du nombre d&#8217;individus.</p>

<p>Et c&#8217;est parti:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby invest.rb
</span><span class='line'>Initialized!
</span><span class='line'>&lt;invalid&gt; Gen: 0 Profit: 4202 Cost: 35599
</span><span class='line'>&lt;invalid&gt; Gen: 1 Profit: 3567 Cost: 34133
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>VALID     Gen: 999 Profit: 3430 Cost: 14067
</span><span class='line'>----------------------
</span><span class='line'>Best ever
</span><span class='line'>----------------------
</span><span class='line'>Profit: 3430
</span><span class='line'>Cost:   14067
</span><span class='line'>Listing:
</span><span class='line'>49 ACCOR
</span><span class='line'>0 AIR_LIQUIDE
</span><span class='line'>5 ALSTOM
</span><span class='line'>42 ARCELORMITTAL_REG
</span><span class='line'>1 AXA
</span><span class='line'>3 BNP_PARIBAS
</span><span class='line'>37 BOUYGUES
</span><span class='line'>0 CAP_GEMINI
</span><span class='line'>7 CARREFOUR
</span><span class='line'>94 CREDIT_AGRICOLE_SA
</span><span class='line'>0 DANONE
</span><span class='line'>7 EADS
</span><span class='line'>70 EDF
</span><span class='line'>1 ESSILOR_INTERNATIONAL
</span><span class='line'>6 GDF_SUEZ
</span><span class='line'>2 GEMALTO
</span><span class='line'>1 KERING
</span><span class='line'>2 L<span class="err">&#39;</span>OREAL
</span><span class='line'>0 LAFARGE
</span><span class='line'>0 LEGRAND_SA
</span><span class='line'>1 LVMH_MOET_VUITTON
</span><span class='line'>2 MICHELIN
</span><span class='line'>1 ORANGE
</span><span class='line'>1 PERNOD_RICARD
</span><span class='line'>1 PUBLICIS_GROUPE
</span><span class='line'>0 RENAULT
</span><span class='line'>1 SAFRAN
</span><span class='line'>21 SAINT_GOBAIN
</span><span class='line'>0 SANOFI
</span><span class='line'>1 SCHNEIDER_ELECTRIC
</span><span class='line'>7 SOCIETE_GENERALE
</span><span class='line'>0 SOLVAY
</span><span class='line'>73 STMICROELECTRONICS
</span><span class='line'>1 TECHNIP
</span><span class='line'>90 TOTAL
</span><span class='line'>1 UNIBAIL-RODAMCO
</span><span class='line'>8 VALLOUREC
</span><span class='line'>0 VEOLIA_ENVIRONNEMENT
</span><span class='line'>1 VINCI
</span><span class='line'>36 VIVENDI
</span></code></pre></td></tr></table></div></figure>


<p>Si vous pensez à quelques améliorations, et il y en a,
n&#8217;hésitez pas à les tester et/ou à m&#8217;en faire part dans un
commentaire.</p>

<p>La prochaine fois, on s&#8217;attaquera sûrement à un problème de
sac à dos multiple. C&#8217;est à dire plusieurs objets de chaque
sortes et plusieurs sacs à dos.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/'>Les algorithmes génétiques démystifiés 47: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/'>Les algorithmes génétiques démystifiés 46: Économie, la boucle principale</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/'>Les algorithmes génétiques démystifiés 45: Économie, calcul du score</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sortie de coco 0.8]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/25/sortie-de-coco-0-dot-8/"/>
    <updated>2013-12-25T19:23:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/25/sortie-de-coco-0-dot-8</id>
    <content type="html"><![CDATA[<p>La version 0.8 de la gem coco est sortie il y a quelques jours.
Coco est une bibliothèque de couverture de code (<em>code coverage</em>) pour
Ruby.</p>

<!-- more -->


<p>Cette nouvelle version est essentiellement cosmétique. Elle améliore le
visuel de la page d&#8217;index du rapport Html, et supprime le besoin des
fichiers CSS de Yahoo!</p>

<p><img src="http://lkdjiin.github.io/images/Capture-4.png"></p>

<p>Vous pouvez <a href="https://github.com/lkdjiin/coco">télécharger coco</a> depuis Github, ou l&#8217;installer directement:</p>

<pre><code>gem install coco
</code></pre>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/'>Couverture de code pour Ruby avec coco</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/'>Remplacer Sed et Awk par Ruby 11: La gem English</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png/'>Prise en main de la gem chunky_png</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby: Récapitulatif]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/"/>
    <updated>2013-12-24T15:16:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>C&#8217;est la fin de cette série. Durant une quinzaine d&#8217;articles, on a vu
qu&#8217;il était possible de remplacer Sed ou Awk par Ruby, pour faire de
l&#8217;édition, de l&#8217;analyse ou du filtrage de fichier texte.
Cet article récapitule tout ce qu&#8217;on a vu.</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">Remplacer Sed et Awk par Ruby</a>
j&#8217;explique l&#8217;utilité des langages Sed et Awk, et pourquoi il peut-être
intéressant de les remplacer par Ruby.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/">Premier pas</a>
on a appris à parcourir les lignes d&#8217;un fichier, à utiliser la variable
prédéfinie <code>$_</code> et on a approché les blocs BEGIN et END.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end/">BEGIN et END</a>
je parle en détail des blocs BEGIN et END.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/">Les options -p et -l</a>
on voit comment Ruby peut s&#8217;occuper automatiquement de l&#8217;affichage des lignes
et des caractères de fin de ligne.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/">Accéder aux champs/colonnes</a>
on voit que Ruby peut <em>splitter</em> automatiquement les différents champs d&#8217;une
ligne.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/">Séparateur de champs</a>
je montre comment spécifier les séparateurs de champs.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/">Modifier/sauvegarder les données</a>
on apprend à modifier un fichier <em>en place</em> et à faire automatiquement une
copie de sauvegarde.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/">Scripts sur la ligne de commande</a>
je montre comment écrire un <em>one liner</em>.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/10/remplacer-sed-et-awk-par-ruby-9-utiliser-la-bibliotheque-standard/">Utiliser la bibliothèque standard</a>
on voit comment charger une gem sur la ligne de commande.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">La gem English</a>
on apprend à utiliser des noms qui ont du sens à la place des variables
prédéfinies.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/">Numéro de ligne</a>
on apprend que Ruby tient automatiquement le compte des numéros de ligne.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/">Séparateurs en sortie</a>
on voit comment modifier les valeurs du séparateur de champs et du séparateur
d&#8217;enregistrements/lignes.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/">Flip flop</a>
je montre une technique très utilisée dans Sed ou Awk pour traiter des
groupes de lignes.</p>

<p>Enfin, dans
<a href="http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/">Un exemple d&#8217;utilisation</a>
et <a href="http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/">Un dernier exemple</a>
je montre deux exemples réels.</p>

<p>Voilà, avec cette série je pense que vous avez tout ce qu&#8217;il faut pour
traiter vos logs, fichiers csv et autres joyeusetées en Ruby. Joyeux Noël !</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/'>Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/'>Remplacer Sed et Awk par Ruby: Flip flop</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 47: Économie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/"/>
    <updated>2013-12-23T16:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La dernière fois on a vu <a href="http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/">la classe GeneticAlgorithm</a>, qui faisait usage
d&#8217;une classe IndividualFormatter. Cette classe est le sujet de l&#8217;article
d&#8217;aujourd&#8217;hui.</p>

<!-- more -->


<p>Cette classe, <code>IndividualFormatter</code>, est responsable de la transformation
d&#8217;un individu de la population en une chaîne de caractères qui véhicule
des informations <em>affichables</em> sur cet individu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">IndividualFormatter</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">display</span><span class="p">(</span><span class="ss">individual</span><span class="p">:,</span> <span class="ss">generation</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:,</span> <span class="ss">capacity</span><span class="p">:)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="n">items</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="n">capacity</span>
</span><span class='line'>      <span class="s2">&quot;&lt;invalid&gt; Gen: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2"> Profit: </span><span class="si">#{</span><span class="n">profit</span><span class="si">}</span><span class="s2"> Cost: </span><span class="si">#{</span><span class="n">cost</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;VALID     Gen: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2"> Profit: </span><span class="si">#{</span><span class="n">profit</span><span class="si">}</span><span class="s2"> Cost: </span><span class="si">#{</span><span class="n">cost</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">display_best_ever</span><span class="p">(</span><span class="ss">individual</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="n">items</span>
</span><span class='line'>    <span class="s2">&quot;----------------------</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">\</span>
</span><span class='line'>    <span class="s2">&quot;Best ever</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">\</span>
</span><span class='line'>    <span class="s2">&quot;----------------------</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">\</span>
</span><span class='line'>    <span class="s2">&quot;Profit: </span><span class="si">#{</span><span class="n">profit</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">\</span>
</span><span class='line'>    <span class="s2">&quot;Cost:   </span><span class="si">#{</span><span class="n">cost</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">\</span>
</span><span class='line'>    <span class="s2">&quot;Listing:</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">\</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Individual</span><span class="o">.</span><span class="n">listing</span><span class="p">(</span><span class="ss">chromosome</span><span class="p">:</span> <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="p">,</span> <span class="ss">items</span><span class="p">:</span> <span class="n">items</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>display</code> est utilisée à chaque génération, pour afficher succintement
le meilleur individu trouvé jusqu&#8217;ici.</p>

<p>La méthode <code>display_best_ever</code> est elle, utilisée à la fin de l&#8217;algorithme,
pour afficher la meilleure solution avec plus de détails.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/'>Les algorithmes génétiques démystifiés 48: Économie &ndash; Résolution du problème</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/'>Les algorithmes génétiques démystifiés 46: Économie, la boucle principale</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/'>Les algorithmes génétiques démystifiés 45: Économie, calcul du score</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby: Un dernier exemple]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/"/>
    <updated>2013-12-22T20:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Avant de mettre un terme à cette série d&#8217;articles, j&#8217;aimerais donner
un dernier exemple concret de l&#8217;utilisation de Ruby en <em>mode</em> Sed/Awk.
Il y a quelques jours, j&#8217;ai ajouté un bouton «flattr» à la fin des
quelques 160 articles de ce blog. Voici comment j&#8217;ai fait…</p>

<!-- more -->


<p>Tout d&#8217;abord le script Ruby:</p>

<figure class='code'><figcaption><span>script.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span><span class="p">{</span><span class="n">code</span><span class="o">=</span> <span class="s2">&quot;code à insérer&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="vg">$_</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;À demain.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$_</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="si">#{</span><span class="n">code</span><span class="si">}</span><span class="se">\n\n</span><span class="si">#{</span><span class="vg">$_</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je cherche à insérer le code avant la chaîne &ldquo;À demain.&rdquo;, qui termine
chacun de mes articles. Si vous avez suivi cette série d&#8217;articles depuis
le début, j&#8217;espère que ce script parle de lui-même…
Notez quand même que ce script demande une version de Ruby supérieure
ou égale à 2.0, ou alors il faudra ajouter un commentaire <em>magique</em> pour
spécifier l&#8217;encodage utf-8.</p>

<p>Maintenant, comment appliquer ce script à chacun des articles. J&#8217;ai choisi
d&#8217;utiliser une boucle en Bash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ <span class="k">for </span>i in *.markdown; <span class="k">do </span>ruby -p -i script.rb <span class="nv">$i</span>; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous avez besoin d&#8217;explications sur cette ligne de commande, je vous
renvoie à ces articles:</p>

<ul>
<li><a href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/">ruby -p</a></li>
<li><a href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/">ruby -i</a></li>
<li><a href="http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/">Les boucles en Bash</a></li>
</ul>


<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/'>Remplacer Sed et Awk par Ruby: Récapitulatif</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/'>Remplacer Sed et Awk par Ruby: Flip flop</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby: Flip flop]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/"/>
    <updated>2013-12-21T18:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Comment faire pour travailler sur un groupe de lignes, quand ce groupe
de lignes commence avec un marqueur et fini avec un autre ?
Par exemple, avec le fichier de données suivant, on cherche à afficher
les lignes depuis «start» jusqu&#8217;à «end»:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">start</span>
</span><span class='line'><span class="err">4</span>
</span><span class='line'><span class="err">5</span>
</span><span class='line'><span class="err">6</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'><span class="err">7</span>
</span><span class='line'><span class="err">8</span>
</span><span class='line'><span class="err">9</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>C&#8217;est ce qu&#8217;on appelle un <em>flip flop</em> : On commence le traitement sur une
condition de départ, puis on traite toutes les lignes jusqu&#8217;à une
condition d&#8217;arrêt. C&#8217;est un principe très utilisé avec Sed ou Awk.
Pour faire la même chose en Ruby, on va se servir d&#8217;un <em>range</em>:</p>

<figure class='code'><figcaption><span>flip_flop.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="vg">$_</span> <span class="k">if</span> <span class="vg">$_</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;start&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">.</span><span class="vg">$_</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n flip_flop.rb data.txt
</span><span class='line'>start
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>6
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/'>Remplacer Sed et Awk par Ruby: Récapitulatif</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/'>Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/'>Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typematrix 2030: Problème avec le pavé numérique]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/20/typematrix-2030-probleme-avec-le-pave-numerique/"/>
    <updated>2013-12-20T16:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/20/typematrix-2030-probleme-avec-le-pave-numerique</id>
    <content type="html"><![CDATA[<p>Normalement, un simple appui sur la touche «num» bascule du clavier
normal vers le clavier numérique et vice-versa. Cela fonctionnait
très bien quand j&#8217;ai reçu le clavier et puis d&#8217;un jour à l&#8217;autre,
sans prévenir, plus rien…</p>

<!-- more -->


<p>Quand je dis «plus rien», je veux dire : l&#8217;appui sur la touche «num» met
bien en marche la petite led, mais quand tu appuis sur un chiffre, ça
marche pas.</p>

<p>Frustrant. Surtout quand tu met plus de 100€ dans un clavier et qu&#8217;en faisant
quelques recherches tu t&#8217;aperçois que c&#8217;est un problème récurrent et
que <a href="http://typematrix.com/support/user-guide.php">le site de Typematrix</a> n&#8217;est pas très loquace sur le sujet. En gros tu ne
trouves pas la solution à ton problème (récurrent hein) sur le site du
fabriquant. Il me semble pourtant que la FAQ serait un bon endroit pour
ça, non ?</p>

<p>Bref, le Typematrix 2030 gère la bascule pavé numérique/clavier normal en
interne, et pour cela, il s&#8217;attend à ce que l&#8217;ordinateur démarre en mode
«verrou numérique». Ce que font 99% des machines, dont la mienne. C&#8217;est donc
pas le problème.</p>

<p>La solution, <a href="http://brainstormy.wordpress.com/2011/11/29/typematrix-ez-2030-et-ubuntu-11-10/">trouvée ici</a> (au passage un grand merci !),
est de décocher l&#8217;option «permettre le contrôle du pointeur en utilisant le
pavé numérique» qui, sur Debian, se trouve dans <code>Système&gt;Préférences&gt;Clavier</code>.</p>

<p>Grâce à cela, ça fonctionne de nouveau. Mais il reste toujours un mystère.
Si cette fameuse option était précédement décochée, comment s&#8217;est-elle
retrouvée cochée ? Dans le cas contraire, pourquoi le Typematrix s&#8217;est
mis soudainement à la considérer ? En conclusion, ça marche, mais je ne
sais pas vraiment pourquoi.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer/'>Le ventilo de mon alimentation fait un bruit d&#8217;enfer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 46: Économie, la boucle principale]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/"/>
    <updated>2013-12-19T14:26:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après <a href="http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/">le calcul du score</a>
d&#8217;un individu, voici maintenant le coeur du programme, la classe
<code>GeneticAlgorithm</code>.</p>

<!-- more -->


<p>Cette classe est batie sur le même modèle que pour les problèmes vus
précédement, je ne vais donc pas la commenter en détails. Voici d&#8217;abord
les méthodes publiques:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GeneticAlgorithm</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">generations</span><span class="p">:,</span> <span class="ss">population</span><span class="p">:,</span> <span class="ss">capacity</span><span class="p">:,</span> <span class="n">mutation_rate</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>    <span class="vi">@generations</span> <span class="o">=</span> <span class="n">generations</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>    <span class="vi">@capacity</span> <span class="o">=</span> <span class="n">capacity</span>
</span><span class='line'>    <span class="vi">@mutation_rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="n">items</span>
</span><span class='line'>    <span class="vi">@crossover</span> <span class="o">=</span> <span class="no">Crossover</span><span class="o">.</span><span class="n">new</span> <span class="n">chromosome_size</span><span class="p">:</span> <span class="n">items</span><span class="o">.</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>      <span class="n">mutation_rate</span><span class="p">:</span> <span class="n">mutation_rate</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">items</span><span class="p">:</span> <span class="n">items</span>
</span><span class='line'>    <span class="vi">@best_ever</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="vi">@generations</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Evaluator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">capacity</span><span class="p">:</span> <span class="vi">@capacity</span><span class="p">,</span> <span class="ss">population</span><span class="p">:</span> <span class="vi">@population</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">items</span><span class="p">:</span> <span class="vi">@items</span><span class="p">)</span><span class="o">.</span><span class="n">evaluate!</span>
</span><span class='line'>      <span class="n">find_best_ever</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>      <span class="n">next_generation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="no">IndividualFormatter</span><span class="o">.</span><span class="n">display_best_ever</span> <span class="ss">individual</span><span class="p">:</span> <span class="vi">@best_ever</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">items</span><span class="p">:</span> <span class="vi">@items</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;initialisation est des plus basiques. Quant à la méthode <code>run</code>, elle
introduit une nouvelle classe : <code>IndividualFormatter</code>. Cette classe sera
discutée en détail dans le prochain article.</p>

<p>Maintenant les méthodes privées:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GeneticAlgorithm</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_best_ever</span><span class="p">(</span><span class="n">generation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">best</span>
</span><span class='line'>    <span class="vi">@best_ever</span> <span class="o">=</span> <span class="n">best</span> <span class="k">if</span> <span class="n">best</span> <span class="o">&gt;</span> <span class="vi">@best_ever</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="no">IndividualFormatter</span><span class="o">.</span><span class="n">display</span> <span class="ss">individual</span><span class="p">:</span> <span class="vi">@best_ever</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">generation</span><span class="p">:</span> <span class="n">generation</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">items</span><span class="p">:</span> <span class="vi">@items</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">capacity</span><span class="p">:</span> <span class="vi">@capacity</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">sort_by!</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">score</span><span class="p">}</span>
</span><span class='line'>    <span class="n">elite</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pool</span> <span class="o">=</span> <span class="no">MatingPool</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@population</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="vi">@crossover</span><span class="o">.</span><span class="n">two_point</span><span class="p">(</span><span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">,</span> <span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">concat</span> <span class="n">elite</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find_best_ever</code> va trouver le meilleur individu à un moment précis, toutes
générations confondues <em>et</em> va afficher cet individu via <code>IndividualFormatter</code>
(<em>Je sais, c&#8217;est mal, cette méthode fait deux choses…</em>).</p>

<p>Quant à la méthode <code>next_generation</code>, c&#8217;est la même que pour
<a href="http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/">le problème précédent</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/'>Les algorithmes génétiques démystifiés 48: Économie &ndash; Résolution du problème</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/'>Les algorithmes génétiques démystifiés 47: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/'>Les algorithmes génétiques démystifiés 45: Économie, calcul du score</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/"/>
    <updated>2013-12-18T18:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La dernière fois on a vu <a href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/">les numéros de lignes</a>, aujourd&#8217;hui on voit comment
modifier les séparateurs de champ et d&#8217;enregistrement.</p>

<!-- more -->


<p>On continue donc avec un exemple trivial, on a ce fichier de données:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1,a</span>
</span><span class='line'><span class="err">2,b</span>
</span><span class='line'><span class="err">3,c</span>
</span></code></pre></td></tr></table></div></figure>


<p>On va intervertir les champs et modifier le séparateur de champs pour qu&#8217;il
devienne un point-virgule (pour le nom des variables prédéfinie, je vous
renvoie à l&#8217;article sur <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">la gem English</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;English&#39;</span>
</span><span class='line'>  <span class="vg">$FS</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span>
</span><span class='line'>  <span class="vg">$OFS</span> <span class="o">=</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="vg">$_</span> <span class="o">=</span> <span class="vg">$F</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>join</code> va utiliser automatiquement le contenu de <code>$OFS</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -apl test1.rb data.txt
</span><span class='line'>a;1
</span><span class='line'>b;2
</span><span class='line'>c;3
</span></code></pre></td></tr></table></div></figure>


<p>Parfois on veut aussi modifier le séparateur d&#8217;enregistrements (les enregistrements
sont ici nos lignes du fichier). Par exemple, pour passer du caractère <em>newline</em> à
<code>:</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;English&#39;</span>
</span><span class='line'>  <span class="vg">$FS</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span>
</span><span class='line'>  <span class="vg">$OFS</span> <span class="o">=</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'>  <span class="vg">$ORS</span> <span class="o">=</span> <span class="s1">&#39;:&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="vg">$_</span> <span class="o">=</span> <span class="vg">$F</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et le résultat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -apl test1.rb data.txt
</span><span class='line'>a;1:b;2:c;3:
</span></code></pre></td></tr></table></div></figure>


<p>Et bien sûr, si vous le voulez vraiment, vous pouvez toujours écrire ce
script en une ligne, directement dans la console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -aple <span class="s1">&#39;BEGIN{$;=&quot;,&quot;;$,=&quot;;&quot;;$\=&quot;:&quot;};$_=$F.reverse.join&#39;</span> data.txt
</span></code></pre></td></tr></table></div></figure>


<p>Mais êtes-vous sûr de vouloir faire ça ?!</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/'>Remplacer Sed et Awk par Ruby: Récapitulatif</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/'>Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/'>Remplacer Sed et Awk par Ruby: Flip flop</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 12: Numéro de ligne]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/"/>
    <updated>2013-12-17T21:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne</id>
    <content type="html"><![CDATA[<p>Après avoir vu l&#8217;utilité de <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">la gem English</a>, on voit aujourd&#8217;hui une utilisation
des numéros de ligne pour créer un échantillon de données.</p>

<!-- more -->


<p>La variable prédéfinie <code>$.</code> contient le numéro de la ligne en cours de
traitement. Une utilisation de cette variable, que j&#8217;aime beaucoup, est
la création d&#8217;un petit échantillon (<em>sample</em>) de données, à partir d&#8217;un
long fichier.</p>

<p>Pour la démonstration, prenons un fichier de données de 33 lignes:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">.</span>
</span><span class='line'><span class="err">.</span>
</span><span class='line'><span class="err">.</span>
</span><span class='line'><span class="err">33</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;idée est de ne prendre qu&#8217;une ligne sur dix. Voilà le script:</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="vg">$_</span> <span class="k">if</span> <span class="vg">$.</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou, en utilisant la gem English:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">require</span> <span class="s1">&#39;English&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$LAST_READ_LINE</span> <span class="k">if</span> <span class="vg">$INPUT_LINE_NUMBER</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne en cours est affichée seulement quand le numéro de la ligne est
un multiple de 10:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n test.rb data.txt
</span><span class='line'>10
</span><span class='line'>20
</span><span class='line'>30
</span></code></pre></td></tr></table></div></figure>


<p>Intéressant quand on veut se créer rapidement un petit jeu de données pour
tester quelque chose…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/'>Remplacer Sed et Awk par Ruby: Récapitulatif</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/'>Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/'>Remplacer Sed et Awk par Ruby: Flip flop</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 45: Économie, calcul du score]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score/"/>
    <updated>2013-12-16T18:15:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/16/les-algorithmes-genetiques-demystifies-45-economie-calcul-du-score</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier j&#8217;ai <a href="http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie/">survolé les trois classes/modules</a> qui s&#8217;occupent de l&#8217;évaluation,
<code>Evaluator</code>, <code>Score</code> et <code>Fitness</code>. Aujourd&#8217;hui je parle en détail du
module <code>Score</code>.</p>

<!-- more -->


<p>Revoici donc le module <code>Score</code> au complet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Score</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">profit_and_cost</span><span class="p">(</span><span class="n">individual</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">profit</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">profit</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>      <span class="n">cost</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">cost</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">[</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compute_score!</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">shift</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="vi">@items</span>
</span><span class='line'>    <span class="n">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">cost</span> <span class="o">-</span> <span class="vi">@capacity</span><span class="p">)</span> <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>    <span class="n">profit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shift</span>
</span><span class='line'>    <span class="n">score_min</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:score</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">+=</span> <span class="n">score_min</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voyons d&#8217;abord rapidement la méthode <code>compute_score!</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">compute_score!</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">shift</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On calcule/affecte le score de chaque individu. Puis on appelle une méthode
<code>shift</code>, dont on verra l&#8217;utilité bientôt.</p>

<p>La méthode <code>score</code> maintenant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="vi">@items</span>
</span><span class='line'>    <span class="n">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On calcule le profit et le coût du portefeuille d&#8217;actions que représente
un individu via la méthode de classe <code>Score.profit_and_cost</code>. Puis on envoit
tout ça dans une méthode <code>malus</code>, qui va gérer les individus invalides.</p>

<p>La méthode <code>Score.profit_and_cost</code> est le <em>coeur</em> du calcul:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">profit_and_cost</span><span class="p">(</span><span class="n">individual</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">profit</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">profit</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>      <span class="n">cost</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">cost</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">[</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme je vais m&#8217;en servir dans d&#8217;autres parties du programme, j&#8217;en ai fait
une méthode de classe. On calcule le profit de l&#8217;individu en additionnant
le profit généré par chacune des actions. <code>items[index].profit</code> se
réfère à la liste <code>Knapsack::ITEMS</code> et <code>number</code> est un gène de l&#8217;individu.
On procède à l&#8217;identique pour le calculer le coût.</p>

<p>On peut passer à la méthode <code>malus</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">cost</span> <span class="o">-</span> <span class="vi">@capacity</span><span class="p">)</span> <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>    <span class="n">profit</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai utilisé le même principe empirique que dans notre
<a href="http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides/">dernier programme</a>,
à savoir que si le coût dépasse la capacité d&#8217;investissement
je diminue le profit de deux fois la différence entre coût
et capacité.</p>

<p>Il reste à parler de la méthode <code>shift</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">shift</span>
</span><span class='line'>    <span class="n">score_min</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:score</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">+=</span> <span class="n">score_min</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>De la façon dont on a calculé le score, celui-ci peut être négatif. Ce
qui pose un problème avec le calcul de la <em>fitness</em>, qui attend un
nombre positif. La méthode <code>shift</code> sert à regler ceci.
Tout d&#8217;abord je calcule la valeur absolue du score minimum. Puis j&#8217;ajoute
cette valeur, plus 1, à chacun des scores. Ainsi je suis sûr que le score
minimal sera 1.</p>

<p>Voilà pour aujourd&#8217;hui. Comme d&#8217;habitude, c&#8217;est l&#8217;évaluation qui demande
le plus de reflexion et d&#8217;explications.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/'>Les algorithmes génétiques démystifiés 48: Économie &ndash; Résolution du problème</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/'>Les algorithmes génétiques démystifiés 47: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/'>Les algorithmes génétiques démystifiés 46: Économie, la boucle principale</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 44: Économie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie/"/>
    <updated>2013-12-15T18:25:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/15/les-algorithmes-genetiques-demystifies-44-economie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant que <a href="">la population initiale est créée</a>,
voyons comment l&#8217;évaluer.</p>

<!-- more -->


<p>Voici la classe <code>Evaluator</code>, qui a pris un coup de jeune:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Score</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Fitness</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">capacity</span><span class="p">:,</span> <span class="ss">population</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>    <span class="vi">@capacity</span> <span class="o">=</span> <span class="n">capacity</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="n">items</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate!</span>
</span><span class='line'>    <span class="n">compute_score!</span>
</span><span class='line'>    <span class="n">compute_fitness!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai transferé les calculs du score et de la <em>fitness</em> dans des modules
car cette classe <code>Evaluator</code> commence à enfler (et aussi car je teste
quelques idées en vue d&#8217;un futur framework).</p>

<p>Le module <code>Score</code> est bien sûr responsable de l&#8217;évaluation d&#8217;un
portefeuille d&#8217;actions. Je le présenterais demain, car je n&#8217;ai
malheureusement pas le temps nécessaire aujourd&#8217;hui. Je vous donne
malgré tout le code dès maintenant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Score</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">profit_and_cost</span><span class="p">(</span><span class="n">individual</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">profit</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">profit</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>      <span class="n">cost</span> <span class="o">+=</span> <span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">cost</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">[</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compute_score!</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">shift</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="no">Score</span><span class="o">.</span><span class="n">profit_and_cost</span> <span class="n">individual</span><span class="p">,</span> <span class="vi">@items</span>
</span><span class='line'>    <span class="n">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">malus</span><span class="p">(</span><span class="n">profit</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>
</span><span class='line'>    <span class="n">profit</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">cost</span> <span class="o">-</span> <span class="vi">@capacity</span><span class="p">)</span> <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>    <span class="n">profit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shift</span>
</span><span class='line'>    <span class="n">score_min</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:score</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">+=</span> <span class="n">score_min</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>En ce qui concerne le module <code>Fitness</code>, le code est le même que
d&#8217;habitude.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Fitness</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compute_fitness!</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, demain on verra en détail le module <code>Score</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/'>Les algorithmes génétiques démystifiés 48: Économie &ndash; Résolution du problème</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/'>Les algorithmes génétiques démystifiés 47: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/'>Les algorithmes génétiques démystifiés 46: Économie, la boucle principale</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 11: La gem English]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/"/>
    <updated>2013-12-14T16:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Après avoir vu <a href="http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/">un exemple d&#8217;utilisation</a> du mode <em>sed/awk</em> de Ruby au travers
d&#8217;un <em>one liner</em>, on regarde aujourd&#8217;hui la gem English, qui facilite
énormement la
vie pour l&#8217;écriture des scripts.</p>

<!-- more -->


<p>On a vu jusqu&#8217;à présent deux variables globales, j&#8217;ai nommé <code>$_</code> et
<code>$;</code>. Ces noms sont justes barbares et imprononçables. Et des variables
globales de ce genre, il y en a quelques autres qui vont nous être utiles.
Voyons voir si vous êtes capable de deviner ce qu&#8217;elles représentent:
<code>$,</code>, <code>$\</code>, <code>$/</code> et <code>$.</code>. Vous avez deviné ? Non ? C&#8217;est là qu&#8217;entre en
jeu <a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/English/rdoc/English.html">la gem English</a>. Cette gem va nous permettre d&#8217;accéder à ces
variables à l&#8217;aide de noms compréhensibles par le commun des mortels:</p>

<pre><code>   Nom court   Nom long
$; $FS         $FIELD_SEPARATOR
$, $OFS        $OUTPUT_FIELD_SEPARATOR 
$/ $RS         $INPUT_RECORD_SEPARATOR
$\ $ORS        $OUTPUT_RECORD_SEPARATOR
$. $NR         $INPUT_LINE_NUMBER
$_             $LAST_READ_LINE
</code></pre>

<p>Pour avoir accès à ceci dans un script, il faudra charger la gem dans
un bloc BEGIN:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">require</span> <span class="s1">&#39;English&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors quand se servir des noms courts, des noms longs ? Tout dépend de
votre <em>background</em> et de votre tâche.</p>

<p>Si vous débutez en Ruby, si vous devez écrire un script long et/ou complexe,
si le script doit être maintenu pendant des mois ou plus, si il est maintenu
par plusieurs personnes, utilisez les noms longs.</p>

<p>Si vous (et votre équipe) avez une expérience de Awk, les noms courts peuvent
être une solution raisonnable.</p>

<p>Quand aux noms <em>barbares</em>, réservez les pour les <em>one liners</em>, les scripts
courts <em>one shot</em> et les séances de masochisme.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/'>Remplacer Sed et Awk par Ruby: Récapitulatif</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/'>Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/'>Remplacer Sed et Awk par Ruby: Flip flop</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 43: Économie, la population]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/13/les-algorithmes-genetiques-demystifies-43-economie-la-population/"/>
    <updated>2013-12-13T21:36:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/13/les-algorithmes-genetiques-demystifies-43-economie-la-population</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir vu dernièrement l&#8217;énoncé du <a href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/">problème d&#8217;investissement</a>
que je me propose de résoudre à l&#8217;aide d&#8217;un algorithme génétique, on
peut maintenant créer la population initiale.</p>

<!-- more -->


<p>Je me base sur le programme développé pour le problème du sac à dos
<a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack3.rb">disponible sur Github</a>.
Par contre, le code nécessite la version 2.1 de Ruby (disponible en
preview2 à l&#8217;heure où j&#8217;écris ces lignes).</p>

<p>Tout d&#8217;abord la classe <code>Individual</code>, qui recueille toutes les informations
sur nos individus: chromosome, score et fitness.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">random</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">listing</span><span class="p">(</span><span class="ss">chromosome</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>      <span class="n">chromosome</span><span class="o">.</span><span class="n">map</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">gene</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>        <span class="s2">&quot;</span><span class="si">#{</span><span class="n">gene</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">items</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">items</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.item</span><span class="o">.</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">&gt;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">other</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai ajouté une méthode de classe <code>listing</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">listing</span><span class="p">(</span><span class="ss">chromosome</span><span class="p">:,</span> <span class="ss">items</span><span class="p">:)</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="o">.</span><span class="n">map</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">gene</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">gene</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">items</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elle utilise <a href="http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/">les arguments nommés requis</a> de Ruby 2.1 et prend en
paramêtre un chromosome et la liste des actions (<code>Knapsack::ITEMS</code>,
<a href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/">voir l&#8217;article précédent</a>). Elle servira à afficher la liste des actions,
avec le nombre retenu pour chacune d&#8217;entres elles à la fin de l&#8217;algorithme.</p>

<p>Dans la méthode <code>initialize</code>, on peut voir comment je crée les chromosomes
de la population initiale:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">items</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.item</span><span class="o">.</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>items</code> se réfère à la liste des actions (<code>Knapsack::ITEMS</code>). Un chromosome est
une liste de la même taille que <code>items</code>. Chaque gène (ou emplacement dans
la liste) est un nombre compris entre zéro et le nombre maximum d&#8217;actions
pour cette action particulière (voir encore une fois <code>Knapsack::ITEMS</code>).</p>

<p>Maintenant, pour la création de la population proprement dite, il n&#8217;y a
rien de nouveau:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on verra l&#8217;évaluation…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/'>Les algorithmes génétiques démystifiés 48: Économie &ndash; Résolution du problème</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/'>Les algorithmes génétiques démystifiés 47: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/'>Les algorithmes génétiques démystifiés 46: Économie, la boucle principale</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 10: Un exemple d'utilisation]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/"/>
    <updated>2013-12-12T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/">article précédent</a>
sur les algorithmes génétiques, je devais générer des valeurs aléatoires
<em>en dur</em> dans un fichier source Ruby. Le code ressemble à ce qui suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ACCOR&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AIR_LIQUIDE&#39;</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ALSTOM&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ARCELORMITTAL_REG&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AXA&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">65</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BNP_PARIBAS&#39;</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">24</span><span class="p">),</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le dernier nombre de chaque ligne doit être compris entre 1 et 100.
Voici comment faire en utilisant ce qu&#8217;on a appris depuis le début
de cette série <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">Remplacer Sed et Awk par Ruby</a>.</p>

<!-- more -->


<p>J&#8217;ai tout d&#8217;abord écrit mes lignes en mettant la chaîne <code>ABC</code> là où je voulais
un nombre aléatoire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ACCOR&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AIR_LIQUIDE&#39;</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ALSTOM&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ARCELORMITTAL_REG&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AXA&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BNP_PARIBAS&#39;</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="no">ABC</span><span class="p">),</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela va permettre au script de <em>trouver</em> l&#8217;endroit où substituer un nombre.</p>

<p>Puis, on lance le script suivant depuis une console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -ple <span class="s1">&#39;r=rand(100)+1;$_.sub!(/ABC/,r.to_s)&#39;</span> fichier_source
</span></code></pre></td></tr></table></div></figure>


<p>Explications: <code>rand(100)+1</code> génère un nombre aléatoire entre 1 inclus et
100 inclus. <code>$_.sub!(/ABC/,r.to_s)</code> opère une substitution de la ligne en
cours de traitement: ABC est remplacé par le contenu de <code>r</code>, soit le nombre
aléatoire.</p>

<p>En réalité, je n&#8217;ai pas lancé ce script depuis une console, mais directement
dans Vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> <span class="k">ruby</span> <span class="p">-</span>ple <span class="s1">&#39;r=rand(100)+1;$_.sub\!(/ABC/,r.to_s)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans ce cas, il faut faire attention à échapper le <code>!</code>, sans quoi Vim
n&#8217;aimeras pas…</p>

<p>Voilà un exemple simple d&#8217;utilisation du mode <em>sed/awk</em> de Ruby.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/'>Remplacer Sed et Awk par Ruby: Récapitulatif</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/'>Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/'>Remplacer Sed et Awk par Ruby: Flip flop</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 42: Un problème d'économie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/"/>
    <updated>2013-12-11T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Jusqu&#8217;ici les problèmes abordés dans cette série d&#8217;articles ont été très
<em>théoriques</em>.  Le dernier algorithme génétique qu&#8217;on a exploré a permis de
résoudre
<a href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/">le problème du sac à dos</a>. Ce problème du sac à dos est une bonne base
<em>théorique</em> pour aborder certains problèmes plus <em>concrets</em>. On va justement
se rapprocher un peu du monde réel en tentant de résoudre un problème
d&#8217;économie: optimiser un investissement.</p>

<!-- more -->


<p>Voici l&#8217;énoncé du problème: Vous êtes un investisseur et vous disposez
d&#8217;une somme de 15 000 € pour acheter des actions du CAC 40.
Vous connaissez le coût
d&#8217;une action (son prix), vous savez combien elle rapportera dans, disons un
an, et vous connaissez le nombre d&#8217;actions disponibles (combien vous pouvez
en acheter). L&#8217;objectif est de savoir combien d&#8217;actions acheter pour chaque
entreprise du CAC 40, histoire de faire un maximum de profit.</p>

<p>Alors si on se rapproche du monde réel, on est encore dans un monde
fantastique, puisque pour savoir combien rapportera
une action, soit vous avez un super-pouvoir, soit vous connaissez un
ami médium. Quoiqu&#8217;il en soit, il me semble que c&#8217;est un problème intéressant,
donc c&#8217;est parti.</p>

<p>Ce problème est très proche du problème du sac à dos, je vais donc me baser
sur le code développé dans les derniers articles, et qui est
<a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack3.rb">disponible sur Github</a>.</p>

<p>Dans le problème du sac à dos, on devait choisir des objets ; ici les actions
remplacent les objets. Les objets avaient un poid ; ici les actions ont un
coût. Les objets avaient une valeur ; ici aussi les actions ont une
valeur, qu&#8217;on nommera «profit». La différence, c&#8217;est qu&#8217;ici on va pouvoir
choisir plusieurs actions de même type.</p>

<p>Voici comment on peut représenter une action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:cost</span><span class="p">,</span> <span class="ss">:profit</span><span class="p">,</span> <span class="ss">:number</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a le nom de l&#8217;action (<code>name</code>), son coût en euros (<code>cost</code>), le profit
attendu en euros (<code>profit</code>) et le nombre d&#8217;actions disponibles (<code>number</code>).</p>

<p>Pour le stock d&#8217;actions dans lequel on va puiser, j&#8217;ai été voir le CAC 40,
j&#8217;ai pris la valeur réelle des actions (arrondi à l&#8217;entier) et j&#8217;ai
généré aléatoirement les champs profit et number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Knapsack</span>
</span><span class='line'>  <span class="no">ITEMS</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ACCOR&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AIR_LIQUIDE&#39;</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ALSTOM&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ARCELORMITTAL_REG&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;AXA&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">65</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BNP_PARIBAS&#39;</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">24</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BOUYGUES&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">38</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;CAP_GEMINI&#39;</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">47</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;CARREFOUR&#39;</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">37</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;CREDIT_AGRICOLE_SA&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">99</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;DANONE&#39;</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;EADS&#39;</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">63</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;EDF&#39;</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">87</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ESSILOR_INTERNATIONAL&#39;</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">49</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;GDF_SUEZ&#39;</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">42</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;GEMALTO&#39;</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">53</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;KERING&#39;</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">97</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;L&#39;OREAL&quot;</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;LAFARGE&#39;</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">93</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;LEGRAND_SA&#39;</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">49</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;LVMH_MOET_VUITTON&#39;</span><span class="p">,</span> <span class="mi">129</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;MICHELIN&#39;</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">43</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ORANGE&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;PERNOD_RICARD&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">53</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;PUBLICIS_GROUPE&#39;</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">49</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;RENAULT&#39;</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SAFRAN&#39;</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">61</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SAINT_GOBAIN&#39;</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">33</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SANOFI&#39;</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SCHNEIDER_ELECTRIC&#39;</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">21</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SOCIETE_GENERALE&#39;</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">93</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;SOLVAY&#39;</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">33</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;STMICROELECTRONICS&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">75</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;TECHNIP&#39;</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">47</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;TOTAL&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">95</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;UNIBAIL-RODAMCO&#39;</span><span class="p">,</span> <span class="mi">184</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">82</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VALLOUREC&#39;</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">51</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VEOLIA_ENVIRONNEMENT&#39;</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VINCI&#39;</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">53</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;VIVENDI&#39;</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">38</span><span class="p">)</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on s&#8217;occupera de générer la population initiale.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/'>Les algorithmes génétiques démystifiés 48: Économie &ndash; Résolution du problème</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/'>Les algorithmes génétiques démystifiés 47: Économie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/19/les-algorithmes-genetiques-demystifies-46-economie-la-boucle-principale/'>Les algorithmes génétiques démystifiés 46: Économie, la boucle principale</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
