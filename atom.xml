<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-12-01T12:02:17+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 2: Premiers pas]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/"/>
    <updated>2013-11-30T16:29:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous avez décidé de <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">remplacer Sed et Awk par Ruby</a> ? C&#8217;est parti.
L&#8217;objectif de cet article sera de calculer et d&#8217;afficher la somme des
valeurs contenues dans un fichier.</p>

<p>Prenons le simple fichier de données (data.txt) suivant:</p>

<figure class='code'><figcaption><span>data.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">1</span>
</span><span class='line'><span class="err">2</span>
</span><span class='line'><span class="err">3</span>
</span><span class='line'><span class="err">4</span>
</span><span class='line'><span class="err">5</span>
</span><span class='line'><span class="err">6</span>
</span><span class='line'><span class="err">7</span>
</span><span class='line'><span class="err">8</span>
</span><span class='line'><span class="err">9</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Hello world!</h2>

<p>Le premier pas sera d&#8217;afficher chaque ligne du fichier de données. Voici le
script Ruby qui va faire ça:</p>

<figure class='code'><figcaption><span>test1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="vg">$_</span>
</span></code></pre></td></tr></table></div></figure>


<p>La variable <code>$_</code> est une variable prédéfinie qui contient la ligne en cours
de traitement. Dans <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">l&#8217;article précédent</a>, j&#8217;évoquai la boucle de traitement
implicite. Pour dire à Ruby d&#8217;utiliser cette boucle implicite, on doit
utiliser l&#8217;option <code>-n</code> sur la ligne de commande:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n test1.rb &lt; data.txt
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>6
</span><span class='line'>7
</span><span class='line'>8
</span><span class='line'>9
</span></code></pre></td></tr></table></div></figure>


<h2>BEGIN et END</h2>

<p>Pour calculer la somme des valeurs du fichier, il va falloir initialiser
une variable <em>avant</em> la boucle de traitement et l&#8217;afficher <em>après</em> la
boucle de traitement. Pour ça, Ruby reprend ce que fait Awk avec les
blocs <code>BEGIN {}</code> et <code>END {}</code>:</p>

<figure class='code'><figcaption><span>one_shot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">BEGIN</span> <span class="p">{</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span> <span class="o">+=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="k">END</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">total</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code placé dans un bloc <code>BEGIN</code> est executé avant tout autre code du
fichier. Celui placé dans un bloc <code>END</code> est executé après tout autre code
du fichier. Objectif atteint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span>⇒ ruby -n one_shot.rb &lt; data.txt
</span><span class='line'>45
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter qu&#8217;on a réussi notre objectif sans avoir explicitement à ouvrir
le fichier et à lire chaque ligne.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/'>Remplacer Sed et Awk par Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/"/>
    <updated>2013-11-29T18:31:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Sed et Awk sont deux petits langages spécialisés dans l&#8217;édition, le
traitement, l&#8217;analyse, le filtrage, etc, des fichiers texte.
Ce que peuvent faire ces deux langages, Ruby peut le faire.</p>

<!-- more -->


<p>Dans mon <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédant</a>
j&#8217;ai écrit:</p>

<blockquote><p>le fichier https://github.com/ruby/ruby/blob/trunk/lib/csv.rb de<br/>Ruby contient à ce jour 46% de lignes qui sont des commentaires.</p></blockquote>


<p>Je n&#8217;ai bien sûr pas compté chaque commentaire du fichier. J&#8217;ai écrit pour
cela un petit script Ruby.</p>

<p>Un algorithme standard pour ce type de tâche serait:</p>

<pre><code>ouvrir le fichier
initialiser des variables

pour chaque ligne du fichier
    mettre à jour des variables
fin

fermer le fichier
calculer le résultat
afficher le résultat
</code></pre>

<p>En fait, quand on traite/édite/analyse/filtre un fichier texte, un pattern
basique apparait:</p>

<pre><code>ouvrir le fichier
pour chaque ligne du fichier
    # faire un truc
fin
fermer le fichier
</code></pre>

<p>Avec Sed et Awk, l&#8217;ouverture du fichier, sa fermeture et la boucle de
traitement sont <em>implicites</em>. Autrement dit, on n&#8217;écrit jamais ce code.
On écrit seulement le code du traitement.</p>

<p>Ruby peut faire cela.</p>

<p>Une question se pose alors :
si Sed et Awk sont faits pour ça, pourquoi utiliser Ruby à la place ?
Il y a plusieurs raisons possibles:</p>

<ul>
<li>Vous ne connaissez ni Sed, ni Awk mais vous connaissez déjà Ruby,
même un peu. Pourquoi apprendre un nouveau langage ?</li>
<li>Vous pratiquez Sed et Awk et vous trouvez la syntaxe … comment dire …
ésotérique (surtout celle de Sed).</li>
<li>Utiliser Ruby permet d&#8217;avoir accès à toutes ses bibliothèques.</li>
</ul>


<p>Convaincu ? Dans ce cas surveillez ce blog, je vais rapidement écrire
quelques articles sur ce sujet.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/'>Remplacer Sed et Awk par Ruby 2: Premiers pas</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Plier (folder) les commentaires de style Unix]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/"/>
    <updated>2013-11-28T16:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Certains fichiers sources contiennent une proportion non négligeable de
commentaires, ou documentation interne. Par exemple, le fichier
<a href="https://github.com/ruby/ruby/blob/trunk/lib/csv.rb">ruby/lib/csv.rb</a> de
Ruby contient à ce jour 46% de lignes qui sont des commentaires. Quand on
cherche à étudier ces sources  pour la première fois, le nombre
important de commentaire est un frein pour naviguer ou se repérer dans
un tel fichier. Aujourd&#8217;hui je montre comment replier facilement les
ensembles de lignes commençant par <code>#</code>.</p>

<!-- more -->


<h2>Présentation</h2>

<p>Les fonctions de Vim qu&#8217;on va utiliser sont les suivantes:</p>

<pre><code>Fonction      Raccourci
=======================
foldmethod    fdm
foldexpr      fde
</code></pre>

<p>Vim comporte plusieurs méthodes de pliage (<em>folding</em>) de code, qu&#8217;on
spécifie avec <code>foldmethod</code>. Ici on va utiliser la méthode <code>expr</code>, qui
permet de faire à peu près tout ce qu&#8217;on veut. L&#8217;expression sera
spécifiée avec <code>foldexpr</code>.</p>

<h2>Essai en direct</h2>

<p>On va d&#8217;abord voir comment ça marche en entrant les commandes en direct live.
Ouvrez le fichier
<a href="https://github.com/ruby/ruby/blob/trunk/lib/csv.rb">ruby/lib/csv.rb</a>
(ou un autre avec beaucoup de commentaires de style Unix) et entrez ce qui
suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">fdm</span><span class="p">=</span>expr
</span><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">fde</span><span class="p">=</span>getline<span class="p">(</span><span class="k">v</span>:lnum<span class="p">)=~</span><span class="s1">&#39;^\\s*#&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Badaboum ! Tout les commentaires sont pliés. Explications:</p>

<pre><code>getline(v:lnum)
</code></pre>

<p>Cette fonction retrouve une ligne du fichier. <code>v:lnum</code> est une variable
prédéfinie qui contient le numéro de la ligne courante.</p>

<pre><code>=~
</code></pre>

<p>Cet opérateur a le même sens qu&#8217;en Ruby, par exemple. Autrement dit,
est-ce que la chaîne à ma gauche correspond à la regex à ma droite ?</p>

<pre><code>'^\\s*#'
</code></pre>

<p>C&#8217;est notre regex: début de ligne (<code>^</code>), suivi par un nombre quelconque
de blancs (<code>\\s*</code>), suivi par le caractère <code>#</code>.</p>

<p>L&#8217;expression spécifiée dans <code>foldexpr</code> (ou comme ici <code>fde</code>) sera appelée
par Vim sur chaque ligne du fichier.</p>

<h2>Embarqué dans le fichier</h2>

<p>Maintenant qu&#8217;on sait comment ça marche, voyons comment faire pour ne pas
avoir à taper ces 2 lignes à chaque fois.</p>

<p>Si vous écrivez la ligne suivante dans un fichier, typiquement à la fin, les
commandes seront executées automatiquement à l&#8217;ouverture du fichier.
C&#8217;est un truc utile à connaitre.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'># <span class="k">vim</span>:<span class="nb">fdm</span><span class="p">=</span>expr:<span class="nb">fde</span><span class="p">=</span>getline<span class="p">(</span><span class="k">v</span>\:lnum<span class="p">)=~</span><span class="s1">&#39;^\\s*#&#39;</span>:
</span></code></pre></td></tr></table></div></figure>


<p>Notez qu&#8217;il a fallu échapper le <code>:</code> de <code>v:lnum</code> pour que ça fonctionne.</p>

<h2>Une fonction</h2>

<p>Une fonction dans le <code>.vimrc</code> sera plus intéressante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> FoldUnixComments<span class="p">()</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">foldmethod</span><span class="p">=</span>expr
</span><span class='line'>  <span class="k">set</span> <span class="nb">foldexpr</span><span class="p">=</span>getline<span class="p">(</span><span class="k">v</span>:lnum<span class="p">)=~</span><span class="s1">&#39;^\\s*#&#39;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour l&#8217;executer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">call</span> FoldUnixComments<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>La méthode présentée ici n&#8217;est pas parfaite. En effet <code>foldmethod=expr</code>
<em>écrase</em> votre ancienne méthode. Néanmoins, elle me semble suffisante
quand il s&#8217;agit juste d&#8217;étudier un fichier.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/04/ecrire-une-fonction-vim-avec-ruby/'>Écrire une fonction Vim avec Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque/'>Utiliser Vim comme un tableur sur Linux (enfin presque)</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/22/du-nouveau-dans-ruby-2-dot-1-definition-de-methode/'>Du nouveau dans Ruby 2.1: Définition de méthode</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Argument nommé et requis]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/"/>
    <updated>2013-11-27T18:14:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ruby 2.0 a introduit les arguments nommés, appelés <em>keyword argument</em>
dans la langue de Shakespeare, soit: «argument mot-clé». Ruby 2.1 ajoute
la notion d&#8217;argument nommé <strong>et</strong> requis.</p>

<p>Voilà à quoi ça ressemble, un argument nommé:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">arg</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="c1">#=&gt; &quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avant Ruby 2.1</h2>

<p>Mais en Ruby 2.0, vous êtes obligé de donner une valeur par défaut:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">arg</span><span class="p">:)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">SyntaxError: (irb):10: syntax error, unexpected &#39;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Imaginez que ça soit pareil avec les arguments dit
<em>normaux</em>. On ne pourrait pas écrire:</p>

<pre><code>def foo(arg)
</code></pre>

<p>On serait obligé d&#8217;écrire à la place:</p>

<pre><code>def foo(arg="hello")
</code></pre>

<p>Un peu bizarre, non ?</p>

<h2>Avec Ruby 2.1</h2>

<p>On peut maintenant définir un argument nommé sans valeur par défaut, et
donc faire en sorte qu&#8217;il soit requis:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">arg</span><span class="p">:)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">=&gt; :foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span>
</span><span class='line'><span class="go">ArgumentError: missing keyword: arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="go">ArgumentError: missing keyword: arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="ss">arg</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="go">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/'>Du nouveau dans Ruby 2.1: Le suffixe r</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/'>Remplacer Sed et Awk par Ruby 2: Premiers pas</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/"/>
    <updated>2013-11-26T20:33:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui c&#8217;est au tour du nouveau suffixe <code>f</code> (comme frozen) d&#8217;être passé
en revue.</p>

<!-- more -->


<h2>Avant Ruby 2.1</h2>

<p>Les chaînes de caractères en Ruby sont des objets <em>mutables</em>. Ce qui
signifie qu&#8217;à chaque fois que l&#8217;interpréteur rencontre <code>"foo"</code>, il crée
un nouvel objet:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; "foo".object_id
74667700
&gt;&gt; "foo".object_id
74664050
</code></pre>

<p>Ce qui peut influer sur les performances d&#8217;un programme quand on compare
beaucoup de chaînes. Voici un exemple trivial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">foo</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">==</span> <span class="n">foo</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Encore une fois, on peut constater qu&#8217;un nouvel objet est créé à chaque
appel de la méthode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bépo&quot;</span>
</span><span class='line'><span class="go">76675080</span>
</span><span class='line'><span class="go">false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="go">76669680</span>
</span><span class='line'><span class="go">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et géler (<em>freeze</em>) l&#8217;objet n&#8217;empêchera pas sa création à chaque appel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">freeze</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">foo</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">nil</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span>
</span><span class='line'><span class="go">82081130</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo</span>
</span><span class='line'><span class="go">82079520</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avec Ruby 2.1</h2>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<p>Le suffixe <code>f</code> permet de géler (<em>freeze</em>) les chaînes de
caractères:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="n">f</span>
</span><span class='line'><span class="go">=&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">reverse!</span>
</span><span class='line'><span class="go">RuntimeError: can&#39;t modify frozen String</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et surtout, le suffixe <code>f</code> les gèlent une fois pour toutes.
L&#8217;exemple précédent donne ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="n">f</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">p</span> <span class="n">foo</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="n">string</span> <span class="o">==</span> <span class="n">foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">=&gt; :foo?</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bépo&quot;</span>
</span><span class='line'><span class="go">79029020</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">foo?</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="go">79029020</span>
</span><span class='line'><span class="go">=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p><strong>Edit du 1er décembre 2013</strong> Cette fonctionnalité a été supprimé dans
la version <a href="https://www.ruby-lang.org/en/news/2013/11/22/ruby-2-1-0-preview2-is-released/">2.1.0-preview2</a>.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/'>Du nouveau dans Ruby 2.1: Le suffixe r</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/'>Remplacer Sed et Awk par Ruby 2: Premiers pas</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe r]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/"/>
    <updated>2013-11-25T23:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui on voit une nouvelle façon d&#8217;écrire un nombre rationnel dans
Ruby 2.1.</p>

<!-- more -->


<p>Jusqu&#8217;ici pour écrire un nombre rationnel, on devait faire ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rational</span><span class="p">(</span><span class="s1">&#39;1/3&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui est loin d&#8217;être concis:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; Rational('1/3') + Rational('1/9')
4/9
</code></pre>

<p>Désormais, avec Ruby 2.1, on pourra se servir du suffixe <code>r</code>:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
&gt;&gt; 1/3r + 1/9r
=&gt; (4/9)
</code></pre>

<p>Encore un peu plus de sucre dans notre langage ;)</p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/'>Remplacer Sed et Awk par Ruby 2: Premiers pas</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser Vim comme un tableur sur Linux (enfin presque)]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque/"/>
    <updated>2013-11-24T20:55:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div>


<p><a href="http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github/">Hier</a> j&#8217;ai donné une liste des rapports issues/nombre de dépots
par langages sur Github. Aujourd&#8217;hui je montre comment j&#8217;ai utilisé
Vim (sur linux) pour calculer ce rapport et formater la liste.</p>

<!-- more -->


<p>Voici la liste de départ, à récupérer <a href="http://hubreports.yougeezer.co.uk/languages">ici</a>, il s&#8217;agit juste d&#8217;un
copier/coller de la page web et je n&#8217;ai pris ici que les 5 premiers,
c&#8217;est suffisant pour la démonstration:</p>

<pre><code>1   JavaScript .js  560,116 891,531 319,537 4,951   1,147   343,483
2   Ruby .rb    466,411 469,913 175,577 2,726   607 147,339
3   Java .java  388,610 376,683 231,186 4,185   825 161,136
4   Python .py  281,835 323,858 130,034 2,538   685 184,908
5   PHP .php    275,411 289,899 155,941 2,331   454 150,024
</code></pre>

<p>Alors on n&#8217;y comprend rien puisque les colonnes sont invisibles. On va
former de belles colonnes à l&#8217;aide de l&#8217;utilitaire unix <strong>column</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> column <span class="p">-</span><span class="k">t</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le résultat:</p>

<pre><code>1  JavaScript  .js    560,116  891,531  319,537  4,951  1,147  343,483
2  Ruby        .rb    466,411  469,913  175,577  2,726  607    147,339
3  Java        .java  388,610  376,683  231,186  4,185  825    161,136
4  Python      .py    281,835  323,858  130,034  2,538  685    184,908
5  PHP         .php   275,411  289,899  155,941  2,331  454    150,024
</code></pre>

<p>Les colonnes qui m&#8217;intéresse sont la 1 (rang), la 2 (langage), la 4
(nombre de dépots) et la dernière (nombre d&#8217;issues actives).
Je vais donc sélectionner la 3ème colonne à l&#8217;aide de <code>Ctrl-v</code> et la
supprimer (avec <code>d</code>). Voici ce que donne la sélection d&#8217;une colonne en
image si vous n&#8217;êtes pas familier de Vim:</p>

<p><img src="http://lkdjiin.github.io/images/vim-column.png"></p>

<p>Je répète ensuite la sélection/suppression pour les autres colonnes et
j&#8217;obtiens:</p>

<pre><code>1  JavaScript  560,116  343,483
2  Ruby        466,411  147,339
3  Java        388,610  161,136
4  Python      281,835  184,908
5  PHP         275,411  150,024
</code></pre>

<p>Il faut maintenant ajouter une colonne de chiffre qui contiendras le rapport
d&#8217;issues par dépots en pourcentage. C&#8217;est à dire la 4ème colonne divisée par
la 3ème colonne, le tout multiplié par 100. C&#8217;est classiquement un boulot
qu&#8217;on confierai au langage Awk, mais j&#8217;ai décidé il y a quelques temps de
faire le plus possible de choses avec Ruby, voici donc ce que j&#8217;ai écrit
dans Vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> <span class="k">ruby</span> <span class="p">-</span>aple <span class="s1">&#39;$_ += &quot; \#{(($F[3].to_f/$F[2].to_f)*100).to_i}&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un peu cryptique ? Je l&#8217;avoue bien volontiers, mais les one-shots sont
rarement fait pour (peuvent rarement) être lisible… Je ferais certainement
un article sur les switchs a, p, l et e de <code>ruby</code>. Quoiqu&#8217;il en soit, voici
le résultat:</p>

<pre><code>1  JavaScript  560,116  343,483 61
2  Ruby        466,411  147,339 31
3  Java        388,610  161,136 41
4  Python      281,835  184,908 65
5  PHP         275,411  150,024 54
</code></pre>

<p>Il reste à trier cette liste sur la 5ème et dernière colonne, un jeu d&#8217;enfant
avec l&#8217;utilitaire unix <code>sort</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>%<span class="p">!</span> <span class="k">sort</span> <span class="p">-</span>k5nr
</span></code></pre></td></tr></table></div></figure>


<pre><code>4  Python      281,835  184,908 65
1  JavaScript  560,116  343,483 61
5  PHP         275,411  150,024 54
3  Java        388,610  161,136 41
2  Ruby        466,411  147,339 31
</code></pre>

<p>Voilà, ça prend un certain temps à décrire mais c&#8217;est rapide à faire quand
vous avez sous le coude une paire d&#8217;utilitaires qui déchirent !</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/04/ecrire-une-fonction-vim-avec-ruby/'>Écrire une fonction Vim avec Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/'>Vim: Créez des présentations avec Vimdeck</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/'>Remplacer Sed et Awk par Ruby 2: Premiers pas</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourcentage des issues par langages sur Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github/"/>
    <updated>2013-11-23T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github</id>
    <content type="html"><![CDATA[<p>Sur hubReports, on peut avoir plusieurs statistiques concernants les dépots de
code et les utilisateurs de GitHub.
<a href="http://hubreports.yougeezer.co.uk/languages">Cette page</a> montre par exemple
le nombre de dépots et d&#8217;issues actives par langages.</p>

<p>Voici les 21 premiers langages (ceux qui ont plus de 10 000 dépots),
triés par nombre de dépots:</p>

<!-- more -->


<pre><code>Rank  Language      Repos    Issues
1     JavaScript    559,445  342,695
2     Ruby          465,960  147,376
3     Java          387,956  161,071
4     Python        281,468  184,744
5     PHP           275,014  149,927
6     C             147,403  64,353 
7     C++           142,090  71,020 
8     C#            94,122   42,112 
9     Objective-C   89,588   36,593 
10    Shell         82,228   21,300 
11    Perl          69,301   20,146 
12    VimL          40,771   6,281  
13    Scala         21,889   11,542 
14    CoffeeScript  20,668   13,930 
15    Haskell       18,171   7,825  
16    Go            17,890   7,378  
17    EmacsLisp     15,671   4,553  
18    Clojure       14,729   5,933  
19    Lua           13,667   5,896  
20    ActionScript  12,221   5,533  
21    R             10,117   4,504  
</code></pre>

<p>En voyant ça, je me suis demandé quel était le pourcentage d&#8217;issues par
rapport au nombre de dépots. Le voici dans la liste qui suit. Cette fois
la liste est triée sur le dernier champ:</p>

<pre><code>Rank  Language      Repos    Issues   % Issues/Repos
12    VimL          40,771   6,281    15
10    Shell         82,228   21,300   25
17    EmacsLisp     15,671   4,553    26
11    Perl          69,301   20,146   28
2     Ruby          465,960  147,376  31
18    Clojure       14,729   5,933    35
15    Haskell       18,171   7,825    38
19    Lua           13,667   5,896    38
21    R             10,117   4,504    40
9     Objective-C   89,588   36,593   40
16    Go            17,890   7,378    41
20    ActionScript  12,221   5,533    41
3     Java          387,956  161,071  41
6     C             147,403  64,353   43
8     C#            94,122   42,112   44
7     C++           142,090  71,020   50
13    Scala         21,889   11,542   52
5     PHP           275,014  149,927  54
1     JavaScript    559,445  342,695  61
14    CoffeeScript  20,668   13,930   65
4     Python        281,468  184,744  65
</code></pre>

<p>Alors je n&#8217;en tire aucunes conclusions puisque ce rapport n&#8217;est pas
très <em>scientifique</em>. Mais c&#8217;est toutefois marrant de voir VimL et Perl
parmi les bons élèves (selon ce critère bien sûr) et de voir CoffeeScript
et Python en queue de peloton (toujours selon ce critère évidement).</p>

<p>Est-ce que ça vous interpèle ?</p>

<p>Demain je montrerais comment je suis passé d&#8217;une liste à l&#8217;autre à l&#8217;aide
de Vim.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Définition de méthode]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/22/du-nouveau-dans-ruby-2-dot-1-definition-de-methode/"/>
    <updated>2013-11-22T17:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/22/du-nouveau-dans-ruby-2-dot-1-definition-de-methode</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Ruby 2.1 devrait être là dans pas longtemps, il est temps de regarder
ce que cette nouvelle version nous offre. Aujourd&#8217;hui on va voir un petit
changement dans la définition des méthodes.</p>

<!-- more -->


<h2>Ce qui change avec def</h2>

<p>Jusqu&#8217;ici, <code>def</code> renvoyait <code>nil</code>:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; def foo;end
nil
</code></pre>

<p>Dans Ruby 2.1, <code>def</code> va renvoyer le nom de la méthode (en tant que symbole):</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
&gt;&gt; def foo;end
=&gt; :foo
</code></pre>

<h2>Un cas d&#8217;utilisation</h2>

<p>Pour l&#8217;instant je ne connais qu&#8217;un seul cas d&#8217;utilisation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut utiliser Ruby pendant très longtemps avant de se rendre compte que
<code>private</code> est une méthode et non un mot-clé. Avant Ruby 2.1, l&#8217;utilisation
typique de <code>private</code> est celle-ci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bar</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autrement dit: les méthodes publiques avant <code>private</code> et les méthodes privées
après. Une autre possibilité intéressante est la suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo_helper</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="kp">private</span> <span class="ss">:bar</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Moins utilisée mais pourtant cool, cette façon de faire permet de garder,
par exemple, une méthode helper sous la méthode appellante.</p>

<p>Avec Ruby 2.1 nous aurons donc la possibilité d&#8217;écrire ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="n">foo_helper</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà. Si vous connaissez un autre cas d&#8217;utilisation, laissez donc un
commentaire.</p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/'>Du nouveau dans Ruby 2.1: Argument nommé et requis</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/'>Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/'>Du nouveau dans Ruby 2.1: Le suffixe r</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: première approche de lambda]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/21/racket-premiere-approche-de-lambda/"/>
    <updated>2013-11-21T19:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/21/racket-premiere-approche-de-lambda</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/">article précédent</a>, j&#8217;ai écrit une fonction Racket pour calculer
les diviseurs d&#8217;un nombre n:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; Is i a divisor of n?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor?</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="nv">divisor?</span> <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">divisors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on a vu comment <a href="http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/">faire des tests unitaires</a>.
Il est temps maintenant de faire un peu de refactoring.</p>

<!-- more -->


<p>Tout d&#8217;abord, le plus simple, on va extraire une fonction qui calcule
un <em>range</em> de 1 à n inclus:</p>

<figure class='code'><figcaption><span>number.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; divisors : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Get divisors of a number n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; Is i a divisor of n?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor?</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="nv">divisor?</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; range-inclusive : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Build a list from 1 to n inclusive.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">divisors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous noterez au passage que j&#8217;ai commencé à documenter mes fonctions en
spécifiant les types de données en entrée et en sortie. Vous remarquez aussi
que <code>range-inclusive</code> ne fait pas partie de l&#8217;API du module:
<code>(provide divisors)</code>.</p>

<p>Maintenant il nous faut extraire la fonction qui regarde si un nombre <em>i</em> est
un diviseur de <em>n</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="c1">; divisor-of? : integer integer -&gt; boolean</span>
</span><span class='line'><span class="c1">; Tells if i is a divisor of n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le nom de la fonction a changé au passage pour <code>divisor-of?</code>. Mais surtout
nous avons du inclure <em>n</em> dans les arguments de la fonction.</p>

<p>On doit maintenant <em>insérer</em> cette fonction dans le code de la fonction
principale <code>divisors</code>. Voici une première tentative un peu naive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="c1">; Attention, ce code ne fonctionne pas.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Évidemment ça ne marche pas, puisque Racket ne connait pas <em>i</em>, mais
ça nous donne une orientation. Pour que Racket sache ce que nous voulons
placer dans <em>i</em>, à savoir l&#8217;élément en cours de traitement par la fonction
<code>filter</code>, on va passer par une fonction anonyme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">))</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une fonction anonyme (lambda) prend un argument (ou plusieurs) et une
expression. À chaque itération, <code>filter</code> passe un élément tiré de
<code>(range-inclusive n)</code> à la fonction anonyme <code>(lambda (i) (divisors-of? n i))</code>.</p>

<p>Voilà donc notre module, après refactoring:</p>

<figure class='code'><figcaption><span>number.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; divisors : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Get divisors of a number n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">))</span> <span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; divisor-of? : integer integer -&gt; boolean</span>
</span><span class='line'><span class="c1">; Tells if i is a divisor of n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor-of?</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; range-inclusive : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Build a list from 1 to n inclusive.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">range-inclusive</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">divisors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On aurait aussi pu écrire ce qui suit, à la place des trois fonctions ci-dessus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="c1">; divisors : integer -&gt; list of integers</span>
</span><span class='line'><span class="c1">; Get divisors of a number n.</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span> <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça fait bien sûr beaucoup moins de code… Peut-être est-ce parceque je ne suis
pas encore habitué à Racket, mais je trouve aussi cela bien moins lisible.
Si on doit réutiliser les fonctions <code>divisor-of?</code> et <code>range-inclusive</code>, il
n&#8217;y a pas de question à se poser. Sinon…? Si vous connaissez bien
Racket/Scheme/Lisp laissez donc un commentaire pour me dire quelle version
est la plus idiomatique de ce type de langages.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/'>Racket pour les Rubyists 8: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quand internet m'énerve (ou mes principes à la con]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/20/quand-internet-menerve-ou-mes-principes-a-la-con/"/>
    <updated>2013-11-20T21:11:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/20/quand-internet-menerve-ou-mes-principes-a-la-con</id>
    <content type="html"><![CDATA[<p>Bonjour à tous, rien de technique aujourd&#8217;hui, seulement sept
petits coups de gueule à propos de ce qu&#8217;on trouve parfois sur internet.</p>

<!-- more -->


<h2>numéro 1</h2>

<p>Le site web <strong>qui affiche directement une boite modale</strong> du style
«Recevez notre newsletter». Avant même de me dire bonjour,
avant même de savoir de quoi on va me parler,
on me met ça en pleine tronche !
Ce que ça me dis de votre site web c&#8217;est:
«tu est juste là pour augmenter mon carnet d&#8217;adresse».
Non merci, je ferme l&#8217;onglet sans me poser de questions…</p>

<h2>numéro 2</h2>

<p>Les sites dans le genre de Quora: «<strong>You must sign in to read past the
first answer.</strong>» Pourquoi devrais je m&#8217;inscrire ? C&#8217;est trop demander que de
me l&#8217;expliquer en une phrase ?
Je ferme l&#8217;onglet sans me poser de questions…</p>

<h2>numéro 3</h2>

<p><strong>Les issues désactivées sur Github.</strong> Vous ne voulez pas savoir ce qui
cloche dans votre programme ? Pas grave, j&#8217;en trouverais un autre…</p>

<h2>numéro 4</h2>

<p>Les sites web affichant <strong>une police de caractères de 12 pixels</strong>, voir moins.
Alors oui, je peux toujours zoomer, mais quel est l&#8217;intérêt de m&#8217;obliger
à le faire ?</p>

<h2>numéro 5</h2>

<p><strong>Les articles de blogs qu&#8217;on ne peut pas commenter.</strong> Tu as peur de quoi ?
C&#8217;est dommage car j&#8217;avais une question intéressante pour nous deux, et
peut-être aussi pour d&#8217;autres. Tant pis, je ne viendrais plus…</p>

<h2>numéro 6</h2>

<p><strong>Les questions obligatoires dans les sondages.</strong> Voilà comment je vois les
choses: je te <em>donne</em> de <em>mon temps</em> pour t&#8217;aider, pour t&#8217;être agréable, et toi
tu veux <em>m&#8217;obliger</em> à répondre. Ben non, tu n&#8217;auras pas mes réponses…</p>

<h2>numéro 7</h2>

<p><strong>Les projets open-source sans documentation.</strong> Et comment je fais pour
l&#8217;utiliser, moi ? Je suis censé lire les sources, sans rire ? Tant pis,
je trouverais mon bonheur ailleurs…</p>

<p>Voilà, c&#8217;est tout pour aujourd&#8217;hui. Ça fait du bien de s&#8217;exprimer un peu.
Et vous, qu&#8217;est-ce qui vous met de mauvaise humeur sur le net ? Lâchez vous,
c&#8217;est le moment…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/27/vim-pour-ecrire-un-livre/'>Vim pour écrire un livre ?</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/09/un-mois-darticles-quotidiens-le-bilan/'>Un mois d&#8217;articles quotidiens: le bilan</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/20/modern-ie-pour-linux-foutage-de-gueule/'>Modern IE pour Linux: foutage de gueule</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 41: Les individus invalides]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides/"/>
    <updated>2013-11-19T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La dernière fois on a vu comment l&#8217;introduction d&#8217;une petite dose
d&#8217;élitisme augmentait légèrement les performances d&#8217;un algorithme
génétique (<a href="http://lkdjiin.github.io/blog/2013/11/18/les-algorithmes-genetiques-demystifies-40-ajout-delitisme/">lire l&#8217;article</a>).
Aujourd&#8217;hui on va <em>véritablement booster</em> ces performances
dans le cadre du problème du sac à dos, en tenant compte des individus
invalides.</p>

<!-- more -->


<h2>Bref rappel du problème</h2>

<p>La capacité du sac à dos est de 400 (grammes, kilos, unités, etc…) et on ne
doit pas la dépasser. Autrement dit, un couple {<em>poids</em>, <em>valeur</em>} de
{401, 1000} est bien plus proche de la solution idéale que le couple
{399, 500}. Pourtant, d&#8217;après les règles qu&#8217;on a utilisées jusqu&#8217;ici, la
solution {401, 1000} est purement et simplement éliminée puisque jugée
invalide.</p>

<p>Il est légitime de se demander ici si on ne perd pas des gènes précieux en
éliminant de telles solutions ?</p>

<h2>Prise en compte des solutions invalides</h2>

<p>L&#8217;idée est donc de permettre aux solutions qui dépassent un peu le poids
d&#8217;être prise en considération, sans pour autant mettre les solutions
invalides à égalité avec les solutions valides.</p>

<p>Pour cela, on va appliquer une pénalité, une sanction, aux solutions
invalides. Tout se passe dans la méthode <code>score</code> de la classe
<code>Evaluator</code>. Vous pouvez trouver le code complet de cette troisième
version du programme sur Github: <a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack3.rb">knapsack3.rb</a>.
Voici ce qui change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># [...]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">weight</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">weight</span> <span class="o">-</span> <span class="vi">@capacity</span><span class="p">)</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La pénalité appliquée à une sanction invalide est ici: 2 fois la différence
entre le poids du sac et sa capacité. C&#8217;est une valeur obtenue par
tatonnement, il n&#8217;y a rien de magique et vous devriez faire d&#8217;autres
essais… Je m&#8217;assure ensuite que la valeur n&#8217;est pas négative puisque la
méthode <code>fitness</code> attend une valeur positive.</p>

<h2>Les performances</h2>

<p>J&#8217;ai fait tourner chaque programme 200 fois et fait la moyenne de la
génération où la meilleure solution (score de 1030) est trouvée:</p>

<pre><code>Programme    | Génération moyenne | Remarques
=========================================================
knapsack.rb  |              72.06 | algo original
---------------------------------------------------------
knapsack2.rb |              67.61 | + élite
---------------------------------------------------------
knapsack3.rb |              22.55 | + élite + invalides
</code></pre>

<p>Le gain de performance est remarquable ! Moralité de cette affaire:
Pensez y à deux fois avant de jeter un chromosome invalide à la poubelle,
il contient peut-être des gènes importants.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/18/les-algorithmes-genetiques-demystifies-40-ajout-delitisme/'>Les algorithmes génétiques démystifiés 40: Ajout d&#8217;élitisme</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 40: Ajout d'élitisme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/18/les-algorithmes-genetiques-demystifies-40-ajout-delitisme/"/>
    <updated>2013-11-18T17:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/18/les-algorithmes-genetiques-demystifies-40-ajout-delitisme</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans la plupart des ouvrages, thèses ou mémoires consacrés aux algorithmes
génétiques il est dit:</p>

<blockquote><p>Un peu d&#8217;élitisme améliore les performances des algorithmes génétiques.</p></blockquote>


<p>Voyons voir si c&#8217;est vrai.</p>

<!-- more -->


<h2>Une petite analyse</h2>

<p>En lançant la première version du programme
(<a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack.rb">voir le code</a> et/ou
<a href="http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/">voir l&#8217;article</a>)
on s&#8217;aperçoit qu&#8217;une génération <em>n</em>+1 n&#8217;améliore pas forcement le score du
meilleur individu:</p>

<pre><code>[~]⇒ ruby knapsack.rb 
Gen: 0 Best score: 867
Gen: 1 Best score: 895
Gen: 2 Best score: 920
Gen: 3 Best score: 877
Gen: 4 Best score: 887
Gen: 5 Best score: 925
Gen: 6 Best score: 927
Gen: 7 Best score: 960
Gen: 8 Best score: 960
Gen: 9 Best score: 915
Gen: 10 Best score: 950
Gen: 11 Best score: 925
</code></pre>

<p>Dans l&#8217;extrait ci-dessus, le meilleur individu de la génération n° 8
possède un score de 960, alors qu&#8217;à la génération suivante, le meilleur
individu retombe à un score de 915.</p>

<h2>Mise en place de l&#8217;élite</h2>

<p>Je vais donc mettre en place une seconde version de ce programme où je
vais conserver les quatre meilleurs individus de chaque génération pour la
génération suivante. Le code complet de cette seconde version se trouve
sur Github: <a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack2.rb">knapsack2.rb</a>.
Seule la méthode <code>next_generation</code>, de la classe <code>GeneticAlgorithm</code>, change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">sort_by!</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">score</span><span class="p">}</span>
</span><span class='line'>  <span class="n">elite</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pool</span> <span class="o">=</span> <span class="no">MatingPool</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@population</span><span class="p">)</span>
</span><span class='line'>  <span class="n">population_size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="vi">@crossover</span><span class="o">.</span><span class="n">two_point</span><span class="p">(</span><span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">,</span> <span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">concat</span> <span class="n">elite</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici quelques explications. Tout d&#8217;abord la population est triée sur le
score, du plus faible au plus important:</p>

<pre><code>@population.sort_by! {|i| i.score}
</code></pre>

<p>Puis on retire les quatre meilleurs individus de la population et on les
conserve dans <code>elite</code>:</p>

<pre><code>elite = @population.pop(4)
</code></pre>

<p>À la fin de la sélection/croisement/mutation, on réintroduit l&#8217;élite dans
la nouvelle population:</p>

<pre><code>@population.concat elite
</code></pre>

<h2>Les performances</h2>

<p>J&#8217;ai fait tourner chaque programme 200 fois et fait la moyenne de la
génération où la meilleure solution (score de 1030) est trouvée:</p>

<pre><code>Programme    | Génération moyenne
=================================
knapsack.rb  |              72.06
---------------------------------
knapsack2.rb |              67.61
</code></pre>

<p>Les performances sont bien améliorées. Pas d&#8217;une manière spectaculaire, mais
c&#8217;est toujours bon à prendre.</p>

<p>La prochaine fois on verra si on peut encore améliorer les performances en
tenant compte des solutions invalides.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides/'>Les algorithmes génétiques démystifiés 41: Les individus invalides</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les Rubyists 8: Tests unitaires simples]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/"/>
    <updated>2013-11-17T19:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Maintenant que l&#8217;on sait <a href="http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/">écrire un module pour Racket</a>, on va pouvoir
faire des tests unitaires simples avec RackUnit, le framework de test
fournit avec le langage Racket.</p>

<!-- more -->


<h2>Notre module</h2>

<p>On va tout d&#8217;abord mettre notre fonction <code>divisors</code> dans le fichier
<code>number.rkt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; Is i a divisor of n?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor?</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="nv">divisor?</span> <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">divisors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on s&#8217;assure que tout fonctionne bien en appelant la fonction <code>divisors</code>
depuis une session racket:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (require "number.rkt")
-&gt; (divisors 17)
'(1 17)
-&gt; (exit)
</code></pre>

<h2>Le framework RackUnit</h2>

<p>Tout comme Ruby est fournit avec test/unit, Racket est livré avec RackUnit.
C&#8217;est un framework de tests unitaires relativement simple, surtout dans son
<em>utilisation basique</em> comme on va le voir ici.</p>

<p>Comme notre fichier à tester se nomme <code>number.rkt</code>, nous allons nommer le
fichier comportant les tests <code>number-test.rkt</code> et le placer dans le même
dossier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span>
</span><span class='line'>         <span class="s">&quot;number.rkt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On requiert la bibliothèque <code>rackunit</code> ainsi que le fichier à tester. <em>On verra
dans un autre article pourquoi <code>rackunit</code> n&#8217;est pas placé entre guillemets.</em>
Maintenant on peut effectuer un test avec la fonction:</p>

<pre><code>(check-equal? A B)
</code></pre>

<p>qui s&#8217;assure que l&#8217;expression A est égale à l&#8217;expression B. Par exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span>
</span><span class='line'>         <span class="s">&quot;number.rkt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">divisors</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">8</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et on lance les tests comme ceci:</p>

<pre><code>[~]⇒ racket number-test.rkt
[~]⇒ 
</code></pre>

<p>Quand tout les tests passent, RackUnit est silencieux.
Si on modifie notre fonction <code>divisors</code> ainsi:</p>

<pre><code>(filter divisor? (range 2 (+ n 1))))
</code></pre>

<p>On peut voir le genre de sortie produit par RackUnit sur un test qui
échoue:</p>

<pre><code>[~]⇒ racket number-test.rkt
--------------------
FAILURE
actual:     (2 4 8)
expected:   (1 2 4 8)
name:       check-equal?
location:   (#&lt;path:/number-test.rkt&gt; 7 0 92 38)
expression: (check-equal? (divisors 8) (quote (1 2 4 8)))

Check failure
--------------------
</code></pre>

<h2>Comparaison avec Ruby et unit/test</h2>

<p>Voici un test similaire pour Ruby, écrit avec le framework test/unit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNumber</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby est loin d&#8217;être un langage verbeux et pourtant on peut voir qu&#8217;ici il
faut écrire une classe et utiliser l&#8217;héritage rien que pour un simple petit
test de rien du tout. Alors je ne dis pas que les <em>test cases</em> sont
inutiles (et Racket permet aussi d&#8217;organiser les tests de plusieurs
manières différentes), seulement dans le cas d&#8217;un programme aussi simple
que le notre je trouve la façon de faire de Racket plus <em>naturelle</em>.</p>

<p>La prochaine fois on passera au refactoring de notre méthode <code>divisors</code>.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/'>Racket pour les rubyists 5: Définitions imbriquées</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques 39: Resolution du sac à dos]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/"/>
    <updated>2013-11-16T10:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La dernière fois on a vu une façon simplement
<a href="http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/">d&#8217;évaluer le contenu</a>
du sac à dos.
Aujourd&#8217;hui on met en place l&#8217;algorithme génétique proprement dit:
sélection, croisement, mutation, etc.</p>

<!-- more -->


<p>J&#8217;ai mis le <a href="https://github.com/lkdjiin/knapsack_genetic_algorithm/blob/master/knapsack.rb">code complet de l&#8217;algorithme sur Github</a>.
Celui-ci est basé sur ce qu&#8217;on a fait jusqu&#8217;ici pour
<a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">le paradoxe du singe savant</a>
et pour <a href="http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/">le problème des 8 dames</a>.
Je vais donc commenter les parties qui changent.</p>

<h2>La classe GeneticAlgorithm</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GeneticAlgorithm</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">best_ever</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@generations</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Evaluator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@capacity</span><span class="p">,</span> <span class="vi">@population</span><span class="p">)</span><span class="o">.</span><span class="n">evaluate</span>
</span><span class='line'>      <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">best</span>
</span><span class='line'>      <span class="n">best_ever</span> <span class="o">=</span> <span class="n">best</span> <span class="k">if</span> <span class="n">best</span> <span class="o">&gt;</span> <span class="n">best_ever</span>
</span><span class='line'>      <span class="nb">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>      <span class="n">next_generation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">display_best_ever</span><span class="p">(</span><span class="n">best_ever</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display_best_ever</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;----------------------&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Best ever&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;----------------------&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;score:      </span><span class="si">#{</span><span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;chromosome: </span><span class="si">#{</span><span class="n">individual</span><span class="o">.</span><span class="n">chromosome_as_list</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voyons la méthode <code>run</code>. La variable <code>best_ever</code> va contenir le meilleur
individu, toutes générations confondues. À chaque itération, on compare
ce «meilleur de tout les temps» avec le meilleur individu de la génération:</p>

<pre><code>best_ever = best if best &gt; best_ever
</code></pre>

<p>C&#8217;est pour ça qu&#8217;on avait besoin d&#8217;une méthode <code>&gt;</code> dans la classe <code>Individual</code>
(voir <a href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/">cet article</a>).</p>

<p>À la fin de la méthode <code>run</code> on utilise la nouvelle méthode <code>display_best_ever</code>
pour afficher notre meilleure solution.</p>

<h2>La classe Mutator</h2>

<p>La seconde classe qui change un peu est la classe <code>Mutator</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mutator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="o">!</span> <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">chromosome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un chromosome étant une liste (un Array) de booléens, la mutation consiste
à <em>inverser</em> un élément, true devient false et inversement:</p>

<pre><code>chromosome[index] = ! chromosome[index] if rand &lt; @rate
</code></pre>

<h2>Le lancement du programme</h2>

<p>Le problème n&#8217;a pas l&#8217;air trop complexe, je me dis donc que 100 générations
devraient suffire. La population compte 1 000 individus, ce qui est
classique et le taux de mutation est assez élevé (1%):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">knapsack_capacity</span> <span class="o">=</span> <span class="mi">400</span>
</span><span class='line'><span class="n">generations</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">population</span> <span class="o">=</span> <span class="no">Population</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">mutation</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">01</span>
</span><span class='line'><span class="no">GeneticAlgorithm</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">knapsack_capacity</span><span class="p">,</span> <span class="n">mutation</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le moment de vérité:</p>

<pre><code>[~]⇒ ruby knapsack.rb 
Gen: 0 Best score: 922
Gen: 1 Best score: 950
.
.
.
Gen: 57 Best score: 1010
Gen: 58 Best score: 957
Gen: 59 Best score: 1030
.
.
.
Gen: 99 Best score: 957
----------------------
Best ever
----------------------
score:      1030
chromosome: map, compass, water, sandwich, glucose, banana, suntan cream,
waterproof trousers, waterproof overclothes, note-case, sunglasses, socks
</code></pre>

<p>La prochaine fois on va analyser ce résultat et faire en sorte de
l&#8217;améliorer.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides/'>Les algorithmes génétiques démystifiés 41: Les individus invalides</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/18/les-algorithmes-genetiques-demystifies-40-ajout-delitisme/'>Les algorithmes génétiques démystifiés 40: Ajout d&#8217;élitisme</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/'>Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les Rubyists 7: Module basique]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/"/>
    <updated>2013-11-15T10:18:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La dernière fois, on a écrit notre <a href="http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/">première fonction en Racket</a>. Et avant
d&#8217;écrire des tests unitaires pour pouvoir la passer à la moulinette du
<em>refactoring</em>, il faut explorer un peu les modules Racket.</p>

<!-- more -->


<h2>La notion de module en Racket</h2>

<p>Jusqu&#8217;ici on a utilisé le REPL, il est temps maintenant de mettre notre
code dans un fichier. Voyons le programme suivant, à mettre dans un
fichier <code>foo.rkt</code>:</p>

<figure class='code'><figcaption><span>foo.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">times-2</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">times-3</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">provide </span><span class="nv">times-2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous reconnaissez la définition de deux fonctions: <code>times-2</code> et <code>times-3</code>
qui multiplient respectivements leur argument par 2 et par 3. En plus de ça,
il y a trois éléments nouveaux:</p>

<h3>Spécification d&#8217;un dialecte</h3>

<p>La ligne <code>#lang racket</code> spécifie à Racket le dialecte utilisé. Il y en a
plein et je n&#8217;utiliserais que celui-ci. Il faudra penser à toujours placé
cette ligne au début de chaque fichier.</p>

<h3>Convention de nommage</h3>

<p>Un petit exemple vaut mieux qu&#8217;un long discours:</p>

<pre><code>thisIsJavaConvention

this_is_ruby_convention

this-is-racket-convention
</code></pre>

<h3>La fonction provide</h3>

<p>La fonction <code>provide</code>, qu&#8217;on peut placer n&#8217;importe où dans le fichier (donc
au début ou à la fin), permet <em>d&#8217;exporter</em> les fonctions données en
argument. Les autres fonctions (celle qui ne sont pas données à <code>provide</code>)
sont visible dans le fichier, mais pas à l&#8217;extérieur. Autrement dit,
<code>provide</code> permet de spécifier l&#8217;API, les fonctions publiques.</p>

<h2>Utilisation d&#8217;un module</h2>

<p>Dans le REPL, <em>démaré dans le même dossier que le fichier &ldquo;foo.rkt&rdquo;</em>,
on utilise la fonction <code>require</code>:</p>

<pre><code>-&gt; (require "foo.rkt")
</code></pre>

<p>On peut maintenant utiliser la fonction <em>publique</em> <code>times-2</code>:</p>

<pre><code>-&gt; (times-2 9)
18
</code></pre>

<p>Et comme attendu, on ne peut pas utiliser <code>times-3</code>:</p>

<pre><code>-&gt; (times-3 9)
; times-3: undefined;
;  cannot reference undefined identifier
</code></pre>

<h2>Comparaison avec les modules Ruby</h2>

<p>Voici le pendant du fichier <code>foo.rkt</code> écrit en Ruby:</p>

<figure class='code'><figcaption><span>foo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">times_2</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">2</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">times_3</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">3</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici comment on s&#8217;en sert dans une session irb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="go">LoadError: cannot load such file -- foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s2">&quot;./foo&quot;</span>
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="o">.</span><span class="n">times_2</span> <span class="mi">9</span>
</span><span class='line'><span class="go">18</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="o">.</span><span class="n">times_3</span> <span class="mi">9</span>
</span><span class='line'><span class="go">NoMethodError: private method `times_3&#39; called for Foo:Module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le comportement est assez similaire. Petite différence, Ruby oblige à définir
le fichier requis par rapport au dossier courant alors que Racket le fait
automatiquement (ok, j&#8217;aurais pu utiliser <code>require_relative</code>…).</p>

<p>Mais la <strong>grande différence</strong> est qu&#8217;un module Ruby définit un espace
de nom, pas un module Racket. <em>À l&#8217;heure actuelle je ne sais pas si Racket
possède un mécanisme pour les espaces de nom, je n&#8217;en suis pas encore là,
mais j&#8217;espère que oui…</em></p>

<p>La prochaine fois, on verra comment faire des tests unitaires simples en
Racket.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/'>Racket pour les Rubyists 8: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/'>Racket pour les rubyists 5: Définitions imbriquées</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths 7: Tests unitaires simples]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/"/>
    <updated>2013-11-14T13:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Si vous voulez vraiment apprendre Ruby, vous <em>devriez</em> aussi apprendre
à faire des tests automatisés: c&#8217;est le meilleur moyen d&#8217;avoir confiance
en son code. Et la question se pose de savoir quel framework utiliser ?
Il en existe plusieurs: unit/test, minitest, RSpec, Shoulda, Cucumber et
j&#8217;en oublie… Chaque développeur a ses préférences, et c&#8217;est bien normal.</p>

<p><code>&lt;opinion&gt;</code></p>

<p>Mais souvent les développeurs ont aussi des convictions, ce qui est parfois
problématique. Un framework de test est un outil, comme tant d&#8217;autres.
Un outil X peut être parfait pour telle application et bien moins bon pour
telle autre application. Autrement dit, <strong>LE</strong> framework de test n&#8217;existe
pas. Quand vous en aurez testé quelques uns, vous aurez une préférence,
d&#8217;accord, pas de soucis. Mais s&#8217;il vous plait, avant d&#8217;avoir une conviction,
attendez d&#8217;en avoir <em>utilisé</em> 3 ou 4, et chacun dans différents types de
projet.</p>

<p><code>&lt;/opinion&gt;</code></p>

<!-- more -->


<p>Aujourd&#8217;hui on va apprendre à tester le module créé <a href="http://lkdjiin.github.io/blog/2013/11/01/apprendre-ruby-en-faisant-des-maths-6-methodes-utilitaires-et-module/">la dernière fois</a>
à l&#8217;aide du framework test/unit. Pas parce que ce framework est le
meilleur, pas parce que j&#8217;ai une préférence pour ce framework mais parce qu&#8217;il
est livré avec Ruby et qu&#8217;il ne necessite donc pas d&#8217;installation.</p>

<h2>Le fichier de test</h2>

<p>Voici le code à mettre dans un fichier nommé <code>tc_number.rb</code>:</p>

<figure class='code'><figcaption><span>tc_number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNumber</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le fichier <code>tc_number.rb</code> contient le code pour tester notre module <code>Number</code>,
qui est dans le fichier <code>number.rb</code>. Veillez à garder les deux fichiers dans
le même dossier.</p>

<h2>Explications</h2>

<p>Voici les explications, ligne par ligne:</p>

<pre><code>require_relative "number"
</code></pre>

<p>On charge notre module <code>Number</code>.</p>

<pre><code>require "test/unit"
</code></pre>

<p>On charge la bibliothèque <code>test/unit</code>, qui contient plusieurs classes/modules
et méthodes qui vont nous permettre d&#8217;écrire nos tests.</p>

<pre><code>class TestNumber &lt; Test::Unit::TestCase
</code></pre>

<p>On crée une classe <code>TestNumber</code>. Vous remarquez que c&#8217;est le nom de notre
module à tester, préfixé par Test. Cette classe hérite de
<code>Test::Unit::TestCase</code>. Si vous ne savez pas encore ce qu&#8217;est une classe,
dites vous que c&#8217;est un module un peu spécial. Si vous ne savez pas
encore ce qu&#8217;est l&#8217;héritage, ce n&#8217;est pas grave.</p>

<pre><code>def test_divisors
</code></pre>

<p>On définit un test de la méthode <code>divisors</code>, à travers la méthodes
<code>test_divisors</code>. Vous remarquez que c&#8217;est le nom de notre méthode à tester,
préfixé par <code>test_</code>.</p>

<pre><code>assert_equal [1, 2, 4, 8], Number.divisors(4)
</code></pre>

<p>Voici enfin le test proprement dit. La méthode <code>assert_equal</code> s&#8217;assure
que ses deux arguments sont égaux. On veut savoir si <code>Number.divisors(4)</code>
est bien égal à l&#8217;Array (la liste) <code>[1, 2, 3, 4]</code>, <em>ce qui est faux</em>.</p>

<h2>Utilisation</h2>

<p>Voici la sortie:</p>

<pre><code>[~]⇒ ruby tc_number.rb 
Run options: 

# Running tests:

F

Finished tests in 0.002405s, 415.8087 tests/s, 415.8087 assertions/s.

  1) Failure:
test_divisors(TestNumber) [tc_number.rb:6]:
&lt;[1, 2, 4, 8]&gt; expected but was
&lt;[1, 2, 4]&gt;.

1 tests, 1 assertions, 1 failures, 0 errors, 0 skips
</code></pre>

<p>La section <code>1) Failure:</code> est particulièrement intéressante et nous indique
que la liste <code>[1, 2, 3, 4]</code> était attendue, mais que c&#8217;est la liste
<code>[1, 2, 4]</code> qui a été reçue.</p>

<p>Si on corrige notre test:</p>

<figure class='code'><figcaption><span>tc_number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNumber</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois-ci la sortie nous indique que tout va bien:</p>

<pre><code>[~]⇒ ruby tc_number.rb 
Run options: 

# Running tests:

.

Finished tests in 0.000644s, 1553.5887 tests/s, 1553.5887 assertions/s.

1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<h2>Plus de tests</h2>

<p>Nous pouvons ajouter un autre test pour la méthode <code>divisors</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais aussi tester les autres méthodes de notre module, selon le même
modèle:</p>

<figure class='code'><figcaption><span>tc_number.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNumber</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_proper_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">proper_divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">proper_divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_sum_of_proper_divisors</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">3</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">sum_of_proper_divisors</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">1</span><span class="p">,</span> <span class="no">Number</span><span class="o">.</span><span class="n">sum_of_proper_divisors</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/'>Racket pour les Rubyists 8: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/'>Racket pour les rubyists 6: Une première fonction</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 38: Évaluation du sac à dos]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos/"/>
    <updated>2013-11-13T09:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/13/les-algorithmes-genetiques-demystifies-38-evaluation-du-sac-a-dos</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Comment évaluer le contenu du sac à dos ? C&#8217;est à cette question qu&#8217;on
répond aujourd&#8217;hui, après avoir vu hier la
<a href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/">création de la population</a>.</p>

<!-- more -->


<h2>La fonction d&#8217;évaluation</h2>

<p>Évaluer le contenu du sac à dos est trivial, on calcule sa valeur en
ajoutant la valeur de tout les objets, et on calcule son poids en ajoutant
le poids de tout les objets. Si le poids total dépasse la capacité du
sac à dos, on va considèrer <em>pour l&#8217;instant</em> que la solution est invalide, et
on ne lui permettra pas de se reproduire. Autrement dit, plus la valeur est
importante sans que le poids ne dépasse la capacité, meilleure est
l&#8217;individu.</p>

<h2>La classe Evaluator</h2>

<p>Voici le code complet de la classe <code>Evaluator</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">capacity</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@capacity</span> <span class="o">=</span> <span class="n">capacity</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">fitness</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">weight</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">item</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">value</span>
</span><span class='line'>        <span class="n">weight</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">weight</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">weight</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fitness</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Explication du code</h2>

<p>Ce qui nous intéresse se passe dans la méthode <code>score</code>. Tout d&#8217;abord on
calcule la valeur totale et le poids total du sac à dos:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">item</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">value</span>
</span><span class='line'>    <span class="n">weight</span> <span class="o">+=</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">weight</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je rappelle qu&#8217;un chromosome est ici un Array de booléens, d&#8217;où la ligne
<code>if item</code> pour savoir si l&#8217;objet est présent ou non.</p>

<p>Une fois valeur et poids calculés, on peut donner un score:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">weight</span> <span class="o">&gt;</span> <span class="vi">@capacity</span>
</span><span class='line'>  <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si le poids du sac à dos dépasse sa capacité, on invalide l&#8217;individu en
mettant son score à zéro, ce qui lui interdira par la suite de se reproduire.
Sinon, le score est simplement la valeur totale du sac à dos.</p>

<p>La prochaine fois on mettra en place la sélection, le croisement, la mutation,
etc…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides/'>Les algorithmes génétiques démystifiés 41: Les individus invalides</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/18/les-algorithmes-genetiques-demystifies-40-ajout-delitisme/'>Les algorithmes génétiques démystifiés 40: Ajout d&#8217;élitisme</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 37: Le problème du sac à dos]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos/"/>
    <updated>2013-11-12T13:02:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/12/les-algorithmes-genetiques-demystifies-37-le-probleme-du-sac-a-dos</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour continuer notre exploration des algorithmes génétiques, on va
s&#8217;intéresser maintenant au problème du sac à dos:</p>

<blockquote><p>En algorithmique, le problème du sac à dos, noté également KP (en anglais,<br/>Knapsack Problem) est un problème d&#8217;optimisation combinatoire. Il modélise une<br/>situation analogue au remplissage d&#8217;un sac à dos, ne pouvant supporter plus<br/>d&#8217;un certain poids, avec tout ou partie d&#8217;un ensemble donné d&#8217;objets ayant<br/>chacun un poids et une valeur. Les objets mis dans le sac à dos doivent<br/>maximiser la valeur totale, sans dépasser le poids maximum.</p><footer><strong>Wikipédia</strong> <cite><a href='http://fr.wikipedia.org/wiki/Probl%C3%A8me_du_sac_%C3%A0_dos'>fr.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>




<!-- more -->


<p>Un des intéret de ce problème est que certaines solutions <em>invalides</em> sont
plus proches de la meilleure solution que nombres de solutions <em>valides</em>.</p>

<p>De même, c&#8217;est un problème <em>théorique</em> qui peut être vu comme une
simplification de problèmes <em>pratiques</em>. Par exemple: «Mon bateau peut
transporter 100 containers, pour un poids de X tonnes. Je gagne plus ou
moins d&#8217;argent selon les containers transportés. Quels containers je dois
embarquer parmi un choix de 300 containers ?»</p>

<p>La liste des objets que je vais utiliser se trouve sur le
<a href="http://rosettacode.org/wiki/Knapsack_problem/0-1">projet RosettaCode</a>.</p>

<p>On commence tout de suite avec la création de la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KnapsackItem</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:weight</span><span class="p">,</span> <span class="ss">:value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Knapsack</span>
</span><span class='line'>  <span class="no">ITEMS</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;map&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">150</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">35</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;water&#39;</span><span class="p">,</span> <span class="mi">153</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sandwich&#39;</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">160</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;glucose&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;tin&#39;</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">45</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;banana&#39;</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;cheese&#39;</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;beer&#39;</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;suntan cream&#39;</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;camera&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;t-shirt&#39;</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;trousers&#39;</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;umbrella&#39;</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;waterproof trousers&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;waterproof overclothes&#39;</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">75</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;note-case&#39;</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">80</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sunglasses&#39;</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;towel&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;socks&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
</span><span class='line'>    <span class="no">KnapsackItem</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;book&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour ceux qui ne connaissent pas Ruby, <code>Struct</code> permet de définir rapidement
une classe simpliste, une espèce de POxO (Plain Old &ldquo;insérez votre langage&rdquo;
Object). La classe <code>KnapsackItem</code> aura donc 3 accesseurs: <code>name</code>, <code>weight</code> et
<code>value</code>. On pourra accéder à la liste des objets avec <code>Knapsack::ITEMS</code>.</p>

<p>Maintenant la classe <code>Individual</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">chromosome_as_list</span>
</span><span class='line'>    <span class="n">list</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@chromosome</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">gene</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">list</span> <span class="o">&lt;&lt;</span> <span class="ss">Knapsack</span><span class="p">:</span><span class="ss">:ITEMS</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">name</span> <span class="k">if</span> <span class="n">gene</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">&gt;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">other</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un chromosome est défini comme un Array de booléens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chaque case de l&#8217;Array nous indique si un objet est sélectionné (true) ou
non (false).</p>

<p>J&#8217;ai aussi ajouté 2 nouvelles méthodes à cette classe. Tout d&#8217;abord
<code>chromosome_as_list</code> produit une chaîne de caractères avec la liste
des objets sélectionnés dans le chromosome. Puis la méthode <code>&gt;</code> nous
sera utile pour comparer deux chromosomes.</p>

<p>Reste la classe <code>Population</code>, qui est identique à ce que nous avons
déjà écrit avec d&#8217;autres algorithmes génétiques:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on verra une première version de la méthode d&#8217;évaluation.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/19/les-algorithmes-genetiques-demystifies-41-les-individus-invalides/'>Les algorithmes génétiques démystifiés 41: Les individus invalides</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/18/les-algorithmes-genetiques-demystifies-40-ajout-delitisme/'>Les algorithmes génétiques démystifiés 40: Ajout d&#8217;élitisme</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/16/les-algorithmes-genetiques-39-resolution-du-sac-a-dos/'>Les algorithmes génétiques 39: Resolution du sac à dos</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket pour les rubyists 6: Une première fonction]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/"/>
    <updated>2013-11-11T20:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Grâce à ce qu&#8217;on a appris depuis <a href="http://lkdjiin.github.io/blog/2013/11/03/racket-pour-les-rubyists-definir-une-fonction/">le début</a> de cette série d&#8217;articles,
il est enfin temps de traduire la méthode Ruby suivante en Racket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">divisors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Une première fonction Racket</h2>

<p>Sans plus attendre, voici une traduction en Racket, qui suit le modèle
du <a href="http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/">dernier article</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; Is i a divisor of n?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">divisor?</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">n</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">filter</span> <span class="nv">divisor?</span> <span class="p">(</span><span class="nf">range</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici la fonction en action:</p>

<pre><code>-&gt; (divisors 1)
'(1)
-&gt; (divisors 8)
'(1 2 4 8)
-&gt; (divisors 17)
'(1 17)
-&gt; (divisors 171)
'(1 3 9 19 57 171)
</code></pre>

<p>Alors ça fait pas mal de code Racket comparé au code Ruby, mais attention de ne
pas juger le langage sur ce seul exemple. D&#8217;abord l&#8217;opérateur <code>..</code> de Ruby et
ses <em>blocks</em> permettent une syntaxe incroyablement concise, ensuite je
vous rappelle que <em>j&#8217;apprends</em> Racket, et que donc j&#8217;ai peut-être raté des
trucs…</p>

<p>Vous remarquez que je me suis senti obligé de commenté la fonction imbriquée
<code>divisor?</code>, ce qui n&#8217;est pas bon signe. Je suis un adepte du code court,
sous-entendu: une fonction devrait faire une seule chose. Or il me semble
qu&#8217;ici la fonction <code>divisors</code> fait trois choses:</p>

<ol>
<li>Elle regarde si un nombre i est un diviseur de n.</li>
<li>Elle produit une liste de 1 à n inclus.</li>
<li>Enfin, elle produit la liste des diviseurs de n.</li>
</ol>


<p>Donc <code>divisors</code> est un bon candidat au refactoring. Mais avant ça il va
falloir parler des tests unitaires avec Racket. Et avant de parler des
tests unitaires, il va falloir aborder la notion de module Racket. Si
ces sujets vous intéressent, restez à l&#8217;écoute de ce blog, c&#8217;est pour
bientôt.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/'>Racket pour les Rubyists 8: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/10/racket-pour-les-rubyists-5-definitions-imbriquees/'>Racket pour les rubyists 5: Définitions imbriquées</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
