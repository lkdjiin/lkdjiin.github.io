<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-01-19T12:41:34+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compiler votre Vim sous Linux]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux/"/>
    <updated>2014-01-19T12:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on voit comment compiler la dernière version de
Vim sur Linux (Debian, mais Ubuntu devrait marcher aussi).</p>

<!-- more -->


<h2>Pourquoi vouloir faire ça ?</h2>

<p>Tout d&#8217;abord, pourquoi voudrais-t-on compiler Vim alors que Debian nous
le fournit dans les paquets ? Je vois plusieurs raisons:</p>

<ol>
<li>Parce qu&#8217;on peut le faire. Mais je sens que cet argument n&#8217;est pas
fait pour vous convaincre.</li>
<li>Parce que c&#8217;est fun. Idem, pas convaincant, hein ?</li>
<li>Parce qu&#8217;on peut vouloir profiter d&#8217;une des dernières fonctionnalités
ajoutées, ou du dernier bugfix.</li>
<li>Parce que Debian est parfois à la ramasse lorsqu&#8217;il s&#8217;agit de nous
fournir des versions suffisament récentes de certains logiciels.
J&#8217;ai par exemple une machine qui est toujours en Debian 6 et que je
ne peux pas upgrader, Vim y est <em>coincé</em> en version 7.2.</li>
</ol>


<h2>On y va</h2>

<p>Assurez vous d&#8217;abord d&#8217;avoir toutes les dépendances:</p>

<pre><code>$ sudo apt-get build-dep vim
</code></pre>

<p>Ensuite, on va télécharger les sources depuis GitHub:</p>

<pre><code>$ git clone https://github.com/b4winckler/vim.git
</code></pre>

<p>Puis peut-être aller chercher une release particulière:</p>

<pre><code>$ cd vim
$ git checkout tags/v-7-4-155
</code></pre>

<p>Ensuite on va dans les sources:</p>

<pre><code>$ cd src
</code></pre>

<p>On nettoie (ça fait pas de mal):</p>

<pre><code>$ make distclean
</code></pre>

<p>On configure avec la plupart des features disponibles, notamment une
interface graphique et le support de perl, python et ruby:</p>

<pre><code>$ ./configure --with-features=huge --enable-gui=gnome2
  --with-compiledby=lkdjiin --enable-perlinterp  --enable-pythoninterp
  --enable-rubyinterp
</code></pre>

<p>Il reste à compiler:</p>

<pre><code>$ make
</code></pre>

<p>Et enfin à installer notre nouveau Vim:</p>

<pre><code>$ sudo make install
</code></pre>

<p>Et voilà:</p>

<p><img src="http://lkdjiin.github.io/images/vim-7-4-155.png"></p>

<h2>Désinstaller la version que vous avez compilé</h2>

<p>Si, pour une raison ou une autre, vous vouliez désinstaller
votre nouveau Vim, il faut d&#8217;abord trouver où il est installé.
Pour cela, lancez la commande suivante dans Vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>echo $VIMRUNTIME
</span></code></pre></td></tr></table></div></figure>


<p>Dans mon cas, cela donne: <code>/usr/local/share/vim/vim74</code>.</p>

<p>Rendez-vous ensuite dans les sources que vous avez téléchargées,
par exemple:</p>

<pre><code>$ cd ~/tmp/vim/src
</code></pre>

<p>Puis:</p>

<pre><code>$ make VIMRUNTIME=/usr/local/share/vim/vim74
$ sudo make uninstall
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/'>Vim: Plier (folder) les commentaires de style Unix</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque/'>Utiliser Vim comme un tableur sur Linux (enfin presque)</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/04/ecrire-une-fonction-vim-avec-ruby/'>Écrire une fonction Vim avec Ruby</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sauvegarde automatique des fichiers dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/"/>
    <updated>2014-01-18T09:45:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je parle d&#8217;un petit truc qui me facilite
énormément la vie sous Vim: la sauvegarde automatique.</p>

<!-- more -->


<p>Grâce à ce truc, je n&#8217;enregistre pratiquement jamais
<em>intentionnellement</em> un fichier. Ce qui fait que je
n&#8217;oublie jamais de le faire. Vous savez ? : On modifie
un fichier, on lance l&#8217;appli et… arg… ça fonctionne pas !
Tout ça parce qu&#8217;on a oublié d&#8217;enregistrer les
modifications.</p>

<p>Donc pour enregistrer le fichier courant, la commande est:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">w</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour enregistrer tous les fichiers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">wall</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour les accros du Ctrl-S, on peut le reproduire avec le mapping
suivant dans le <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span><span class="k">s</span><span class="p">&gt;</span> :<span class="k">w</span><span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Et maintenant le truc promis</strong>. Je veux que mes fichiers soient enregistrés
quand un onglet perds le focus, ou quand Vim lui-même perds le focus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>autocmd <span class="nb">FocusLost</span><span class="p">,</span><span class="nb">TabLeave</span> * :<span class="k">wall</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec cette commande dans votre <code>.vimrc</code>, il est rare de devoir
enregistrer manuellement un fichier ;)</p>

<p>Et si vous voulez comprendre ce que fais exactement cette commande, je
vous laisse regarder l&#8217;aide:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">h</span> autocmd
</span><span class='line'><span class="p">:</span><span class="k">h</span> <span class="nb">FocusLost</span>
</span><span class='line'><span class="p">:</span><span class="k">h</span> <span class="nb">TabLeave</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes/'>Vim et les digraphes</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses/'>Vim: Coloration syntaxique des parenthèses</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raccourcis clavier pour le terminal]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal/"/>
    <updated>2014-01-17T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je parle des raccourcis clavier du terminal. Pas tous, il y
en a des tonnes, seulement ceux que j&#8217;utilise régulièrement.</p>

<!-- more -->


<h2>Linux et OS X</h2>

<p>Les raccourcis qui suivent fonctionnent aussi bien sous Linux et
OS X:</p>

<pre><code>Crtl-a   Aller en début de ligne
Crtl-e   Aller en fin de ligne
Crtl-k   Supprimer du curseur à la fin de la ligne
Crtl-u   Supprimer avant le curseur
Crtl-w   Supprimer le mot avant le curseur
Crtl-t   Échanger les 2 caractères avant le curseur
Esc-t    Échanger les 2 mots avant le curseur
</code></pre>

<p>Pour voir la liste de tous les mappings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">bind</span> -P
</span></code></pre></td></tr></table></div></figure>


<h2>Linux seulement</h2>

<pre><code>Shift-Ctrl-c  Copier le texte sélectionné
Shift-Ctrl-v  Coller le texte
</code></pre>

<h2>OS X seulement</h2>

<pre><code>Meta-c        Copier le texte sélectionné
Meta-v        Coller le texte
</code></pre>

<p>En bonus, voici un truc très pratique sous OS X, qu&#8217;un collègue
(<a href="https://twitter.com/julienXX">@julienXX</a>) m&#8217;a
montré la semaine dernière: Un triple clic sur une ligne la sélectionne en
entier, avec le caractère de fin de ligne mais sans le prompt. On peut ensuite
faire un copier/coller avec <code>Shift-Meta-v</code>, ce qui lance la commande
directement.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/07/deuxieme-jour-sur-os-x/'>Deuxième jour sur OS X</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/06/premier-jour-de-mon-nouveau-boulot/'>Premier jour de mon nouveau boulot</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux/'>Compiler votre Vim sous Linux</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: Trouves mon nombre - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/"/>
    <updated>2014-01-16T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4</id>
    <content type="html"><![CDATA[<p>Suite à <a href="http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/">l&#8217;article précédent</a>,
on voit aujourd&#8217;hui la fonction <code>start</code> qui permet de démarrer le jeu avec
n&#8217;importe quelle étendue de nombres.</p>

<!-- more -->


<p>Voici tout d&#8217;abord le programme complet:</p>

<figure class='code'><figcaption><span>guess.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lower</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">upper</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">guess</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">+ </span><span class="nv">lower</span> <span class="nv">upper</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">smaller</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">sub1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bigger</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">min </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">add1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">start</span> <span class="nv">n</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">min </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut maintenant demander à la machine de <em>deviner</em> un nombre entre
n et m:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
-&gt; (start 1 10)
5
-&gt; (bigger)
8
-&gt; (smaller)
6
</code></pre>

<p>La fonction <code>start</code> utilise des notions déjà vues dans les articles
précédents.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">start</span> <span class="nv">n</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">min </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">n</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grâce à <code>set!</code>, on redéfini la valeur des variables <code>lower</code> et <code>upper</code>. Puis
on débute le jeu en lançant <code>guess</code>.</p>

<p>La variable <code>lower</code> se voit affecter la plus petite des valeurs passées en
arguments, grâce à <code>min</code>. Et <code>upper</code> se voit affecter la plus grande
grâce à <code>max</code>. Du coup, l&#8217;ordre des arguments de <code>start</code> n&#8217;a plus
d&#8217;importance:</p>

<pre><code>-&gt; (start 1000 1)
500
-&gt; (start 1 1000)
500
</code></pre>

<p>Voilà qui conclue cette petite introduction au langage Racket.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/'>Trouves mon nombre &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/'>Racket: Trouves mon nombre &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1/'>Racket: Trouves mon nombre &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion en Bash - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/"/>
    <updated>2014-01-15T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/">L&#8217;auto complétion programmable en bash: partie 4</a>.</p>

<h2>Les bases de l&#8217;auto complétion programmable</h2>

<p>Une application peut proposer ses services d&#8217;auto complétion en déposant
un fichier bash dans le dossier <code>/etc/bash_completion.d/</code>.
On y voit un tas de fichiers, pour des programmes bien connus:</p>

<pre><code>[~]⇒ ls /etc/bash_completion.d/
abook
ant
apache2.2-common
apache2ctl
apt
...
git
...
</code></pre>

<p>Il suffit juste de savoir quoi mettre dedans. Allons-y:</p>

<!-- more -->




<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">complete</span> -W <span class="s2">&quot;new compile test&quot;</span> mytool
</span></code></pre></td></tr></table></div></figure>


<p>Le fichier sera chargé automatiquement au lancement de bash. Donc pour que
ça fonctionne maintenant, soit vous le sourcez, soit vous lancez une
nouvelle console et, &ndash; <em>roulements de tambours</em>&ndash;</p>

<pre><code>[~]⇒ mytool [TAB]
compile  new      test     
[~]⇒ mytool 
</code></pre>

<p>Magique, non ? Il faut noter que l&#8217;auto complétion fonctionnera aussi
avec des options:</p>

<figure class='code'><figcaption><span>/etc/bash_completion.d/mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">complete</span> -W <span class="s2">&quot;new compile test --verbose&quot;</span> mytool
</span></code></pre></td></tr></table></div></figure>


<pre><code>[~]⇒ mytool c[TAB] -[TAB]
mytool compile --verbose
</code></pre>

<p>Donc, comment ça marche ? Voici la traduction de l&#8217;aide de <code>complete</code>,
simplifiée au maximum:</p>

<p><strong>complete</strong> [<em>options</em>] <em>name</em>   <br/>
Spécifie comment les arguments doivent être complétés, pour chaque <em>name</em>.</p>

<p>L&#8217;option <code>-W</code> permet de lui passer une liste de mots. Finalement c&#8217;était
facile ? Humm… En fait ce sera rarement aussi simple. Pour continuer notre
jeu de rôle, disons que l&#8217;option <code>--verbose</code> peut s&#8217;appliquer uniquement
à l&#8217;argument <code>new</code>, et pas aux deux autres. Du coup, notre commande
<code>complete</code> ne suffit plus. Il va falloir trouver autre chose et c&#8217;est ce
qu&#8217;on verra dans un prochain article.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en bash - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/"/>
    <updated>2014-01-14T20:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/">L&#8217;auto complétion programmable en bash: partie 3</a>.</p>

<h2>Un programme bidon pour tester</h2>

<p>On va faire un petit jeu de rôle : Vous avez écrit un nouveau langage
informatique revolutionnaire, et maintenant vous voulez lui adjoindre
un outil pour faciliter la gestion des projets. Ce fameux programme, qui
va s&#8217;appeller «mytool» aura 3 commandes: <code>new</code>, pour créer un projet,
<code>compile</code>, pour compiler le projet, et <code>test</code>, pour le tester. Et bien sûr,
vous voulez profiter des joies de l&#8217;auto complétion:</p>

<pre><code>mytool c[TAB]
</code></pre>

<p>devra devenir:</p>

<pre><code>mytool compile
</code></pre>

<!-- more -->


<p>Pour comprendre les prochains articles, on est pas obligé d&#8217;avoir un «vrai»
programme. Mais c&#8217;est quand même plus drôle pour faire tout un tas de tests.
Voici donc le magnifique programme <code>mytool</code>:</p>

<figure class='code'><figcaption><span>mytool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nv">$1</span> in
</span><span class='line'>  new <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>Project created ;;
</span><span class='line'>  <span class="nb">test</span> <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>Project tested ;;
</span><span class='line'>  compile <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>Project compiled ;;
</span><span class='line'>  * <span class="o">)</span>
</span><span class='line'>    <span class="nb">echo </span>error ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assurez vous que le programme ait les droits d&#8217;exécution (<code>chmod +x</code>)
et qu&#8217;il soit dans votre PATH:</p>

<pre><code>[~]⇒ mytool new
Project created
[~]⇒ mytool test
Project tested
[~]⇒ mytool compile
Project compiled
[~]⇒ mytool
error
</code></pre>

<p>La prochaine, promis, on commencera vraiment à faire de l&#8217;auto-complétion.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/"/>
    <updated>2014-01-13T20:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/">L&#8217;auto complétion programmable en bash: partie 2</a>.</p>

<p>Je joue donc quelques minutes avec la commande <code>compgen</code>, juste pour voir
de quoi il s&#8217;agit. L&#8217;option <code>-W</code> retient particulièrement mon attention.
On lui passe une liste de mots entre guillemets et ça nous les renvoient:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz"
foo
bar
baz
</code></pre>

<!-- more -->


<p>Ok, on va pas se mentir, vous ne voyez pas tellement l&#8217;intérêt, hein ?
Et si on passait un second argument à <code>compgen</code>, comme le début d&#8217;un
mot:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz" f
foo
</code></pre>

<p>Ou bien encore:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz" ba
bar
baz
</code></pre>

<p>Voilà qui est intéressant. Et si on lui donne un début de mot inexistant:</p>

<pre><code>[~]⇒ compgen -W "foo bar baz" o
[~]⇒ 
</code></pre>

<p>Les sections <strong>complete</strong> et surtout <strong>programmable completion</strong> de la page
de man sont particulièrement indigestes. Je me doute que je devrais les lire
si je veux aller plus loin, mais ça attendra encore.
Donc je google «bash programmable completion» et je trouve ce qu&#8217;il me faut pour
commencer. La suite la prochaine fois.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim et les digraphes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes/"/>
    <updated>2014-01-12T11:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Comment saisir facilement et rapidement des caractères tels que ¡, ¿ ou encore
ß dans Vim ?</p>

<!-- more -->


<p>Pour voir à quoi ressemble ces fameux digraphes dans Vim, tapez la commande
<code>:digraphs</code>. Vous allez obtenir la liste des digraphes qui sont définis.
La définition d&#8217;un digraphe ressemble à ceci:</p>

<pre><code>?I ¿  191
</code></pre>

<p>Ici, seules les deux premières colonnes nous intéressent. La première colonne
est le code de deux caractères qu&#8217;il faut saisir pour obtenir le caractère
de la seconde colonne.</p>

<p>Pour saisir un digraphe, il faut être en mode insertion et entrer
Control + k, puis les deux caractères du code. Donc <code>Control</code>, puis <code>k</code>,
puis <code>?</code>, puis <code>I</code> donnera le caractère <code>¿</code>.</p>

<p>Voici quelques exemples:</p>

<pre><code>!I ¡
?I ¿
ss ß
%0 ‰
13 ⅓
78 ⅞
l* λ
p* π
-&gt; →
=&gt; ⇒
</code></pre>

<p>Si vous utilisez régulièrement certains digraphes, il existe une manière
plus rapide de les saisir. Activez tout d&#8217;abord l&#8217;option <code>digraph</code> dans
votre <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="k">digraph</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant vous pouvez saisir un digraphe en entrant le premier caractère
du code, puis la touche Backspace, puis le second caractère du code.
Donc <code>p</code>, puis <code>Backspace</code>, puis <code>*</code> vous donneront le caractère Pi (<code>π</code>).
Attention quand même avec cette option, si vous faites régulièrement des
fautes de frappes, vous risquez de voir apparaître assez souvent des caractères
étranges et inattendus ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/'>Sauvegarde automatique des fichiers dans Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/'>Remplacer Sed et Awk par Ruby 10: Un exemple d&#8217;utilisation</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses/'>Vim: Coloration syntaxique des parenthèses</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2/"/>
    <updated>2014-01-11T20:33:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/11/lauto-completion-en-bash-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/10/lauto-completion-programmable-en-bash-partie-1/">L&#8217;auto complétion programmable en bash: partie 1</a>.</p>

<h2>Une première piste</h2>

<p>En parcourant rapidement la page de man de bash, je tombe sur une commande
pleine de promesse: la commande <code>compgen</code>.</p>

<!-- more -->


<p>Voici un extrait de la documentation:</p>

<p><strong>compgen</strong> [<em>option</em>] [<em>word</em>] <br/>
Generate possible completion matches for word according to the options, which
may be any option accepted by the <strong>complete</strong> builtin with the exception of -p
and -r, and write the matches to the standard output. When using the -F or -C
options, the various shell variables set by the <strong>programmable completion</strong>
<em>[&hellip;]</em></p>

<p>J&#8217;ai donc une commande <code>compgen</code>, qui semble fournir les différentes
possibilités de complétions pour un mot. J&#8217;ai aussi une commande <code>complete</code>,
dont le nom sonne vraiment bien. Et on me confirme que bash peut faire de
la <code>programmable completion</code>, même si je sais pas encore trop de quoi on
parle ici… Je vais devoir fouiller un peu les options de <code>complete</code> pour
apprendre comment fonctionne <code>compgen</code>. Ah, les joies du man Unix !</p>

<p>Mon voyage dans le monde de l&#8217;auto-complétion débute avec une page de man.
Y a plus sexy, mais bon, il faut bien commencer quelque part ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto complétion programmable en bash: partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/10/lauto-completion-programmable-en-bash-partie-1/"/>
    <updated>2014-01-10T21:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/10/lauto-completion-programmable-en-bash-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<h2>Ou comment git, apt-get et les autres l&#8217;utilisent</h2>

<p>L&#8217;auto-complétion de la ligne de commande sur unix, c&#8217;est à priori
très simple. Si je tape dans un terminal <code>ec</code> suivi de la touche tabulation:</p>

<pre><code>[~]⇒ ec[TAB]
</code></pre>

<p>C&#8217;est à dire les deux lettres &ldquo;ec&rdquo; suivies de la touche tabulation, la
commande est étendue en :</p>

<pre><code>echo 
</code></pre>

<p>Si il y a plusieurs choix possibles, Bash me les fournis:</p>

<pre><code>[~]⇒ apti
aptitude                      aptitude-curses
aptitude-create-state-bundle  aptitude-run-state-bundle
</code></pre>

<!-- more -->


<p>Ça devient plus intéressant quand ça fonctionne aussi avec les <em>arguments</em> des
commandes, qu&#8217;à priori, le shell ne connait pas. Par exemple :</p>

<pre><code>[~]⇒ apt-get upg[TAB]
</code></pre>

<p>devient :</p>

<pre><code>apt-get upgrade
</code></pre>

<p>Ou encore :</p>

<pre><code>[~]⇒ git fi[TAB]
</code></pre>

<p>qui devient :</p>

<pre><code>git filter-branch
</code></pre>

<p>Et ça devient carrément magique &ndash; <em>en tout cas pour moi</em> &ndash; quand la commande
git réussit l&#8217;auto-complétion d&#8217;une commande que j&#8217;ai ajouté moi-même.  Je
m&#8217;explique. J&#8217;ai par exemple, dans mon PATH, le fichier bash <code>git-pom</code> suivant:</p>

<figure class='code'><figcaption><span>git-pom</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>Si je tape :</p>

<pre><code>[~]⇒ git p[TAB]
</code></pre>

<p>ça devient :</p>

<pre><code>pom           pull          push          push-branch   
[~]⇒  git p
</code></pre>

<p>Git, ou bash, ou je ne sais quoi a trouvé la commande <code>pom</code> ! Moi ça m&#8217;épate
à chaque fois. Notez au passage que le fichier qui contient la nouvelle commande
s&#8217;appelle <code>git-pom</code> et qu&#8217;on peut taper <code>git pom</code>. Alors, comment ça
marche ?</p>

<p>Et bien je dois avouer que je n&#8217;en sais rien ! J&#8217;ai bien une petite idée
des mécanismes en jeu, mais aucunes connaissances sur le sujet. On va
donc découvrir cela ensemble au fil des articles suivants.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/'>L&#8217;auto-complétion programmable en bash &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/'>L&#8217;auto-complétion programmable en Bash &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trouves mon nombre - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/"/>
    <updated>2014-01-09T21:00:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui on regarde la fonction <code>bigger</code>, qui est l&#8217;inverse de la
fonction <code>smaller</code> <a href="http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/">vue la dernière fois</a>.</p>

<!-- more -->


<p>Voici donc notre nouveau fichier <code>guess.rkt</code> avec sa nouvelle fonction:</p>

<figure class='code'><figcaption><span>guess.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lower</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">upper</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">guess</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">+ </span><span class="nv">lower</span> <span class="nv">upper</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">smaller</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">sub1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bigger</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">min </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">add1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>bigger</code> fait exactement l&#8217;inverse de <code>smaller</code>:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
-&gt; (guess)
50
-&gt; (bigger)
75
</code></pre>

<p>Et c&#8217;est tout ce qu&#8217;il nous faut pour que la machine trouve le
nombre que j&#8217;ai choisi. Si par exemple je pensais au nombre
77, on continuerait ainsi:</p>

<pre><code>-&gt; (bigger)
88
-&gt; (smaller)
81
-&gt; (smaller)
78
-&gt; (smaller)
76
-&gt; (bigger)
77
</code></pre>

<p>La prochaine fois, on verra comment démarrer le jeu avec n&#8217;importe
quelle étendue de nombres.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/'>Racket: Trouves mon nombre &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/'>Racket: Trouves mon nombre &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1/'>Racket: Trouves mon nombre &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 mois d'articles non-stop]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/08/6-mois-darticles-non-stop/"/>
    <updated>2014-01-08T20:55:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/08/6-mois-darticles-non-stop</id>
    <content type="html"><![CDATA[<p>On y est, ceci est l&#8217;article des 6 mois. Je ne savais pas si j&#8217;allais
tenir jusque là, et ben si. Mille mercis à vous de m&#8217;avoir supporté
jusqu&#8217;ici…</p>

<!-- more -->


<p>Mon projet professionnel vient de se modifier, et je me suis posé la
question de savoir si j&#8217;allais continuer ce blog au rythme d&#8217;un article par
jour pendant encore 6 mois: je ne travaille plus à la maison et j&#8217;ai
maintenant 3 heures de transport quotidien. J&#8217;ai donc <em>beaucoup</em> moins de
temps à consacrer à ce blog.</p>

<p>Après reflexion, je me dis ce serait dommage de ne pas continuer, ayant
déjà fait la moitié du chemin. Alors oui je vais continuer à écrire un
article par jour. Mais je ne promet pas d&#8217;y arriver, juste d&#8217;essayer.
Si je m&#8217;aperçois que cela empiète trop sur ma vie de famille, je
réduirais sûrement le rythme de mes publications.</p>

<p>Attendez vous donc à une baisse significative de la longueur des articles
(et peut-être aussi de leur qualité ?) dans les semaines à venir, le temps
que je trouve mon nouveau rythme.</p>

<p>Encore merci de lire ce blog.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/10/15/un-article-par-jour-pendant-un-an-bilan-des-100-jours/'>Un article par jour pendant un an: Bilan des 100 jours</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/09/un-mois-darticles-quotidiens-le-bilan/'>Un mois d&#8217;articles quotidiens: le bilan</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/08/nouveau-defi-un-article-par-jour-pendant-un-an/'>Nouveau défi: un article par jour pendant un an</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deuxième jour sur OS X]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/07/deuxieme-jour-sur-os-x/"/>
    <updated>2014-01-07T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/07/deuxieme-jour-sur-os-x</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>C&#8217;est mon second jour sur OS X. Pendant la nuit, des petits lutins
on fait une mise à jour de mon poste. Je suis passé de la version 10.6
(dont j&#8217;ai oublié le nom), à Mavericks (si j&#8217;ai bien tout bon).</p>

<!-- more -->


<p>Et donc, en arrivant ce matin, pratiquement tout fonctionnait normalement.
Merci les lutins ! J&#8217;avais emmené avec moi mon TypeMatrix 2030, et ça aide.
Par contre la deception: le mode «102 key layout» ne fonctionne tout
simplement pas. Ce qui fait que je n&#8217;ai pas un accès direct à la touche
<code>ê</code>. Ce qui pourrait sembler insignifiant, sauf que c&#8217;est ma touche
<code>&lt;Leader&gt;</code> sous Vim. Du coup, obligé de changer de touche Leader…
Autre déception, qui cette fois fois concerne OS X: impossible de
remapper facilement la touche «verrou majuscule» au niveau de l&#8217;OS.
Agaçant, puisque j&#8217;ai l&#8217;habitude de m&#8217;en servir comme d&#8217;une touche Escape.
Bon, c&#8217;est pas la mort, je suis revenu au bon vieux Ctrl-C, mais quand
même, j&#8217;attendais mieux de OS X.</p>

<p>Mais je ne voudrais quand même pas donné l&#8217;impression de n&#8217;avoir rencontré
que des problèmes.
Par exemple, j&#8217;ai découvert <em>rbenv</em> et <em>homebrew</em>, les deux très bonnes
surprises du jour. Avec homebrew, on se croirait presque sous Linux, et
la gestion des listes (les Formulas) avec git me semble assez ingénieuse. J&#8217;en parlerais
sûrement en détail quand j&#8217;aurais bien compris le truc.
Quand à rbenv, que je ne connaissais pas, il m&#8217;a paru beaucoup plus simple
que rvm, que j&#8217;utilise depuis … depuis le début quoi. Il y a de
grandes chances que je me mette à écrire aussi à propos de rbenv, donc.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal/'>Raccourcis clavier pour le terminal</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/06/premier-jour-de-mon-nouveau-boulot/'>Premier jour de mon nouveau boulot</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/'>Sauvegarde automatique des fichiers dans Vim</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Premier jour de mon nouveau boulot]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/06/premier-jour-de-mon-nouveau-boulot/"/>
    <updated>2014-01-06T21:11:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/06/premier-jour-de-mon-nouveau-boulot</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui fût le premier jour de mon nouveau boulot. Cet article sera court,
je suis fatigué, il est tard, et je n&#8217;ai pas d&#8217;idée. Ou alors je pourrais
parler un peu d&#8217;OS X…</p>

<!-- more -->


<p>Mais un peu seulement, alors. Parce que c&#8217;est la toute première fois que
je touche à ce système d&#8217;exploitation. Je ne vais donc pas pouvoir vous
apprendre grand chose…</p>

<p>OS X c&#8217;est beau. Je ne peut pas dire le contraire. Habitué à
mon spartiate Debian, j&#8217;en ai pris plein les mirettes…</p>

<p>Je me suis battu avec le clavier, demain j&#8217;apporte mon TypeMatrix, histoire
de pouvoir me concentrer sur autre chose…</p>

<p>Je dois encore comprendre pourquoi MacVim n&#8217;accepte pas de faire
fonctionner pathogen…</p>

<p>En parlant de MacVim, j&#8217;ai noté un comportement très cool, il suffit d&#8217;un
seul appui sur <code>^</code> pour aller en début de ligne, alors que sur mon gVim,
il en faut deux. Ça j&#8217;aime bien, je ne sais pas pourquoi je n&#8217;ai jamais
pensé à adapter ce comportement sur gVim…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal/'>Raccourcis clavier pour le terminal</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/07/deuxieme-jour-sur-os-x/'>Deuxième jour sur OS X</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/'>Sauvegarde automatique des fichiers dans Vim</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: Trouves mon nombre - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/"/>
    <updated>2014-01-05T20:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Suite de l&#8217;article d&#8217;hier, aujourd&#8217;hui on ajoute la fonction
<code>smaller</code> à notre petit jeu textuel.</p>

<!-- more -->


<p>Voici le fichier <code>guess.rkt</code> avec la nouvelle fonction:</p>

<figure class='code'><figcaption><span>guess.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lower</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">upper</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">guess</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">+ </span><span class="nv">lower</span> <span class="nv">upper</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">smaller</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">sub1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction change l&#8217;étendue du nombre à trouver, puis fait une nouvelle
proposition:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
-&gt; (guess)
50
-&gt; (smaller)
25
</code></pre>

<p>Voyons notre nouvelle fonction en détail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">smaller</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">set! </span><span class="nv">upper</span> <span class="p">(</span><span class="nb">max </span><span class="nv">lower</span> <span class="p">(</span><span class="nb">sub1 </span><span class="p">(</span><span class="nf">guess</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">guess</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si le nombre à trouver est plus petit que 50, il est donc compris entre
1 et 49. Il faut donc changer la limite haute (<code>upper</code>) pour refléter
cette nouvelle donne.</p>

<p>Le rôle de <code>set!</code> est de redéfinir une variable. Ici, on va changer le
contenu de la variable <code>upper</code>.</p>

<p>La fonction <code>sub1</code> décremente le nombre passé en argument, donc
<code>(sub1 (guess))</code> renvoie 49. Et nous prenons, grâce à <code>max</code>, le nombre maximum entre
celui-ci (49) et la valeur de la limite basse, ce qui permet de
s&#8217;assurer que la valeur de <code>upper</code> ne sera jamais inférieure à
la valeur de <code>lower</code>. Ce qu&#8217;on peut vérifier en continuant à évaluer
<code>smaller</code>:</p>

<pre><code>-&gt; (smaller)
25
-&gt; (smaller)
12
-&gt; (smaller)
6
-&gt; (smaller)
3
-&gt; (smaller)
1
-&gt; (smaller)
1
-&gt; (smaller)
1
...
</code></pre>

<p>La prochaine fois on verra la fonction inverse: <code>bigger</code> que vous
pouvez essayer de coder par vous-même en attendant.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/'>Racket: Trouves mon nombre &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/'>Trouves mon nombre &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1/'>Racket: Trouves mon nombre &ndash; partie 1</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: Trouves mon nombre - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1/"/>
    <updated>2014-01-04T19:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>«Devines un nombre entre 1 et 100 !» C&#8217;est le jeu que je vous propose
d&#8217;écrire en Racket pour apprendre ce langage.
Le code provient du livre <a href="http://realmofracket.com/">Realm of Racket</a>
et il est livré avec Racket. Vous pourrez le trouver dans le dossier
<code>collects/realm/chapter2</code> de votre installation de Racket.</p>

<!-- more -->


<p>Voici le morceau de code qu&#8217;on va voir aujourd&#8217;hui:</p>

<figure class='code'><figcaption><span>guess.rkt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lower</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">upper</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">guess</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">+ </span><span class="nv">lower</span> <span class="nv">upper</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enregistrez le dans un fichier <code>guess.rkt</code>. Pour le charger, lancez <code>racket</code>
et tapez <code>(enter! "guess.rkt")</code>:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
</code></pre>

<p>Si vous demandez l&#8217;évaluation de la fonction <code>guess</code>, vous obtiendrez 50:</p>

<pre><code>-&gt; (guess)
50
</code></pre>

<p>Voici quelques explications. On a tout d&#8217;abord défini deux variables,
<code>lower</code> et <code>upper</code>, qui sont les limites basses et hautes de l&#8217;étendue
sur laquelle la machine va <em>deviner</em> un nombre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lower</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">upper</span> <span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plus tard dans le programme, le contenu de ces variables changera pour
réduire l&#8217;étendue.</p>

<p>Maintenant, voyons comment la machine <em>devine</em> un nombre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">guess</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">+ </span><span class="nv">lower</span> <span class="nv">upper</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout simplement en donnant le nombre qui se trouve au milieu des limites
basses et hautes. Pour trouver ce nombre, on divise par 2 la somme de la limite
basse et de la limite haute. On doit ici utiliser <code>quotient</code> pour faire
la division, et non pas <code>/</code>. En effet:</p>

<pre><code>-&gt; (/ 101 2)
101/2
</code></pre>

<p>En Racket, les nombres restent <em>exacts</em> tant qu&#8217;ils le peuvent. Comme nous
voulons un nombre entier, il faut le tronquer:</p>

<pre><code>-&gt; (truncate 101/2)
50
</code></pre>

<p>Voilà ce à quoi sert <code>quotient</code>. Autrement dit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nb">quotient </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>est égal à:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nb">truncate </span><span class="p">(</span><span class="nb">/ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/'>Racket: Trouves mon nombre &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/'>Trouves mon nombre &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/'>Racket: Trouves mon nombre &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: Afficher les tables de multiplication]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/03/racket-afficher-les-tables-de-multiplication/"/>
    <updated>2014-01-03T17:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/03/racket-afficher-les-tables-de-multiplication</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui un programme vraiment très simple pour débuter en Racket:
comment afficher les tables de multiplication de 1 à 12.
Attention: vrais débutants uniquement !</p>

<!-- more -->


<p>On commence par une fonction qui affiche une ligne d&#8217;une table de
multiplication:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">display-table-line</span> <span class="nv">rank</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">printf </span><span class="s">&quot;~a x ~a = ~a\n&quot;</span> <span class="nv">rank</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">rank</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction se nomme <code>display-table-line</code> et prends deux
paramètres: <code>rank</code> et <code>n</code>. <code>n</code> est le numéro de la table (table des 1,
table des 2, table des 3, etc).
<code>printf</code> permet d&#8217;afficher une ligne de texte formaté, chaque occurence
de <code>~a</code> sera remplacée, dans l&#8217;ordre, par les arguments qui suivent.</p>

<p>Voici maintenant la fonction <code>display-table</code>, qui va afficher une table entière:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">display-table</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">rank</span> <span class="p">(</span><span class="nf">in-range</span> <span class="mi">1</span> <span class="mi">11</span><span class="p">)])</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">display-table-line</span> <span class="nv">rank</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction affiche la table des <code>n</code>. Tout se passe dans une boucle <code>for</code>.
La fonction <code>(in-range x y)</code> retourne un range de x inclus, à y non-inclus.</p>

<p>Et enfin, voici la boucle principale qui provoque l&#8217;affichage des tables de
1 à 12:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">num</span> <span class="p">(</span><span class="nf">in-range</span> <span class="mi">1</span> <span class="mi">13</span><span class="p">)])</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">printf </span><span class="s">&quot;Table des ~a\n\n&quot;</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">display-table</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut paraphraser le code ainsi: pour chaque table de 1 à 12, écrire un
entête, afficher la table, puis passer une ligne.</p>

<p>Voici donc, pour finir, le code complet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="kn">#lang racket</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">display-table-line</span> <span class="nv">rank</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">printf </span><span class="s">&quot;~a x ~a = ~a\n&quot;</span> <span class="nv">rank</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">rank</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">display-table</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">rank</span> <span class="p">(</span><span class="nf">in-range</span> <span class="mi">1</span> <span class="mi">11</span><span class="p">)])</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">display-table-line</span> <span class="nv">rank</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">num</span> <span class="p">(</span><span class="nf">in-range</span> <span class="mi">1</span> <span class="mi">13</span><span class="p">)])</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">printf </span><span class="s">&quot;Table des ~a\n\n&quot;</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">display-table</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/'>Racket: Trouves mon nombre &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/'>Trouves mon nombre &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/'>Racket: Trouves mon nombre &ndash; partie 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mon patch pour Ruby a été refusé]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/02/mon-patch-pour-ruby-a-ete-refuse/"/>
    <updated>2014-01-02T18:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/02/mon-patch-pour-ruby-a-ete-refuse</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Il y a quelque jours, j&#8217;ai présenté les <a href="http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/">nouvelles méthodes de la classe
Set</a>, mise à jour avec la sortie de Ruby 2.1.
Un commenteur m&#8217;a fait remarquer avec raison que le code pourrait être
bien plus simple. Ni une, ni deux, j&#8217;écris un patch, les tests passent,
j&#8217;envoie un pull request. Le patch sera gentillement refusé, et c&#8217;est
bien normal…</p>

<!-- more -->


<p>Voici le code des méthodes originales:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">intersect?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>    <span class="n">set</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Set</span><span class="p">)</span> <span class="ow">or</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;value must be a set&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="n">set</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>      <span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span> <span class="n">set</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">o</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">set</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span> <span class="kp">include</span><span class="p">?(</span><span class="n">o</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">disjoint?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>    <span class="o">!</span><span class="n">intersect?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici comment je les ai recodées:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">intersect?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>    <span class="o">!</span><span class="n">disjoint?</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">disjoint?</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>    <span class="n">set</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Set</span><span class="p">)</span> <span class="ow">or</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;value must be a set&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">self</span> <span class="o">&amp;</span> <span class="n">set</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je trouvais mon nouveau code vraiment très bien foutu: deux fois plus court et
plus simple à lire. Seulement j&#8217;avais oublié deux petites choses qui le rendent
moins efficace que le code original:</p>

<p>Premièrement, mon code crée un objet intermédiaire
(avec <code>self &amp; set</code>) qui n&#8217;est pas nécessaire.</p>

<p>Deuxièment, le code original s&#8217;arrête dès qu&#8217;un élément en commun est trouvé,
alors que le mien remplira un (nouveau) set avec tout les éléments en
communs. C&#8217;est évidemment beaucoup moins efficace, surtout avec de gros sets.</p>

<p>Moralité : un code plus court n&#8217;est pas toujours synonyme de plus efficace !</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/'>Ruby 2.1: Les nouvelles méthodes de Set</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/26/les-algorithmes-genetiques-demystifies-48-economie-resolution-du-probleme/'>Les algorithmes génétiques démystifiés 48: Économie &ndash; Résolution du problème</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/23/les-algorithmes-genetiques-demystifies-47-economie/'>Les algorithmes génétiques démystifiés 47: Économie</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La fonction d'auto-application en Lambda Calculus 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/01/la-fonction-dauto-application-en-lambda-calculus-2eme-partie/"/>
    <updated>2014-01-01T17:43:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/01/la-fonction-dauto-application-en-lambda-calculus-2eme-partie</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Hier on a vu <a href="http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus/">la fonction d&#8217;auto-application</a> appliquée à divers arguments.
Aujourd&#8217;hui on regarde ce qu&#8217;il se passe lorsqu&#8217;elle est appliquée à
elle-même.</p>

<!-- more -->


<h2>(λs.(s s) λs.(s s))</h2>

<p>Que ce passe-t-il quand on applique la fonction d&#8217;auto-application sur
elle-même ? Regardons cela:</p>

<pre><code>(λs.(s s) λs.(s s))
</code></pre>

<p>Le premier <code>s</code> de cette application est la variable liée. Je le met entre
chevrons doubles pour être sûr de bien me faire comprendre:</p>

<pre><code>(λ&lt;&lt;s&gt;&gt;.(s s) λs.(s s))
</code></pre>

<p>Ensuite nous avons le corps de la fonction:</p>

<pre><code>(λs.&lt;&lt;(s s)&gt;&gt; λs.(s s))
</code></pre>

<p>Vient ensuite l&#8217;argument de l&#8217;application:</p>

<pre><code>(λs.(s s) &lt;&lt;λs.(s s)&gt;&gt;)
</code></pre>

<p>Pour évaluer cette application, on utilise le même mécanisme que
précédement: on remplace chaques occurences de la variable liée par
l&#8217;argument, dans le corps de la fonction, et on renvoie ce corps.
Ce qui nous donne donc:</p>

<pre><code>(λs.(s s) λs.(s s))
</code></pre>

<p>Nous avons obtenu exactement la même application que celle de départ !
L&#8217;évaluation n&#8217;étant pas terminée, on doit continuer et on voit qu&#8217;on
entre dans une <em>boucle infinie</em>: l&#8217;évaluation ne se termine jamais.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>Bonne année 2014 et à demain !</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus/'>La fonction d&#8217;auto-application en Lambda Calculus</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/'>La fonction d&#8217;identité en lambda calculus</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/27/introduction-a-lambda-calculus/'>Introduction à Lambda Calculus</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La fonction d'auto-application en Lambda Calculus]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus/"/>
    <updated>2013-12-31T15:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>La dernière fois on a vu <a href="http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/">la fonction d&#8217;identité</a>, cette fois ci on
va parler de la fonction d&#8217;auto-application en λ calculus.</p>

<!-- more -->


<h2>La fonction d&#8217;auto-application : λs.(s s)</h2>

<p>Appliquée à un argument A, la fonction d&#8217;auto-application crée une nouvelle
application, dont la fonction et l&#8217;argument sont A. Décortiquons d&#8217;abord un peu cette
fonction:</p>

<pre><code>λs.(s s)
</code></pre>

<p>Le premier <code>s</code>, coincé entre le caractère lambda et le point est la
variable liée. À droite du point, nous avons le corps de la fonction :</p>

<pre><code>(s s)
</code></pre>

<p>qui est une application.</p>

<h2>(λs.(s s) foo)</h2>

<p>Voyons ce qu&#8217;il se passe quand la fonction d&#8217;auto-application est appliquée
à l&#8217;argument <code>foo</code>:</p>

<pre><code>(λs.(s s) foo)
</code></pre>

<p>On remplace, dans le corps de la fonction, chaque occurence de la variable liée
par l&#8217;argument. Et c&#8217;est ce corps de fonction, après substitution, qui
est renvoyé:</p>

<pre><code>(foo foo)
</code></pre>

<p><code>foo</code> étant un nom, il s&#8217;évalue en tant que lui-même, et on ne peut donc
pas aller plus loin.</p>

<h2>(λs.(s s) λx.x)</h2>

<p>Voyons maintenant l&#8217;application de la fonction d&#8217;auto-application à la
fonction d&#8217;identité, vue la dernière fois:</p>

<pre><code>(λs.(s s) λx.x)
</code></pre>

<p>Comme précédement, on remplace chaque occurence de <code>s</code> dans le corps de
la fonction:</p>

<pre><code>(λx.x λx.x)
</code></pre>

<p>Cette fois, l&#8217;application peut être évaluée. On a vu la dernière fois
que la fonction d&#8217;identité renvoyait l&#8217;argument, donc:</p>

<pre><code>λx.x
</code></pre>

<p>La prochaine fois, on verra ce qu&#8217;il se passe quand la fonction
d&#8217;auto-application est appliquée sur elle-même. En fait, si vous avez
compris le mécanisme, vous pouvez d&#8217;ores et déjà essayer par vous même…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/01/01/la-fonction-dauto-application-en-lambda-calculus-2eme-partie/'>La fonction d&#8217;auto-application en Lambda Calculus 2ème partie</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/'>La fonction d&#8217;identité en lambda calculus</a></li><li><a href='http://lkdjiin.github.io/blog/2013/12/27/introduction-a-lambda-calculus/'>Introduction à Lambda Calculus</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
