<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-07-20T13:51:12+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[De meilleurs alias avec zsh]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh/"/>
    <updated>2015-07-20T13:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/20/de-meilleurs-alias-avec-zsh</id>
    <content type="html"><![CDATA[<p>Pour m’améliorer en tant que dev, j’essaye au maximum de simplifier et d’automatiser mon workflow. L’idée est de passer moins de temps à faire des choses qu’un ordinateur peut faire à ma place, et plus de temps à réfléchir aux problèmes que je cherche à résoudre.</p>

<p>C’est dans cette optique que je me suis mis à ajouter énormément d’alias très courts à mon shell. Un alias revient à automatiser l’action de taper sur les touches pour des commandes fréquentes. Malheureusement, les alias sont sous-utilisés pour plusieurs raisons : on a peur d’oublier la commande qui se cache derrière, un autre dev avec qui on est en train de faire du pair programming aura du mal à comprendre quelles commandes sont exécutées, et souvent on oublie tout simplement qu’on a un alias pour la commande qu’on est en train de taper.</p>

<p>Pour remédier à ces problèmes, j’ai trouvé des solutions que des fonctions avancées de zsh permettent d’implémenter : les alias explicites, et les alias obligatoires.</p>

<!-- more -->

<h2 id="zsh">zsh</h2>

<p>zsh est un shell Unix similaire à bash, mais en mieux. On cite souvent son autocompletion et la quantité de plugins disponibles, notamment ceux de <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>, comme les principales raisons de passer de bash à zsh.</p>

<p>zsh est installé par défaut sur la plupart des distributions linux et OSX. Si vous ne l’utilisez pas encore, vous pouvez en faire votre shell par défaut avec cette commande :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chsh -s $(which zsh)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="les-alias-explicites">Les alias explicites</h2>

<p>C’est une fonction que @lkdjiin connait bien puisque c’est une des premières améliorations que j’ai apporté à mes alias quand j’ai commencé à travailler avec lui.
Voilà à quoi ça ressemble:</p>

<p><img src="https://cloud.githubusercontent.com/assets/1840367/8545448/16b25cfc-24af-11e5-85ab-69f77424b532.gif" alt="explicit_aliases" /></p>

<p>Afin de ne pas oublier la commande qui se cache derrière un alias, les alias explicite la font s’afficher comme si elle avait été entrée juste après l’alias.
Voici le code à rajouter dans votre .zshrc (le fichier de config que zsh charge avant chaque session) pour activer les alias explicites:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">preexec_functions=()
</span><span class="line">
</span><span class="line">function expand_aliases {
</span><span class="line">  input_command=$1
</span><span class="line">  expanded_command=$2
</span><span class="line">  if [ $input_command != $expanded_command ]; then
</span><span class="line">    print -nP $PROMPT
</span><span class="line">    echo $expanded_command
</span><span class="line">  fi
</span><span class="line">}
</span><span class="line">
</span><span class="line">preexec_functions+=expand_aliases</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Les preexec functions de zsh sont des fonctions qui sont appelées après qu’une commande soit lue, et avant qu’elle ne soit exécutée. zsh leur donne comme argument la commande telle qu’elle est entrée par l’utilisateur, et la même commande après l’expansion des alias.</p>

<p>Cette fonction vérifie donc que la version étendue est différente de la version entrée par l’utilisateur (c’est à dire qu’un alias a été utilisé), et le cas échéant affiche un prompt en utilisant la variable <code>$PROMPT</code> suivi de la commande.</p>

<h2 id="les-alias-obligatoires">Les alias obligatoires</h2>

<p>Cette idée plaît parfois un peu moins : pour ne pas oublier l’existence d’un alias, j’ai modifié mon setup pour que zsh refuse d’exécuter une commande si je la tape en entier plutôt que de me servir d’un alias.</p>

<p><img src="https://cloud.githubusercontent.com/assets/1840367/7302861/9e437a96-e9ec-11e4-9978-9f33f21bd7d9.gif" alt="mandatory_alias" /></p>

<p>Et voici l’implémentation dans le .zshrc:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function check-alias-and-accept {
</span><span class="line">  if [ $BUFFER ]; then
</span><span class="line">
</span><span class="line">    ALIAS=`alias -L | grep -e "=[\'\"]\?${BUFFER}[\'\"]\?$"`
</span><span class="line">
</span><span class="line">    if [ $ALIAS ]; then
</span><span class="line">      echo
</span><span class="line">      echo "You have this alias:"
</span><span class="line">      echo
</span><span class="line">      echo $ALIAS
</span><span class="line">      echo
</span><span class="line">      echo "Use it!"
</span><span class="line">
</span><span class="line">      zle kill-whole-line
</span><span class="line">      zle reset-prompt
</span><span class="line">    else
</span><span class="line">      zle accept-line
</span><span class="line">    fi
</span><span class="line">  else
</span><span class="line">    zle accept-line
</span><span class="line">  fi
</span><span class="line">}
</span><span class="line">
</span><span class="line">zle -N check-alias-and-accept
</span><span class="line">bindkey '^J' check-alias-and-accept
</span><span class="line">bindkey '^M' check-alias-and-accept</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’utilise ici une fonction peu connue de zsh: le Zsh Line Editor, ou zle. Il s’agit du programme que zsh execute pendant qu’il lit les évènements clavier de l’utilisateur (alors que les precommand functions sont exécutées après que l’utilisateur ai fini d’entrer la commande). C’est ce programme qui lance l’autocomplétion lorsque qu’on appuie sur TAB par exemple.</p>

<p>L’implémentation est un peu plus compliquée que pour les alias explicites. Regardons un peu plus en détails ce qui se passe:</p>

<ul>
  <li>Les trois dernières lignes sont pour enregistrer la fonction <code>check-alias-and-accept</code> à la liste des fonctions que zle peut appeler, et binder la touche Entrée à l’appel de cette fonction.</li>
  <li>A l’intérieur de <code>check-alias-and-accept</code>, on commence par vérifier que l’utilisateur a entré quelque chose, ce qui est indiqué par la variable <code>$BUFFER</code> initialisée par zle. Si rien n’a été entré (dans la branche du else), on appelle tout simplement la fonction <code>zle accept-line</code>, qui est celle que zle executerait normalement à l’appui sur la touche Entrée.</li>
  <li>Si il y a une commande, on cherche parmis tous les alias si il y en a un qui correspond. <code>alias -L</code> permet d’obtenir la liste de tous les alias de la config, et un grep avec une regexp un peu sauvage permet de les filtrer.</li>
  <li>Si un alias correspond, les fonctions <code>zle kill-whole-line</code> et <code>zle reset-prompt</code> permettent de revenir à un prompt vide. La commande est donc effacée et n’apparaitra même pas dans l’historique.</li>
</ul>

<h2 id="et-bien-plus-encore">Et bien plus encore</h2>

<p>zsh est un shell très puissant lorsqu’on a le courage de lire son manuel, et permet de customizer votre setup de manière très poussée. Pour plus de customization zsh et vim, jetez un coup d’oeil à mes <a href="https://github.com/victormours/dotifles">dotfiles</a>, et si vous avez des idées pour d’autres améliorations à base de zsh, <a href="twitter.com/victormours">envoyez-les moi sur twitter</a> !</p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="https://avatars3.githubusercontent.com/u/1840367?v=3&amp;s=200" /></p>

<p><strong>Victor Mours</strong><br />
Lead developer chez sleekapp.io, obsessionnel des dotfiles</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment j'ai amélioré mon Ruby avec des contrats]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/13/comment-jai-ameliore-mon-ruby-avec-des-contrats/"/>
    <updated>2015-07-13T12:42:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/13/comment-jai-ameliore-mon-ruby-avec-des-contrats</id>
    <content type="html"><![CDATA[<p>Mes aventures avec une quantité de langages m’ont permis d’entrevoir de nouvelles approches et techniques.
Par exemple, un des gros apports d’Haskell sont les <a href="http://lyah.haskell.fr/creer-nos-propres-types-et-classes-de-types">Types</a> et dans Erlang/Elixir le <a href="http://learnyousomeerlang.com/syntax-in-functions">Pattern-matching</a> est roi.
Professionnellement je code principalement en Ruby et je rêvais d’avoir un système de Types avancé ainsi que du pattern-matching.
C’est ainsi que j’ai découvert une super gem <a href="https://github.com/egonSchiele/contracts.ruby">Contracts.ruby</a> et dans cet article je vais essayer de vous présenter le <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design par Contrats</a> à travers l’utilisation de cette gem.</p>

<!-- more -->

<h2 id="quest-ce-quun-contrat-">Qu’est-ce qu’un contrat ?</h2>

<p>Un contrat permet de s’assurer de ce qu’une méthode attend en entrée (pré-condition), de ce qu’elle produit en sortie (post-condition). Il va définir comment notre méthode se comporte mais aussi vérifier ce comportement.
La gem <code>Contracts.ruby</code> nous permet de décorer nos méthodes avec du code qui va vérifier que les entrées et les sorties correspondent à ce que le contrat spécifie. Bien sûr, on est pas obligé d’annoter chacune de nos méthodes mais je pense que spécifier le contrat sur toutes celles qui sont publiques ne peut qu’être bénéfique.</p>

<h2 id="un-premier-exemple">Un premier exemple</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le contrat de ma méthode est <code>Contract Num, Num =&gt; Num</code> ce qui nous indique que la méthode <em>add</em> prend deux nombres en entrée et retourne un nombre. Simple, non ?
Vous allez me dire que ok, c’est de la documentation, j’aurais pu juste ajouter un commentaire. Mais, puisqu’il s’agit d’un contrat, la gem Contracts.ruby va permettre de nous assurer que celui-ci est respecté.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;contracts&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Foo</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Contracts</span>
</span><span class="line">
</span><span class="line">  <span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">    <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Foo.add(1, 2)</code> nous retourne évidemmement <code>3</code> par contre <code>Foo.add(1, '2')</code> va retourner:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">ParamContractError</span><span class="p">:</span> <span class="no">Contract</span> <span class="n">violation</span> <span class="k">for</span> <span class="n">argument</span> <span class="mi">2</span> <span class="n">of</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="ss">Expected</span><span class="p">:</span> <span class="no">Num</span><span class="p">,</span>
</span><span class="line">        <span class="ss">Actual</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span>
</span><span class="line">        <span class="no">Value</span> <span class="n">guarded</span> <span class="k">in</span><span class="p">:</span> <span class="ss">Foo</span><span class="p">:</span><span class="ss">:add</span>
</span><span class="line">        <span class="no">With</span> <span class="ss">Contract</span><span class="p">:</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’erreur nous montre que le contrat de la méthode <em>add</em> n’a pas été respecté par le second paramètre que nous lui avons passé, ‘2’, car il n’est pas du type <em>Num</em>.</p>

<p>Notez que l’on doit toujours spécifier le type de la valeur retournée même si la méthode ne retourne rien:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="nb">String</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Par exemple, si notre méthode retourne plusieurs valeurs, sa signature sera <code>Contract Num =&gt; [Num, Num]</code>.</p>

<h2 id="les-diffrents-types--notre-disposition">Les différents Types à notre disposition</h2>

<p>Outre les classiques <em>Num</em>, <em>String</em>, <em>Bool</em>, nous avons à notre disposition des types plus intéressants comme:</p>

<ul>
  <li><code>Any</code> lorsque votre argument n’a pas de contrainte</li>
  <li><code>None</code> lorsqu’on n’a pas d’argument</li>
  <li><code>Or</code> si notre argument peut être de plusieurs types, par exemple <code>Or[Fixnum, Float]</code></li>
  <li><code>Not</code> si notre argument ne peut pas être d’un certain type, par exemple <code>Not[nil]</code></li>
  <li><code>Maybe</code> si notre argument est optionnel, par exemple <code>Maybe[String]</code></li>
</ul>

<p>Et bien d’autres que vous pourrez découvrir dans la documentation.</p>

<h2 id="contrats-sur-des-types-avancs">Contrats sur des Types avancés</h2>

<p>On peut utiliser des contrats avec des Types plus avancés comme des listes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">ArrayOf</span><span class="o">[</span><span class="no">Num</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line"><span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">vals</span><span class="p">)</span>
</span><span class="line">  <span class="n">vals</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:*</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le contrat de la méthode <em>multiply</em> nous indique qu’elle attend une liste de valeurs du type Num. Par conséquent on peut faire <code>multiply([2, 4, 16])</code> mais pas <code>multiply([2, 4, 'foo'])</code>.</p>

<p>Des Hash:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="p">({</span> <span class="ss">nom</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="no">Num</span><span class="p">,</span> <span class="ss">ville</span><span class="p">:</span> <span class="nb">String</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Des méthodes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">ArrayOf</span><span class="o">[</span><span class="no">Any</span><span class="o">]</span><span class="p">,</span> <span class="no">Proc</span> <span class="o">=&gt;</span> <span class="no">ArrayOf</span><span class="o">[</span><span class="no">Any</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous utilisez les arguments nommés de Ruby 2.x, le contrat ressemblera à:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="no">KeywordArgs</span><span class="o">[</span><span class="ss">foo</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">bar</span><span class="p">:</span> <span class="no">Num</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut aussi définir nos propres contrats grâce aux <code>synonymes</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Token</span> <span class="o">=</span> <span class="nb">String</span>
</span><span class="line"><span class="no">Client</span> <span class="o">=</span> <span class="no">Or</span><span class="o">[</span><span class="no">Hash</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="no">Token</span> <span class="o">=&gt;</span> <span class="no">Client</span>
</span><span class="line"><span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notre méthode est ainsi plus claire quant à ce qu’elle attend et ce qu’elle permet de faire. On désire un <code>Token</code> qui est de type <code>String</code> en entrée et on retourne un <code>Client</code> qui peut être un <code>Hash</code> ou rien (nil).</p>

<h2 id="le-pattern-matching">Le pattern-matching</h2>

<p>Le pattern-matching consiste, pour une valeur donnée, à tester si elle correspond à un motif ou pas. Si c’est le cas une action est déclenchée. C’est un peu comme de l’overloading de méthode en Java. On pourrait l’imaginer comme un switch case géant mais en beaucoup plus élégant.</p>

<p>Un exemple simple avec le calcul (pas efficace du tout) de la suite de Fibonacci:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="mi">0</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="mi">0</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour un argument donné, chaque méthode va être essayée dans l’ordre. La première méthode qui ne génère pas d’erreur sera utilisée.</p>

<p>Un exemple un peu plus utile, la gestion d’une réponse HTTP en fonction de son code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Contract</span> <span class="mi">200</span><span class="p">,</span> <span class="no">JsonString</span> <span class="o">=&gt;</span> <span class="no">JsonString</span>
</span><span class="line"><span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class="line">  <span class="n">transform_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">JsonString</span> <span class="o">=&gt;</span> <span class="no">JsonString</span>
</span><span class="line"><span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class="line">  <span class="n">response</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si le code de la réponse HTTP est 200 on va transformer la réponse, sinon on se contentera de retourner la réponse.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Les bénéfices sont nombreux. Les contrats nous permettent d’avoir une plus grande cohérence dans les entrées et les sorties. Le flux des données dans notre système est plus clair. Et la plupart des erreurs liées aux types dans notre système peuvent être corrigées rapidement et simplement. De plus ils permettent de rapidement comprendre ce que fait une méthode, ce qu’elle attend et ce qu’elle retourne, un peu comme de la documentation mais qui serait tout le temps à jour :p.
Je pense que l’on peut ainsi économiser pas mal de tests unitaires sur le type d’argument reçu par une méthode et se concentrer sur ce qu’elle produit avec ce système de contrats.</p>

<p>Voilà j’espère que cet article vous aura convaincu de l’utilité des contrats et du pattern-matching dans votre Ruby quotidien et vous donnera aussi l’envie d’explorer d’autres langages avec d’autres paradigmes.</p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="http://lkdjiin.github.io/images/julien.jpeg" /></p>

<p><strong>Julien Blanchard</strong><br />
M-x CTO RET Sush.io</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extraction des tags de mon blog en ligne de commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/"/>
    <updated>2015-07-11T17:08:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’aimerais savoir quels sont les tags que j’ai le plus employé sur ce blog.
Pour cela il va d’abord falloir les extraire, si possible dans un fichier csv.</p>

<p>Comment ? En Ruby ? En R ? Non non, en Bash, ça va être beaucoup plus drôle.</p>

<p>Petite étude de cas pour découvrir la puissance de la ligne de commande, ou
pour rafraichir ses connaissances ;)</p>

<p><img class="center" src="http://lkdjiin.github.io/images/tags-cloud.png" /></p>

<!-- more -->

<p>Si vous voulez reproduire l’analyse en même temps que moi, les
<a href="https://github.com/lkdjiin/lkdjiin.github.io/tree/source/source/_posts">articles sont ici</a>.</p>

<p>Voyons à quoi ressemble le début d’un article au hasard avec <code>head</code>.
Octopress, le framework que j’utilise pour ce blog, appelle les tags des
<em>categories</em>. Mais c’est pareil.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head 2013-10-20-les-algorithmes-genetiques-demystifies-35.markdown
</span><span class="line">---
</span><span class="line">layout: post
</span><span class="line">title: <span class="s2">&quot;Les algorithmes génétiques démystifiés 35&quot;</span>
</span><span class="line">date: 2013-10-20 21:21
</span><span class="line">comments: <span class="nb">true</span>
</span><span class="line">categories: <span class="o">[</span>imagerie, algorithme génétique, intermédiaire, javascript<span class="o">]</span>
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’entête d’un article a toujours la même structure. Avec <code>head *.markdown</code>
j’affiche le début de tous les articles, les uns à la suite des autres.
Avec <code>sed</code> je peux extraire uniquement les lignes qui commencent par <code>cat</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span>
</span><span class="line">categories: <span class="o">[</span>annonce, défi<span class="o">]</span>
</span><span class="line">categories: <span class="o">[</span>vim, conseil, débutant<span class="o">]</span>
</span><span class="line">categories: <span class="o">[</span>ruby, code propre, intermédiaire<span class="o">]</span>
</span><span class="line">categories: <span class="o">[</span>ruby, eigenclass, object, intermédiaire<span class="o">]</span>
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Gardons seulement les tableaux. <code>cut -f1</code> <em>découpe</em> le premier champ, <code>-d' '</code>
indique que le séparateur de champ est l’espace, et <code>--complement</code> indique
qu’on veut conserver le complément. Autrement dit tout sauf la première
colonne.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> |
</span><span class="line">&gt; cut -f1 -d<span class="s1">&#39; &#39;</span> --complement
</span><span class="line"><span class="o">[</span>annonce, défi<span class="o">]</span>
</span><span class="line"><span class="o">[</span>vim, conseil, débutant<span class="o">]</span>
</span><span class="line"><span class="o">[</span>ruby, code propre, intermédiaire<span class="o">]</span>
</span><span class="line"><span class="o">[</span>ruby, eigenclass, object, intermédiaire<span class="o">]</span>
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Supprimons les crochets à l’aide de <code>sed</code> et d’une regex rigolote.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span>
</span><span class="line">annonce, défi
</span><span class="line">vim, conseil, débutant
</span><span class="line">ruby, code propre, intermédiaire
</span><span class="line">ruby, eigenclass, object, intermédiaire
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Supprimons les espaces inutiles. Attention, certains tags contiennent des
espaces.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> |
</span><span class="line">&gt; sed <span class="s1">&#39;s/, /,/g&#39;</span>
</span><span class="line">annonce,défi
</span><span class="line">vim,conseil,débutant
</span><span class="line">ruby,code propre,intermédiaire
</span><span class="line">ruby,eigenclass,object,intermédiaire
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Grâce à <code>tr</code>, je remplace chaque virgule par un retour à la ligne. Ça
commence à prendre forme.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> |
</span><span class="line">&gt; tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span>
</span><span class="line">annonce
</span><span class="line">défi
</span><span class="line">vim
</span><span class="line">conseil
</span><span class="line">débutant
</span><span class="line">ruby
</span><span class="line">code propre
</span><span class="line">intermédiaire
</span><span class="line">ruby
</span><span class="line">eigenclass
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trions par ordre alphabétique.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> |
</span><span class="line">&gt; sort
</span><span class="line">
</span><span class="line">ack
</span><span class="line">activerecord
</span><span class="line">activerecord
</span><span class="line">ag
</span><span class="line">airline
</span><span class="line">airline
</span><span class="line">airline
</span><span class="line">airline
</span><span class="line">algorithme génétique
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Réduisons les occurrences et comptons les avec <code>uniq -c</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sort |
</span><span class="line">&gt; uniq -c
</span><span class="line">      1
</span><span class="line">      1 ack
</span><span class="line">      2 activerecord
</span><span class="line">      1 ag
</span><span class="line">      4 airline
</span><span class="line">     70 algorithme génétique
</span><span class="line">      1 <span class="nb">alias</span>
</span><span class="line"><span class="nb">     </span>16 annonce
</span><span class="line">      3 app
</span><span class="line">      1 application
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trions à nouveau, cette fois sur le nombre et du plus grand au plus petit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sort | uniq -c |
</span><span class="line">&gt; sort -nr
</span><span class="line">    213 ruby
</span><span class="line">    176 intermédiaire
</span><span class="line">    171 débutant
</span><span class="line">     70 algorithme génétique
</span><span class="line">     55 vim
</span><span class="line">     26 tutoriel
</span><span class="line">     26 julia
</span><span class="line">     26 javascript
</span><span class="line"><span class="c">#...</span>
</span><span class="line">      1 application
</span><span class="line">      1 <span class="nb">alias</span>
</span><span class="line"><span class="nb">      </span>1 ag
</span><span class="line">      1 ack
</span><span class="line">      1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous avez remarquez ? Un tag est vide. Ça pourrait poser problème pour la
suite. Avec <code>sed</code> on peut facilement supprimer la dernière ligne.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sort | uniq -c |
</span><span class="line">&gt; sort -nr | sed <span class="s1">&#39;$d&#39;</span>
</span><span class="line">    213 ruby
</span><span class="line">    176 intermédiaire
</span><span class="line">    171 débutant
</span><span class="line"><span class="c">#...</span>
</span><span class="line">      1 <span class="nb">alias</span>
</span><span class="line"><span class="nb">      </span>1 ag
</span><span class="line">      1 ack
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À la réflexion je préfère faire comme si il y avait plusieurs lignes vides et
les supprimer toutes. Ça pourrait être plus réutilisable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> |
</span><span class="line">&gt; sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il est temps de sortir une regex un peu plus complexe pour inverser les deux
champs et ajouter une virgule entre eux.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt; sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr |
</span><span class="line">&gt; sed -r <span class="s1">&#39;s/\s+([0-9]+) (.*)/\2,\1/&#39;</span>
</span><span class="line">ruby,213
</span><span class="line">intermédiaire,176
</span><span class="line">débutant,171
</span><span class="line">algorithme génétique,70
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est quasiment terminé. Il reste à ajouter l’entête du fichier csv. Pour cela
je vais utiliser une commande non standard mais bien pratique, <code>header</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt;  sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr | sed -r <span class="s1">&#39;s/\s+([0-9]+) (.*)/\2,\1/&#39;</span> |
</span><span class="line">&gt; header -a tag,frequency
</span><span class="line">tag,frequency
</span><span class="line">ruby,213
</span><span class="line">intermédiaire,176
</span><span class="line">débutant,171
</span><span class="line">algorithme génétique,70
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On a terminé. C’est un beau pipeline, non ? Enregistrons le résultat dans un
fichier.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>head *.markdown | sed -n <span class="s1">&#39;/^cat/p&#39;</span> | cut -f1 -d<span class="s1">&#39; &#39;</span> --complement |
</span><span class="line">&gt;  sed <span class="s1">&#39;s/[][]//g&#39;</span> | sed <span class="s1">&#39;s/, /,/g&#39;</span> | tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span> | sed <span class="s1">&#39;/^$/d&#39;</span> |
</span><span class="line">&gt; sort | uniq -c | sort -nr | sed -r <span class="s1">&#39;s/\s+([0-9]+) (.*)/\2,\1/&#39;</span> |
</span><span class="line">&gt; header -a tag,frequency &gt; tags.csv
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En bonus, voici le code R qui produit l’image qui illustre cet article.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">library<span class="p">(</span>wordcloud<span class="p">)</span>
</span><span class="line">
</span><span class="line">d <span class="o">&lt;-</span> read.csv<span class="p">(</span><span class="s">&#39;tags.csv&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">colors <span class="o">&lt;-</span> brewer.pal<span class="p">(</span><span class="m">12</span><span class="p">,</span> <span class="s">&#39;Paired&#39;</span><span class="p">)</span>
</span><span class="line">colors <span class="o">&lt;-</span> colors<span class="p">[</span>seq<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> by<span class="o">=</span><span class="m">2</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">wordcloud<span class="p">(</span>d<span class="o">$</span>tag<span class="p">,</span> d<span class="o">$</span>frequency<span class="p">,</span> colors<span class="o">=</span>colors<span class="p">,</span> min.freq<span class="o">=</span><span class="m">1</span><span class="p">,</span> scale<span class="o">=</span>c<span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">.6</span><span class="p">),</span>
</span><span class="line">          rot.per<span class="o">=</span><span class="m">.25</span><span class="p">,</span> random.order<span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span> random.color<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre/">Les langages que j&#8217;aimerais (ré)apprendre</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/15/creer-plusieurs-fichiers-en-bash/">Créer plusieurs fichiers en Bash</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ce blog à 2 ans]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/08/ce-blog-a-2-ans/"/>
    <updated>2015-07-08T14:28:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/08/ce-blog-a-2-ans</id>
    <content type="html"><![CDATA[<p>Bonjour à toutes et à tous.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/anniversaire.png" /></p>

<p>Aujourd’hui, le 8 juillet 2015, ce blog à
exactement 2 ans. Pour fêter dignement cet anniversaire, je publierai
plusieurs <em>guest posts</em> (des articles d’invités) pendant ce mois de juillet.
Quelques uns sont déjà prévus, à partir de lundi prochain.</p>

<p>Il reste encore de la place ; n’hésitez pas à me contacter si vous avez
envie de faire partie de la fête, pour que je publie votre article. Tous les
sujets sont à priori les bienvenus.</p>

<!-- more -->

<p>Joyeux anniversaire le blog ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby est un peu paresseux]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/02/ruby-est-un-peu-paresseux/"/>
    <updated>2015-07-02T17:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/02/ruby-est-un-peu-paresseux</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>Voici un mécanisme interne du langage Ruby démontré le temps d’une petite session irb.</p>

<p>D’abord, créons la variable <code>a</code>, qui va contenir la chaîne <code>"one"</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;one&quot;</span>
</span><span class="line"><span class="go">&quot;one&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Créons ensuite la variable <code>b</code>, qui va contenir ce que contient la variable <code>a</code>,
c’est à dire aussi <code>"one"</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class="line"><span class="go">&quot;one&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Question : est ce que les variables <code>a</code> et <code>b</code> partagent le même emplacement en
mémoire ? </p>

<!-- more -->

<p>Et bien oui, <code>b = a</code> n’a pas copié la <em>valeur</em> de <code>a</code> dans <code>b</code>, mais a assigné
à <code>b</code> la même case mémoire que <code>a</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">object_id</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="go">true</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="go">81895060</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">b</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="go">81895060</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mais alors si on change la valeur de la variable <code>a</code>, ça va changer aussi celle
de <code>b</code> ? Et non :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;two&quot;</span>
</span><span class="line"><span class="go">&quot;two&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">object_id</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="go">false</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">b</span>
</span><span class="line"><span class="go">&quot;one&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’emplacement mémoire a été modifié. On a maintenant deux variables bien
distinctes :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="go">81648680</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">b</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="go">81895060</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Tant qu’il n’y a pas de modification de l’une ou de l’autre des variables, Ruby
agit en quelque sorte comme si il n’y en avait qu’une seule. J’imagine que c’est
pour soulager l’utilisation de la mémoire.</p>

<p>Mais dès que l’une ou l’autre est modifiée, les deux variables deviennent bien
distinctes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/">Comportement inattendu de Rspec</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby/">Le hack FizzBuzz en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/">Une machine de Turing en Ruby - La routine de copie</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comportement inattendu de Rspec]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/"/>
    <updated>2015-06-30T15:37:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>Je suis tombé aujourd’hui sur un comportement inattendu de Rspec.
Je ne dis pas que le comportement est mauvais, seulement je m’attendais à
autre chose qui me semble plus logique. Quoiqu’il en soit, je partage mes
réflexions avec vous.</p>

<!-- more -->

<p>J’utilise beaucoup Rspec que j’aime bien. Pourtant je connais assez mal sa
mécanique interne. Un pattern dont je me sers de temps
en temps est de définir des méthodes helper dans le fichier de test :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/thing1_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">Thing1</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s2">&quot;returns &#39;foo&#39;&quot;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">expect</span><span class="p">(</span><span class="no">Thing1</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">get</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">result</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">result</span>
</span><span class="line">  <span class="s1">&#39;foo&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Avec <code>Thing1</code> défini ainsi :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>thing1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Thing1</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">get</span>
</span><span class="line">    <span class="s1">&#39;foo&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça marche très bien :</p>

<pre><code>$ rspec -I. spec/thing1_spec.rb 
.

Finished in 0.00184 seconds (files took 0.23569 seconds to load)
1 example, 0 failures
</code></pre>

<p>Là où ça devient problématique, c’est si j’utilise le même nom de méthode helper
dans un autre fichier de test :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/thing2_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">Thing2</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s2">&quot;returns &#39;bar&#39;&quot;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">expect</span><span class="p">(</span><span class="no">Thing2</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">get</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">result</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">result</span>
</span><span class="line">  <span class="s1">&#39;bar&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Avec <code>Thing2</code> comme ceci :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>thing2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Thing2</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">get</span>
</span><span class="line">    <span class="s1">&#39;bar&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans ce cas un test échoue :</p>

<pre><code>$ rspec -I.
F.

Failures:

  1) Thing1 returns 'foo'
     Failure/Error: expect(Thing1.new.get).to eq result
       
       expected: "bar"
            got: "foo"
       
       (compared using ==)
     # ./spec/thing1_spec.rb:6:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.00232 seconds (files took 0.21784 seconds to load)
2 examples, 1 failure

Failed examples:

rspec ./spec/thing1_spec.rb:5 # Thing1 returns 'foo'
</code></pre>

<p>J’ai tenté de les jouer de différentes manières : seulement l’un, puis
seulement l’autre, Thing1 puis Thing2, Thing2 puis Thing1, pour voir…</p>

<p>J’en arrive à la conclusion que Rspec charge tous les fichiers de test avant de
démarrer un test. Comme Ruby est dynamique, c’est la dernière méthode <code>result</code> chargée qui, en quelque sorte, à raison.</p>

<p>La solution est donc simple, il faut <em>rentrer</em> les méthodes helper dans le
bloc <code>describe</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">Thing1</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s2">&quot;returns &#39;foo&#39;&quot;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">expect</span><span class="p">(</span><span class="no">Thing1</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">get</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">result</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">result</span>
</span><span class="line">    <span class="s1">&#39;foo&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant les deux tests fonctionnent comme attendu :</p>

<pre><code>$ rspec -I.
..

Finished in 0.00283 seconds (files took 0.21533 seconds to load)
2 examples, 0 failures
</code></pre>

<p><strong>Je m’attendais à ce que les différents fichiers de test soient joués en
isolation totale</strong>, sans connexion si mince soit elle avec d’autres fichiers.
Manifestement c’est pas le cas.</p>

<p>Pour être exhaustif voici le contenu du <em>spec helper</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;thing1&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;thing2&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voici les fichiers :</p>

<pre><code>$ \tree
.
|-- spec
|   |-- spec_helper.rb
|   |-- thing1_spec.rb
|   `-- thing2_spec.rb
|-- thing1.rb
`-- thing2.rb
</code></pre>

<p>Si vous avez un avis sur la question il m’intéresse beaucoup, n’hésitez donc pas à laisser un
commentaire.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/">Ruby Timecop - Comment ça marche ?</a></li><li><a href="http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/">Quelques trucs pour lancer Rspec</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/02/ruby-est-un-peu-paresseux/">Ruby est un peu paresseux</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les langages que j'aimerais (ré)apprendre]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre/"/>
    <updated>2015-06-18T10:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre</id>
    <content type="html"><![CDATA[<p>Ça fait 5 ans que je fais presque exclusivement du Ruby.  J’ai envie que ça
change. Je n’ai pas de problème avec Ruby ; j’aime toujours autant ce langage ;
je pense qu’il a encore pas mal d’avenir (inertie des projets rails, ruby
dans le navigateur avec opal.rb, ruby dans l’embarqué avec mruby) ; c’est juste
que j’ai besoin d’air frais.</p>

<p>Voici une liste de 8 langages informatiques que j’aimerais apprendre,
réapprendre, tester ou approfondir, plus ou moins dans l’ordre.</p>

<h2 id="r">R</h2>

<p>Le langage de base du <em>data scientist</em>. Je m’y met à fond en ce moment.
Ce langage est parfois bizarre, mais parfait pour l’exploration des données,
les statistiques et les graphes en interactif dans la console.</p>

<!-- more -->

<h2 id="jruby">JRuby</h2>

<p>Bon ok, c’est pas un langage. Mais je ne me suis jamais intéressé à JRuby.
C’est peut-être le moment d’essayer. Je me dis que JRuby pourrait pallier les
lacunes de Ruby en matière de graphisme.</p>

<h2 id="java">Java</h2>

<p>Des fois je ressens le besoin de faire des programmes rapides. J’ai fait du
Java pendant des années, il est peut-être temps de voir les nouveautés que ce
langage a à m’offrir.</p>

<h2 id="assembleur">Assembleur</h2>

<p>J’ai fait de l’assembleur il y a longtemps. Ça ne m’a jamais vraiment manqué,
mais j’explorerais bien les micro contrôleurs en assembleur, par exemple.</p>

<h2 id="elm">Elm</h2>

<p>Un langage fonctionnel, réactif, sympa pour les jeux en
2D. Pas besoin d’en dire plus, je suis intrigué et je veux l’essayer, même si
ça se passe dans le navigateur.</p>

<h2 id="julia">Julia</h2>

<p>Lui, il veut carrément remplacer R, matlab, Octave, etc. Et d’après ce que j’en
ai déjà vu, il pourrait en avoir les moyens. Par contre je ne pense pas
apprendre R <strong>et</strong> Julia en même temps, donc Julia devra attendre.</p>

<h2 id="c">C</h2>

<p>Je n’avais pas fait de C depuis plusieurs années, à part avec l’Arduino mais ça
compte pas vraiment, n’est-ce pas ? Dernièrement j’ai écris un patch en C pour
le langage R et ça m’a donné envie de m’y remettre. Mais bon, c’est juste une
envie.</p>

<h2 id="f-sharp">F sharp</h2>

<p>Certainement que ça n’arrivera jamais (parce que pas le besoin) mais je trouve la
syntaxe élégante et intrigante. J’aimerais bien l’essayer.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Différence entre require_relative et require en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/16/difference-entre-require-relative-et-require-en-ruby/"/>
    <updated>2015-06-16T16:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/16/difference-entre-require-relative-et-require-en-ruby</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Quelle est la différence entre <code>require</code> et <code>require_relative</code>, les deux
méthodes pour charger du code en Ruby ?</p>

<p>L’une, <code>require</code>, agit par rapport au répertoire de travail (dossier courant),
tandis que
l’autre, <code>require_relative</code>, agit par rapport au fichier qui l’utilise.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/we-want-you-with-us.jpeg" /></p>

<!-- more -->

<h2 id="require">require</h2>

<p>Nous avons la structure suivante :</p>

<pre><code>$ tree
.
├── foo.rb
└── lib
    ├── bar.rb
    └── baz.rb
</code></pre>

<p>Le fichier <code>foo.rb</code>, dans le répertoire racine, qui <em>require</em> le fichier <code>bar.rb</code>, qui se trouve dans le répertoire <code>lib</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>foo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;lib/bar&#39;</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">bar</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Le fichier <code>bar.rb</code> <em>require</em> le fichier <code>baz.rb</code> qui se trouve dans le même
répertoire que lui:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/bar.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;lib/baz.rb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">bar</span>
</span><span class="line">  <span class="n">baz</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et le fichier <code>baz.rb</code> ne fait rien d’extraordinaire:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/baz.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">baz</span>
</span><span class="line">  <span class="s1">&#39;Hello, world!&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Toute cette chaîne fonctionne correctement, si on prend garde à ajouter le
répertoire courant au chemin des bibliothèques (aussi connu comme le LOAD PATH):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ruby -I. foo.rb
</span><span class="line">Hello, world!
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="requirerelative">require_relative</h2>

<p>La structure reste exactement la même:</p>

<pre><code>$ tree
.
├── foo.rb
└── lib
    ├── bar.rb
    └── baz.rb
</code></pre>

<p>Bien entendu le code change légèrement dans <code>foo.rb</code>, et surtout dans <code>bar.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>foo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;lib/bar&#39;</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">bar</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/bar.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">require_relative</span> <span class="s1">&#39;baz.rb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">bar</span>
</span><span class="line">  <span class="n">baz</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/baz.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">baz</span>
</span><span class="line">  <span class="s1">&#39;Hello, world!&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cette fois il n’y a pas besoin du switch <code>-I</code> puisque les fichiers sont requis
<em>relativement à eux-mêmes</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ruby foo.rb
</span><span class="line">Hello, world!
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pourquoi-utiliser-lun-plutt-que-lautre-">Pourquoi utiliser l’un plutôt que l’autre ?</h2>

<p>Avant, à l’époque de Ruby 1.8.x, il n’existait que <code>require</code> et le dossier
courant était automatiquement ajouté au LOAD PATH (<em>du moins si ma mémoire est
bonne</em>). Avant donc, la question ne se posait pas.</p>

<p>Aujourd’hui par contre la question peut se poser, et je n’ai pas de réponse
définitive. Personnellement j’utilise <code>require_relative</code> régulièrement dans
deux cas: 1) dans un script qui a <em>grossi</em> et que je sépare en plusieurs
fichiers, et 2) dans les tests (RSpec ou autres) pour importer des données.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/05/23/hacker-la-classe-fixnum/">Hacker la classe Fixnum</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/28/pas-de-logique-dans-les-vues-rails/">Pas de logique dans les vues Rails</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R : rep vs replicate]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/"/>
    <updated>2015-06-08T15:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Nouveau venu en R, je découvre régulièrement des nouvelles fonctions qui me
simplifient la vie. Comme par exemple la fonction <code>replicate</code> dont je vais
parler aujourd’hui.</p>

<p>Partons de l’hypothèse que je veuille générer plusieurs nombres aléatoires de
1 à 10. Pour ceci je dispose de la fonction <code>random</code> suivante, qui produit
justement un nombre aléatoire entre 1 et 10 :</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">random <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  sample<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">,</span> size<span class="o">=</span><span class="m">1</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">random<span class="p">()</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">5</span>
</span><span class="line">
</span><span class="line">random<span class="p">()</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Comment faire pour obtenir <em>n</em> nombres aléatoires en utilisant cette fonction ?
Mettons quatre nombres. Si je me sers de <code>rep</code>, je vais avoir quelques
surprises :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">rep<span class="p">(</span>random<span class="p">(),</span> <span class="m">4</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">8</span> <span class="m">8</span> <span class="m">8</span> <span class="m">8</span>
</span><span class="line">
</span><span class="line">rep<span class="p">(</span>random<span class="p">(),</span> <span class="m">4</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">2</span> <span class="m">2</span> <span class="m">2</span> <span class="m">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En effet, l’appel à <code>random()</code> est fait avant la répétition, j’obtiens donc
quatre fois la même valeur.</p>

<p>Pour résoudre ce problème, je peux utiliser la fonction <code>replicate</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">replicate<span class="p">(</span><span class="m">4</span><span class="p">,</span> random<span class="p">())</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span>  <span class="m">3</span>  <span class="m">6</span> <span class="m">10</span>  <span class="m">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fonctionne car cette fois <code>random()</code> est appelé pour chacune des
répétitions.</p>

<p>Pour la petite histoire, <code>replicate</code> est un cas spécial de la fonction plus
générale <code>sapply</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">sapply<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> random<span class="p">())</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">10</span>  <span class="m">4</span>  <span class="m">2</span>  <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dans ce cas d’utilisation précis <code>replicate</code> est plus confortable à utiliser,
puisque cette méthode évite de générer un vecteur inutile (<code>1:4</code>) et de passer par une fonction anonyme qui n’utilise pas son argument.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/07/11/extraction-des-tags-de-mon-blog-en-ligne-de-commande/">Extraction des tags de mon blog en ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/">3 réglages pour le langage R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r/">Les sous-ensembles de listes dans R</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classons les développeurs selon le nombre de parenthèses utilisées]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/06/classons-les-developpeurs-selon-le-nombre-de-parentheses-utilisees/"/>
    <updated>2015-06-06T10:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/06/classons-les-developpeurs-selon-le-nombre-de-parentheses-utilisees</id>
    <content type="html"><![CDATA[<p>Depuis quelques mois je vois passer ici et là plusieurs «classements des
développeurs».  Plutôt que de dire ce que je pense de ces
classements, je voudrais en rire un peu en proposant une nouvelle méthode de
classification.</p>

<p><strong>Et si on se mettait à juger notre code par le nombre de parenthèses inutiles
qu’il produit ?</strong></p>

<!-- more -->

<p>Petite histoire inventée : <em>Un jour j’ai passé 3 heures à trouver un bug causé
par des parenthèses manquantes. Depuis, je m’assure que cela n’arrivera plus
jamais, quitte à ce que personne (pas même moi d’ailleurs) puisse me relire.</em></p>

<p>En R par exemple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># Quand j&#39;ai décidé que je réfléchirai demain.</span>
</span><span class="line">data<span class="p">[((</span>data<span class="o">$</span>var1 <span class="o">&lt;</span> <span class="m">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span>data<span class="o">$</span>var2 <span class="o">&gt;</span> <span class="m">11</span><span class="p">)),</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Quand je suis en forme, mais pas trop quand même.</span>
</span><span class="line">data<span class="p">[(</span>data<span class="o">$</span>var1 <span class="o">&lt;</span> <span class="m">3</span> <span class="o">&amp;</span> data<span class="o">$</span>var2 <span class="o">&gt;</span> <span class="m">11</span><span class="p">),</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Bon, là, ça va.</span>
</span><span class="line">data<span class="p">[</span>data<span class="o">$</span>var1 <span class="o">&lt;</span> <span class="m">3</span> <span class="o">&amp;</span> data<span class="o">$</span>var2 <span class="o">&gt;</span> <span class="m">11</span><span class="p">,</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À plus tard pour un article plus sérieux ;) Peut-être sur la
précédence des opérateurs ?!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le système binaire]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/04/le-systeme-binaire/"/>
    <updated>2015-06-04T13:55:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/04/le-systeme-binaire</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’ai appris l’algèbre de Boole au lycée, j’ai programmé en assembleur très tôt,
j’ai donc de bonnes raisons de connaître le binaire ; ce truc fait en quelque
sorte partie de moi.  Par expérience, je sais que certains développeurs manque
de connaissances dans le domaine, mais pas pour autant de curiosité.  Alors si
vous n’êtes pas sûr de savoir ce qu’est vraiment le système binaire, continuez
la lecture…</p>

<p><img class="center" src="http://lkdjiin.github.io/images/one-plus-one.png" /></p>

<!-- more -->

<p><strong>Le système binaire est une manière de compter</strong>, tout comme le système
décimal que vous connaissez bien. Sauf qu’au lieu de compter en se basant sur
le nombre 10 (on dit aussi «compter en base dix»), on compte avec une base
deux. Le système décimal et le système binaire ne sont pas les seuls systèmes
de «comptage» existants, loin de là. Vous connaissez (et utilisez) d’autres
systèmes, comme le système en base 60 pour compter les secondes et les minutes
et le système en base 24 pour compter les heures.  Tout ça pour dire et redire
qu’<strong>il n’y a absolument rien de bizarre à compter autrement qu’en base 10</strong>.</p>

<p>Pourquoi, alors, le système décimal nous semble être <em>LE</em> système de référence ?
Et pourquoi 10, d’ailleurs ? Certainement parce qu’<strong>on a dix doigts</strong>, il est
donc naturel de prendre 10 comme base. Mais si nous rencontrions des
extra-terrestres à 8 doigts, il y a fort à parier que leur système <em>naturel</em>
serait en base 8.</p>

<p>Le système décimal possède dix symboles, qui représentent chacun une valeur que
j’appellerai <em>unitaire</em> : 0, 1, 2, 3, 4, 5, 6, 7, 8 et 9. Ces symboles peuvent
se combiner à l’infini pour représenter d’autres valeurs. <strong>C’est pareil pour
les autres systèmes</strong>, ils représentent un certain nombre de valeurs en utilisant
des symboles :</p>

<pre><code>Système     | # de symboles | Symboles
-------------------------------------------------------------
hexadécimal | 16            | 0 1 2 3 4 5 6 7 8 9 A B C D E F
décimal     | 10            | 0 1 2 3 4 5 6 7 8 9
octal       |  8            | 0 1 2 3 4 5 6 7
binaire     |  2            | 0 1
</code></pre>

<p>Le système binaire doit représenter seulement deux valeurs.  On utilise
généralement des 1 et des 0, mais on pourrait exprimer/symboliser ces valeurs
par n’importe quoi d’autre : vrai et faux, 5 volts et 0 volts, oui et non,
rouge et vert, allumé et éteint, haut et bas, etc.</p>

<p>Pourquoi a-t-on besoin d’un système avec seulement deux valeurs ?
<strong>i)</strong> parce que ça représente bien <strong>la logique</strong> : ceci <em>OU</em> cela, ceci <em>ET</em> cela.
<strong>ii)</strong> parce que c’est le système de comptage <strong>le plus simple</strong> (du moins pour une machine) et que simplicité est généralement synonyme d’efficacité.</p>

<p>Pour illustrer ce dernier point, et terminer cet article d’introduction au
système binaire — <em>j’espère qu’il y en aura plein d’autres</em> —  voici le
résultat de l’opération logique 1 OU 1, et celui de l’addition de 1 + 1 :</p>

<pre><code>1 OU 1 = 1
1  + 1 = 10
</code></pre>

<p>Pour comprendre comment tout cela fonctionne, rendez-vous dans les prochains
articles.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/16/difference-entre-require-relative-et-require-en-ruby/">Différence entre require_relative et require en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker la classe Fixnum]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/23/hacker-la-classe-fixnum/"/>
    <updated>2015-05-23T08:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/23/hacker-la-classe-fixnum</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<h2 id="ou-les-classes-ouvertes-en-ruby">Ou les classes ouvertes en Ruby</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">hour_in_minutes</span> <span class="c1">#=&gt; 60</span>
</span><span class="line">
</span><span class="line"><span class="mi">37</span><span class="o">.</span><span class="n">celsius_in_farenheit</span> <span class="c1">#=&gt; 0</span>
</span><span class="line">
</span><span class="line"><span class="mi">2</span><span class="o">.</span><span class="n">dozens</span> <span class="c1">#=&gt; 24</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est un aspect du langage que tous les rubyistes confirmés connaissent, mais
il est toujours utile d’en reparler pour les plus novices : En Ruby, même les
classes dites <em>système</em> peuvent être redéfinies, modifiées, augmentées, pliées
à vos besoins.</p>

<p>En un mot, on dit que les classes restent <strong>ouvertes</strong>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/open-640.jpg" /></p>

<!-- more -->

<p>Si je veux par exemple pouvoir transformer les nombres entiers en <em>bytes</em> et en
<em>words</em>, je peux écrire les méthodes <code>to_bytes</code> et <code>to_words</code>.</p>

<blockquote>
  <p>Un byte = un octet  <br />
Un word = deux octets</p>
</blockquote>

<p>Voici ces méthodes simples, définies dans une session irb :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class="line"><span class="gp">&gt;&gt; </span>  <span class="n">number</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">to_words</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class="line"><span class="gp">&gt;&gt; </span>  <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
</span><span class="line"><span class="go">11</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="n">to_words</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
</span><span class="line"><span class="go">22</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fonctionne très bien mais 1) ça n’est pas très <em>orienté objet</em>, et 2) ça
n’est pas très <em>ruby</em>. Plutôt que <code>to_words(11)</code>, on écrirait plus volontiers
<code>11.words</code>, c’est quand même plus classe (oh le jeu de mot à deux balles).</p>

<p>En parlant de classe justement, voyons quelle est la classe d’un nombre entier :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">123</span><span class="o">.</span><span class="n">class</span>
</span><span class="line"><span class="go">Fixnum &lt; Integer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est tout ce qu’il nous faut savoir pour <em>augmenter</em> les nombres entiers avec
nos propres méthodes <code>byte</code>, <code>bytes</code>, <code>word</code> et <code>words</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">byte</span>
</span><span class="line">    <span class="nb">self</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:bytes</span><span class="p">,</span> <span class="ss">:byte</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">word</span>
</span><span class="line">    <span class="mi">2</span> <span class="o">*</span> <span class="nb">self</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:words</span><span class="p">,</span> <span class="ss">:word</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Comme vous pouvez le constater, j’ai <em>ouvert</em> la classe Fixnum pour y ajouter
mes méthodes. Je rappelle que <code>self</code> est l’objet courant.</p>

<p>Si vous ne savez pas ce qu’est ce <code>alias_method</code>, dites vous que ceci :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">word</span>
</span><span class="line">    <span class="mi">2</span> <span class="o">*</span> <span class="nb">self</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:words</span><span class="p">,</span> <span class="ss">:word</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>est équivalent à cela :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">word</span>
</span><span class="line">    <span class="mi">2</span> <span class="o">*</span> <span class="nb">self</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">words</span>
</span><span class="line">    <span class="n">word</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">byte</span>  <span class="c1">#=&gt; 1</span>
</span><span class="line"><span class="mi">2</span><span class="o">.</span><span class="n">bytes</span> <span class="c1">#=&gt; 2</span>
</span><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">word</span>  <span class="c1">#=&gt; 2</span>
</span><span class="line"><span class="mi">3</span><span class="o">.</span><span class="n">words</span> <span class="c1">#=&gt; 6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Edit du 5 juin 2015</strong> J’ai oublié de mentionner que l’utilisation des classes
ouvertes est sujet à controverse parmi les rubyistes. Trop de <em>monkey
patching</em> (l’autre nom pas très gentil des classes ouvertes) peut
effectivement rendre une gem compliquée ou délicate à utiliser en commun
avec d’autres gems. Comme toujours, je pense que c’est une histoire de
compromis et de «ça dépend». Notez que depuis Ruby 2.0 il existe une
alternative au <em>monkey patching</em> : <a href="http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode/">le raffinement de méthode</a>.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/06/16/difference-entre-require-relative-et-require-en-ruby/">Différence entre require_relative et require en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/28/pas-de-logique-dans-les-vues-rails/">Pas de logique dans les vues Rails</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Créer plusieurs fichiers en Bash]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/15/creer-plusieurs-fichiers-en-bash/"/>
    <updated>2015-05-15T13:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/15/creer-plusieurs-fichiers-en-bash</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p><em>Faire deux fois la même chose, c’est une coincidence ; faire
trois fois la même chose, c’est déjà deux de trop.</em></p>

<p>Mettons que j’ai besoin de créer 20 fichiers quelconques (ici en Ruby) nommés ainsi :</p>

<ul>
  <li><code>asm01.rb</code></li>
  <li><code>asm02.rb</code></li>
  <li><code>asm03.rb</code></li>
  <li>etcétéra jusqu’à <code>asm20.rb</code></li>
</ul>

<!-- more -->

<p>Je peux les créer les uns après les autres de cette manière :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>touch lib/c8dasm/assemblies/asm01.rb
</span><span class="line"><span class="nv">$ </span>touch lib/c8dasm/assemblies/asm02.rb
</span><span class="line"><span class="nv">$ </span>touch lib/c8dasm/assemblies/asm03.rb
</span><span class="line"><span class="nv">$ </span><span class="c"># même chose jusqu&#39;à :</span>
</span><span class="line"><span class="nv">$ </span>touch lib/c8dasm/assemblies/asm20.rb
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Imaginez si vous deviez en faire 200 comme cela ! Et même s’il n’y en avait que
10, c’est juste ennuyeux au possible. En tant que développeurs, <strong>nous devrions
apprendre à automatiser ces tâches pour notre confort</strong>.</p>

<p>On peut utiliser une boucle pour résoudre ce problème :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="k">for </span>i in <span class="o">{</span>01..20<span class="o">}</span>; <span class="k">do</span>
</span><span class="line">… &gt; touch lib/c8dasm/assemblies/asm<span class="nv">$i</span>.rb
</span><span class="line">… &gt; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ou bien la version sur une seule ligne :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="k">for </span>i in <span class="o">{</span>01..20<span class="o">}</span>; <span class="k">do </span>touch lib/c8dasm/assemblies/asm<span class="nv">$i</span>.rb; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2014/05/01/la-balise-hr-dans-votre-console/">La balise hr dans votre console</a></li><li><a href="http://lkdjiin.github.io/blog/2014/04/06/comment-reduire-les-erreurs-de-frappe-dans-la-console/">Comment réduire les erreurs de frappe dans la console</a></li></ul></section>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un exemple de polymorphisme en situation réelle]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle/"/>
    <updated>2015-05-14T19:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-3">Niveau : <span>avancé</span></div>

<p>J’écris en ce moment un <a href="http://fr.wikipedia.org/wiki/%C3%89mulation">émulateur</a>
pour <a href="http://fr.wikipedia.org/wiki/CHIP-8">Chip-8</a>, en Ruby. Dans les outils que
j’écris à coté il y a un <a href="http://fr.wikipedia.org/wiki/D%C3%A9sassembleur">désassembleur</a> de code Chip-8. Dans ce
désassembleur il y a un bel exemple de polymorphisme.</p>

<!-- more -->

<h2 id="un-peu-de-contexte">Un peu de contexte</h2>

<p>La classe Opcode permet de faire la correspondance entre un <a href="http://fr.wikipedia.org/wiki/Langage_machine#Opcode">opcode</a> Chip-8
et une ligne de code assembleur. Un opcode Chip-8 est toujours représenté par
un nombre <a href="http://fr.wikipedia.org/wiki/Syst%C3%A8me_hexad%C3%A9cimal">hexadécimal</a> de 4 chiffres.</p>

<p>Voici quelques exemples d’opcodes et leur correspondance en assembleur :</p>

<pre><code>Opcode | Assembleur  | Remarque
-------|-------------|---------
2a00   | CALL a00    |
7012   | ADD V0, 12  | V0 est un registre
a22e   | LOAD I, 22e | I est un registre
</code></pre>

<p>On pourra remarquer (même si ça n’est pas ultra visible avec seulement trois
exemples) que c’est le premier chiffre (ici <code>2</code>, <code>7</code> et <code>a</code>) qui décide du
type d’instruction.</p>

<p>De <code>0</code> à <code>f</code>, on a donc 16 types possibles, ce qui donne ce genre de code :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>opcode.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Opcode</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@opcode</span> <span class="o">=</span> <span class="n">opcode</span>
</span><span class="line">    <span class="vi">@assembly</span> <span class="o">=</span> <span class="n">compute_assembly</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">compute_assembly</span>
</span><span class="line">    <span class="k">case</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;0&#39;</span> <span class="k">then</span> <span class="s2">&quot;Return this code&quot;</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;1&#39;</span> <span class="k">then</span> <span class="s2">&quot;Return that code&quot;</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;2&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;d&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;e&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;f&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>De plus, certains type d’instruction sont partagés en sous type, selon le
quatrième chiffre, ou bien selon les troisième et quatrième, ça dépend. Comme
toujours, on se retrouve à devoir gérer des cas particuliers, et le code
ressemble rapidement à la monstruosité qui suit :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">compute_assembly</span>
</span><span class="line">  <span class="k">case</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@opcode</span> <span class="o">==</span> <span class="s1">&#39;00e0&#39;</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">elsif</span> <span class="vi">@opcode</span> <span class="o">==</span> <span class="s1">&#39;00ee&#39;</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;1&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;2&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;3&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;4&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;5&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;6&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;7&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;8&#39;</span>
</span><span class="line">    <span class="k">case</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;0&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;1&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;2&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;3&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;4&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;5&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;6&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;7&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;e&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;9&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;a&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;b&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;c&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;d&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;e&#39;</span>
</span><span class="line">    <span class="c1"># Ici, encore 2 sous-groupes</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;f&#39;</span>
</span><span class="line">    <span class="c1"># Ici, encore 10 autres sous-groupes</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est pas bon, hein ? Pour arranger ça, rien de tel qu’un peu de polymorphisme.
La classe Opcode va donc se contenter de ceci :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Opcode</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">      <span class="n">asm</span> <span class="o">=</span> <span class="no">Assembly</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@assembly</span> <span class="o">=</span> <span class="n">asm</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous devinez que c’est maintenant dans une nouvelle classe <code>Assembly</code> que sont géré les différentes
instructions et sous instructions :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Assembly</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Assembly</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@opcode</span> <span class="o">=</span> <span class="n">opcode</span>
</span><span class="line">    <span class="vi">@assembly</span> <span class="o">=</span> <span class="n">build_assembly</span><span class="o">.</span><span class="n">to_s</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class="line">    <span class="vi">@assembly</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">build_assembly</span>
</span><span class="line">    <span class="n">klass</span> <span class="o">=</span> <span class="no">Kernel</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="s1">&#39;Asm&#39;</span> <span class="o">+</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@opcode</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et bien non, elles sont gérées chacune dans sa classe respective, à savoir
<code>Asm0</code>, <code>Asm1</code>, <code>Asm2</code>, et cetera jusqu’à <code>Asmf</code>. Voici un exemple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>asm2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Asm2</span> <span class="o">&lt;</span> <span class="no">AsmBase</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class="line">    <span class="s2">&quot;CALL </span><span class="si">#{</span><span class="n">nnn</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Chacune des classes <code>Asm0</code> à <code>Asmf</code> hérite de <code>AsmBase</code> qui définit le
comportement commun (nnn, kk, x et y sont simplement des conventions de nommage en
assembleur Chip-8) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>asm_base.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">AsmBase</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@opcode</span> <span class="o">=</span> <span class="n">opcode</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">nnn</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">kk</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">x</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est un cas classique d’utilisation du polymorphisme. On troque
un long switch/case (virtuellement infini) pour plusieurs petites classes simples.
Le système est toujours aussi complexe dans son ensemble, mais sa maintenance
est maintenant plus facile.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/06/18/les-langages-que-jaimerais-re-apprendre/">Les langages que j&#8217;aimerais (ré)apprendre</a></li><li><a href="http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque/">Utiliser Vim comme un tableur sur Linux (enfin presque)</a></li><li><a href="http://lkdjiin.github.io/blog/2015/07/13/comment-jai-ameliore-mon-ruby-avec-des-contrats/">Comment j&#8217;ai amélioré mon Ruby avec des contrats</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment convertir un nombre décimal en binaire en Bash ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/"/>
    <updated>2015-05-02T12:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Pour convertir un nombre décimal en binaire, en Bash, suivez ce tweet :
<a href="https://twitter.com/climagic/status/593842202314420224">https://twitter.com/climagic/status/593842202314420224</a>.</p>

<p>Et voici la conversion du décimal 27 en son équivalent binaire :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alors, comment ça marche ?</p>

<p><img class="center" src="http://lkdjiin.github.io/images/binary.jpg" /></p>

<!-- more -->

<p>Pour commencer, voici comment faire un tableau en bash, qui va contenir les 3
chaînes <code>foo</code>, <code>bar</code>, et <code>baz</code>. Ne soyez pas surpris par le manque de guillemets
autour des chaînes, Bash est fait pour traiter du texte.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ myarray</span><span class="o">=(</span>foo bar baz<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voici comment afficher le contenu de ce tableau.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">foo bar baz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut bien sûr accéder aux éléments du tableau séparément :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[0]</span><span class="k">}</span>
</span><span class="line">foo
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[1]</span><span class="k">}</span>
</span><span class="line">bar
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[2]</span><span class="k">}</span>
</span><span class="line">baz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour connaître la taille d’un tableau, voici la syntaxe :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${#</span><span class="nv">myarray</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Appliquons ce nouveau savoir au tableau <code>Dec2Bin</code>, qui contient…</p>

<p>…</p>

<p>…des trucs :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Combien a-t-il d’éléments ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${#</span><span class="nv">Dec2Bin</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">256
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>256 ? Et ça ressemble à quoi ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000
</span><span class="line">00001001 00001010 00001011 00001100 00001101 00001110 00001111 00010000 00010001
</span><span class="line">...
</span><span class="line">11101010 11101011 11101100 11101101 11101110 11101111 11110000 11110001 11110010
</span><span class="line">11110011 11110100 11110101 11110110 11110111 11111000 11111001 11111010 11111011
</span><span class="line">11111100 11111101 11111110 11111111
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Tranquille, <code>Dec2Bin</code> est un tableau qui contient 256 chaînes représentant les
nombres binaires de 0 à 255.</p>

<p>Les crochets <code>{}</code> créent un <em>range</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{</span>0..1<span class="o">}</span>
</span><span class="line">0 1
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{</span>a..f<span class="o">}</span>
</span><span class="line">a b c d e f
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Plusieurs crochets <code>{}</code> les uns à la suite des autres produisent toutes les
permutations possibles :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{</span>0..1<span class="o">}{</span>0..1<span class="o">}</span>
</span><span class="line">00 01 10 11
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et on peut mettre tout ça dans un tableau :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ a</span><span class="o">=({</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">a</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">0 1
</span><span class="line"><span class="nv">$ a</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">a</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">00 01 10 11
</span><span class="line"><span class="nv">$ a</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">a</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">000 001 010 011 100 101 110 111
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà, il faut encore savoir qu’ici, le point-virgule sert à joindre 2 lignes de
code en une seule :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bonus-1---le-mme-en-hexadcimal">Bonus 1 - Le même en hexadécimal</h2>

<p>Et si on voulait convertir un nombre décimal en hexadécimal plutôt qu’en
binaire ? Il faudrait générer toutes les permutations entre deux suites
<code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}}{{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}}</span>
</span><span class="line">00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A
</span><span class="line">1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35
</span><span class="line">36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50
</span><span class="line">51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B
</span><span class="line">6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86
</span><span class="line">87 88 89 8A 8B 8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F A0 A1
</span><span class="line">A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC
</span><span class="line">BD BE BF C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7
</span><span class="line">D8 D9 DA DB DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF F0 F1 F2
</span><span class="line">F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Hex</span><span class="o">=({{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}}{{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Hex</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">1B
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bonus-2---le-mme-en-ruby">Bonus 2 - Le même en Ruby</h2>

<p>On peut faire la même chose en Ruby en utilisant <code>repeated_permutation</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">repeated_permutation</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">join</span><span class="p">}</span>
</span><span class="line"><span class="go">00000000</span>
</span><span class="line"><span class="go">00000001</span>
</span><span class="line"><span class="go">00000010</span>
</span><span class="line"><span class="go">00000011</span>
</span><span class="line"><span class="go">00000100</span>
</span><span class="line"><span class="go">00000101</span>
</span><span class="line"><span class="go">...</span>
</span><span class="line"><span class="go">11111010</span>
</span><span class="line"><span class="go">11111011</span>
</span><span class="line"><span class="go">11111100</span>
</span><span class="line"><span class="go">11111101</span>
</span><span class="line"><span class="go">11111110</span>
</span><span class="line"><span class="go">11111111</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il peut-être intéressant de comparer les deux versions :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ruby -e <span class="s2">&quot;puts [0,1].repeated_permutation(8).to_a[27].join&quot;</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bonus-3---encore-plus-court">Bonus 3 - Encore plus court</h2>

<p>Pour finir, on peut faire plus court avec Bash en utilisant <code>{0,1}</code> au lieu de
<code>{0..1}</code> puisqu’il y a seulement deux éléments :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/">Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href="http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/">Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/16/difference-entre-require-relative-et-require-en-ruby/">Différence entre require_relative et require en Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le hack FizzBuzz en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby/"/>
    <updated>2015-04-30T17:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>Voici ce qui trainait sur le net aujourd’hui, un jeu de
<a href="http://en.wikipedia.org/wiki/Fizz_buzz">FizzBuzz</a> en une ligne de Ruby:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">){</span><span class="o">|</span><span class="n">n</span><span class="o">|</span><span class="nb">puts</span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="o">=</span><span class="n">n</span><span class="o">**</span><span class="mi">4</span><span class="o">%-</span><span class="mi">15</span><span class="p">,</span><span class="n">o</span><span class="o">+</span><span class="mi">13</span><span class="o">]||</span><span class="n">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce qui donne:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ruby -e <span class="s2">&quot;1.upto(100){|n|puts&#39;FizzBuzz &#39;[o=n**4%-15,o+13]||n}&quot;</span>
</span><span class="line">1
</span><span class="line">2
</span><span class="line">Fizz
</span><span class="line">4
</span><span class="line">Buzz
</span><span class="line">Fizz
</span><span class="line">7
</span><span class="line">8
</span><span class="line">Fizz
</span><span class="line">Buzz
</span><span class="line">11
</span><span class="line">.
</span><span class="line">.
</span><span class="line">.
</span><span class="line">94
</span><span class="line">Buzz
</span><span class="line">Fizz
</span><span class="line">97
</span><span class="line">98
</span><span class="line">Fizz
</span><span class="line">Buzz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour celles et ceux qui ne pigent pas cette ligne de code Ruby, on va la
déconstruire petit à petit.</p>

<!-- more -->

<p>Nous avons affaire à une boucle (j’ai remplacé les <code>{}</code> par <code>do end</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="o">=</span><span class="n">n</span><span class="o">**</span><span class="mi">4</span><span class="o">%-</span><span class="mi">15</span><span class="p">,</span><span class="n">o</span><span class="o">+</span><span class="mi">13</span><span class="o">]||</span><span class="n">n</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>a.upto(b)</code> itère de <code>a</code> jusqu’à <code>b</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">iteration</span><span class="o">|</span>
</span><span class="line"><span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="n">iteration</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class="line"><span class="go">10</span>
</span><span class="line"><span class="go">11</span>
</span><span class="line"><span class="go">12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Regardons de plus près l’intérieur de la boucle, là où c’est intéressant.
Ruby permet d’appeler les
méthodes sans utiliser de parenthèses. Ici je les ai simplement rajouter pour
tenter de clarifier le code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span> <span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="o">=</span><span class="n">n</span><span class="o">**</span><span class="mi">4</span><span class="o">%-</span><span class="mi">15</span><span class="p">,</span><span class="n">o</span><span class="o">+</span><span class="mi">13</span><span class="o">]||</span><span class="n">n</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant qu’on est bien sûr qu’il s’agit de la méthode <code>puts</code> avec un
argument bizarre dedans, je sépare les différents éléments de la <em>grammaire de
Ruby</em> par des espaces. Toujours pour essayer d’y voir plus clair:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span> <span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span> <span class="o">=</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="n">o</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span> <span class="o">||</span> <span class="n">n</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Arrêtons nous un peu sur les sous-ensembles de chaîne <code>[a, b]</code>.
Le premier chiffre est la position de départ, le second est le nombre de
caractères:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;ab&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;de&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ruby permet de donner une position de départ pas rapport à la fin:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;cd&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour la suite, notez bien que si on va chercher des caractères <strong>avant</strong> le début ou <strong>après</strong> la fin de la chaîne, on se retrouve avec <code>nil</code>. Ça n’est pas une erreur, c’est le comportement attendu:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[-</span><span class="mi">123</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[</span><span class="mi">999</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant essayons de décrypter la formule mathématique.
Utilisons une variable temporaire pour l’isoler:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="n">o</span> <span class="o">=</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">15</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span> <span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="p">,</span> <span class="n">o</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span> <span class="o">||</span> <span class="n">n</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En Ruby, <code>**</code> est l’opérateur de puissance:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span> <span class="o">**</span> <span class="mi">2</span>
</span><span class="line"><span class="go">100</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span> <span class="o">**</span> <span class="mi">3</span>
</span><span class="line"><span class="go">1000</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span> <span class="o">**</span> <span class="mi">4</span>
</span><span class="line"><span class="go">10000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Quant à <code>%</code>, c’est l’opérateur de la division modulaire, souvent appelé
<em>modulo</em>. Si vous avez plein de temps devant vous il y a la page wikipédia sur
<a href="http://fr.wikipedia.org/wiki/Arithm%C3%A9tique_modulaire">l’arithmétique modulaire</a>.
Sinon voici une explication rapide du modulo: <strong>c’est le reste de la division
entière</strong>. Donc <code>9 % 4 == 1</code>.</p>

<p>Sauf qu’ici on utilise le modulo avec un nombre négatif. Et là les maths se
compliquent un peu, et surtout différents langages de programmation auront différents
comportements.</p>

<p>Essayons plutôt de <em>sentir</em> la formule en l’appliquant aux nombres de 1 à 16:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">16</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line"><span class="gp">?&gt; </span>  <span class="n">o</span> <span class="o">=</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">15</span>
</span><span class="line"><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2"> =&gt; </span><span class="si">#{</span><span class="n">o</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class="line"><span class="go">1 =&gt; -14</span>
</span><span class="line"><span class="go">2 =&gt; -14</span>
</span><span class="line"><span class="go">3 =&gt; -9</span>
</span><span class="line"><span class="go">4 =&gt; -14</span>
</span><span class="line"><span class="go">5 =&gt; -5</span>
</span><span class="line"><span class="go">6 =&gt; -9</span>
</span><span class="line"><span class="go">7 =&gt; -14</span>
</span><span class="line"><span class="go">8 =&gt; -14</span>
</span><span class="line"><span class="go">9 =&gt; -9</span>
</span><span class="line"><span class="go">10 =&gt; -5</span>
</span><span class="line"><span class="go">11 =&gt; -14</span>
</span><span class="line"><span class="go">12 =&gt; -9</span>
</span><span class="line"><span class="go">13 =&gt; -14</span>
</span><span class="line"><span class="go">14 =&gt; -14</span>
</span><span class="line"><span class="go">15 =&gt; 0</span>
</span><span class="line"><span class="go">16 =&gt; -14</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’imagine qu’à ce moment précis, vous êtes plusieurs à crier <strong>«Ha ha !»</strong>.</p>

<p>Cette formule, en Ruby, a donc 4 solutions possibles:</p>

<ul>
  <li>Quand <em>n</em> est un multiple de 3, la solution est <strong>-9</strong>.</li>
  <li>Quand <em>n</em> est un multiple de 5, la solution est <strong>-5</strong>.</li>
  <li>Quand <em>n</em> est un multiple de 15 (c’est à dire à la fois multiple de 3 et de
9), la solution est <strong>0</strong>.</li>
  <li>Dans les autres cas, la solution est <strong>-14</strong>.</li>
</ul>

<p>Voyons ce qu’il se passe avec <code>'FizzBuzz '</code> quand <code>o</code> vaut respectivement -9, -5, 0 puis -14:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[-</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;Fizz&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;Buzz &quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;FizzBuzz &quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[-</span><span class="mi">14</span><span class="p">,</span> <span class="o">-</span><span class="mi">14</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Peut-être vous demandez vous pourquoi il y a un espace après FizzBuzz ?
En pratique, voici la raison:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz&#39;</span><span class="o">[-</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz&#39;</span><span class="o">[-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;zBuzz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En théorie, je vous laisse faire les calculs ;)</p>

<p>Pour finir, il reste à expliquer le <code>||</code>, un exemple vaut mieux qu’un long
discours:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;foo&quot;</span> <span class="o">||</span> <span class="mi">13</span>
</span><span class="line"><span class="go">&quot;foo&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="kp">nil</span> <span class="o">||</span> <span class="mi">13</span>
</span><span class="line"><span class="go">13</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà, si vous voulez ajouter d’autres explications, les commentaires sont fait
pour ça ;)</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/07/02/ruby-est-un-peu-paresseux/">Ruby est un peu paresseux</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/">Comportement inattendu de Rspec</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 réglages pour le langage R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/"/>
    <updated>2015-04-23T15:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Voici trois astuces pour régler/personnaliser le comportement de
l’environnement du langage R, en utilisant des fichiers de configuration.
<em>(Attention, je ne sais absolument pas si ça fonctionne sous Windows.)</em></p>

<h2 id="le-prompt">1) Le prompt</h2>

<p>Pour personnaliser votre prompt dans R, ajoutez les lignes suivantes dans un
fichier <code>~/.Rprofile</code> (créez le pour l’occasion s’il n’existe pas).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.Rprofile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">options<span class="p">(</span>prompt <span class="o">=</span> <span class="s">&quot;R&gt; &quot;</span><span class="p">)</span>
</span><span class="line">options<span class="p">(</span>continue <span class="o">=</span> <span class="s">&quot;+  &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Exemple :</p>

<pre><code>R&gt; add2 &lt;- function(n) {
+    n + 2
+  }
R&gt; 
</code></pre>

<!-- more -->

<h2 id="la-largeur-de-la-sortie-console">2) La largeur de la sortie console</h2>

<p>La largeur de la sortie console de R est de 80 caractères. Point barre !
Si votre console est plus large (100, 120, etc) R n’utilisera quand même que
80 caractères. En mettant une petite fonction dans un fichier à part
<code>~/.Rutils</code> (par exemple) et en référençant ce fichier depuis le <code>~/.Rprofile</code>,
on peut avoir quelque chose de <em>presque</em> dynamique.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.Rprofile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="kr">if</span> <span class="p">(</span>file.exists<span class="p">(</span><span class="s">&quot;~/.Rutils&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">  source<span class="p">(</span><span class="s">&quot;~/.Rutils&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.Rutils</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">tryCatch<span class="p">({</span>
</span><span class="line">  options<span class="p">(</span>width <span class="o">=</span> as.integer<span class="p">(</span>system<span class="p">(</span><span class="s">&#39;tput cols&#39;</span><span class="p">,</span> intern <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)))</span>
</span><span class="line"><span class="p">},</span> error <span class="o">=</span> <span class="kr">function</span><span class="p">(</span>err<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  write<span class="p">(</span><span class="s">&quot;Width set to 80.&quot;</span><span class="p">,</span> stderr<span class="p">());</span>
</span><span class="line">  options<span class="p">(</span>width <span class="o">=</span> <span class="m">80</span><span class="p">)</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous redimensionnez votre console, il faut sourcer le fichier
(<code>source('~/.Rutils')</code>) pour prendre en compte la nouvelle largeur.</p>

<h2 id="le-dossier-des-bibliothques">3) Le dossier des bibliothèques</h2>

<p>Pour éviter que R vous crée un dossier <code>R</code> dans votre home, définissez vous
même un dossier pour stocker les packages, par exemple <code>~/local/R_libs/</code>.
Ensuite spécifiez le dans votre <code>~/.bashrc</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Custom repo of libraries for R.</span>
</span><span class="line"><span class="nb">export </span><span class="nv">R_LIBS</span><span class="o">=</span>~/local/R_libs/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous connaissez d’autres trucs et astuces pour configurer R ? Dites moi ça dans
un commentaire. À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r/">Les sous-ensembles de listes dans R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/">Les sous-ensembles dans R</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment mieux apprendre : La technique du rappel]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/21/comment-mieux-apprendre-la-technique-du-rappel/"/>
    <updated>2015-04-21T19:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/21/comment-mieux-apprendre-la-technique-du-rappel</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’ai participé récemment au MOOC
<a href="https://www.coursera.org/learn/learning-how-to-learn">Learning how to learn</a>
produit par
l’<a href="https://www.coursera.org/ucsd">université de San Diego, Californie</a>
et accessible sur <a href="https://www.coursera.org/courses">Coursera</a>.</p>

<p>Je cherchais des moyens, des trucs, des astuces, pour apprendre mieux. C’est à
dire plus rapidement et plus facilement. J’ai été servi. Les professeurs
Barbara Oakley et Terrence Sejnowski font un excellent travail. Je partagerai
avec vous quelques uns des trucs que j’ai appris en suivant ce cours, et je
vais commencer aujourd’hui par <strong>la technique du rappel</strong>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/total-recall.png" /></p>

<!-- more -->

<h2 id="quoi">Quoi</h2>

<p>La technique du rappel (ou <em>recall</em> en anglais) consiste à faire un réel effort
après un bloc de travail pour se rappeler les points essentiels abordés pendant
ce bloc de travail.</p>

<p>Ça n’est vraiment pas plus que ça, mais ce simple truc va booster votre
capacité à apprendre en ancrant plus sûrement les connaissances toutes fraiches
dans votre mémoire.</p>

<p>Alors qu’est-ce que j’appelle <strong>un bloc de travail ?</strong> Ça peut être à peu près
tout et n’importe quoi ;) Un cours de 20 minutes, 30 minutes de lecture, une
conférence de 45 minutes, une séance de débugage d’une heure, une réunion de 3
heures, etc…</p>

<h2 id="pourquoi">Pourquoi</h2>

<p>Si on ne fait rien pour ancrer dans son cerveau les informations vues durant un
bloc de travail (tout spécialement si c’est de la théorie), celles-ci vont
disparaitre rapidement. Il est <strong>naturel</strong> que ces informations s’effacent si
on ne fait rien pour les retenir.</p>

<p>La technique du rappel évite aussi, dans une certaine mesure, l’<strong>illusion de
compétence</strong> (la fausse sensation d’avoir appris quelque chose) en mettant
l’accent très vite sur les points non acquis ou délicats.</p>

<h2 id="comment">Comment</h2>

<p>La meilleure mise en œuvre que j’ai pu trouver est de prendre quelques
dizaines de secondes (rarement plus d’une minute) à la fin d’un bloc de travail
pour écrire les points essentiels. Ça peut être 2 ou 3 phrases, une liste, un
schéma, ou tout ce que vous jugerez pertinent.</p>

<p>Deux remarques : (i) Prendre des notes pendant le bloc de travail ne dispense
pas de mettre en œuvre la technique du rappel, (ii) Penser aux quelques points
essentiels abordés pendant le bloc de travail ne suffit pas, il faut vraiment
les écrire.</p>

<p><strong>C’est une habitude toute simple, qui se prend très vite, et qui peut vraiment vous
permettre d’apprendre plus rapidement et plus facilement.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les sous-ensembles de listes dans R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r/"/>
    <updated>2015-04-09T07:47:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Après avoir parlé des <a href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/">sous-ensembles de vecteurs</a> dans le langage R,
c’est maintenant le tour des listes. En R, une liste peut contenir des
types différents, au contraire du vecteur, limité à un seul type.
Prenons par exemple la liste suivante :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À l’affichage, on remarque qu’il s’agit d’une liste grâce aux doubles crochets
(<code>[[]]</code>) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x
</span><span class="line"><span class="go">[[1]]</span>
</span><span class="line"><span class="go">[1] 1</span>
</span><span class="line">
</span><span class="line"><span class="go">[[2]]</span>
</span><span class="line"><span class="go">[1] 2</span>
</span><span class="line">
</span><span class="line"><span class="go">[[3]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Les éléments d’une liste peuvent être nommés. Suivant votre langage de
prédilection, vous pouvez penser à une liste R comme à un hash, un dictionnaire,
un tableau associatif, etc :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span>foo <span class="o">=</span> <span class="m">1</span><span class="p">,</span> bar <span class="o">=</span> <span class="m">2</span><span class="p">,</span> baz <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">))</span>
</span><span class="line"><span class="gp">&gt; </span>x
</span><span class="line"><span class="go">$foo</span>
</span><span class="line"><span class="go">[1] 1</span>
</span><span class="line">
</span><span class="line"><span class="go">$bar</span>
</span><span class="line"><span class="go">[1] 2</span>
</span><span class="line">
</span><span class="line"><span class="go">$baz</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Que se passe-t-il si on utilise la même syntaxe qu’avec un vecteur pour extraire
un élément d’une liste ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[</span><span class="m">3</span><span class="p">]</span>
</span><span class="line"><span class="go">$baz</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’idée c’est que l’opérateur <code>[]</code> renvoie le même type d’objet que l’objet sur
lequel il est appliqué. Donc utiliser <code>[]</code> sur une liste retourne une liste :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>class<span class="p">(</span>x<span class="p">[</span><span class="m">3</span><span class="p">])</span>
</span><span class="line"><span class="go">[1] &quot;list&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour aller chercher un élément, et pas une liste à un seul élément, il faut
utiliser l’opérateur double crochets (<code>[[]]</code>) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span><span class="m">3</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lorsque les éléments sont nommés, on peut bien sûr utiliser leurs noms comme
clé :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="o">$</span>baz
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons extraire un sous-ensemble d’une liste en passant les indices à
l’opérateur crochet (<code>[]</code>) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="s">&quot;2&quot;</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt; </span>x<span class="p">[</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">)]</span>
</span><span class="line"><span class="go">[[1]]</span>
</span><span class="line"><span class="go">[1] 1</span>
</span><span class="line">
</span><span class="line"><span class="go">[[2]]</span>
</span><span class="line"><span class="go">[1] 3</span>
</span><span class="line">
</span><span class="line"><span class="go">[[3]]</span>
</span><span class="line"><span class="go">[1] 5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ou bien en lui donnant un vecteur de booléens :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[</span>c<span class="p">(</span><span class="k-Variable">F</span><span class="p">,</span> <span class="k-Variable">T</span><span class="p">,</span> <span class="k-Variable">F</span><span class="p">,</span> <span class="k-Variable">T</span><span class="p">,</span> <span class="k-Variable">F</span><span class="p">)]</span>
</span><span class="line"><span class="go">[[1]]</span>
</span><span class="line"><span class="go">[1] &quot;2&quot;</span>
</span><span class="line">
</span><span class="line"><span class="go">[[2]]</span>
</span><span class="line"><span class="go">[1] 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En faisant la même chose avec l’opérateur double crochets (<code>[[]]</code>) nous pouvons
extraire le nième élément d’un vecteur :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">),</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span>c<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">)]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce qu’on peut décomposer ainsi, d’abord le 2ème élément de la liste :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span><span class="m">2</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot; &quot;c&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis le premier élément du vecteur, la syntaxe commence à devenir drôle :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span><span class="m">2</span><span class="p">]][[</span><span class="m">1</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Question pour les connaisseurs du langage R : le code précédent me suggère qu’un vecteur
<em>agit</em> aussi comme une liste et que l’opérateur double crochet (<code>[[]]</code>) n’est pas
limité aux listes. Par exemple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>y <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class="line"><span class="gp">&gt; </span>y
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot; &quot;c&quot;</span>
</span><span class="line"><span class="gp">&gt; </span>y<span class="p">[[</span><span class="m">2</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;b&quot;</span>
</span><span class="line"><span class="gp">&gt; </span>y<span class="p">[</span><span class="m">2</span><span class="p">]</span>
</span><span class="line"><span class="go">[1] &quot;b&quot;</span>
</span><span class="line"><span class="gp">&gt; </span>y<span class="p">[[</span><span class="m">2</span><span class="p">]]</span> <span class="o">==</span> y<span class="p">[</span><span class="m">2</span><span class="p">]</span>
</span><span class="line"><span class="go">[1] TRUE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Est-ce qu’il y a un intérêt à utiliser les double crochets avec des vecteurs ?</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/">Les sous-ensembles dans R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/">3 réglages pour le langage R</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les sous-ensembles dans R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/"/>
    <updated>2015-04-07T19:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’apprends <a href="http://www.r-project.org/">le langage R</a> ! C’est cool d’apprendre de nouvelles choses.
C’est encore plus cool de les partager ;) Comme je suis vraiment tout neuf avec
R, c’est mon premier article sur ce langage. Et comme il faut bien commencer
quelque part, je vais vous parler de certains moyens d’obtenir des
sous-ensembles d’un vecteur (un vecteur c’est à peu près comme une liste).</p>

<p><img class="center" src="http://lkdjiin.github.io/images/subset.png" /></p>

<!-- more -->

<p>On lance le REPL :</p>

<pre><code>$ R
</code></pre>

<p>On va créer un ensemble de notes (<em>grades</em>).  Le symbole <code>&lt;-</code> est l’opérateur
d’affectation. La fonction <code>c()</code>, elle, permet de fabriquer un vecteur, avec
ici 10 notes allant de 1 à 5. <code>c()</code> assure la concaténation :</p>

<pre><code>&gt; grades &lt;- c(1, 2, 3, 2, 3, 2, 1, 4, 5, 2)
</code></pre>

<p>On peut vérifier ce qu’il y a dans <code>grades</code>. Le <code>[1]</code> indique qu’il s’agit d’un
vecteur dont on commence l’affichage par le 1er élément. R indexe en commençant
par 1, et non pas comme souvent par zéro :</p>

<pre><code>&gt; grades
 [1] 1 2 3 2 3 2 1 4 5 2
</code></pre>

<p>Pour être sûr de comprendre cette histoire de vecteur et d’index, créons et
affichons un vecteur de 40 éléments à l’aide de la syntaxe <code>début:fin</code> :</p>

<pre><code>&gt; 1:40
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
</code></pre>

<p>Alors ces sous-ensembles ? Et bien commençons par une indexation classique, avec
<code>[]</code>, pour retrouver un seul élément (en fait un vecteur d’un seul élément) :</p>

<pre><code>&gt; grades[1]
[1] 1
</code></pre>

<p>On peut aussi retrouver un <em>range</em>, par exemple du 6ème au 8ème élément :</p>

<pre><code>&gt; grades[6:8]
[1] 2 1 4
</code></pre>

<p>Pour retrouver seulement les notes au dessus de 2 on met la condition entre les
crochets :</p>

<pre><code>&gt; grades[grades &gt; 2]
[1] 3 3 4 5
</code></pre>

<p>Il est intéressant de voir ce qu’on obtient avec <code>grades &gt; 2</code> :</p>

<pre><code>&gt; grades &gt; 2
 [1] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE
</code></pre>

<p>On obtient un vecteur de valeurs booléennes ! <em>TRUE</em> si la note est supérieure
à 2, <em>FALSE</em> dans le cas contraire.</p>

<p>Rangeons ce vecteur de booléens dans une variable <code>mask</code> et servons nous de
cette nouvelle variable pour obtenir le sous-ensemble des notes supérieures
à 2 :</p>

<pre><code>&gt; mask &lt;- grades &gt; 2
&gt; grades[mask]
[1] 3 3 4 5
</code></pre>

<p>Pour finir, utilisons directement un vecteur de booléens pour récupérer les
éléments n° 4, 5, 6, 9 et 10 (<em>F</em> et <em>T</em> sont des raccourcis pour <em>FALSE</em> et
<em>TRUE</em>) :</p>

<pre><code>&gt; grades[c(F, F, F, T, T, T, F, F, T, T)]
[1] 2 3 2 5 2
</code></pre>

<p>Voilà, mon premier article sur R est terminé, je vais certainement en écrire
plein d’autres dans un futur proche. J’espère que ce sujet vous intéresse ;)</p>

<pre><code>&gt; q()
</code></pre>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r/">Les sous-ensembles de listes dans R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/06/08/r-rep-vs-replicate/">R : rep vs replicate</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/">3 réglages pour le langage R</a></li></ul></section>
]]></content>
  </entry>
  
</feed>
