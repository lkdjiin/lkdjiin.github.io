<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-04-05T21:25:20+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ce qui vous manque dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/05/ce-qui-vous-manque-dans-vim/"/>
    <updated>2014-04-05T21:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/05/ce-qui-vous-manque-dans-vim</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui pas d&#8217;article technique. Pas de code. Pas de truc ni
d&#8217;astuce. Aujourd&#8217;hui je vous pose une question si vous utilisez Vim :
qu&#8217;est ce qui vous manque ?</p>

<!-- more -->


<p>Qu&#8217;est-ce que vous aimeriez voir dans Vim qui n&#8217;existe pas (encore) ?
Que ce soit un plugin ou une fonctionnalité du programme…</p>

<p>Moi je me lance : j&#8217;aimerais avoir une fonction pour mettre à jour les
syntaxes/ftplugins des langages, par exemple une commande
<code>:UpdateLanguage('ruby')</code> qui irait chercher la dernière version
<em>officielle</em> sur un serveur distant, où elles seraient toutes centralisées,
un peu sur le principe des gem ruby.</p>

<p>Et vous ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/"/>
    <updated>2014-04-04T21:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je voudrais maintenant tester que ma fonction pour passer un mot en
italique fonctionne sur le dernier mot de la phrase, lorsque celui-ci
n&#8217;a qu&#8217;un seul caractère…</p>

<!-- more -->


<p>Voilà le test Vader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (a line whose the last word is of length 1):</span>
</span><span class='line'><span class="err">  abc def ghi j</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting at the end of the last word who is of length 1):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fj&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (last word in italic):</span>
</span><span class='line'><span class="err">  abc def ghi *j*</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et malheureusement, il échoue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">(4/4) [  GIVEN] a line whose the last word is of length 1</span>
</span><span class='line'><span class="err">(4/4) [EXECUTE] starting at the end of the last word who is of length 1</span>
</span><span class='line'><span class="err">(4/4) [ EXPECT] (X) last word in italic</span>
</span><span class='line'><span class="err">  - Expected:</span>
</span><span class='line'><span class="err">      abc def ghi *j*</span>
</span><span class='line'><span class="err">  - Got:</span>
</span><span class='line'><span class="err">      abc def ghi j</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je m&#8217;attendais à un échec, mais pas à celui-ci ! Je pensais obtenir ceci:</p>

<pre><code>abc def *ghi* j
</code></pre>

<p>Donc je trouve ça assez bizarre et j&#8217;écris deux autres tests sur le dernier
mot d&#8217;une phrase, quand ce mot est d&#8217;une longueur correcte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (from the beginning of the last word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fm&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (last word in italic):</span>
</span><span class='line'><span class="err">  abc def ghi jkl *mno*</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (from the end of the last word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fo&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (last word in italic):</span>
</span><span class='line'><span class="err">  abc def ghi jkl *mno*</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là encore le test qui débute sur le dernier caractère échoue de la même
manière, c&#8217;est à dire sans avoir ajouter aucun <code>*</code>.</p>

<p>J&#8217;ai déjà entendu dire que Vim pouvait faire des choses bizarres quand
on se trouve à la fin d&#8217;une phrase. Je ne sais pas si c&#8217;est cela ou la
logique de ma fonction qui est en cause, c&#8217;est toujours un mystère et
j&#8217;espère avoir le temps ce week-end pour investiguer.</p>

<p>En attendant que je m&#8217;y mette, si vous avez des pistes, je suis preneur ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord - Voir la requête SQL pendant l'écriture des tests]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/"/>
    <updated>2014-04-03T20:58:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Cet après-midi, avec un collègue, on écrivait des tests pour une requête
en base de données avec ActiveRecord. Et on a eu besoin d&#8217;étudier le
code SQL qui était généré.</p>

<!-- more -->


<p>On aurait pu lancer une console et jouer avec ActiveRecord dedans, mais
le setup nécessaire pour accéder à l&#8217;objet sur lequel on travaillait est
assez long à mettre en place. On voulait plutôt faire rapidement:</p>

<ol>
<li>On bidouille la requête ActiveRecord.</li>
<li>On lance le test.</li>
<li>On examine le code SQL.</li>
<li>On recommence tant que ça ne nous convient pas.</li>
</ol>


<p>Pour ça, placez la ligne suivante dans votre fichier de test et le tour
est joué.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque/'>ActiveRecord &ndash; Executer une commande SQL quelconque</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Timecop - Comment ça marche ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/"/>
    <updated>2014-04-02T21:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier je vous parlais de Timecop, une gem Ruby qui <em>arrête le
temps</em>, très utile pour tester les dates. J&#8217;y ai repensé un
peu aujourd&#8217;hui sur le mode : «j&#8217;aurais pu y penser avant !».</p>

<p>Alors justement, si j&#8217;avais eu cette idée, comment j&#8217;aurais
fait ? C&#8217;est l&#8217;occasion de parler de méta-programmation.
Allez j&#8217;essaye d&#8217;écrire ma propre méthode
<code>Time.freeze</code>, on verra bien…</p>

<!-- more -->


<p>Voilà les étapes qui me semble nécessaires:</p>

<ol>
<li>Geler le temps et le retenir.</li>
<li>Faire un backup de Time.now.</li>
<li>Définir une nouvelle méthode Time.now qui renvoie toujours
le même temps.</li>
<li>Appeler le block passé à la méthode.</li>
<li>Restaurer la méthode Time.now originale.</li>
</ol>


<p>Avant de coder, j&#8217;écris un test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time before </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">freeze</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time after </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je veux donc obtenir un affichage du genre:</p>

<pre><code>Time before hh:mm:00
hh:mm:03
hh:mm:03
Time after hh:mm:09
</code></pre>

<p>Ok ? C&#8217;est parti.</p>

<h2>Ouvrir la classe Time</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Premier truc à savoir, une classe Ruby est toujours ouverte
à la modification. Même si il s&#8217;agit d&#8217;une classe du coeur
du langage, comme Object ou Kernel. <em>Si vous êtes perdus,
faites une recherche sur «ruby open class».</em></p>

<h2>Arrêter le temps</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas grand chose à dire. On pourra renvoyer l&#8217;objet <code>freezed</code>
chaque fois qu&#8217;on nous demandera <code>Time.now</code>.</p>

<h2>Sauvegarder Time.now original</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là il y a beaucoup à dire. On rentre dans la
méta-programmation et je n&#8217;ai pas la place (ni le temps) dans
cet article pour parler du modêle objet de Ruby.
N&#8217;hésitez pas à faire une recherche sur «ruby object model» ou
«ruby eigenclass».</p>

<p>On dit à la classe <code>Time</code> de créer un alias de la méthode de
classe <code>now</code> avec le nom <code>old_now</code>.</p>

<h2>Un nouveau Time.now</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois, je dis à la classe <code>Time</code> de créer une méthode de
classe qui s&#8217;appelle <code>now</code> et qui renvoie notre objet
<code>freezed</code>.</p>

<h2>Appeler le block</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon, ça c&#8217;était facile ;)</p>

<h2>Restaurer Time.now</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:now</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça me semble tout bon. On teste ?</p>

<h2>Le test</h2>

<figure class='code'><figcaption><span>freeze.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">freeze</span>
</span><span class='line'>    <span class="n">freezed</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">,</span> <span class="ss">:now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_singleton_method</span><span class="p">(</span><span class="s1">&#39;now&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">freezed</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:now</span><span class="p">,</span> <span class="ss">:old_now</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># singleton_class.send(:remove_method, :old_now)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time before </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">freeze</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Time after </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby freeze.rb
</span><span class='line'>Time before 2014-04-02 21:40:57 +0200
</span><span class='line'>2014-04-02 21:41:00 +0200
</span><span class='line'>2014-04-02 21:41:00 +0200
</span><span class='line'>Time after 2014-04-02 21:41:06 +0200
</span></code></pre></td></tr></table></div></figure>


<p>Excellent !</p>

<p>Il reste un léger problème : la méthode <code>Time.old_now</code>
existe toujours, ce qui n&#8217;est pas très propre. On pourra
la supprimer ainsi:</p>

<pre><code>singleton_class.send(:remove_method, :old_now)
</code></pre>

<p>Voilà, j&#8217;aurais quand même pu y penser avant… J&#8217;espère
trouver du temps une prochaine fois pour jeter un coup
d&#8217;oeil au code de Timecop pour comparer avec le code
d&#8217;aujourd&#8217;hui.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque/'>ActiveRecord &ndash; Executer une commande SQL quelconque</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/'>Quelques trucs pour lancer Rspec</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tester facilement vos dates avec Timecop]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/"/>
    <updated>2014-04-01T21:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><a href="https://github.com/travisjeffery/timecop">Timecop</a>
n&#8217;est pas une nouvelle gem. Mais je ne la découvre qu&#8217;aujourd&#8217;hui.
Ça fait pourtant 4 ans que je travaille quotidiennement avec Ruby
et/ou Rails… Et je ne me suis jamais sentis très à l&#8217;aise pour tester
les dates. Avec Timecop, ça devient un jeu d&#8217;enfant.</p>

<!-- more -->


<p>Pour voir un souci possible, prenons la classe suivante qui représente
un article:</p>

<figure class='code'><figcaption><span>article.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Article</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@created_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:created_at</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le monde réel, ce serait surement un ActiveRecord, mais pour
l&#8217;exemple on se contentera bien de cette classe ;)</p>

<p>Maintenant testons la création d&#8217;un article:</p>

<figure class='code'><figcaption><span>tc_article.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;article&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestArticle</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_creation</span>
</span><span class='line'>    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s1">&#39;Foo&#39;</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà le souci, à quelques nano-secondes près ça pète:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby tc_article.rb
</span><span class='line'>Run options:
</span><span class='line'>
</span><span class='line'><span class="c"># Running tests:</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>1/1<span class="o">]</span> TestArticle#test_creation <span class="o">=</span> 0.00 s
</span><span class='line'>  1<span class="o">)</span> Failure:
</span><span class='line'>TestArticle#test_creation <span class="o">[</span>tc_article.rb:8<span class="o">]</span>:
</span><span class='line'>&lt;2014-04-01 21:05:10 +0200&gt; <span class="o">(</span>204201<span class="o">[</span>ns<span class="o">])</span> expected but was
</span><span class='line'>&lt;2014-04-01 21:05:10 +0200&gt; <span class="o">(</span>176685<span class="o">[</span>ns<span class="o">])</span>.
</span><span class='line'>
</span><span class='line'>Finished tests in 0.009979s, 100.2062 tests/s, 200.4125 assertions/s.
</span><span class='line'>1 tests, 2 assertions, 1 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<p>Timecop est la meilleure solution que j&#8217;ai vu jusqu&#8217;ici pour régler
ce type de problème. La gem propose tout simplement (entre autres)
<em>de geler le temps</em>:</p>

<figure class='code'><figcaption><span>tc_article.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;article&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;timecop&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestArticle</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_creation</span>
</span><span class='line'>    <span class="no">Timecop</span><span class="o">.</span><span class="n">freeze</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="s1">&#39;Foo&#39;</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà le résultat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby tc_article.rb
</span><span class='line'>Run options:
</span><span class='line'>
</span><span class='line'><span class="c"># Running tests:</span>
</span><span class='line'>
</span><span class='line'>Finished tests in 0.010756s, 92.9747 tests/s, 185.9494 assertions/s.
</span><span class='line'>1 tests, 2 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;aimerais bien savoir quelles solutions vous avez adoptés pour
régler ce genre de soucis…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/'>Ruby Timecop &ndash; Comment ça marche ?</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/'>Quelques trucs pour lancer Rspec</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/"/>
    <updated>2014-03-31T20:58:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>On continue d&#8217;implémenter <a href="http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/">la fonctionnalité commencée hier</a>
en testant deux cas exceptionnels, toujours à l&#8217;aide de Vader.</p>

<!-- more -->


<p>Revoici le fichier de test d&#8217;hier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting in middle of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fe&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais ajouter deux tests. L&#8217;un pour voir ce qu&#8217;il se passe quand le
curseur se trouve au début d&#8217;un mot, et idem pour la fin d&#8217;un mot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting in middle of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fe&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting at beginning of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fd&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting at the end of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! ff&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et avec l&#8217;implémentation de la dernière fois:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! bi*\&lt;Esc&gt;ea*\&lt;Esc&gt;&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>… le test où le curseur se trouve au début d&#8217;un mot échoue
misérablement.</p>

<p>Pour le faire passer, on doit d&#8217;abord déplacer le curseur d&#8217;un cran
vers la droite:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! lbi*\&lt;Esc&gt;ea*\&lt;Esc&gt;&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois on continue avec d&#8217;autres cas exceptionnels.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/"/>
    <updated>2014-03-30T21:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour mon plugin Vim qui aide à écrire du markdown, j&#8217;ai envie d&#8217;une
fonctionnalité pour mettre un mot en italique (et aussi en gras).
Si j&#8217;ai le texte suivant:</p>

<pre><code>foo bar baz
</code></pre>

<p>et que le curseur est dans le mot <code>bar</code>, je veux que la combinaison de
touches <code>&lt;Leader&gt;qi</code> donne ceci:</p>

<pre><code>foo *bar* baz
</code></pre>

<p>Pour implémenter ça, j&#8217;utiliserais encore le framework de test Vader.</p>

<!-- more -->


<p>Voici un premier test, pour le cas général:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  abc def ghi jkl mno</span>
</span><span class='line'>
</span><span class='line'><span class="err">Execute (starting in middle of a word):</span>
</span><span class='line'><span class="err">  execute &quot;normal! fe&quot;</span>
</span><span class='line'><span class="err">  QuickMarkdownItalic</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (2nd word in italic):</span>
</span><span class='line'><span class="err">  abc *def* ghi jkl mno</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le bloc <code>Execute</code> place d&#8217;abord le curseur sur le caractêre <code>e</code>,
autrement dit <em>à l&#8217;intérieur</em> du mot <code>def</code>. Il lance ensuite la fonction
<code>QuickMarkdownItalic</code> qui devra faire le travail.</p>

<p>Dans le fichier <code>plugin/quickmarkdown.vim</code>, j&#8217;ajoute la nouvelle
fonction:</p>

<figure class='code'><figcaption><span>plugin/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownItalic <span class="k">call</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis j&#8217;implémente la fonction de la manière la plus simple à laquelle
je puisse penser:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">italic</span><span class="p">()</span>
</span><span class='line'>  execute <span class="s2">&quot;normal! bi*\&lt;Esc&gt;ea*\&lt;Esc&gt;&quot;</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>Décodage: <code>b</code> place le curseur au début du mot. <code>i*\&lt;Esc&gt;</code> passe en
mode insertion, ajoute un <code>*</code> et revient en mode normal. <code>e</code> place le
curseur à la fin du mot. <code>a*\&lt;Esc&gt;</code> passe en mode insertion <em>derrière</em>
le mot et ajoute un <code>*</code> puis revient encore en mode normal.</p>

<p>Cette fonction sera amenée à bouger une fois qu&#8217;on se sera occupé des
cas particuliers. Ce sera pour une prochaine fois.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exemple de test pour Vim avec le framework Vader]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader/"/>
    <updated>2014-03-29T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour mon plugin <a href="https://github.com/lkdjiin/quickmarkdown">QuickMarkdown</a>, je vais ajouter une petite fonction
qui insère la ligne <code>&lt;!-- more --&gt;</code> quand je tape la combinaison de
touche <code>&lt;Leader&gt;qm</code>. Ça devrait m&#8217;être utile vu que j&#8217;écris du markdown
pour Octopress tous les jours ;) Si on est pas obligé de passer par un
plugin pour ce genre de chose, ça va aussi me permettre de parler un peu
de Vader. Voici donc un exemple simple de TDD pour
Vim, avec le framework de test Vader.</p>

<!-- more -->


<p>Tout d&#8217;abord, j&#8217;écris le test:</p>

<figure class='code'><figcaption><span>test/more.vader</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  Last line</span>
</span><span class='line'>
</span><span class='line'><span class="err">Do (insert more marker in normal mode):</span>
</span><span class='line'><span class="err">  gg</span>
</span><span class='line'><span class="err">  :QuickMarkdownMore\&lt;Enter&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">Expect (marker inserted):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  &lt;!-- more --&gt;</span>
</span><span class='line'><span class="err">  Last line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici comment il fonctionne. La directive <code>Given</code> produit un buffer (=~ fichier)
utilisé dans les directives suivante, qui contient 2 lignes, respectivement
<code>First line</code> et <code>Last line</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Given (some text):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  Last line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ensuite, la directive <code>Do</code> joue des commandes en mode normal. Tout d&#8217;abord
<code>gg</code>, pour s&#8217;assurer qu&#8217;on est sur la première ligne, puis la commande
<code>QuickMarkdownMore</code>, qui est celle qui est censée faire le travail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Do (insert more marker in normal mode):</span>
</span><span class='line'><span class="err">  gg</span>
</span><span class='line'><span class="err">  :QuickMarkdownMore\&lt;Enter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, la directive <code>Expect</code> s&#8217;assure que le buffer de test a été
transformé comme je le voulais:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">Expect (marker inserted):</span>
</span><span class='line'><span class="err">  First line</span>
</span><span class='line'><span class="err">  &lt;!-- more --&gt;</span>
</span><span class='line'><span class="err">  Last line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il reste à lancer le test (avec <code>:Vader</code>) pour s&#8217;assurer qu&#8217;il ne passe
pas, puis à écrire la fonction, et relancer le test en s&#8217;assurant qu&#8217;il
passe bien cette fois-ci.</p>

<p>Et voici pour finir le code d&#8217;implémentation:</p>

<figure class='code'><figcaption><span>plugin/markdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownMore <span class="k">call</span> quickmarkdown#<span class="nb">more</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>autoload/markdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">more</span><span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="s2">&quot;&lt;!-- more --&gt;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim/'>Vader, un framework de test pour Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - extend self]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/"/>
    <updated>2014-03-28T21:16:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous débutez en Ruby et vous vous demandez ce que peut bien signifier
ce <code>extend self</code> qu&#8217;on rencontre parfois dans un module utilitaire ?</p>

<!-- more -->


<p>Voici un exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="c1">#=&gt; foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne <code>extend self</code> nous permet de définir toutes les méthodes du
module comme étant des méthodes de classe. C&#8217;est pas plus compliqué que
ça.</p>

<p>On aurait pu écrire à la place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou bien encore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a quand même une subtilité qui fait toute la différence !
Sinon ça ne serait pas drôle. En utilisant la syntaxe <code>extend self</code>,
<strong>toutes les méthodes sont des méthodes de classe</strong>, ou de module si
vous préférez ;) La différence est importante puisqu&#8217;ainsi on ne pourra
pas mélanger méthodes utilitaires et méthodes à inclure dans une classe.
Ce qui est parfois tentant, mais c&#8217;est mal. Mais tentant. Mais mal…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/15/racket-pour-les-rubyists-7-module-basique/'>Racket pour les Rubyists 7: Module basique</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord - Executer une commande SQL quelconque]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque/"/>
    <updated>2014-03-27T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/27/activerecord-executer-une-commande-sql-quelconque</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Chaque SGBD (Systême de Gestion de Base de Données), comme postgresql ou
mysql par exemple, définissent des tables avec des infos très
intéressantes (appelées meta-data, shéma, catalogue, etc.).</p>

<p>Ces <em>méta-données</em> ne sont pas reliées à un modèle ActiveRecord, alors
comment y accéder si vous en avez besoin ?</p>

<!-- more -->


<p>En utilisant la méthode <code>execute</code> sur la méthode <code>connection</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;ma requete SQL&quot;</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>result</code> possède maintenant les lignes dont vous aviez tant besoin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">row</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/'>Ruby Timecop &ndash; Comment ça marche ?</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/13/un-editeur-pour-le-terminal-partie-9/'>Un éditeur pour le terminal &ndash; partie 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Comment ouvrir la fenêtre courante dans un nouvel onglet]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/"/>
    <updated>2014-03-26T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous avez un écran bien large ? Vous travaillez régulierement avec 4 ou 5
fenêtres dans le même onglet, voir plus ?
Parfois vous aimeriez bien ouvrir rapidement une de ces fenêtres dans un
nouvel onglet ?</p>

<!-- more -->


<p>Alors ça va peut-être bien être l&#8217;article le plus court de l&#8217;histoire de ce
blog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">tab</span> <span class="k">sp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et la fenêtre courante s&#8217;ouvre dans un nouvel onglet (<code>sp</code> est l&#8217;abréviation
de <code>split</code>).</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/'>Vim &ndash; Un plugin pour markdown &ndash; partie 7</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/"/>
    <updated>2014-03-25T19:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Comme me le faisait remarquer ce matin un lecteur, il manque un cas à
mon article d&#8217;hier sur l&#8217;utilisation de <code>super</code> en Ruby. C&#8217;est d&#8217;autant
plus impardonnable que c&#8217;est un cas où, pour une fois, les parenthèses
sont <strong>obligatoires</strong> à la fin d&#8217;une méthode.</p>

<!-- more -->


<p>Voici donc une classe de base et une classe fille:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Base#foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Child#foo with </span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant on essaye le tout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="c1">#=&gt; ArgumentError: wrong number of arguments (0 for 1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boum ! Comme on l&#8217;a vu hier, <code>super</code> passe automatiquement tous les
paramètres de la méthode dans laquelle il est appelé vers la classe
de base. Et là, notre méthode <code>foo</code> dans la classe de base est sans
argument.</p>

<p>Pour résoudre ce problème, on est obligé de mettre des parenthèses
à la suite de <code>super</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Child#foo with </span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;ok&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Base</span><span class="c1">#foo</span>
</span><span class='line'><span class="no">Child</span><span class="c1">#foo with ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, oubli réparé.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/'>La méthode super en Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/"/>
    <updated>2014-03-24T21:21:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui un aperçu de la méthode <code>super</code> pour les débutants en Ruby.
C&#8217;est une méthode dont le comportement peut surprendre si vous venez
de certains autres langages…</p>

<!-- more -->


<p>Pour étudier le comportement de <code>super</code> il va nous falloir utiliser
l&#8217;héritage. Voici une classe de base toute simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> from Base&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici comment l&#8217;utiliser:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="no">Base</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">base</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Base</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant créons une classe fille qui hérite de <code>Base</code> et
<em>redéfinissons</em> la méthode <code>foo</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> from Child&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici ce que ça donne:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Base</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Child</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter que:</p>

<ol>
<li>La méthode éponyme <code>foo</code> de la classe de base n&#8217;est pas appelée
implicitement. Il faut le faire explicitement avec <code>super</code>.</li>
<li>On est pas limité à un <em>constructeur</em>, on peut appeler <code>super</code> dans
une <em>simple</em> méthode.</li>
<li>Dans ce cas précis, pas besoin de passer l&#8217;argument <code>bar</code> à la
méthode <code>super</code>, c&#8217;est fait <strong>automagiquement</strong>.</li>
</ol>


<p>Allons plus loin et faisons faire plus de choses à la méthode <code>foo</code> de la
classe fille:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">baz</span><span class="si">}</span><span class="s2"> from Child&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois-ci la magie n&#8217;opère plus et nous avons droit à une belle erreur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; super.rb:2:in `foo&#39;: wrong number of arguments (2 for 1) (ArgumentError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby nous signale que la méthode <code>foo</code> de la classe <code>Base</code> a reçu 2
arguments, alors qu&#8217;elle n&#8217;en attendait qu&#8217;un seul ! Pourquoi, alors que
nous n&#8217;avons même pas passé un seul argument ? Parce que <code>super</code>, sans
arguments, prends <strong>tous</strong> les arguments passés à la méthode dans
laquelle il se trouve et les envoient tous vers la méthode éponyme de la
classe de base…</p>

<p>Alors comment on s&#8217;en sort ? Très simplement en passant à <code>super</code> les
paramètres que l&#8217;on veut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bar</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">baz</span><span class="si">}</span><span class="s2"> from Child&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et cette fois-ci, ça fonctionne parfaitement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">child</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; Hello from Base</span>
</span><span class='line'><span class="c1">#=&gt; Hello world from Child</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/'>La méthode super en Ruby &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/"/>
    <updated>2014-03-23T20:57:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On fait un peu de nettoyage en mettant du code en commun, et on voit un
mapping plus intéressant.</p>

<!-- more -->


<p>Voici ce que ça donne après un refactoring:</p>

<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> <span class="k">s</span>:build_big_title<span class="p">(</span>char<span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">s</span>:line_content <span class="p">=</span> substitute<span class="p">(</span>getline<span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">a</span>:char<span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">s</span>:line_content<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="k">s</span>:build_little_title<span class="p">(</span>str<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> setline<span class="p">(</span>line<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span> <span class="k">a</span>:str . getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span>level<span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">1</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">2</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">3</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">4</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;#### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">5</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;##### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="k">a</span>:level <span class="p">==</span> <span class="m">6</span>
</span><span class='line'>    <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;###### &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>plugin/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownTitle1 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle2 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle3 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle4 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">4</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle5 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle6 <span class="k">call</span> quickmarkdown#<span class="nb">title</span><span class="p">(</span><span class="m">6</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On n&#8217;a plus qu&#8217;un seule fonction <code>quickmarkdown#title</code>, à laquelle on passe
en paramêtre le niveau du titre.</p>

<p>J&#8217;ai aussi changé le mapping.
Tout d&#8217;abord j&#8217;utilise leader+q, au lieu de leader+m. Pourquoi, parce que
je voulais m&#8217;en servir aussi en mode insertion avec la touche Control. Et
en mode insertion, Control+m est équivalent à la touche Entrée, ce qui pose
bien sûr quelques problèmes ;) Voici le mapping pour un clavier qwerty:</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q1 :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q2 :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q3 :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q4 :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q5 :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>q6 :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">1</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">2</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">3</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">4</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">5</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">q</span><span class="p">&gt;</span><span class="m">6</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">o</span><span class="p">&gt;</span>:QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au fait, vous pouvez trouver ce plugin sur <a href="https://github.com/lkdjiin/quickmarkdown">Github</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/'>Vim &ndash; un plugin pour markdown &ndash; partie 4</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/"/>
    <updated>2014-03-22T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant on fait tous les titres, jusqu&#8217;au niveau 6 donc.</p>

<!-- more -->




<figure class='code'><figcaption><span>autoload/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> <span class="k">s</span>:build_big_title<span class="p">(</span>char<span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">s</span>:line_content <span class="p">=</span> substitute<span class="p">(</span>getline<span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">a</span>:char<span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">s</span>:line_content<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="k">s</span>:build_little_title<span class="p">(</span>str<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> setline<span class="p">(</span>line<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span> <span class="k">a</span>:str . getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title2<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_big_title<span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title3<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title4<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;#### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title5<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;##### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title6<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_little_title<span class="p">(</span><span class="s2">&quot;###### &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>plugin/quickmarkdown.vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> QuickMarkdownTitle1 <span class="k">call</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle2 <span class="k">call</span> quickmarkdown#title2<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle3 <span class="k">call</span> quickmarkdown#title3<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle4 <span class="k">call</span> quickmarkdown#title4<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle5 <span class="k">call</span> quickmarkdown#title5<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> QuickMarkdownTitle6 <span class="k">call</span> quickmarkdown#title6<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai aussi changé mon mapping pour qu&#8217;il soit plus homogène.</p>

<p><strong>En qwerty:</strong></p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m1 :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m2 :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m3 :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m4 :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m5 :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>m6 :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>En azerty:</strong></p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&amp; :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>é :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&quot; :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&#39; :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">(</span> :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">-</span> :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>En bépo:</strong></p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>&quot; :QuickMarkdownTitle1<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>« :QuickMarkdownTitle2<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>» :QuickMarkdownTitle3<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">(</span> :QuickMarkdownTitle4<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span><span class="p">)</span> :QuickMarkdownTitle5<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span>@ :QuickMarkdownTitle6<span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/'>Vim &ndash; Un plugin pour markdown &ndash; partie 5</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/'>Vim &ndash; un plugin pour markdown &ndash; partie 3</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis - Comment supprimer un ensemble de clés]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/21/redis-comment-supprimer-un-ensemble-de-cles/"/>
    <updated>2014-03-21T21:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/21/redis-comment-supprimer-un-ensemble-de-cles</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Tiens, mon premier article sur Redis ! Normal, c&#8217;est une technologie que
j&#8217;ai découvert il y a peu…</p>

<!-- more -->


<p>Pour supprimer une clé dans Redis, on se connecte et on utilise la commande
<code>del</code>:</p>

<pre><code>$ redis-cli
&gt; del "nom:de:la:clef"
</code></pre>

<p>Mais quand on a des dizaines/centaines de clés, bof… Bien souvent (toujours
même ça vaut mieux) le nom des clés suit un motif. Par exemple:</p>

<pre><code>"motif:foo"
"motif:bar"
"motif:baz"
etc...
</code></pre>

<p>Dans ce cas on peut utiliser Bash pour s&#8217;en sortir rapidement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis-cli keys <span class="s2">&quot;*motif*&quot;</span> | xargs redis-cli del
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, au revoir toutes les clés.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande/'>Astuce pour Git &ndash; merge et checkout en une commande</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/12/quelques-commandes-git-par-michael-hartl/'>Quelques commandes Git par Michael Hartl</a></li><li><a href='http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/'>L&#8217;auto-complétion en Bash &ndash; partie 5</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques trucs pour lancer Rspec]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/"/>
    <updated>2014-03-20T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><a href="http://rspec.info/">Rspec</a> est un framework de test très utilisé dans le monde Ruby.
Il y a bien des manières différentes de le lancer et aujourd&#8217;hui on
voit quelques options basiques qu&#8217;on peut utiliser tous les jours.</p>

<!-- more -->


<p>Tout d&#8217;abord, on peut lancer Rspec avec ses options par défaut:</p>

<pre><code>$ rspec spec/
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>À noter que le programme repose, comme souvent dans l&#8217;éco-système Ruby,
sur certaines conventions. Si le répertoire qui comporte vos tests est
nommé <code>spec</code>, vous pouvez vous contentez de:</p>

<pre><code>$ rspec
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>Parfois, on a envie de voir le nom des tests, plutôt que des petits points:</p>

<pre><code>$ rspec --format=documentation spec/
Coco::Configuration
  should respond to #user_wants_to_run?
  with no config file
    should give a default threshold of 100%
    should give a default list of directories
    should give an empty default list of files to excludes
    should give false for 'single_line_report'
    #user_wants_to_run? returns true
    give false for 'show_link_in_terminal'
[...]
Finished in 0.08854 seconds
65 examples, 0 failures
</code></pre>

<p>Nos tests doivent fonctionner en isolation, le résultat doit être le même
quel que soit l&#8217;ordre:</p>

<pre><code>$ rspec --order=random spec/
.................................................................
Finished in 0.08785 seconds
65 examples, 0 failures
Randomized with seed 8689
</code></pre>

<p>Vous pouvez mettre ses options, et d&#8217;autres, dans un fichier <code>.rspec</code> à la
racine de votre projet pour qu&#8217;elles deviennent les options par défaut.
Par exemple, le fichier suivant vous donnera une sortie en couleur et des
tests joués aléatoirement à chaque lancement de <code>rspec</code>:</p>

<figure class='code'><figcaption><span>.rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='raw'><span class='line'><span class="err">--color</span>
</span><span class='line'><span class="err">--order=random</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour lancer les tests d&#8217;un seul fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb 
.......................
Finished in 0.03708 seconds
23 examples, 0 failures
</code></pre>

<p>Pour lancer un seul test, ajouter le numéro de la ligne derrière le nom du
fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb:41
Run options: include {:locations=&gt;{"./spec/configuration_spec.rb"=&gt;[41]}}
Coco::Configuration
  with no config file
    #user_wants_to_run? returns true
Finished in 0.00333 seconds
1 example, 0 failures
</code></pre>

<p>Pour terminer ce <em>Rspec basics</em>, on peut désactiver un test en écrivant <code>xit</code>
à la place de <code>it</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">xit</span> <span class="s2">&quot;should give a default threshold of 100%&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@config</span><span class="o">[</span><span class="ss">:threshold</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li><li><a href='http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/'>Apprendre Ruby en faisant des maths 7: Tests unitaires simples</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un badge pour la documentation pour vos projets Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby/"/>
    <updated>2014-03-19T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Un nouveau badge à afficher dans vos README vient de voir le jour. Celui-ci
est consacré à la documentation du code Ruby.</p>

<!-- more -->


<p>Le projet s&#8217;appelle <a href="http://inch-pages.github.io/">inch-pages</a> et s&#8217;appuie
sur la gem <a href="http://trivelop.de/inch/">inch</a>.</p>

<p>Parmi les utilisateurs ont notera entre autre Haml, Pry, Reek, Rubocop
et Tweeter.</p>

<p>N&#8217;hésitez pas à l&#8217;utiliser pour faire savoir au monde entier que vos projets
sont bien documentés ;)</p>

<p>Pour ma part, je vais tester ça dès que possible…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le format JSON et les caractères de fin de lignes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/18/le-format-json-et-les-caracteres-de-fin-de-lignes/"/>
    <updated>2014-03-18T21:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/18/le-format-json-et-les-caracteres-de-fin-de-lignes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans un fichier au format JSON, on ne met pas tout ce qu&#8217;on veut…
Notamment en ce qui concerne les caractères de fin de ligne et les
tabulations.</p>

<!-- more -->


<p>En effet, ceux-ci ne sont pas autorisés à l&#8217;intérieur des chaines de
caractères. Voici un exemple.</p>

<p>Tout d&#8217;abord, pas de caractères spéciaux:</p>

<figure class='code'><figcaption><span>doc.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;item&quot;</span> <span class="p">:</span> <span class="s2">&quot;article&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ rvm use 2.1.0</span>
</span><span class='line'><span class="go">Using /home/xavier/.rvm/gems/ruby-2.1.0</span>
</span><span class='line'><span class="go">$ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="go">=&gt; file = IO.read File.expand_path(&#39;./doc.json&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">file</span>
</span><span class='line'><span class="go">=&gt; {&quot;item&quot;=&gt;&quot;Article&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout va bien.</p>

<p>Maintenant avec des caractères de fin de lignes échappés:</p>

<figure class='code'><figcaption><span>doc.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;item&quot;</span> <span class="p">:</span> <span class="s2">&quot;article\ndescription\nprice&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">=&gt; file = IO.read File.expand_path(&#39;./doc.json&#39;)</span>
</span><span class='line'><span class="go">=&gt; &quot;{\n  \&quot;item\&quot; : \&quot;article\\ndescription\\nprice\&quot;\n}\n&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">file</span>
</span><span class='line'><span class="go">=&gt; {&quot;item&quot;=&gt;&quot;article\ndescription\nprice&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est toujours bon.</p>

<p>Par contre, avec des fins de lignes «en dur» dans le fichier:</p>

<figure class='code'><figcaption><span>doc.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;item&quot;</span> <span class="p">:</span> <span class="s2">&quot;Article</span>
</span><span class='line'><span class="s2">    description</span>
</span><span class='line'><span class="s2">    price&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="n">file</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;./doc.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">=&gt; &quot;{\n  \&quot;item\&quot; : \&quot;Article\n    description\n    price\&quot;\n}\n&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">file</span>
</span><span class='line'><span class="go">JSON::ParserError: 757: unexpected token at &#39;{</span>
</span><span class='line'><span class="go">  &quot;item&quot; : &quot;Article</span>
</span><span class='line'><span class="go">    description</span>
</span><span class='line'><span class="go">    price&quot;</span>
</span><span class='line'><span class="go">}</span>
</span><span class='line'><span class="go">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rien ne va plus. C&#8217;est pareil avec les tabulations.</p>

<p>Si vous récupérez ce genre de fichier, vous pouvez les nettoyer en
remplaçant par exemple les tabulations et les fins de ligne par un
espace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[\t\n]/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/03/activerecord-voir-la-requete-sql-pendant-lecriture-des-tests/'>ActiveRecord &ndash; Voir la requête SQL pendant l&#8217;écriture des tests</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/28/ruby-extend-self/'>Ruby &ndash; extend self</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/"/>
    <updated>2014-03-17T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>J&#8217;ai ajouté les titres de niveau 2 et 3, nettoyer un peu le code et
et remplacer l&#8217;utilisation des commandes en mode normal <code>yy</code> et <code>p</code>
(qu&#8217;un utilisateur peut toujours avoir remappé) par des fonctions
d&#8217;évaluations:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> <span class="k">s</span>:build_title<span class="p">(</span>char<span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">s</span>:line_content <span class="p">=</span> substitute<span class="p">(</span>getline<span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">a</span>:char<span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> append<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">s</span>:line_content<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title1<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_title<span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title2<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:build_title<span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> quickmarkdown#title3<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> setline<span class="p">(</span>line<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">),</span> <span class="s1">&#39;### &#39;</span> . getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/'>Vim &ndash; plugin pour markdown &ndash; la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/'>Vim &ndash; Un plugin pour markdown &ndash; partie 8</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
