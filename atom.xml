<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-07-06T13:26:35+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les tours de hanoi - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2/"/>
    <updated>2014-07-06T13:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je termine l&#8217;implémentation de la mécanique du jeu, pour pouvoir passer ensuite
à la construction de l&#8217;algorithme génétique.</p>

<pre><code>$ tree
.
├── lib
│   ├── hanoi
│   │   ├── board.rb
│   │   ├── game.rb
│   │   └── rules.rb
│   └── hanoi.rb
└── spec
    ├── board_spec.rb
    ├── game_spec.rb
    ├── integration
    │   └── game_spec.rb
    └── spec_helper.rb
</code></pre>

<!-- more -->


<p>J&#8217;ai mis <a href="https://github.com/lkdjiin/hanoi">le code</a> sur Github pour que vous puissiez le voir dans son
ensemble.</p>

<p>La classe <code>Board</code> gagne une méthode <code>move</code>, sans intelligence aucune:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Hanoi</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Board</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_of_pieces</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@pegs</span> <span class="o">=</span> <span class="o">[</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.number_of_pieces</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">reverse</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[]</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">position</span>
</span><span class='line'>      <span class="vi">@pegs</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">position</span><span class="o">=</span><span class="p">(</span><span class="n">pegs</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@pegs</span> <span class="o">=</span> <span class="n">pegs</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">eval</span>
</span><span class='line'>      <span class="vi">@pegs</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:+</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="vi">@pegs</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">)</span>
</span><span class='line'>      <span class="n">piece</span> <span class="o">=</span> <span class="vi">@pegs</span><span class="o">[</span><span class="n">from</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">pop</span>
</span><span class='line'>      <span class="vi">@pegs</span><span class="o">[</span><span class="n">to</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="n">piece</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La mécanique du jeu est assurée par la classe <code>Game</code>, qui délègue à <code>Board</code> et
se repose sur un module <code>Rules</code> pour les décisions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Hanoi</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@board</span> <span class="o">=</span> <span class="n">board</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="ss">from</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@board</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">)</span> <span class="k">if</span> <span class="no">Rules</span><span class="o">.</span><span class="n">valid?</span><span class="p">(</span><span class="vi">@board</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">win?</span>
</span><span class='line'>      <span class="no">Rules</span><span class="o">.</span><span class="n">win?</span><span class="p">(</span><span class="vi">@board</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">position</span>
</span><span class='line'>      <span class="vi">@board</span><span class="o">.</span><span class="n">position</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Hanoi::Rules</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">valid?</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">board</span><span class="o">.</span><span class="n">position</span><span class="o">[</span><span class="n">from</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">empty?</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">board</span><span class="o">.</span><span class="n">position</span><span class="o">[</span><span class="n">to</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">empty?</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">board</span><span class="o">.</span><span class="n">position</span><span class="o">[</span><span class="n">from</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="n">position</span><span class="o">[</span><span class="n">to</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">win?</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">board</span><span class="o">.</span><span class="n">position</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">empty?</span> <span class="o">&amp;&amp;</span> <span class="n">board</span><span class="o">.</span><span class="n">position</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">empty?</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, notre futur algorithme génétique a maintenant les moyens d&#8217;évaluer
une suite de mouvements, reste plus qu&#8217;à le coder ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1/'>Les tours de Hanoi &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb/'>Un algorithme génétique pour les tours de Hanoi avec Opal.rb</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/29/un-algorithme-genetique-avec-opal-dot-rb/'>Un algorithme génétique avec Opal.rb ?</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les tours de Hanoi - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1/"/>
    <updated>2014-07-05T15:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je vais commencer par implémenter une classe <code>Board</code>, dont la tâche est
de retenir l&#8217;état du plateau de jeu, c&#8217;est à dire la position des pièces.
J&#8217;ai envie de faire des tests avec Rspec, donc voici les premiers fichiers:</p>

<pre><code>$ tree
.
├── board.rb
└── spec
    └── board_spec.rb
</code></pre>

<!-- more -->


<p>Voici les tests de <code>Board</code>, qui décrivent ce que j&#8217;attend de cette classe:</p>

<figure class='code'><figcaption><span>spec/board_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./board&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Board</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="vi">@board</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;has a position&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="vi">@board</span><span class="o">.</span><span class="n">position</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[]</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;accepts a position&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@board</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">[</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="vi">@board</span><span class="o">.</span><span class="n">position</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">[</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;position evalution&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">specify</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="vi">@board</span><span class="o">.</span><span class="n">eval</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">specify</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@board</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">[</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="vi">@board</span><span class="o">.</span><span class="n">eval</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">9</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">specify</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@board</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">[</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="vi">@board</span><span class="o">.</span><span class="n">eval</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">12</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On doit pouvoir l&#8217;initialiser avec un nombre de pièces:</p>

<pre><code>before { @board = Board.new(3) }
</code></pre>

<p>À l&#8217;initialisation, les pièces sont en position de départ:</p>

<pre><code>it 'has a position' do
  expect(@board.position).to eq [ [3, 2, 1], [], [] ]
end
</code></pre>

<p>On peut modifier la position à volonté:</p>

<pre><code>it 'accepts a position' do
  @board.position = [ [], [3], [2, 1] ]
  expect(@board.position).to eq [ [], [3], [2, 1] ]
end
</code></pre>

<p>Enfin, la position actuelle peut être évaluée:</p>

<pre><code>describe 'position evalution' do

  specify { expect(@board.eval).to eq 0 }

  specify do
    @board.position = [ [], [3], [2, 1] ]
    expect(@board.eval).to eq 9
  end

  specify do
    @board.position = [ [], [], [3, 2, 1] ]
    expect(@board.eval).to eq 12
  end

end
</code></pre>

<p>Pour finir, l&#8217;implémentation minimum:</p>

<figure class='code'><figcaption><span>board.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Board</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_of_pieces</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@pegs</span> <span class="o">=</span> <span class="o">[</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.number_of_pieces</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">reverse</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="o">[]</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">position</span>
</span><span class='line'>    <span class="vi">@pegs</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">position</span><span class="o">=</span><span class="p">(</span><span class="n">pegs</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@pegs</span> <span class="o">=</span> <span class="n">pegs</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">eval</span>
</span><span class='line'>    <span class="vi">@pegs</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:+</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="vi">@pegs</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2/'>Les tours de hanoi &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb/'>Un algorithme génétique pour les tours de Hanoi avec Opal.rb</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/29/un-algorithme-genetique-avec-opal-dot-rb/'>Un algorithme génétique avec Opal.rb ?</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique pour les tours de Hanoi avec Opal.rb]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb/"/>
    <updated>2014-07-04T21:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour débuter la résolution du jeu des tours de Hanoi à l&#8217;aide d&#8217;un algorithme
génétique, j&#8217;ai envie de commencer par réfléchir à la représentation des
chromosomes, aux règles de mouvement, à la fonction d&#8217;évaluation, sans
forcément commencer à coder.</p>

<!-- more -->


<p>Les règles sont sur <a href="http://fr.wikipedia.org/wiki/Tours_de_Hano%C3%AF">wikipédia</a>.</p>

<p>J&#8217;apprend un truc qui va me servir, il faut 2<sup>n</sup> &ndash; 1 coups au minimum pour
solutionner le problème (n est le nombre de disques). Du coup, mes chromosomes
devront posséder 2<sup>n</sup> &ndash; 1 gènes. Ce qui ira sans trop de soucis jusqu&#8217;à une
dizaines de disques, mais au delà c&#8217;est pas gagné.</p>

<p>Pour faire simple, un gène va représenter un mouvement à l&#8217;aide d&#8217;un nombre:</p>

<pre><code>0 -&gt; du 1er poteau au 2ème poteau
1 -&gt; du 1er poteau au 3ème poteau
2 -&gt; du 2ème poteau au 1er poteau
3 -&gt; du 2ème poteau au 3ème poteau
4 -&gt; du 3ème poteau au 1er poteau
5 -&gt; du 3ème poteau au 2ème poteau
</code></pre>

<p>Que faire quand un mouvement est illégal ? Le plus simple est de l&#8217;ignorer,
c&#8217;est donc ce que je vais faire.</p>

<p>La fonction d&#8217;évaluation, maintenant ? J&#8217;ai envie de donner un <em>poids</em> à
chaque disque suivant le poteau où il se trouve. Sur le premier poteau, un
disque vaut 0 point. Sur le second poteau, il vaut 1 point, et sur le
troisième, il vaut 2 points.</p>

<p>Par exemple, si je commence avec seulement 3 disques, la position suivante
vaut 0 point:</p>

<pre><code>  x|x      |       |   
 xx|xx     |       |   
xxx|xxx    |       |    
</code></pre>

<p>Alors que la suivante vaut 6 points:</p>

<pre><code>   |       |      x|x   
   |       |     xx|xx 
   |       |    xxx|xxx
</code></pre>

<p>C&#8217;est pas suffisant pour différencier certaines solutions, donc on appliquera
un multiplicateur suivant la taille du disque, 1 pour le plus petit, 2 pour
le suivant et 3 pour le plus grand. Je vous laisse faire les calculs, ça me
prend trop de temps de faire les petits dessins ;)</p>

<p>Allez, la prochaine fois on code…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2/'>Les tours de hanoi &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1/'>Les tours de Hanoi &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/29/un-algorithme-genetique-avec-opal-dot-rb/'>Un algorithme génétique avec Opal.rb ?</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby CSV tests et quelques questions]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/07/03/ruby-csv-tests-et-quelques-questions/"/>
    <updated>2014-07-03T21:31:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/07/03/ruby-csv-tests-et-quelques-questions</id>
    <content type="html"><![CDATA[<p>Ça fait une semaine que je travaille sur des exports de statisques au format
CSV en Ruby. Ce n&#8217;est pas la première fois que je bosse sur ce genre de
fonctionnalité, que ce soit en Ruby ou dans un autre langage, et j&#8217;ai
toujours et encore le même problême: les tests.</p>

<!-- more -->


<p>Je m&#8217;explique. J&#8217;aime avoir des tests d&#8217;intégration qui s&#8217;assurent que les
bons fichiers soient produits. Par exemple:</p>

<pre><code>A, B, C, D ...
1, 2, 3, 4 ...
.
.
.
</code></pre>

<p>J&#8217;aime pouvoir contrôler la production de plusieurs fichiers, un pour chaque
scénario. Le gros soucis avec ce genre de test, c&#8217;est leur fragilité,
quand, par exemple, les utilisateurs s&#8217;aperçoivent que l&#8217;ordre des champs serait mieux
ainsi:</p>

<pre><code>A, C, D, B ...
1, 3, 4, 2 ...
.
.
.
</code></pre>

<p>Et là, il faut réécrire tous les fichiers de contrôle. Certains pouvant
contenir des dizaines de champs…</p>

<p>J&#8217;ai donc une question pour vous: comment faites vous pour faciliter ce
genre de tests ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/04/02/ruby-timecop-comment-ca-marche/'>Ruby Timecop &ndash; Comment ça marche ?</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/'>Tester facilement vos dates avec Timecop</a></li><li><a href='http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/'>Quelques trucs pour lancer Rspec</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exercise Ruby - Reduce ranges - d'autres solutions]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/07/02/exercise-ruby-reduce-ranges-dautres-solutions/"/>
    <updated>2014-07-02T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/07/02/exercise-ruby-reduce-ranges-dautres-solutions</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier j&#8217;ai proposé <a href="http://lkdjiin.github.io/blog/2014/07/01/exercise-ruby-reduce-ranges-une-solution/">une solution</a> à cet exercise de <a href="http://lkdjiin.github.io/blog/2014/06/30/exercice-ruby-reduce-ranges/">Range reduce</a>.
Bien qu&#8217;élégante (du moins pour moi), elle prenait vraiment trop de temps par
rapport à l&#8217;originale. En voici d&#8217;autres. Meilleures ?</p>

<!-- more -->


<p>Pour rappel, voici l&#8217;originale:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">original</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>  <span class="n">arr</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">el</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">range_index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">prev</span> <span class="o">=</span> <span class="n">el</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">arr</span><span class="o">[</span><span class="n">range_index</span><span class="o">]</span> <span class="o">==</span> <span class="n">prev</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">prev</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">range_index</span><span class="o">]</span>
</span><span class='line'>      <span class="n">range_index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">[</span><span class="n">index</span><span class="o">.</span><span class="n">.range_index</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">.arr</span><span class="o">[</span><span class="n">range_index</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">==</span> <span class="n">range_index</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici ma solution d&#8217;hier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">range_reduce</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">previous</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">slice_before</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>    <span class="n">previous</span><span class="p">,</span> <span class="n">previous2</span> <span class="o">=</span> <span class="n">element</span><span class="p">,</span> <span class="n">previous</span>
</span><span class='line'>    <span class="n">previous2</span><span class="o">.</span><span class="n">succ</span> <span class="o">!=</span> <span class="n">element</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>    <span class="n">element</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">element</span><span class="o">.</span><span class="n">first</span> <span class="p">:</span> <span class="n">element</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">.element</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant, voici celle que j&#8217;ai eu en tête toute la journée:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">range_reduce_1</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">temp</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">&lt;&lt;</span> <span class="n">element</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">temp</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">element</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">&lt;&lt;</span> <span class="n">element</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">temp</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">temp</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">temp</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">.temp</span><span class="o">.</span><span class="n">last</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="o">[</span><span class="n">element</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">temp</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">temp</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">temp</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">.temp</span><span class="o">.</span><span class="n">last</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est moche, hein ? Mais ne riez quand même pas trop, attendez de voir les
benchmarks ;)</p>

<p>Je me suis dis que j&#8217;allais aussi tester une solution <em>propre</em>, avec un
pattern que j&#8217;aime beaucoup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArrayReduce</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">ranges</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">array</span><span class="p">)</span><span class="o">.</span><span class="n">ranges</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@array</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>    <span class="vi">@result</span> <span class="o">=</span> <span class="o">[</span> <span class="o">[</span><span class="vi">@array</span><span class="o">.</span><span class="n">first</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ranges</span>
</span><span class='line'>    <span class="vi">@array</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>      <span class="n">suite?</span><span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="p">?</span> <span class="vi">@result</span><span class="o">.</span><span class="n">last</span> <span class="o">&lt;&lt;</span> <span class="n">element</span> <span class="p">:</span> <span class="vi">@result</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">element</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@result</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>      <span class="n">element</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">element</span><span class="o">.</span><span class="n">first</span> <span class="p">:</span> <span class="n">element</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">.element</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">suite?</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@result</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="n">element</span><span class="o">.</span><span class="n">pred</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici la solution qu&#8217;a posté un lecteur, Calyhre. J&#8217;ai pris la liberté de
la transformer en méthode, comme j&#8217;ai fait pour la solution originale qui
<em>monkey patch</em> la classe Array (<a href="https://gist.github.com/Calyhre/280ee41136ad2a62e6c3">solution originale de Calyhre</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">calyhre</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="n">results</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">&lt;&lt;</span> <span class="n">e</span> <span class="ow">and</span> <span class="k">next</span> <span class="k">if</span> <span class="n">temp</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="n">e</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">results</span> <span class="o">&lt;&lt;</span> <span class="p">(</span> <span class="n">temp</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">nil?</span> <span class="p">?</span> <span class="n">temp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">:</span> <span class="p">(</span><span class="n">temp</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">.temp</span><span class="o">.</span><span class="n">last</span><span class="p">)</span> <span class="p">)</span> <span class="k">unless</span> <span class="n">temp</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="o">[</span><span class="n">e</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">results</span> <span class="o">&lt;&lt;</span> <span class="p">(</span> <span class="n">temp</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">nil?</span> <span class="p">?</span> <span class="n">temp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">:</span> <span class="p">(</span><span class="n">temp</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">.temp</span><span class="o">.</span><span class="n">last</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Du coup, pour être équitable, il faudrait un autre benchmark pour les
<em>monkey patches</em> ! Peut-être plus tard.</p>

<p>Voici donc les résultats avec Ruby 2.1:</p>

<pre><code>$ 21:16 [~/devel/ruby/tests] (ruby-2.1.0) 
$ ruby range_reduce.rb 
Rehearsal --------------------------------------------------
original         0.690000   0.000000   0.690000 (  0.694524)
range_reduce     2.310000   0.000000   2.310000 (  2.305131)
range_reduce_1   0.650000   0.000000   0.650000 (  0.648863)
ArrayReduce      1.080000   0.000000   1.080000 (  1.088213)
Calyhre          0.680000   0.000000   0.680000 (  0.676048)
----------------------------------------- total: 5.410000sec

                     user     system      total        real
original         0.690000   0.000000   0.690000 (  0.692163)
range_reduce     2.250000   0.000000   2.250000 (  2.253139)
range_reduce_1   0.630000   0.000000   0.630000 (  0.636611)
ArrayReduce      1.050000   0.010000   1.060000 (  1.077018)
Calyhre          0.660000   0.000000   0.660000 (  0.662596)
</code></pre>

<p>Puis avec Rubinius 2.0:</p>

<pre><code>$ 21:19 [~/devel/ruby/tests] (rbx-2.0.0) 
$ ruby range_reduce.rb 
Rehearsal --------------------------------------------------
original         1.984124   0.004000   1.988124 (  1.994156)
range_reduce     3.220201   0.012001   3.232202 (  3.248281)
range_reduce_1   0.620038   0.000000   0.620038 (  0.775944)
ArrayReduce      1.156072   0.000000   1.156072 (  1.195206)
Calyhre          0.788049   0.000000   0.788049 (  1.007030)
----------------------------------------- total: 7.784485sec

                     user     system      total        real
original         1.008063   0.000000   1.008063 (  1.152041)
range_reduce     2.504157   0.020001   2.524158 (  2.525078)
range_reduce_1   0.320020   0.000000   0.320020 (  0.319301)
ArrayReduce      0.652041   0.000000   0.652041 (  0.653359)
Calyhre          0.352022   0.000000   0.352022 (  0.349252)
</code></pre>

<p>Ma méthode bien moche fonctionne plutôt bien ici :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2/'>Les tours de hanoi &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1/'>Les tours de Hanoi &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb/'>Un algorithme génétique pour les tours de Hanoi avec Opal.rb</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exercise Ruby : Reduce ranges - une solution]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/07/01/exercise-ruby-reduce-ranges-une-solution/"/>
    <updated>2014-07-01T21:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/07/01/exercise-ruby-reduce-ranges-une-solution</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je rappelle le sujet/énoncé : en partant de ce tableau:</p>

<pre><code>[1, 2, 3, 7, 9, 17, 18, 19, 20]
</code></pre>

<p>on doit obtenir celui-ci:</p>

<pre><code>[1..3, 7, 9, 17..20]
</code></pre>

<p>En y réflechissant un peu, je me suis demandé si le module <code>Enumerable</code>
offrait une méthode qui nous aiderait. Bingo ! J&#8217;ai trouvé la méthode
<code>slice_before</code>, que je n&#8217;avais jamais utilisé jusqu&#8217;ici. Voici donc ma
solution:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">range_reduce</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">previous</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">slice_before</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>    <span class="n">previous</span><span class="p">,</span> <span class="n">previous2</span> <span class="o">=</span> <span class="n">element</span><span class="p">,</span> <span class="n">previous</span>
</span><span class='line'>    <span class="n">previous2</span><span class="o">.</span><span class="n">succ</span> <span class="o">!=</span> <span class="n">element</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>    <span class="n">element</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">element</span><span class="o">.</span><span class="n">first</span> <span class="p">:</span> <span class="n">element</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">.element</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quand je la compare à la solution originale de l&#8217;auteur de la gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">original</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>  <span class="n">arr</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">el</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">range_index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">prev</span> <span class="o">=</span> <span class="n">el</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">arr</span><span class="o">[</span><span class="n">range_index</span><span class="o">]</span> <span class="o">==</span> <span class="n">prev</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">prev</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">range_index</span><span class="o">]</span>
</span><span class='line'>      <span class="n">range_index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">[</span><span class="n">index</span><span class="o">.</span><span class="n">.range_index</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="n">.arr</span><span class="o">[</span><span class="n">range_index</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">==</span> <span class="n">range_index</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je me dis que je préfère la mienne, que je la trouve plus claire. Et j&#8217;étais
à deux doigts de balancer ma belle solution dans une <em>Pull Request</em> à l&#8217;auteur,
quand je me suis dis que je ferais bien de faire un benchmark quand même.
Et là, <em>patatra</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">array1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bmbm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;mine&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="mi">100_000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">range_reduce</span><span class="p">(</span><span class="n">array1</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;original&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="mi">100_000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">original</span><span class="p">(</span><span class="n">array1</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>Rehearsal --------------------------------------------
mine       2.270000   0.000000   2.270000 (  2.270935)
original   0.710000   0.000000   0.710000 (  0.709436)
----------------------------------- total: 2.980000sec

               user     system      total        real
mine       2.320000   0.000000   2.320000 (  2.321878)
original   0.690000   0.000000   0.690000 (  0.692148)
</code></pre>

<p>Le score est sans appel ! Ma belle méthode sucre les fraises :(</p>

<p>Du coup j&#8217;ai bien envie de voir si je peux faire mieux que la méthode
originale ;) Soit en tentant d&#8217;améliorer ma méthode, soit en déroulant
un algorithme «à la C». On verra peut-être demain.</p>

<p>En attendant, vos solutions m&#8217;intéresse, n&#8217;hésitez pas à les envoyer dans
un commentaire.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2/'>Les tours de hanoi &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1/'>Les tours de Hanoi &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb/'>Un algorithme génétique pour les tours de Hanoi avec Opal.rb</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exercice Ruby : Reduce Ranges]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/30/exercice-ruby-reduce-ranges/"/>
    <updated>2014-06-30T21:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/30/exercice-ruby-reduce-ranges</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je suis tombé récemment sur une nouvelle gem, <a href="https://github.com/jacobaweiss/reduce_ranges">ReduceRanges</a>.</p>

<p>Le sujet de cette gem est de transformer ceci:</p>

<pre><code>[1, 2, 3, 7, 9, 17, 18, 19, 20]
</code></pre>

<p>en cela:</p>

<pre><code>[1..3, 7, 9, 17..20]
</code></pre>

<!-- more -->


<p>Au delà de l&#8217;intéret d&#8217;une telle gem (je n&#8217;ai pas vraiment de <em>use cases</em> à
proposer, si vous en connaissez, laissez moi donc un commentaire) j&#8217;ai trouvé
l&#8217;exercice intéressant.</p>

<p>Demain je vous proposerais ma solution. Si vous voulez jouer, ne regardez pas
le code de la gem et proposez moi le votre ici, où dans l&#8217;article de demain.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2/'>Les tours de hanoi &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1/'>Les tours de Hanoi &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb/'>Un algorithme génétique pour les tours de Hanoi avec Opal.rb</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique avec Opal.rb ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/29/un-algorithme-genetique-avec-opal-dot-rb/"/>
    <updated>2014-06-29T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/29/un-algorithme-genetique-avec-opal-dot-rb</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui c&#8217;est dimanche, pas d&#8217;article technique. Par contre une idée
pour la suite. Un algorithme génétique pour résoudre le jeu des tours de
Hanoi.</p>

<!-- more -->


<p>Ça fait longtemps que j&#8217;ai envie de faire un algorithme génétique en rapport
avec un jeu, où on pourrait visualiser de manière graphique et ludique
l&#8217;avancée de l&#8217;algorithme. J&#8217;ai déjà fait une tentative <em>graphique</em> en
utilisant javascript, mais le résultat n&#8217;a pas été à la hauteur de mes
espérances, même si ça fonctionnait. Avec Opal, je pourrais utiliser un
langage que je connais bien.</p>

<p>Je suis pressé de commencer ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/07/06/les-tours-de-hanoi-partie-2/'>Les tours de hanoi &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/05/les-tours-de-hanoi-partie-1/'>Les tours de Hanoi &ndash; partie 1</a></li><li><a href='http://lkdjiin.github.io/blog/2014/07/04/un-algorithme-genetique-pour-les-tours-de-hanoi-avec-opal-dot-rb/'>Un algorithme génétique pour les tours de Hanoi avec Opal.rb</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un nouveau dépot pour les plugins Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/28/un-nouveau-depot-pour-les-plugins-vim/"/>
    <updated>2014-06-28T21:13:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/28/un-nouveau-depot-pour-les-plugins-vim</id>
    <content type="html"><![CDATA[<p>Un nouveau dépot pour plugins Vim est disponible ici : <a href="http://vimawesome.com/">vimawesome</a>.</p>

<!-- more -->


<p>L&#8217;interface tranche radicalement avec celle de vim.org, et ça fait du bien.</p>

<p>Le code du site est disponible sur Github : <a href="https://github.com/divad12/vim-awesome">wim-awesome</a>
et nous sommes tous invités à contribuer ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/08/trois-bibliotheques-de-fonctions-pour-ecrire-vos-plugins-vim/'>Trois bibliothèques de fonctions pour écrire vos plugins Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/'>Plugin vim-refactor pour Ruby</a></li><li><a href='http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/'>Vim &ndash; Un plugin pour markdown &ndash; partie 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 16]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/"/>
    <updated>2014-06-27T21:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Hier on a vu comment lancer une appli rack pour le développement. Seulement
je n&#8217;ai pas envie de choisir entre les deux méthodes. Je veux les deux !
Le serveur rack pour le développement, et le build classique du fichier
javascript pour la mise en production.</p>

<p>On va se bricoler deux tâches <code>rake</code> en quelques minutes pour obtenir ça.</p>

<!-- more -->


<p>Alors j&#8217;avertis tout de suite : le script n&#8217;est pas parfait. C&#8217;est malgré une
bonne base pour commencer.</p>

<p>Voici le nouveau <code>Rakefile</code>, dans lequel j&#8217;ai ajouté une tâche <code>development</code>
et une tâche <code>production</code>:</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;opal&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;opal-jquery&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Build our app to build.js&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">env</span> <span class="o">=</span> <span class="ss">Opal</span><span class="p">:</span><span class="ss">:Environment</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">env</span><span class="o">.</span><span class="n">append_path</span> <span class="s2">&quot;app&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;build.js&quot;</span><span class="p">,</span> <span class="s2">&quot;w+&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">out</span><span class="o">|</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;application&quot;</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Build app for production&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:production</span> <span class="o">=&gt;</span> <span class="ss">:build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cp</span> <span class="s1">&#39;app/templates/index_production.html&#39;</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Run development server&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cp</span> <span class="s1">&#39;app/templates/index_development.html&#39;</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span>
</span><span class='line'>  <span class="sb">`bundle exec rackup`</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour que le fichier <code>index.html</code> reflète le bon environnement, j&#8217;ai
ajouté un dossier <code>templates</code>, avec une version de chaque:</p>

<pre><code>$ tree app
app
├── application.rb
├── enemies.rb
├── enemy.rb
├── fire.rb
├── game.rb
├── player.rb
├── space_canvas.rb
└── templates
    ├── index_development.html
    └── index_production.html
</code></pre>

<p>Pour info, voici le contenu des templates:</p>

<figure class='code'><figcaption><span>app/templates/index_development.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.11.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;canvas</span> <span class="na">width=</span><span class="s">&quot;700&quot;</span> <span class="na">height=</span><span class="s">&quot;600&quot;</span> <span class="na">id=</span><span class="s">&quot;canvas&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;assets/application.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/templates/index_production.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.11.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;canvas</span> <span class="na">width=</span><span class="s">&quot;700&quot;</span> <span class="na">height=</span><span class="s">&quot;600&quot;</span> <span class="na">id=</span><span class="s">&quot;canvas&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;build.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors oui, les templates sont redondants. Et si on doit modifier le contenu
de <code>index.html</code>, il faudra faire la modification sur les deux templates.
J&#8217;avais prévenu que ça n&#8217;était pas parfait ;) Par contre, pour cette appli
c&#8217;est bien suffisant.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/22/un-space-invaders-in-opal-dot-rb-partie-13/'>Un space invaders in Opal.rb &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 15]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/"/>
    <updated>2014-06-26T21:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Vous en avez peut-être marre de tapez <code>rake build</code> à chaque petite
modification de votre code ? Moi, oui. En utilisant Sprockets, on peut
rendre le build automatique. Cool.</p>

<!-- more -->


<p>La marche à suivre est décrite dans la <a href="http://opalrb.org/docs/using_sprockets/">documentation d&#8217;Opal</a>.
Basiquement, on ajoute un fichier <code>config.ru</code> à la racine:</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">Opal</span><span class="p">:</span><span class="ss">:Server</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">append_path</span> <span class="s1">&#39;app&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">main</span> <span class="o">=</span> <span class="s1">&#39;application&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">index_path</span> <span class="o">=</span> <span class="s1">&#39;index.html&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et on change la localisation du script dans <code>index.html</code>:</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.11.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;canvas</span> <span class="na">width=</span><span class="s">&quot;700&quot;</span> <span class="na">height=</span><span class="s">&quot;600&quot;</span> <span class="na">id=</span><span class="s">&quot;canvas&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;assets/application.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après quoi on lance l&#8217;application rack:</p>

<pre><code>$ bundle exec rackup
</code></pre>

<p>Et votre appli est accessible à l&#8217;adresse <code>localhost:9292</code>.</p>

<p>Maintenant tout changement de code demande seulement un raffraichіssement
dans le navigateur.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/22/un-space-invaders-in-opal-dot-rb-partie-13/'>Un space invaders in Opal.rb &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Affichage de toutes les tâches rake]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake/"/>
    <updated>2014-06-25T20:54:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Hier je parlais des switchs <code>-T</code> et <code>-D</code> de l&#8217;executable <code>rake</code> pour
obtenir la liste des tâches, respectivement tronquées ou détaillées.</p>

<p>Aujourd&#8217;hui, pour ceux qui aurait la flemme de lire la sortie de
<code>rake --help</code>, c&#8217;est comment les obtenir <strong>toutes</strong>, car il y en a souvent
plus que l&#8217;on croit ;)</p>

<!-- more -->


<p>En effet, les switchs <code>-T</code> et <code>-D</code> n&#8217;affichent que les tâches possédant
une description. Et quand on débarque sur un projet Rails, ou Ruby, il
n&#8217;est pas rare qu&#8217;une petite armée de développeurs soient passés avant
vous en ajoutant plusieurs tâches bien utiles, mais sans description.</p>

<p>Pour en avoir la liste sans avoir à lire les nombreux fichiers <code>*.rake</code>,
il vous suffit d&#8217;utiliser le switch <code>--all</code>:</p>

<pre><code>$ rake --all -T
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake/'>Description détaillée des tâches rake</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement/'>Astuce Ruby &ndash; Utiliser les variables d&#8217;environnement</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb/'>Introduction à Opal.rb</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Description détaillée des tâches rake]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake/"/>
    <updated>2014-06-24T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vous savez certainement comment obtenir la liste des tâches <code>rake</code> disponibles
dans votre projet Rails ou dans votre gem Ruby. Il faut utiliser le switch
<code>-T</code>. Par exemple, à partir d&#8217;un projet Rails bidon:</p>

<pre><code>$ rake -T
rake about                              # List versions of all Rails framew...
rake assets:clean[keep]                 # Remove old compiled assets
rake assets:clobber                     # Remove compiled assets
rake assets:environment                 # Load asset compile environment
rake assets:precompile                  # Compile all the assets named in c...
rake cache_digests:dependencies         # Lookup first-level dependencies f...
rake cache_digests:nested_dependencies  # Lookup nested dependencies for TE...
rake db:create                          # Creates the database from DATABAS...
rake db:drop                            # Drops the database from DATABASE_...
</code></pre>

<!-- more -->


<p>Et il y en a quelques dizaines d&#8217;autres. Vous remarquez que certaines descriptions sont
tronquées, comme <code># Compile all the assets named in c...</code>. Lorsqu&#8217;il s&#8217;agit d&#8217;une
tâche qu&#8217;on ne connait pas très bien, on aimerait pouvoir lire la description
complête. Pour cela, il faut utiliser le switch <code>-D</code>:</p>

<pre><code>$ rake -D
rake about
    List versions of all Rails frameworks and the environment

rake assets:clean[keep]
    Remove old compiled assets

rake assets:clobber
    Remove compiled assets

rake assets:environment
    Load asset compile environment

rake assets:precompile
    Compile all the assets named in config.assets.precompile

rake cache_digests:dependencies
    Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)
</code></pre>

<p>Pour en savoir plus sur les switchs de rake, tapez <code>rake --help</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake/'>Affichage de toutes les tâches rake</a></li><li><a href='http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement/'>Astuce Ruby &ndash; Utiliser les variables d&#8217;environnement</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb/'>Introduction à Opal.rb</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 14]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/"/>
    <updated>2014-06-23T21:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Lorsque le joueur faisait feu, le tir prenait naissance dans le coin
supérieur gauche du joueur. On le voudrait plutôt au milieu.</p>

<!-- more -->


<p>Voici donc la nouvelle classe <code>Fire</code>:</p>

<figure class='code'><figcaption><span>app/fire.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fire</span>
</span><span class='line'>  <span class="no">SIDE</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>  <span class="no">DELTA</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">player</span><span class="o">.</span><span class="n">w</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="no">SIDE</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">w</span><span class="p">;</span> <span class="no">SIDE</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">h</span><span class="p">;</span> <span class="no">SIDE</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">color</span><span class="p">;</span> <span class="s2">&quot;white&quot;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_position</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">-=</span> <span class="no">DELTA</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans <code>initialize</code>, on calcule la position d&#8217;origine du tir par rapport
au joueur, passé en argument.</p>

<p>Il faut donc changer aussi la méthode <code>fire</code> de la classe <code>Game</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fire</span>
</span><span class='line'>    <span class="vi">@fires</span> <span class="o">&lt;&lt;</span> <span class="no">Fire</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@player</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, ça c&#8217;est fait. N&#8217;oubliez pas que le code est maintenant disponible
sur <a href="https://github.com/lkdjiin/space-invaders-in-opal-rb">Github</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/22/un-space-invaders-in-opal-dot-rb-partie-13/'>Un space invaders in Opal.rb &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders in Opal.rb - partie 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/22/un-space-invaders-in-opal-dot-rb-partie-13/"/>
    <updated>2014-06-22T13:42:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/22/un-space-invaders-in-opal-dot-rb-partie-13</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Voici un extrait de la classe <code>SpaceCanvas</code> actuelle:</p>

<figure class='code'><figcaption><span>app/space_canvas</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SpaceCanvas</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_player</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="n">player</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">w</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">h</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_enemy</span><span class="p">(</span><span class="n">enemy</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="n">enemy</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">w</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">h</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_fire</span><span class="p">(</span><span class="n">fire</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="n">fire</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">fire</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">fire</span><span class="o">.</span><span class="n">w</span><span class="p">,</span> <span class="n">fire</span><span class="o">.</span><span class="n">h</span><span class="p">,</span> <span class="n">fire</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas bien ! Le code est dupliqué, et si j&#8217;aime l&#8217;idée d&#8217;avoir trois méthodes
différentes, dont le nom est explicite, je ne veux pas avoir à réécrire
le même code chaque fois que j&#8217;ajouterais ce genre de méthode (<code>draw_ship</code>,
<code>draw_special_fire</code>, <code>draw_bomb</code>, etc).</p>

<!-- more -->


<p>La solution réside dans l&#8217;utilisation de <code>alias_method</code>:</p>

<figure class='code'><figcaption><span>app/space_canvas</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SpaceCanvas</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_object</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="n">object</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">object</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">object</span><span class="o">.</span><span class="n">w</span><span class="p">,</span> <span class="n">object</span><span class="o">.</span><span class="n">h</span><span class="p">,</span> <span class="n">object</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:draw_player</span><span class="p">,</span> <span class="ss">:draw_object</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:draw_enemy</span><span class="p">,</span> <span class="ss">:draw_object</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:draw_fire</span><span class="p">,</span> <span class="ss">:draw_object</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il n&#8217;y a plus de duplication, et l&#8217;ajout d&#8217;une nouvelle méthode se fait
simplement en ajoutant un nouvel alias.</p>

<p>Le code de cette série d&#8217;articles est désormais sur Github ici :
<a href="https://github.com/lkdjiin/space-invaders-in-opal-rb">space-invaders-in-opal-rb</a>,
et le jeu lui-même (du moins dans son état actuel, c&#8217;est à dire pas grand chose) est visible ici : <a href="http://lkdjiin.github.io/space-invaders-in-opal-rb/">http://lkdjiin.github.io/space-invaders-in-opal-rb/</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/21/un-space-invaders-avec-opal-dot-rb-partie-12/"/>
    <updated>2014-06-21T16:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/21/un-space-invaders-avec-opal-dot-rb-partie-12</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On commence aujourd&#8217;hui à ajouter les tirs du joueur. Le code que je vous
propose est un brouillon, qu&#8217;il faudra améliorer successivement.</p>

<p>D&#8217;abord dans la classe <code>Game</code>, j&#8217;ajoute un champ <code>@fires</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@canvas</span> <span class="o">=</span> <span class="no">SpaceCanvas</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@enemies</span> <span class="o">=</span> <span class="no">Enemies</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@canvas</span><span class="o">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@fires</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>On déclenchera la méthode <code>fire</code> lors d&#8217;un appui sur la barre d&#8217;espace (32):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">init_keyboard</span>
</span><span class='line'>    <span class="sx">%x(</span>
</span><span class='line'><span class="sx">      window.addEventListener(&quot;keydown&quot;,</span>
</span><span class='line'><span class="sx">        function(e) {</span>
</span><span class='line'><span class="sx">          if(e.keyCode == 32) { </span><span class="si">#{</span><span class="n">fire</span><span class="si">}</span><span class="sx"> }</span>
</span><span class='line'><span class="sx">          if(e.keyCode == 37) { </span><span class="si">#{</span><span class="vi">@player</span><span class="o">.</span><span class="n">move_left</span><span class="si">}</span><span class="sx"> }</span>
</span><span class='line'><span class="sx">          if(e.keyCode == 39) { </span><span class="si">#{</span><span class="vi">@player</span><span class="o">.</span><span class="n">move_right</span><span class="si">}</span><span class="sx"> }</span>
</span><span class='line'><span class="sx">        },</span>
</span><span class='line'><span class="sx">        false);</span>
</span><span class='line'><span class="sx">    )</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici la méthode <code>fire</code>, qui ajoute simplement un objet à la collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">fire</span>
</span><span class='line'>    <span class="vi">@fires</span> <span class="o">&lt;&lt;</span> <span class="no">Fire</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@player</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="vi">@player</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant une méthode qui met à jour les tirs du joueur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">update_fires</span>
</span><span class='line'>    <span class="vi">@fires</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">fire</span><span class="o">|</span>
</span><span class='line'>      <span class="n">fire</span><span class="o">.</span><span class="n">update_position</span>
</span><span class='line'>      <span class="vi">@canvas</span><span class="o">.</span><span class="n">draw_fire</span><span class="p">(</span><span class="n">fire</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@fires</span><span class="o">.</span><span class="n">select!</span> <span class="p">{</span><span class="o">|</span><span class="n">fire</span><span class="o">|</span> <span class="n">fire</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La dernière ligne de cette méthode supprime de la collection les tirs qui
ne sont plus visibles à l&#8217;écran.</p>

<p>Pour finir, voici la classe <code>Fire</code>:</p>

<figure class='code'><figcaption><span>app/fire.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fire</span>
</span><span class='line'>  <span class="no">WIDTH</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>  <span class="no">DELTA</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">w</span><span class="p">;</span> <span class="no">WIDTH</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">h</span><span class="p">;</span> <span class="no">WIDTH</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">color</span><span class="p">;</span> <span class="s2">&quot;white&quot;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_position</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">-=</span> <span class="no">DELTA</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout ce code pose un certain nombre de problèmes sur lesquels je reviendrais
dans les prochains jours. Demain je pense que je mettrais le code sur Github.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/20/un-space-invaders-avec-opal-dot-rb-partie-11/"/>
    <updated>2014-06-20T21:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/20/un-space-invaders-avec-opal-dot-rb-partie-11</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je continue le refactoring de la méthode <code>update</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">||</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">w</span> <span class="o">&gt;=</span> <span class="mi">690</span>
</span><span class='line'>        <span class="n">change_enemies_direction</span>
</span><span class='line'>        <span class="n">enemies_down</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">enemy</span><span class="o">|</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="vi">@direction</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;aime pas la condition multiple après le <code>if</code>. Je préfère:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">enemy</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">side?</span><span class="p">(</span><span class="n">enemy</span><span class="p">)</span>
</span><span class='line'>        <span class="n">change_enemies_direction</span>
</span><span class='line'>        <span class="n">enemies_down</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">enemy</span><span class="o">|</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="vi">@direction</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est bien mieux. La définition de la méthode <code>side?</code> pourrait être:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">side?</span><span class="p">(</span><span class="n">enemy</span><span class="p">)</span>
</span><span class='line'>    <span class="n">enemy</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">||</span> <span class="n">enemy</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">enemy</span><span class="o">.</span><span class="n">w</span> <span class="o">&gt;=</span> <span class="mi">690</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais il reste des nombres magiques. En particulier le nombre 690, qui
signifie 10 pixel <em>avant</em> la largeur du canvas. J&#8217;ai donc besoin d&#8217;ajouter
ces notions à la classe <code>Enemies</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Enemies</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'>  <span class="no">ENEMIES_PER_ROW</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="no">SIDE_MARGIN</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">world_width</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@world_width</span> <span class="o">=</span> <span class="n">world_width</span>
</span><span class='line'>    <span class="o">.</span>
</span><span class='line'>    <span class="o">.</span>
</span><span class='line'>    <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>side?</code> devient donc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">side?</span><span class="p">(</span><span class="n">enemy</span><span class="p">)</span>
</span><span class='line'>    <span class="n">enemy</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="no">SIDE_MARGIN</span> <span class="o">||</span> <span class="n">enemy</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">enemy</span><span class="o">.</span><span class="n">w</span> <span class="o">&gt;=</span> <span class="vi">@world_width</span> <span class="o">-</span> <span class="no">SIDE_MARGIN</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pas encore le top, mais ça ira pour l&#8217;instant. On voir pouvoir
ajouter quelques nouvelles fonctionnalités.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/19/un-space-invaders-avec-opal-dot-rb-partie-10/"/>
    <updated>2014-06-19T21:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/19/un-space-invaders-avec-opal-dot-rb-partie-10</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Le code suivant ne me convient toujours pas :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">enemy</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@direction</span> <span class="o">==</span> <span class="ss">:left</span> <span class="p">?</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move_left</span> <span class="p">:</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move_right</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pourquoi ne pas dire
simplement à la classe <code>Enemy</code> ce qu&#8217;elle doit faire en une seule fois:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">enemy</span><span class="o">|</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="vi">@direction</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>C&#8217;est quand même bien plus simple ! Bien sûr, pour que ça fonctionne il
faut ajouter une méthode à la classe <code>Enemy</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">direction</span> <span class="o">==</span> <span class="ss">:left</span> <span class="p">?</span> <span class="n">move_left</span> <span class="p">:</span> <span class="n">move_right</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et tant qu&#8217;on y est, on fait pareil avec la méthode <code>enemies_down</code>.</p>

<p>Avant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">enemies_down</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">enemies_down</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:move_down</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et on ajoute ceci à <code>Enemy</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">move_down</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">+=</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour terminer cet article,
voici le code des classes <code>Enemy</code> et <code>Enemies</code>:</p>

<figure class='code'><figcaption><span>app/enemy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Enemy</span>
</span><span class='line'>  <span class="no">DELTA</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:w</span><span class="p">,</span> <span class="ss">:h</span><span class="p">,</span> <span class="ss">:color</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="vi">@w</span> <span class="o">=</span> <span class="n">w</span>
</span><span class='line'>    <span class="vi">@h</span> <span class="o">=</span> <span class="n">h</span>
</span><span class='line'>    <span class="vi">@color</span> <span class="o">=</span> <span class="n">color</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_left</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">-=</span> <span class="no">DELTA</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_right</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">+=</span> <span class="no">DELTA</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span>
</span><span class='line'>    <span class="n">direction</span> <span class="o">==</span> <span class="ss">:left</span> <span class="p">?</span> <span class="n">move_left</span> <span class="p">:</span> <span class="n">move_right</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_down</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">+=</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/enemies.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Enemies</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'>  <span class="no">ENEMIES_PER_ROW</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@enemies</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:right</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="s1">&#39;#0000ff&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="s1">&#39;#0000dd&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">180</span><span class="p">,</span> <span class="s1">&#39;#0000bb&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span> <span class="s1">&#39;#000099&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="s1">&#39;#000077&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">||</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">w</span> <span class="o">&gt;=</span> <span class="mi">690</span>
</span><span class='line'>        <span class="n">change_enemies_direction</span>
</span><span class='line'>        <span class="n">enemies_down</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">enemy</span><span class="o">|</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="vi">@direction</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_enemies_direction</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@direction</span> <span class="o">==</span> <span class="ss">:left</span>
</span><span class='line'>      <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:right</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:left</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enemies_down</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:move_down</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="no">ENEMIES_PER_ROW</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@enemies</span> <span class="o">&lt;&lt;</span> <span class="no">Enemy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">60</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il reste encore un peu de travail…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/18/un-space-invaders-avec-opal-dot-rb-partie-9/"/>
    <updated>2014-06-18T21:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/18/un-space-invaders-avec-opal-dot-rb-partie-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Le code que j&#8217;ai posté hier, pour gérer le déplacement des envahisseurs,
a été écrit vite et sans trop de réflexion. Il nécessite donc un <del>petit</del>
gros coup de refactoring.</p>

<!-- more -->


<p>Le pire morceau, tout du moins celui qui me saute aux yeux ce soir, est
la méthode <code>update</code> de la classe <code>Enemies</code>. C&#8217;est le genre de chose que je
ne laisserais jamais passer au boulot, par exemple. C&#8217;est un concentré de
mauvais code et de <em>code smells</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">||</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">w</span> <span class="o">&gt;=</span> <span class="mi">690</span>
</span><span class='line'>        <span class="n">change_enemies_direction</span>
</span><span class='line'>        <span class="n">enemies_down</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@direction</span> <span class="o">==</span> <span class="ss">:left</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais m&#8217;occuper d&#8217;abord de la seconde partie, celle qui déplace les
envahisseurs à droite ou à gauche:</p>

<pre><code>@enemies.each do |e|
  if @direction == :left
    e.x = e.x - 2
  else
    e.x = e.x + 2
  end
end
</code></pre>

<p>Comme on a des méthodes <code>move_left</code> et <code>move_right</code> pour la classe <code>Player</code>,
pourquoi ne pas faire pareil avec la classe <code>Enemy</code> ? Voici donc une
nouvelle écriture de la classe <code>Enemy</code>:</p>

<figure class='code'><figcaption><span>app/enemy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Enemy</span>
</span><span class='line'>  <span class="no">DELTA</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:w</span><span class="p">,</span> <span class="ss">:h</span><span class="p">,</span> <span class="ss">:color</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="vi">@w</span> <span class="o">=</span> <span class="n">w</span>
</span><span class='line'>    <span class="vi">@h</span> <span class="o">=</span> <span class="n">h</span>
</span><span class='line'>    <span class="vi">@color</span> <span class="o">=</span> <span class="n">color</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_left</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">-=</span> <span class="no">DELTA</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_right</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">+=</span> <span class="no">DELTA</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on la compare avec la classe <code>Player</code>, on s&#8217;aperçoit qu&#8217;elles sont
bien trop similaires. Mais on verra ça plus tard, retournons à
<code>Enemies#update</code>.</p>

<p>Avant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@direction</span> <span class="o">==</span> <span class="ss">:left</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@enemies</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">enemy</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@direction</span> <span class="o">==</span> <span class="ss">:left</span> <span class="p">?</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move_left</span> <span class="p">:</span> <span class="n">enemy</span><span class="o">.</span><span class="n">move_right</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;utilise <code>map</code> au lieu de <code>each</code>, qui marque mieux l&#8217;intention de modifier
la collection. L&#8217;argument <code>e</code>, illisible, est devenu <code>enemy</code>, clair. Et
grâce à <code>move_left</code> et <code>move_right</code>, les messages envoyés à un objet
<code>Enemy</code> sont plus simples. On s&#8217;est aussi débarrassé d&#8217;un nombre magique.</p>

<p>OK, c&#8217;est bien mieux. Mais y a encore un truc qui me dérange profondément.
Vous voyez ce que je veux dire ? Non ? Alors rendez-vous demain ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/17/un-space-invaders-avec-opal-dot-rb-partie-8/"/>
    <updated>2014-06-17T21:08:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/17/un-space-invaders-avec-opal-dot-rb-partie-8</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Comme promis, on ajoute aujourd&#8217;hui les envahisseurs. Mais comme j&#8217;ai une
petite flemme ce soir, il y aura peu d&#8217;explications ;) De plus le code est
un premier jet…</p>

<p>Quoiqu&#8217;il en soit, c&#8217;est parti.</p>

<!-- more -->


<p>La classe <code>Enemy</code>:</p>

<figure class='code'><figcaption><span>app/enemy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Enemy</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:w</span><span class="p">,</span> <span class="ss">:h</span><span class="p">,</span> <span class="ss">:color</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="vi">@w</span> <span class="o">=</span> <span class="n">w</span>
</span><span class='line'>    <span class="vi">@h</span> <span class="o">=</span> <span class="n">h</span>
</span><span class='line'>    <span class="vi">@color</span> <span class="o">=</span> <span class="n">color</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe <code>Enemies</code>, pour gérer une collection d&#8217;envahisseurs:</p>

<figure class='code'><figcaption><span>app/enemies.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Enemies</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'>  <span class="no">ENEMIES_PER_ROW</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@enemies</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:right</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="s1">&#39;#0000ff&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="s1">&#39;#0000dd&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">180</span><span class="p">,</span> <span class="s1">&#39;#0000bb&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span> <span class="s1">&#39;#000099&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">build</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="s1">&#39;#000077&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">||</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">w</span> <span class="o">&gt;=</span> <span class="mi">690</span>
</span><span class='line'>        <span class="n">change_enemies_direction</span>
</span><span class='line'>        <span class="n">enemies_down</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@direction</span> <span class="o">==</span> <span class="ss">:left</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_enemies_direction</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@direction</span> <span class="o">==</span> <span class="ss">:left</span>
</span><span class='line'>      <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:right</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:left</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enemies_down</span>
</span><span class='line'>    <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="no">ENEMIES_PER_ROW</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@enemies</span> <span class="o">&lt;&lt;</span> <span class="no">Enemy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">60</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe <code>Game</code>, remaniée:</p>

<figure class='code'><figcaption><span>app/game.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@canvas</span> <span class="o">=</span> <span class="no">SpaceCanvas</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@enemies</span> <span class="o">=</span> <span class="no">Enemies</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>    <span class="n">init_keyboard</span>
</span><span class='line'>    <span class="n">main_loop</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@canvas</span><span class="o">.</span><span class="n">clear_background</span>
</span><span class='line'>      <span class="vi">@canvas</span><span class="o">.</span><span class="n">draw_player</span><span class="p">(</span><span class="vi">@player</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@enemies</span><span class="o">.</span><span class="n">update</span>
</span><span class='line'>      <span class="vi">@enemies</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="vi">@canvas</span><span class="o">.</span><span class="n">draw_enemy</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">main_loop</span><span class="p">(</span><span class="n">interval</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="sb">`setInterval(</span><span class="si">#{</span><span class="n">block</span><span class="o">.</span><span class="n">to_n</span><span class="si">}</span><span class="sb">, </span><span class="si">#{</span><span class="n">interval</span><span class="si">}</span><span class="sb">)`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">init_keyboard</span>
</span><span class='line'>    <span class="sx">%x(</span>
</span><span class='line'><span class="sx">      window.addEventListener(&quot;keydown&quot;,</span>
</span><span class='line'><span class="sx">        function(e) {</span>
</span><span class='line'><span class="sx">          if(e.keyCode == 37) { </span><span class="si">#{</span><span class="vi">@player</span><span class="o">.</span><span class="n">move_left</span><span class="si">}</span><span class="sx"> }</span>
</span><span class='line'><span class="sx">          if(e.keyCode == 39) { </span><span class="si">#{</span><span class="vi">@player</span><span class="o">.</span><span class="n">move_right</span><span class="si">}</span><span class="sx"> }</span>
</span><span class='line'><span class="sx">        },</span>
</span><span class='line'><span class="sx">        false);</span>
</span><span class='line'><span class="sx">    )</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe <code>SpaceCanvas</code>, avec sa nouvelle méthode <code>draw_enemy</code>:</p>

<figure class='code'><figcaption><span>app/space_canvas.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SpaceCanvas</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@canvas</span>  <span class="o">=</span> <span class="sb">`document.getElementById(&#39;canvas&#39;)`</span>
</span><span class='line'>    <span class="vi">@context</span> <span class="o">=</span> <span class="sb">`</span><span class="si">#@canvas</span><span class="sb">.getContext(&#39;2d&#39;)`</span>
</span><span class='line'>    <span class="vi">@height</span>  <span class="o">=</span> <span class="sb">`</span><span class="si">#@canvas</span><span class="sb">.height`</span>
</span><span class='line'>    <span class="vi">@width</span>   <span class="o">=</span> <span class="sb">`</span><span class="si">#@canvas</span><span class="sb">.width`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">clear_background</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="vi">@width</span><span class="p">,</span> <span class="vi">@height</span><span class="p">,</span> <span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_player</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="n">player</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">w</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">h</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_enemy</span><span class="p">(</span><span class="n">enemy</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_rect</span><span class="p">(</span><span class="n">enemy</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">w</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">h</span><span class="p">,</span> <span class="n">enemy</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_rect</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
</span><span class='line'>    <span class="sb">`</span><span class="si">#@context</span><span class="sb">.fillStyle = </span><span class="si">#{</span><span class="n">color</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="sb">`</span><span class="si">#@context</span><span class="sb">.fillRect(</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="sb">, </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="sb">, </span><span class="si">#{</span><span class="n">w</span><span class="si">}</span><span class="sb">, </span><span class="si">#{</span><span class="n">h</span><span class="si">}</span><span class="sb">)`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et enfin <code>application.rb</code>, qui inclus les nouvelles classes:</p>

<figure class='code'><figcaption><span>app/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;opal&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;opal-jquery&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;space_canvas&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;player&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;game&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;enemy&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;enemies&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">game</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, il y aura surement un petit travail de refactoring à faire
prochainement ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2014/06/27/un-space-invaders-avec-opal-dot-rb-partie-16/'>Un space invaders avec Opal.rb &ndash; partie 16</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/26/un-space-invaders-avec-opal-dot-rb-partie-15/'>Un space invaders avec Opal.rb &ndash; partie 15</a></li><li><a href='http://lkdjiin.github.io/blog/2014/06/23/un-space-invaders-avec-opal-dot-rb-partie-14/'>Un space invaders avec Opal.rb &ndash; partie 14</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
