<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-05-14T20:31:09+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un exemple de polymorphisme en situation réelle]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle/"/>
    <updated>2015-05-14T19:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-3">Niveau : <span>avancé</span></div>

<p>J’écris en ce moment un <a href="http://fr.wikipedia.org/wiki/%C3%89mulation">émulateur</a>
pour <a href="http://fr.wikipedia.org/wiki/CHIP-8">Chip-8</a>, en Ruby. Dans les outils que
j’écris à coté il y a un <a href="http://fr.wikipedia.org/wiki/D%C3%A9sassembleur">désassembleur</a> de code Chip-8. Dans ce
désassembleur il y a un bel exemple de polymorphisme.</p>

<!-- more -->

<h2 id="un-peu-de-contexte">Un peu de contexte</h2>

<p>La classe Opcode permet de faire la correspondance entre un <a href="http://fr.wikipedia.org/wiki/Langage_machine#Opcode">opcode</a> Chip-8
et une ligne de code assembleur. Un opcode Chip-8 est toujours représenté par
un nombre <a href="http://fr.wikipedia.org/wiki/Syst%C3%A8me_hexad%C3%A9cimal">hexadécimal</a> de 4 chiffres.</p>

<p>Voici quelques exemples d’opcodes et leur correspondance en assembleur :</p>

<pre><code>Opcode | Assembleur  | Remarque
-------|-------------|---------
2a00   | CALL a00    |
7012   | ADD V0, 12  | V0 est un registre
a22e   | LOAD I, 22e | I est un registre
</code></pre>

<p>On pourra remarquer (même si ça n’est pas ultra visible avec seulement trois
exemples) que c’est le premier chiffre (ici <code>2</code>, <code>7</code> et <code>a</code>) qui décide du
type d’instruction.</p>

<p>De <code>0</code> à <code>f</code>, on a donc 16 types possibles, ce qui donne ce genre de code :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>opcode.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Opcode</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@opcode</span> <span class="o">=</span> <span class="n">opcode</span>
</span><span class="line">    <span class="vi">@assembly</span> <span class="o">=</span> <span class="n">compute_assembly</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">compute_assembly</span>
</span><span class="line">    <span class="k">case</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;0&#39;</span> <span class="k">then</span> <span class="s2">&quot;Return this code&quot;</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;1&#39;</span> <span class="k">then</span> <span class="s2">&quot;Return that code&quot;</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;2&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;d&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;e&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;f&#39;</span> <span class="k">then</span> <span class="c1"># ...</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>De plus, certains type d’instruction sont partagés en sous type, selon le
quatrième chiffre, ou bien selon les troisième et quatrième, ça dépend. Comme
toujours, on se retrouve à devoir gérer des cas particuliers, et le code
ressemble rapidement à la monstruosité qui suit :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">compute_assembly</span>
</span><span class="line">  <span class="k">case</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@opcode</span> <span class="o">==</span> <span class="s1">&#39;00e0&#39;</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">elsif</span> <span class="vi">@opcode</span> <span class="o">==</span> <span class="s1">&#39;00ee&#39;</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;1&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;2&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;3&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;4&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;5&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;6&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;7&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;8&#39;</span>
</span><span class="line">    <span class="k">case</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;0&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;1&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;2&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;3&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;4&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;5&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;6&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;7&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">when</span> <span class="s1">&#39;e&#39;</span> <span class="k">then</span> <span class="c1"># do that</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="c1"># do that</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;9&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;a&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;b&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;c&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;d&#39;</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;e&#39;</span>
</span><span class="line">    <span class="c1"># Ici, encore 2 sous-groupes</span>
</span><span class="line">  <span class="k">when</span> <span class="s1">&#39;f&#39;</span>
</span><span class="line">    <span class="c1"># Ici, encore 10 autres sous-groupes</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est pas bon, hein ? Pour arranger ça, rien de tel qu’un peu de polymorphisme.
La classe Opcode va donc se contenter de ceci :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Opcode</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">      <span class="n">asm</span> <span class="o">=</span> <span class="no">Assembly</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@assembly</span> <span class="o">=</span> <span class="n">asm</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous devinez que c’est maintenant dans une nouvelle classe <code>Assembly</code> que sont géré les différentes
instructions et sous instructions :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Assembly</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Assembly</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@opcode</span> <span class="o">=</span> <span class="n">opcode</span>
</span><span class="line">    <span class="vi">@assembly</span> <span class="o">=</span> <span class="n">build_assembly</span><span class="o">.</span><span class="n">to_s</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class="line">    <span class="vi">@assembly</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">build_assembly</span>
</span><span class="line">    <span class="n">klass</span> <span class="o">=</span> <span class="no">Kernel</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="s1">&#39;Asm&#39;</span> <span class="o">+</span> <span class="vi">@opcode</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@opcode</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et bien non, elles sont gérées chacune dans sa classe respective, à savoir
<code>Asm0</code>, <code>Asm1</code>, <code>Asm2</code>, et cetera jusqu’à <code>Asmf</code>. Voici un exemple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>asm2.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Asm2</span> <span class="o">&lt;</span> <span class="no">AsmBase</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class="line">    <span class="s2">&quot;CALL </span><span class="si">#{</span><span class="n">nnn</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Chacune des classes <code>Asm0</code> à <code>Asmf</code> hérite de <code>AsmBase</code> qui définit le
comportement commun (nnn, kk, x et y sont simplement des conventions de nommage en
assembleur Chip-8) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>asm_base.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">AsmBase</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@opcode</span> <span class="o">=</span> <span class="n">opcode</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">nnn</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">kk</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">x</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">y</span>
</span><span class="line">    <span class="vi">@opcode</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est un cas classique d’utilisation du polymorphisme. On troque
un long switch/case (virtuellement infini) pour plusieurs petites classes simples.
Le système est toujours aussi complexe dans son ensemble, mais sa maintenance
est maintenant plus facile.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2013/11/24/utiliser-vim-comme-un-tableur-sur-linux-enfin-presque/">Utiliser Vim comme un tableur sur Linux (enfin presque)</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby/">Le hack FizzBuzz en Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment convertir un nombre décimal en binaire en Bash ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/"/>
    <updated>2015-05-02T12:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Pour convertir un nombre décimal en binaire, en Bash, suivez ce tweet :
<a href="https://twitter.com/climagic/status/593842202314420224">https://twitter.com/climagic/status/593842202314420224</a>.</p>

<p>Et voici la conversion du décimal 27 en son équivalent binaire :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alors, comment ça marche ?</p>

<p><img class="center" src="http://lkdjiin.github.io/images/binary.jpg" /></p>

<!-- more -->

<p>Pour commencer, voici comment faire un tableau en bash, qui va contenir les 3
chaînes <code>foo</code>, <code>bar</code>, et <code>baz</code>. Ne soyez pas surpris par le manque de guillemets
autour des chaînes, Bash est fait pour traiter du texte.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ myarray</span><span class="o">=(</span>foo bar baz<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voici comment afficher le contenu de ce tableau.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">foo bar baz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On peut bien sûr accéder aux éléments du tableau séparément :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[0]</span><span class="k">}</span>
</span><span class="line">foo
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[1]</span><span class="k">}</span>
</span><span class="line">bar
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">myarray</span><span class="p">[2]</span><span class="k">}</span>
</span><span class="line">baz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour connaître la taille d’un tableau, voici la syntaxe :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${#</span><span class="nv">myarray</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Appliquons ce nouveau savoir au tableau <code>Dec2Bin</code>, qui contient…</p>

<p>…</p>

<p>…des trucs :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Combien a-t-il d’éléments ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${#</span><span class="nv">Dec2Bin</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">256
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>256 ? Et ça ressemble à quoi ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000
</span><span class="line">00001001 00001010 00001011 00001100 00001101 00001110 00001111 00010000 00010001
</span><span class="line">...
</span><span class="line">11101010 11101011 11101100 11101101 11101110 11101111 11110000 11110001 11110010
</span><span class="line">11110011 11110100 11110101 11110110 11110111 11111000 11111001 11111010 11111011
</span><span class="line">11111100 11111101 11111110 11111111
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Tranquille, <code>Dec2Bin</code> est un tableau qui contient 256 chaînes représentant les
nombres binaires de 0 à 255.</p>

<p>Les crochets <code>{}</code> créent un <em>range</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{</span>0..1<span class="o">}</span>
</span><span class="line">0 1
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{</span>a..f<span class="o">}</span>
</span><span class="line">a b c d e f
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Plusieurs crochets <code>{}</code> les uns à la suite des autres produisent toutes les
permutations possibles :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{</span>0..1<span class="o">}{</span>0..1<span class="o">}</span>
</span><span class="line">00 01 10 11
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et on peut mettre tout ça dans un tableau :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ a</span><span class="o">=({</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">a</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">0 1
</span><span class="line"><span class="nv">$ a</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">a</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">00 01 10 11
</span><span class="line"><span class="nv">$ a</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">a</span><span class="p">[@]</span><span class="k">}</span>
</span><span class="line">000 001 010 011 100 101 110 111
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et voilà, il faut encore savoir qu’ici, le point-virgule sert à joindre 2 lignes de
code en une seule :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bonus-1---le-mme-en-hexadcimal">Bonus 1 - Le même en hexadécimal</h2>

<p>Et si on voulait convertir un nombre décimal en hexadécimal plutôt qu’en
binaire ? Il faudrait générer toutes les permutations entre deux suites
<code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}}{{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}}</span>
</span><span class="line">00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A
</span><span class="line">1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35
</span><span class="line">36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50
</span><span class="line">51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B
</span><span class="line">6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86
</span><span class="line">87 88 89 8A 8B 8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F A0 A1
</span><span class="line">A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC
</span><span class="line">BD BE BF C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7
</span><span class="line">D8 D9 DA DB DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF F0 F1 F2
</span><span class="line">F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Hex</span><span class="o">=({{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}}{{</span>0..9<span class="o">}</span>,<span class="o">{</span>A..F<span class="o">}})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Hex</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">1B
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bonus-2---le-mme-en-ruby">Bonus 2 - Le même en Ruby</h2>

<p>On peut faire la même chose en Ruby en utilisant <code>repeated_permutation</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">repeated_permutation</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">join</span><span class="p">}</span>
</span><span class="line"><span class="go">00000000</span>
</span><span class="line"><span class="go">00000001</span>
</span><span class="line"><span class="go">00000010</span>
</span><span class="line"><span class="go">00000011</span>
</span><span class="line"><span class="go">00000100</span>
</span><span class="line"><span class="go">00000101</span>
</span><span class="line"><span class="go">...</span>
</span><span class="line"><span class="go">11111010</span>
</span><span class="line"><span class="go">11111011</span>
</span><span class="line"><span class="go">11111100</span>
</span><span class="line"><span class="go">11111101</span>
</span><span class="line"><span class="go">11111110</span>
</span><span class="line"><span class="go">11111111</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Il peut-être intéressant de comparer les deux versions :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ruby -e <span class="s2">&quot;puts [0,1].repeated_permutation(8).to_a[27].join&quot;</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">}{</span>0..1<span class="o">})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bonus-3---encore-plus-court">Bonus 3 - Encore plus court</h2>

<p>Pour finir, on peut faire plus court avec Bash en utilisant <code>{0,1}</code> au lieu de
<code>{0..1}</code> puisqu’il y a seulement deux éléments :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ Dec2Bin</span><span class="o">=({</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">}{</span>0,1<span class="o">})</span>;<span class="nb">echo</span> <span class="k">${</span><span class="nv">Dec2Bin</span><span class="p">[27]</span><span class="k">}</span>
</span><span class="line">00011011
</span></code></pre></td></tr></table></div></figure></notextile></div>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/">Remplacer Sed et Awk par Ruby: Un dernier exemple</a></li><li><a href="http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/">Remplacer Sed et Awk par Ruby 8: Script sur la ligne de commande</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby/">Le hack FizzBuzz en Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le hack FizzBuzz en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby/"/>
    <updated>2015-04-30T17:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>Voici ce qui trainait sur le net aujourd’hui, un jeu de
<a href="http://en.wikipedia.org/wiki/Fizz_buzz">FizzBuzz</a> en une ligne de Ruby:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">){</span><span class="o">|</span><span class="n">n</span><span class="o">|</span><span class="nb">puts</span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="o">=</span><span class="n">n</span><span class="o">**</span><span class="mi">4</span><span class="o">%-</span><span class="mi">15</span><span class="p">,</span><span class="n">o</span><span class="o">+</span><span class="mi">13</span><span class="o">]||</span><span class="n">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce qui donne:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ruby -e <span class="s2">&quot;1.upto(100){|n|puts&#39;FizzBuzz &#39;[o=n**4%-15,o+13]||n}&quot;</span>
</span><span class="line">1
</span><span class="line">2
</span><span class="line">Fizz
</span><span class="line">4
</span><span class="line">Buzz
</span><span class="line">Fizz
</span><span class="line">7
</span><span class="line">8
</span><span class="line">Fizz
</span><span class="line">Buzz
</span><span class="line">11
</span><span class="line">.
</span><span class="line">.
</span><span class="line">.
</span><span class="line">94
</span><span class="line">Buzz
</span><span class="line">Fizz
</span><span class="line">97
</span><span class="line">98
</span><span class="line">Fizz
</span><span class="line">Buzz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour celles et ceux qui ne pigent pas cette ligne de code Ruby, on va la
déconstruire petit à petit.</p>

<!-- more -->

<p>Nous avons affaire à une boucle (j’ai remplacé les <code>{}</code> par <code>do end</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="o">=</span><span class="n">n</span><span class="o">**</span><span class="mi">4</span><span class="o">%-</span><span class="mi">15</span><span class="p">,</span><span class="n">o</span><span class="o">+</span><span class="mi">13</span><span class="o">]||</span><span class="n">n</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>a.upto(b)</code> itère de <code>a</code> jusqu’à <code>b</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">iteration</span><span class="o">|</span>
</span><span class="line"><span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="n">iteration</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class="line"><span class="go">10</span>
</span><span class="line"><span class="go">11</span>
</span><span class="line"><span class="go">12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Regardons de plus près l’intérieur de la boucle, là où c’est intéressant.
Ruby permet d’appeler les
méthodes sans utiliser de parenthèses. Ici je les ai simplement rajouter pour
tenter de clarifier le code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span> <span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="o">=</span><span class="n">n</span><span class="o">**</span><span class="mi">4</span><span class="o">%-</span><span class="mi">15</span><span class="p">,</span><span class="n">o</span><span class="o">+</span><span class="mi">13</span><span class="o">]||</span><span class="n">n</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant qu’on est bien sûr qu’il s’agit de la méthode <code>puts</code> avec un
argument bizarre dedans, je sépare les différents éléments de la <em>grammaire de
Ruby</em> par des espaces. Toujours pour essayer d’y voir plus clair:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span> <span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span> <span class="o">=</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="n">o</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span> <span class="o">||</span> <span class="n">n</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Arrêtons nous un peu sur les sous-ensembles de chaîne <code>[a, b]</code>.
Le premier chiffre est la position de départ, le second est le nombre de
caractères:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;ab&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;de&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ruby permet de donner une position de départ pas rapport à la fin:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;cd&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour la suite, notez bien que si on va chercher des caractères <strong>avant</strong> le début ou <strong>après</strong> la fin de la chaîne, on se retrouve avec <code>nil</code>. Ça n’est pas une erreur, c’est le comportement attendu:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[-</span><span class="mi">123</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;abcdef&quot;</span><span class="o">[</span><span class="mi">999</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant essayons de décrypter la formule mathématique.
Utilisons une variable temporaire pour l’isoler:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line">  <span class="n">o</span> <span class="o">=</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">15</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span> <span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="n">o</span><span class="p">,</span> <span class="n">o</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span> <span class="o">||</span> <span class="n">n</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En Ruby, <code>**</code> est l’opérateur de puissance:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span> <span class="o">**</span> <span class="mi">2</span>
</span><span class="line"><span class="go">100</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span> <span class="o">**</span> <span class="mi">3</span>
</span><span class="line"><span class="go">1000</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="mi">10</span> <span class="o">**</span> <span class="mi">4</span>
</span><span class="line"><span class="go">10000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Quant à <code>%</code>, c’est l’opérateur de la division modulaire, souvent appelé
<em>modulo</em>. Si vous avez plein de temps devant vous il y a la page wikipédia sur
<a href="http://fr.wikipedia.org/wiki/Arithm%C3%A9tique_modulaire">l’arithmétique modulaire</a>.
Sinon voici une explication rapide du modulo: <strong>c’est le reste de la division
entière</strong>. Donc <code>9 % 4 == 1</code>.</p>

<p>Sauf qu’ici on utilise le modulo avec un nombre négatif. Et là les maths se
compliquent un peu, et surtout différents langages de programmation auront différents
comportements.</p>

<p>Essayons plutôt de <em>sentir</em> la formule en l’appliquant aux nombres de 1 à 16:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">16</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class="line"><span class="gp">?&gt; </span>  <span class="n">o</span> <span class="o">=</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">15</span>
</span><span class="line"><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2"> =&gt; </span><span class="si">#{</span><span class="n">o</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class="line"><span class="go">1 =&gt; -14</span>
</span><span class="line"><span class="go">2 =&gt; -14</span>
</span><span class="line"><span class="go">3 =&gt; -9</span>
</span><span class="line"><span class="go">4 =&gt; -14</span>
</span><span class="line"><span class="go">5 =&gt; -5</span>
</span><span class="line"><span class="go">6 =&gt; -9</span>
</span><span class="line"><span class="go">7 =&gt; -14</span>
</span><span class="line"><span class="go">8 =&gt; -14</span>
</span><span class="line"><span class="go">9 =&gt; -9</span>
</span><span class="line"><span class="go">10 =&gt; -5</span>
</span><span class="line"><span class="go">11 =&gt; -14</span>
</span><span class="line"><span class="go">12 =&gt; -9</span>
</span><span class="line"><span class="go">13 =&gt; -14</span>
</span><span class="line"><span class="go">14 =&gt; -14</span>
</span><span class="line"><span class="go">15 =&gt; 0</span>
</span><span class="line"><span class="go">16 =&gt; -14</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>J’imagine qu’à ce moment précis, vous êtes plusieurs à crier <strong>«Ha ha !»</strong>.</p>

<p>Cette formule, en Ruby, a donc 4 solutions possibles:</p>

<ul>
  <li>Quand <em>n</em> est un multiple de 3, la solution est <strong>-9</strong>.</li>
  <li>Quand <em>n</em> est un multiple de 5, la solution est <strong>-5</strong>.</li>
  <li>Quand <em>n</em> est un multiple de 15 (c’est à dire à la fois multiple de 3 et de
9), la solution est <strong>0</strong>.</li>
  <li>Dans les autres cas, la solution est <strong>-14</strong>.</li>
</ul>

<p>Voyons ce qu’il se passe avec <code>'FizzBuzz '</code> quand <code>o</code> vaut respectivement -9, -5, 0 puis -14:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="go">$ irb</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[-</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;Fizz&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;Buzz &quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;FizzBuzz &quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz &#39;</span><span class="o">[-</span><span class="mi">14</span><span class="p">,</span> <span class="o">-</span><span class="mi">14</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Peut-être vous demandez vous pourquoi il y a un espace après FizzBuzz ?
En pratique, voici la raison:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz&#39;</span><span class="o">[-</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">nil</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="s1">&#39;FizzBuzz&#39;</span><span class="o">[-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">13</span><span class="o">]</span>
</span><span class="line"><span class="go">&quot;zBuzz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En théorie, je vous laisse faire les calculs ;)</p>

<p>Pour finir, il reste à expliquer le <code>||</code>, un exemple vaut mieux qu’un long
discours:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;foo&quot;</span> <span class="o">||</span> <span class="mi">13</span>
</span><span class="line"><span class="go">&quot;foo&quot;</span>
</span><span class="line"><span class="gp">&gt;&gt; </span><span class="kp">nil</span> <span class="o">||</span> <span class="mi">13</span>
</span><span class="line"><span class="go">13</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà, si vous voulez ajouter d’autres explications, les commentaires sont fait
pour ça ;)</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/">Une machine de Turing en Ruby - La routine de copie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/">Une machine de Turing en Ruby</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 réglages pour le langage R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/"/>
    <updated>2015-04-23T15:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Voici trois astuces pour régler/personnaliser le comportement de
l’environnement du langage R, en utilisant des fichiers de configuration.
<em>(Attention, je ne sais absolument pas si ça fonctionne sous Windows.)</em></p>

<h2 id="le-prompt">1) Le prompt</h2>

<p>Pour personnaliser votre prompt dans R, ajoutez les lignes suivantes dans un
fichier <code>~/.Rprofile</code> (créez le pour l’occasion s’il n’existe pas).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.Rprofile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">options<span class="p">(</span>prompt <span class="o">=</span> <span class="s">&quot;R&gt; &quot;</span><span class="p">)</span>
</span><span class="line">options<span class="p">(</span>continue <span class="o">=</span> <span class="s">&quot;+  &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Exemple :</p>

<pre><code>R&gt; add2 &lt;- function(n) {
+    n + 2
+  }
R&gt; 
</code></pre>

<!-- more -->

<h2 id="la-largeur-de-la-sortie-console">2) La largeur de la sortie console</h2>

<p>La largeur de la sortie console de R est de 80 caractères. Point barre !
Si votre console est plus large (100, 120, etc) R n’utilisera quand même que
80 caractères. En mettant une petite fonction dans un fichier à part
<code>~/.Rutils</code> (par exemple) et en référençant ce fichier depuis le <code>~/.Rprofile</code>,
on peut avoir quelque chose de <em>presque</em> dynamique.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.Rprofile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="kr">if</span> <span class="p">(</span>file.exists<span class="p">(</span><span class="s">&quot;~/.Rutils&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">  source<span class="p">(</span><span class="s">&quot;~/.Rutils&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.Rutils</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">tryCatch<span class="p">({</span>
</span><span class="line">  options<span class="p">(</span>width <span class="o">=</span> as.integer<span class="p">(</span>system<span class="p">(</span><span class="s">&#39;tput cols&#39;</span><span class="p">,</span> intern <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)))</span>
</span><span class="line"><span class="p">},</span> error <span class="o">=</span> <span class="kr">function</span><span class="p">(</span>err<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  write<span class="p">(</span><span class="s">&quot;Width set to 80.&quot;</span><span class="p">,</span> stderr<span class="p">());</span>
</span><span class="line">  options<span class="p">(</span>width <span class="o">=</span> <span class="m">80</span><span class="p">)</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si vous redimensionnez votre console, il faut sourcer le fichier
(<code>source('~/.Rutils')</code>) pour prendre en compte la nouvelle largeur.</p>

<h2 id="le-dossier-des-bibliothques">3) Le dossier des bibliothèques</h2>

<p>Pour éviter que R vous crée un dossier <code>R</code> dans votre home, définissez vous
même un dossier pour stocker les packages, par exemple <code>~/local/R_libs/</code>.
Ensuite spécifiez le dans votre <code>~/.bashrc</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Custom repo of libraries for R.</span>
</span><span class="line"><span class="nb">export </span><span class="nv">R_LIBS</span><span class="o">=</span>~/local/R_libs/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Vous connaissez d’autres trucs et astuces pour configurer R ? Dites moi ça dans
un commentaire. À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r/">Les sous-ensembles de listes dans R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/">Les sous-ensembles dans R</a></li><li><a href="http://lkdjiin.github.io/blog/2014/02/27/la-commande-cat-peut-aussi-afficher-les-numeros-de-lignes/">La commande cat peut aussi afficher les numéros de lignes</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment mieux apprendre : La technique du rappel]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/21/comment-mieux-apprendre-la-technique-du-rappel/"/>
    <updated>2015-04-21T19:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/21/comment-mieux-apprendre-la-technique-du-rappel</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’ai participé récemment au MOOC
<a href="https://www.coursera.org/learn/learning-how-to-learn">Learning how to learn</a>
produit par
l’<a href="https://www.coursera.org/ucsd">université de San Diego, Californie</a>
et accessible sur <a href="https://www.coursera.org/courses">Coursera</a>.</p>

<p>Je cherchais des moyens, des trucs, des astuces, pour apprendre mieux. C’est à
dire plus rapidement et plus facilement. J’ai été servi. Les professeurs
Barbara Oakley et Terrence Sejnowski font un excellent travail. Je partagerai
avec vous quelques uns des trucs que j’ai appris en suivant ce cours, et je
vais commencer aujourd’hui par <strong>la technique du rappel</strong>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/total-recall.png" /></p>

<!-- more -->

<h2 id="quoi">Quoi</h2>

<p>La technique du rappel (ou <em>recall</em> en anglais) consiste à faire un réel effort
après un bloc de travail pour se rappeler les points essentiels abordés pendant
ce bloc de travail.</p>

<p>Ça n’est vraiment pas plus que ça, mais ce simple truc va booster votre
capacité à apprendre en ancrant plus sûrement les connaissances toutes fraiches
dans votre mémoire.</p>

<p>Alors qu’est-ce que j’appelle <strong>un bloc de travail ?</strong> Ça peut être à peu près
tout et n’importe quoi ;) Un cours de 20 minutes, 30 minutes de lecture, une
conférence de 45 minutes, une séance de débugage d’une heure, une réunion de 3
heures, etc…</p>

<h2 id="pourquoi">Pourquoi</h2>

<p>Si on ne fait rien pour ancrer dans son cerveau les informations vues durant un
bloc de travail (tout spécialement si c’est de la théorie), celles-ci vont
disparaitre rapidement. Il est <strong>naturel</strong> que ces informations s’effacent si
on ne fait rien pour les retenir.</p>

<p>La technique du rappel évite aussi, dans une certaine mesure, l’<strong>illusion de
compétence</strong> (la fausse sensation d’avoir appris quelque chose) en mettant
l’accent très vite sur les points non acquis ou délicats.</p>

<h2 id="comment">Comment</h2>

<p>La meilleure mise en œuvre que j’ai pu trouver est de prendre quelques
dizaines de secondes (rarement plus d’une minute) à la fin d’un bloc de travail
pour écrire les points essentiels. Ça peut être 2 ou 3 phrases, une liste, un
schéma, ou tout ce que vous jugerez pertinent.</p>

<p>Deux remarques : (i) Prendre des notes pendant le bloc de travail ne dispense
pas de mettre en œuvre la technique du rappel, (ii) Penser aux quelques points
essentiels abordés pendant le bloc de travail ne suffit pas, il faut vraiment
les écrire.</p>

<p><strong>C’est une habitude toute simple, qui se prend très vite, et qui peut vraiment vous
permettre d’apprendre plus rapidement et plus facilement.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les sous-ensembles de listes dans R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r/"/>
    <updated>2015-04-09T07:47:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Après avoir parlé des <a href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/">sous-ensembles de vecteurs</a> dans le langage R,
c’est maintenant le tour des listes. En R, une liste peut contenir des
types différents, au contraire du vecteur, limité à un seul type.
Prenons par exemple la liste suivante :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>À l’affichage, on remarque qu’il s’agit d’une liste grâce aux doubles crochets
(<code>[[]]</code>) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x
</span><span class="line"><span class="go">[[1]]</span>
</span><span class="line"><span class="go">[1] 1</span>
</span><span class="line">
</span><span class="line"><span class="go">[[2]]</span>
</span><span class="line"><span class="go">[1] 2</span>
</span><span class="line">
</span><span class="line"><span class="go">[[3]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Les éléments d’une liste peuvent être nommés. Suivant votre langage de
prédilection, vous pouvez penser à une liste R comme à un hash, un dictionnaire,
un tableau associatif, etc :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span>foo <span class="o">=</span> <span class="m">1</span><span class="p">,</span> bar <span class="o">=</span> <span class="m">2</span><span class="p">,</span> baz <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">))</span>
</span><span class="line"><span class="gp">&gt; </span>x
</span><span class="line"><span class="go">$foo</span>
</span><span class="line"><span class="go">[1] 1</span>
</span><span class="line">
</span><span class="line"><span class="go">$bar</span>
</span><span class="line"><span class="go">[1] 2</span>
</span><span class="line">
</span><span class="line"><span class="go">$baz</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Que se passe-t-il si on utilise la même syntaxe qu’avec un vecteur pour extraire
un élément d’une liste ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[</span><span class="m">3</span><span class="p">]</span>
</span><span class="line"><span class="go">$baz</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>L’idée c’est que l’opérateur <code>[]</code> renvoie le même type d’objet que l’objet sur
lequel il est appliqué. Donc utiliser <code>[]</code> sur une liste retourne une liste :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>class<span class="p">(</span>x<span class="p">[</span><span class="m">3</span><span class="p">])</span>
</span><span class="line"><span class="go">[1] &quot;list&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pour aller chercher un élément, et pas une liste à un seul élément, il faut
utiliser l’opérateur double crochets (<code>[[]]</code>) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span><span class="m">3</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lorsque les éléments sont nommés, on peut bien sûr utiliser leurs noms comme
clé :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="o">$</span>baz
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nous pouvons extraire un sous-ensemble d’une liste en passant les indices à
l’opérateur crochet (<code>[]</code>) :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="s">&quot;2&quot;</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt; </span>x<span class="p">[</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">)]</span>
</span><span class="line"><span class="go">[[1]]</span>
</span><span class="line"><span class="go">[1] 1</span>
</span><span class="line">
</span><span class="line"><span class="go">[[2]]</span>
</span><span class="line"><span class="go">[1] 3</span>
</span><span class="line">
</span><span class="line"><span class="go">[[3]]</span>
</span><span class="line"><span class="go">[1] 5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ou bien en lui donnant un vecteur de booléens :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[</span>c<span class="p">(</span><span class="k-Variable">F</span><span class="p">,</span> <span class="k-Variable">T</span><span class="p">,</span> <span class="k-Variable">F</span><span class="p">,</span> <span class="k-Variable">T</span><span class="p">,</span> <span class="k-Variable">F</span><span class="p">)]</span>
</span><span class="line"><span class="go">[[1]]</span>
</span><span class="line"><span class="go">[1] &quot;2&quot;</span>
</span><span class="line">
</span><span class="line"><span class="go">[[2]]</span>
</span><span class="line"><span class="go">[1] 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En faisant la même chose avec l’opérateur double crochets (<code>[[]]</code>) nous pouvons
extraire le nième élément d’un vecteur :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x <span class="o">&lt;-</span> list<span class="p">(</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">),</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span>c<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">)]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ce qu’on peut décomposer ainsi, d’abord le 2ème élément de la liste :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span><span class="m">2</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot; &quot;c&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Puis le premier élément du vecteur, la syntaxe commence à devenir drôle :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>x<span class="p">[[</span><span class="m">2</span><span class="p">]][[</span><span class="m">1</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;a&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Question pour les connaisseurs du langage R : le code précédent me suggère qu’un vecteur
<em>agit</em> aussi comme une liste et que l’opérateur double crochet (<code>[[]]</code>) n’est pas
limité aux listes. Par exemple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rconsole"><span class="line"><span class="gp">&gt; </span>y <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class="line"><span class="gp">&gt; </span>y
</span><span class="line"><span class="go">[1] &quot;a&quot; &quot;b&quot; &quot;c&quot;</span>
</span><span class="line"><span class="gp">&gt; </span>y<span class="p">[[</span><span class="m">2</span><span class="p">]]</span>
</span><span class="line"><span class="go">[1] &quot;b&quot;</span>
</span><span class="line"><span class="gp">&gt; </span>y<span class="p">[</span><span class="m">2</span><span class="p">]</span>
</span><span class="line"><span class="go">[1] &quot;b&quot;</span>
</span><span class="line"><span class="gp">&gt; </span>y<span class="p">[[</span><span class="m">2</span><span class="p">]]</span> <span class="o">==</span> y<span class="p">[</span><span class="m">2</span><span class="p">]</span>
</span><span class="line"><span class="go">[1] TRUE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Est-ce qu’il y a un intérêt à utiliser les double crochets avec des vecteurs ?</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/">Les sous-ensembles dans R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/">3 réglages pour le langage R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les sous-ensembles dans R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r/"/>
    <updated>2015-04-07T19:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/07/les-sous-ensembles-dans-r</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’apprends <a href="http://www.r-project.org/">le langage R</a> ! C’est cool d’apprendre de nouvelles choses.
C’est encore plus cool de les partager ;) Comme je suis vraiment tout neuf avec
R, c’est mon premier article sur ce langage. Et comme il faut bien commencer
quelque part, je vais vous parler de certains moyens d’obtenir des
sous-ensembles d’un vecteur (un vecteur c’est à peu près comme une liste).</p>

<p><img class="center" src="http://lkdjiin.github.io/images/subset.png" /></p>

<!-- more -->

<p>On lance le REPL :</p>

<pre><code>$ R
</code></pre>

<p>On va créer un ensemble de notes (<em>grades</em>).  Le symbole <code>&lt;-</code> est l’opérateur
d’affectation. La fonction <code>c()</code>, elle, permet de fabriquer un vecteur, avec
ici 10 notes allant de 1 à 5. <code>c()</code> assure la concaténation :</p>

<pre><code>&gt; grades &lt;- c(1, 2, 3, 2, 3, 2, 1, 4, 5, 2)
</code></pre>

<p>On peut vérifier ce qu’il y a dans <code>grades</code>. Le <code>[1]</code> indique qu’il s’agit d’un
vecteur dont on commence l’affichage par le 1er élément. R indexe en commençant
par 1, et non pas comme souvent par zéro :</p>

<pre><code>&gt; grades
 [1] 1 2 3 2 3 2 1 4 5 2
</code></pre>

<p>Pour être sûr de comprendre cette histoire de vecteur et d’index, créons et
affichons un vecteur de 40 éléments à l’aide de la syntaxe <code>début:fin</code> :</p>

<pre><code>&gt; 1:40
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
</code></pre>

<p>Alors ces sous-ensembles ? Et bien commençons par une indexation classique, avec
<code>[]</code>, pour retrouver un seul élément (en fait un vecteur d’un seul élément) :</p>

<pre><code>&gt; grades[1]
[1] 1
</code></pre>

<p>On peut aussi retrouver un <em>range</em>, par exemple du 6ème au 8ème élément :</p>

<pre><code>&gt; grades[6:8]
[1] 2 1 4
</code></pre>

<p>Pour retrouver seulement les notes au dessus de 2 on met la condition entre les
crochets :</p>

<pre><code>&gt; grades[grades &gt; 2]
[1] 3 3 4 5
</code></pre>

<p>Il est intéressant de voir ce qu’on obtient avec <code>grades &gt; 2</code> :</p>

<pre><code>&gt; grades &gt; 2
 [1] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE
</code></pre>

<p>On obtient un vecteur de valeurs booléennes ! <em>TRUE</em> si la note est supérieure
à 2, <em>FALSE</em> dans le cas contraire.</p>

<p>Rangeons ce vecteur de booléens dans une variable <code>mask</code> et servons nous de
cette nouvelle variable pour obtenir le sous-ensemble des notes supérieures
à 2 :</p>

<pre><code>&gt; mask &lt;- grades &gt; 2
&gt; grades[mask]
[1] 3 3 4 5
</code></pre>

<p>Pour finir, utilisons directement un vecteur de booléens pour récupérer les
éléments n° 4, 5, 6, 9 et 10 (<em>F</em> et <em>T</em> sont des raccourcis pour <em>FALSE</em> et
<em>TRUE</em>) :</p>

<pre><code>&gt; grades[c(F, F, F, T, T, T, F, F, T, T)]
[1] 2 3 2 5 2
</code></pre>

<p>Voilà, mon premier article sur R est terminé, je vais certainement en écrire
plein d’autres dans un futur proche. J’espère que ce sujet vous intéresse ;)</p>

<pre><code>&gt; q()
</code></pre>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/09/les-sous-ensembles-de-listes-dans-r/">Les sous-ensembles de listes dans R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/">3 réglages pour le langage R</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ce que je n'ai pas fait cette 14ème semaine de 2015]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/05/ce-que-je-nai-pas-fait-cette-14eme-semaine-de-2015/"/>
    <updated>2015-04-05T20:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/05/ce-que-je-nai-pas-fait-cette-14eme-semaine-de-2015</id>
    <content type="html"><![CDATA[<p>Je n’ai pas commencé à bloguer en anglais, mais ça ne saurait tarder. Il me
reste à choisir quelle techno utiliser. J’hésite entre :</p>

<ol>
  <li>Jekyll (que je connais bien)</li>
  <li><a href="http://www.metalsmith.io">metalsmith</a> (pour sortir de ma zone de comfort)</li>
  <li>rake, cat, <a href="http://en.wikipedia.org/wiki/M4_%28computer_language%29">m4</a>, sed, etc (sans rire ! pour un retour aux sources)</li>
</ol>

<p>Vous me conseillez quoi ?</p>

<!-- more -->

<p>Sinon, je n’ai pas encore lu <a href="http://en.wikipedia.org/wiki/Super-Cannes">Super-Cannes</a> de J.G. Ballard, que je me suis offert
il y a 2 semaines. J’ai plus envie de lire de la fiction en ce moment, j’espère
que ça va revenir vite.</p>

<p>Et vous ? Que n’avez-vous pas fait cette semaine ?</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/03/29/ce-que-je-nai-pas-fait-cette-semaine-2/">Ce que je n&#8217;ai pas fait cette semaine - 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/22/ce-que-je-nai-pas-fait-cette-semaine/">Ce que je n&#8217;ai pas fait cette semaine</a></li><li><a href="http://lkdjiin.github.io/blog/2014/10/08/le-jeu-de-la-vie-dans-sept-langages-differents/">Le jeu de la vie dans sept langages différents</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino : Un métronome tap tempo]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/03/arduino-un-metronome-tap-tempo/"/>
    <updated>2015-04-03T18:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/03/arduino-un-metronome-tap-tempo</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>J’aimerais fabriquer un métronome <em>tap tempo</em> avec l’arduino. C’est un projet à
moyen terme, et
comme souvent, il pourrait être bénéfique de diviser le projet en plusieurs
petites parties. Donc, avant de tenter la programmation du tap tempo, je vais
faire un métronome tout simple avec juste une LED.</p>

<h2 id="les-composants">Les composants</h2>

<p>Coté composants, on a seulement besoin d’une LED et d’une résistance (220 Ohms
ça ira).</p>

<p><img class="center" src="http://lkdjiin.github.io/images/metronome1_bb.png" /></p>

<!-- more -->

<h2 id="un-premier-code-naif">Un premier code naif</h2>

<p>Le premier jet est tout simple :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">const</span> <span class="n">byte</span> <span class="n">LED_PIN</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line">  <span class="n">delay</span><span class="p">(</span><span class="mi">600</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Une fois compilé et envoyé dans l’arduino, la LED clignote toutes les 0,7
secondes. Nous avons un métronome visuel !</p>

<p>C’est simple, non ? Mouais. Trop simple, bien sûr. Ce code est problèmatique
pour la fabrication d’un métronome. Alors afin de comprendre pourquoi, parlons
un peu du tempo.</p>

<h2 id="le-tempo">Le tempo</h2>

<p>Pour le musicien, le tempo est une suite de clics (ou tic, ou tac, ou poum, ou
tchak, ou clac). Ces clics, qui ont la particularité de se succéder à
intervalles réguliers, marquent la <strong>vitesse</strong> de la musique.</p>

<p>Le tempo (donc la vitesse de la musique) est indiqué à l’aide d’un nombre qui
représente le nombre de clics par minute.
Par exemple un tempo de 60 nous indique qu’il doit y avoir 60 clics dans une minute,
ou plus simplement 1 clic par seconde. Autre exemple, un tempo de 120 indique
120 clics par minute, soit 2 clics par seconde, ou encore 1 clic toutes les
0,5 secondes.</p>

<p>Voyons maintenant quelques formules. Pour trouver la fréquence F, en secondes,
il faut diviser 60 par le tempo (noté T) :</p>

<script type="math/tex; mode=display">
\begin{align}

F = 60 / T
\end{align}
</script>

<p>Pour obtenir cette fréquence en millisecondes, il faut multiplier le résultat
précédent par 1000 ;</p>

<script type="math/tex; mode=display">
\begin{align}

F = 60 / T \times 1000
\end{align}
</script>

<p>Le code arduino ci-dessus envoit un clic toutes les 0,7 secondes, à quel
tempo cela correspond-t-il ? Pour calculer le tempo, on divise 60 par la
fréquence en secondes :</p>

<script type="math/tex; mode=display">
\begin{align}

T = 60 / F
\end{align}
</script>

<p>Donc, une fréquence de 0,7 seconde, comme celle de notre code arduino,
correspond à un tempo de \(60 / 0,7\). Soit à peu près 86.</p>

<h2 id="le-problme-de-la-boucle-de-code">Le problème de la boucle de code</h2>

<p>Maintenant on peut regarder le souci de ce code :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line">  <span class="n">delay</span><span class="p">(</span><span class="mi">600</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Partons de l’hypothèse qu’en plus des deux <code>digitalWrite</code>, mon code doit
aussi :</p>

<ul>
  <li>calculer l’intensité de la LED suivant le beat.</li>
  <li>jouer du son et ausssi calculer son intensité suivant le beat.</li>
  <li>s’occuper de plusieurs LEDs, peut-être avec des motifs.</li>
  <li>écrire le tempo et d’autres informations sur un écran LCD.</li>
  <li>tout ce que vous pourrez imaginer d’autre ;)</li>
</ul>

<p>Imaginons maintenant que l’ensemble de ces actions prennent 30 millisecondes
(0,03 secondes). Dans ce cas le tempo sera de \(60 / 0,73\). Soit à peu près 82.
Donc plus du tout la valeur de 86 qu’on avait trouvé tout à l’heure. <strong>Notre
métronome n’est pas fiable !</strong> Il ne vaut rien, arg.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/facepalm.jpg" /></p>

<h2 id="faire-et-ne-pas-attendre">Faire et ne pas attendre</h2>

<p>Pour remédier à ce problème nous demandons à l’arduino d’allumer la LED toutes
les 700 millisecondes et non pas <strong>d’attendre</strong> pendant 700 millisecondes.
Pour cela nous gardons une trace du dernier moment où la LED a été allumée
(dans <code>oldTime</code>) et nous comparons cette trace avec le moment présent
(<code>currentTime</code>) à chaque passage dans la boucle :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">const</span> <span class="n">byte</span> <span class="n">LED_PIN</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="c1">// In millisecondes.</span>
</span><span class="line"><span class="k">const</span> <span class="kt">long</span> <span class="n">FREQUENCY</span> <span class="o">=</span> <span class="mi">700</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">long</span> <span class="n">currentTime</span><span class="p">;</span>
</span><span class="line"><span class="kt">long</span> <span class="n">oldTime</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">currentTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="n">oldTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">currentTime</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">currentTime</span> <span class="o">&gt;=</span> <span class="n">oldTime</span> <span class="o">+</span> <span class="n">FREQUENCY</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_PIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line">    <span class="n">oldTime</span> <span class="o">=</span> <span class="n">currentTime</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fonctionne pour notre métronome, bien qu’il reste encore 100 millisecondes
gachées (avec <code>delay(100);</code>). La prochaine fois on verra un moyen de se
débarasser de cette attente inutile.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1/">Un jeu de Simon - Étape 1</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri/">Les maths derrière V=RI</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino/">Mes premiers pas avec Arduino</a></li></ul></section>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim : Pourquoi les touches HJKL ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/02/vim-pourquoi-les-touches-hjkl/"/>
    <updated>2015-04-02T11:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/02/vim-pourquoi-les-touches-hjkl</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Pourquoi utilise-t-on les touches HJKL pour les déplacements de base dans Vim ?
Par déplacement de base, j’entends un caractère à gauche ou à droite (H et L) et
une ligne au-dessus ou en dessous (J et K). Pourquoi ne pas utiliser les
touches fléchées, par exemple, ou même la main gauche ?</p>

<p><img class="center" src="http://lkdjiin.github.io/images/ADM-3A.jpg" /></p>

<!-- more -->

<p><strong>Pourquoi pas les touches fléchées ?</strong></p>

<p>En fait, on peut bien sûr se servir des touches fléchées pour se déplacer dans
Vim.  C’est utile si vous êtes débutant, mais vous devriez essayer rapidement
de perdre l’habitude de les utiliser : Elles sont trop loin du <em>home row</em> (voir
plus bas).</p>

<p>On peut carrément les désactiver ou mieux, s’en servir pour autre chose, comme
pour changer de fenêtre, modifier la taille des fenêtres, etc…</p>

<p><strong>Pourquoi pas les touches à main gauche ?</strong></p>

<p>Le créateur de Vim était droitier, donc on se sert de la main droite !
Évidemment non, puisque les joueurs utilisent sans problèmes WASD pour se
diriger (ZQSD en azerty).</p>

<p><strong>Le home row</strong></p>

<p>Quelle est la bonne façon de placer ses doigts sur un clavier ?  Selon les
règles de la dactylographie, les doigts des deux mains doivent se placer sur le
<em>home row</em>. Ça minimise énormément le déplacement des doigts et des mains et la
fatigue musculaire tout en augmentant la vitesse de frappe.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/keyboard-home-row.png" /></p>

<p><strong>Mais alors pourquoi utiliser HJKL pour se déplacer et pas JKL; ?</strong></p>

<p>À cause de la force des doigts peut-être ? Le petit n’étant pas très fort ?
Non. C’est tout simplement parce que Vi, l’ancêtre de Vim, a été créé sur
<a href="http://en.wikipedia.org/wiki/ADM-3A">le terminal ADM-3A</a>.
Regardez bien ce qu’on trouve sur les touches HJKL :</p>

<p><img class="center" src="http://lkdjiin.github.io/images/keyboard-ADM-3A.png" /></p>

<p>Au passage, notez l’emplacement de la touche ESC ;-)</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2014/06/07/creer-facilement-des-themes-pour-vim/">Créer facilement des thèmes pour Vim</a></li><li><a href="http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim/">Cherchez avec grep dans Vim</a></li><li><a href="http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim/">Le thème Gruvbox pour Vim</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ce que je n'ai pas fait cette semaine - 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/29/ce-que-je-nai-pas-fait-cette-semaine-2/"/>
    <updated>2015-03-29T15:38:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/29/ce-que-je-nai-pas-fait-cette-semaine-2</id>
    <content type="html"><![CDATA[<p>Je n’ai pas acheté le livre <a href="https://pragprog.com/book/adrpo/ruby-performance-optimization">Ruby Performance Optimization: Why Ruby Is Slow, and How to Fix It</a>.
J’en ai très envie, ça serait bien d’avoir sous la main un ensemble de trucs et
astuces pour accélerer mon code. Si j’hésite encore c’est parce que l’auteur
promet «<em>and your code will run orders of magnitude faster</em>». Ça semble
un peu exagéré quand même ;)</p>

<!-- more -->

<p>Je n’ai pas encore donné d’argent à <a href="https://rubytogether.org/">RubyTogether</a>.
Honte à moi, il s’agit d’un oubli.</p>

<p>Je n’ai pas encore lu <a href="http://www.franceculture.fr/oeuvre-lumiere-et-matiere-une-etrange-histoire-de-richard-feynman">Lumière et matière : Une étrange histoire</a> de Richard Feynman, trouvé à 1€ au marché au livre du mois dernier.</p>

<p>Je n’ai pas encore mis le nez dans le langage <a href="https://www.processing.org/">Processing</a>. Il est en lointaine position sur ma todo list donc ça devra attendre
encore longtemps, mais ça m’intrigue vraiment.</p>

<p>Et vous ? Que n’avez-vous pas fait cette semaine ?</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/05/ce-que-je-nai-pas-fait-cette-14eme-semaine-de-2015/">Ce que je n&#8217;ai pas fait cette 14ème semaine de 2015</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/22/ce-que-je-nai-pas-fait-cette-semaine/">Ce que je n&#8217;ai pas fait cette semaine</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle/">Un exemple de polymorphisme en situation réelle</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pas de logique dans les vues Rails]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/28/pas-de-logique-dans-les-vues-rails/"/>
    <updated>2015-03-28T09:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/28/pas-de-logique-dans-les-vues-rails</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Je dis souvent aux personnes avec qui je travaille qu’introduire de la logique
dans les vues est une mauvaise idée.</p>

<p>Pour moi, une vue n’est pas vraiment un fichier comme les autres. C’est avant tout du
HTML, donc normalement rien de bien compliqué. Et à ce titre, j’ai rencontré beaucoup de
développeurs, certains par ailleurs très doués, pour qui les vues sont
inconsciemment les poubelles d’un projet Rails. Leurs modèles et leurs
contrôleurs sont très bien écrits, concis, testés, refactorés, parfois même
documentés ;) Mais leurs vues sont incompréhensibles et compliquées à outrance.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/complexity_512.jpg" /></p>

<!-- more -->

<p>Pourquoi ? J’explique ça surtout par le nombre de langages qui peuvent se
côtoyer au sein d’une vue :</p>

<ul>
  <li>HTML</li>
  <li>le langage de templating</li>
  <li>Ruby</li>
  <li>parfois même du Javascript</li>
</ul>

<p>C’est déjà assez dur de produire du bon code avec un seul
langage, alors imaginez s’il faut jongler entre trois ou quatre !</p>

<p>Je me suis aperçu aussi que lorsque je dis <strong>pas de logique dans les vues Rails</strong>
de nombreux développeurs vont acquiescer. Ils seront d’accord avec moi sur le
principe, mais ne sauront pas pour autant comment éviter d’introduire cette
logique.</p>

<p>Pour ne pas avoir à embarquer trop de code Ruby dans les vues (c’est une autre
manière de dire «pas de logique») Rails propose pourtant une solution simple et parfaitement intégrée :
les <em>helpers</em>. Voyons comment ça fonctionne.</p>

<h2 id="avec-logique-dans-les-vues">Avec logique dans les vues</h2>

<p>Prenons une vue très simple qui va lister tous les posts d’une collection
nommée <code>@feed</code>. Nos posts contiennent uniquement un corps de texte, nommé
<code>body</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/views/posts/index.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="cp">&lt;%</span> <span class="vi">@feed</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;p class=&#39;post-body&#39;&gt;</span>
</span><span class="line"><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;/p&gt;</span>
</span><span class="line"><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Maintenant votre produit évolue : les posts peuvent contenir une photo, ou non.
Et le texte d’un post <strong>avec</strong> photo doit s’afficher différemment du texte d’un
post <strong>sans</strong> photo. On pourrait faire comme ça :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/views/posts/index.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="cp">&lt;%</span> <span class="vi">@feed</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;p class=&#39;post-body </span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">post_type</span> <span class="cp">%&gt;</span><span class="x">&#39;&gt;</span>
</span><span class="line"><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;/p&gt;</span>
</span><span class="line"><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">photo?</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">image_tag</span> <span class="s2">&quot;photos/</span><span class="si">#{</span><span class="n">post</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">alt</span><span class="p">:</span> <span class="n">post</span><span class="o">.</span><span class="n">filename</span><span class="p">,</span>
</span><span class="line">        <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;photo&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bien sûr ça va fonctionner. Et cette première version n’est pas si mauvaise.
Mais le fait d’avoir mis un simple <code>if</code> ici fait que
la semaine prochaine nous aurons un second <code>if</code>, dans 15 jours on ajoutera un
<code>else</code>, puis dans 1 mois un <code>if</code> imbriqué avec une condition complexe, etc.</p>

<h2 id="sans-logique-dans-les-vues">Sans logique dans les vues</h2>

<p>Qu’est-ce qu’on veut vraiment, du point de vue de la vue ?
On veut afficher une photo. C’est tout :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/views/posts/index.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="cp">&lt;%</span> <span class="vi">@feed</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;p class=&#39;post-body </span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">post_type</span> <span class="cp">%&gt;</span><span class="x">&#39;&gt;</span>
</span><span class="line"><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;/p&gt;</span>
</span><span class="line"><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">photo_for</span><span class="p">(</span><span class="n">post</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On a pas besoin d’en écrire plus dans la vue. Le code Ruby, la logique, ira
dans un <em>helper</em> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/helpers/posts_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">postsHelper</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">photo_for</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">photo?</span>
</span><span class="line">      <span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;photos/</span><span class="si">#{</span><span class="n">post</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="n">image_tag</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="ss">alt</span><span class="p">:</span> <span class="n">post</span><span class="o">.</span><span class="n">filename</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;photo&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Quand le post n’est pas une photo, la méthode <code>photo_for</code> renverra <code>nil</code>, valeur
qui ne sera pas affichée dans la vue.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/">Une machine de Turing en Ruby - Le parser</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ce que je n'ai pas fait cette semaine]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/22/ce-que-je-nai-pas-fait-cette-semaine/"/>
    <updated>2015-03-22T15:18:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/22/ce-que-je-nai-pas-fait-cette-semaine</id>
    <content type="html"><![CDATA[<p><em>Premier article d’une série récurente que je posterai chaque dimanche, voici
ce que je n’ai pas fait cette semaine.</em></p>

<p>Je n’ai pas installé <strong>la dernière version de l’</strong><a href="http://arduino.cc/en/Main/Software">IDE Arduino</a>.
Je ne compte pas l’utiliser, mais il parait qu’elle intègre des outils en ligne
de commande, et ça c’est cool.</p>

<!-- more -->

<p>Je n’ai pas (encore) lu <strong>le livre de Hilary Mason</strong>
<a href="http://www.oreilly.com/data/free/data-driven.csp">Data Driven</a>.</p>

<p>Je n’ai pas acheté <strong>le livre</strong> <a href="https://leanpub.com/developing-games-with-ruby/">Developing Games With Ruby</a>.
J’hésite. Ça pourrait être fun.</p>

<p>Je ne me suis pas abonné à <strong>la version numérique de
Courrier International.</strong>
Je voulais le faire, mais on ne peut payer ni par carte bancaire, ni par
paypal. Et je n’aime pas l’idée du prélèvement bancaire.</p>

<p>Je n’ai pas travaillé sur mon <a href="https://twitter.com/lkdjiin/status/570258711547023362">super algorithme de génération d’immenses
labyrinthes</a> :</p>

<p>Je n’ai pas donné d’argent à <a href="https://rubytogether.org/">RubyTogether</a>.
Je voulais le faire, je voudrais le faire, je pense qu’il est nécessaire
d’avoir une telle structure pour assurer l’avenir de Ruby et de son écosystème
<del>mais le montant unique de 40$ par mois pour un particulier m’a refroidi.</del>
<ins>Et voilà, je réagis à chaud, je m’emporte et donc je
raconte n’importe quoi. On peut maintenant <a href="https://rubytogether.org/friends">faire un don</a>
sans cotiser mensuellement. Alors rendez-vous la semaine prochaine pour savoir
si j’ai donné ;)</ins></p>

<p>Et vous ? Que n’avez-vous pas fait cette semaine ?</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/05/ce-que-je-nai-pas-fait-cette-14eme-semaine-de-2015/">Ce que je n&#8217;ai pas fait cette 14ème semaine de 2015</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/29/ce-que-je-nai-pas-fait-cette-semaine-2/">Ce que je n&#8217;ai pas fait cette semaine - 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/14/un-exemple-de-polymorphisme-en-situation-reelle/">Un exemple de polymorphisme en situation réelle</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pour des raisons de sécurité il n'est pas possible de personnaliser votre mot de passe]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/18/pour-des-raisons-de-securite-il-nest-pas-possible-de-personnaliser-votre-mot-de-passe/"/>
    <updated>2015-03-18T09:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/18/pour-des-raisons-de-securite-il-nest-pas-possible-de-personnaliser-votre-mot-de-passe</id>
    <content type="html"><![CDATA[<p>J’ai coutume de râler sur twitter contre les sites web qui font n’importe quoi
avec les mots de passe : limitation du nombre de caractères, impossibilité
d’utiliser certains caractères, mail de confirmation avec mot de passe en
clair, etc. Mais avec le site de ma mutuelle, on atteint un niveau
d’incompétence hors catégorie.</p>

<!-- more -->

<p>Le mot de passe que ma mutuelle m’a attribué fait <strong>six</strong> caractères de long.
Cinq lettres majuscules et un chiffre. Gardez bien ça en tête pendant que vous
lisez la suite de l’article.</p>

<p>Naturellement j’ai eu envie de changer ce mot de passe pour un autre, plus
personnel et… un peu plus long. J’ai eu beau chercher, je n’ai rien vu sur leur
site qui me permette de modifier mon mot de passe. J’ai donc jeter un œil à
la F.A.Q., dont voici le copier coller:</p>

<blockquote>
  <p>Comment personnaliser mon mot de passe ?</p>

  <p>Pour des raisons de sécurité, il n’est pas possible de personnaliser votre mot
de passe. En effet, étant donné le caractère confidentiel de vos données,
votre mot de passe est généré selon un algorithme complexe, et se doit de
vérifier certaines contraintes de sécurité. C’est pour cette raison que les
assurés ne sont pas autorisés à personnaliser leur mot de passe.</p>
</blockquote>

<p>What the fuck !</p>

<p>Je me demande si un jour dans ma vie on s’est foutu de ma gueule plus fort que
ça ? Et en fait ça me pose une question de droit : «À qui appartient mon
mot de passe, à moi, ou au site web ?».</p>

<p>Laissez moi un commentaire si vous avez vécu des expériences similaires ou si
vous vous y connaissez en droit ;)</p>

<p>À bientôt.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/05/ce-que-je-nai-pas-fait-cette-14eme-semaine-de-2015/">Ce que je n&#8217;ai pas fait cette 14ème semaine de 2015</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/29/ce-que-je-nai-pas-fait-cette-semaine-2/">Ce que je n&#8217;ai pas fait cette semaine - 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/22/ce-que-je-nai-pas-fait-cette-semaine/">Ce que je n&#8217;ai pas fait cette semaine</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un jeu de Simon - Étape 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1/"/>
    <updated>2015-03-01T21:00:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Lors d’un projet du dimanche avec ma fille, j’ai commencé un
<a href="http://fr.wikipedia.org/wiki/Simon_%28jeu%29">jeu de Simon</a> sur l’Arduino.
Nous avons simplifié les règles au maximum (ma fille n’a pas 3 ans) et obtenu
ce que je vous propose dans cet article.</p>

<p>C’est seulement un point de départ, j’ai bien envie d’implémenter le jeu en
entier et d’en faire un objet réel. Il devrait donc y avoir d’autres articles…</p>

<p><img class="center" src="http://lkdjiin.github.io/images/simon-1.jpg" /></p>

<!-- more -->

<h2 id="les-rgles">Les règles</h2>

<p>J’ai réduit les règles du jeu au plus simple : Il y a deux couleurs, rouge et
vert. La machine donne une couleur en allumant une LED et le joueur répond en
appuyant sur un bouton de couleur. Si la réponse est juste le joueur gagne et
une nouvelle partie commence. Si la réponse est fausse les LEDs clignotent
quelque temps pour signaler que le jeu est perdu et une nouvelle partie
commence.</p>

<p>Difficile de faire plus simple, hein ?</p>

<h2 id="les-composants">Les composants</h2>

<p>Nous aurons besoin de :</p>

<ul>
  <li>2 LEDs, une rouge et une verte</li>
  <li>2 boutons momentanés, si possible un rouge et un vert (sinon les gris
moches ça marche aussi)</li>
  <li>2 résistances de 220 Ohms pour les LEDs</li>
  <li>2 résistances de 10 kilo Ohms pour les boutons</li>
  <li>du câble</li>
</ul>

<h2 id="lassemblage">L’assemblage</h2>

<p><img class="center" src="http://lkdjiin.github.io/images/simon-etape1-bb.png" /></p>

<h2 id="le-code">Le code</h2>

<p>Rien de spécial à dire pour le code, si ce n’est qu’il a été écrit sous la
pression de ma fille et la patience n’est pas son fort. Ça pourrait expliquer
pourquoi le code n’est pas très joli.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">const</span> <span class="n">byte</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="k">const</span> <span class="n">byte</span> <span class="n">GREEN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">byte</span> <span class="n">buttonRed</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">buttonGreen</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">ledRed</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">ledGreen</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">computerTurn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="n">byte</span> <span class="n">lastPly</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">buttonRed</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">buttonGreen</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">  <span class="n">pinMode</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="n">randomSeed</span><span class="p">(</span><span class="n">analogRead</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="n">computerTurn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">lastPly</span> <span class="o">=</span> <span class="n">random</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line">    <span class="n">allLedsOff</span><span class="p">();</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">lastPly</span> <span class="o">==</span> <span class="n">RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
</span><span class="line">    <span class="n">allLedsOff</span><span class="p">();</span>
</span><span class="line">    <span class="n">computerTurn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">stateRed</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">buttonRed</span><span class="p">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">stateGreen</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">buttonGreen</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">stateRed</span> <span class="o">||</span> <span class="n">stateGreen</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="n">stateRed</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">lightTheLed</span><span class="p">(</span><span class="n">ledRed</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="n">lightTheLed</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="n">stateRed</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">stateGreen</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">GREEN</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="n">stateRed</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">GREEN</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">stateGreen</span> <span class="o">&amp;&amp;</span> <span class="n">lastPly</span> <span class="o">==</span> <span class="n">RED</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="n">blinkLeds</span><span class="p">();</span>
</span><span class="line">        <span class="n">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="n">computerTurn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">allLedsOff</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">lightTheLed</span><span class="p">(</span><span class="n">byte</span> <span class="n">led</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">  <span class="n">delay</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class="line">  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">blinkLeds</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledRed</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">    <span class="n">allLedsOff</span><span class="p">();</span>
</span><span class="line">    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="la-suite">La suite</h2>

<p>Il reste beaucoup de choses à faire… Ajouter le bleu et le jaune ; ajouter du son ;
enregistrer les séquences de couleur ; le vrai jeu de Simon, quoi.
Et ensuite il faudra en faire un objet autonome, sans Arduino.</p>

<p>Alors à la prochaine.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/03/arduino-un-metronome-tap-tempo/">Arduino : Un métronome tap tempo</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino/">Mes premiers pas avec Arduino</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri/">Les maths derrière V=RI</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dis digital encore une fois]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/17/dis-digital-encore-une-fois/"/>
    <updated>2015-02-17T10:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/17/dis-digital-encore-une-fois</id>
    <content type="html"><![CDATA[<p>Je suis un pessimiste optimiste. C’est à dire que ma raison sait
qu’une cause est irrémédiablement perdue depuis longtemps, et malgré tout, mon
cœur me pousse à faire quand même quelque chose, parce qu’on ne
sait jamais.</p>

<p>Le combat «digital» vs «numérique» illustre parfaitement mon pessimisme
optimiste. La cause est entendue depuis longtemps, l’anglicisme «digital» a
gagné et écrasé haut la main (haha) le mot «numérique», et pourtant je tente
quand même de réhabiliter «numérique», à mon petit niveau, en l’employant
toujours et partout à la place de digital.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/dis-digital-encore-une-fois-512.jpg" /></p>

<!-- more -->

<p>Deux phrases que j’aime beaucoup sur la page Wikipédia de
<a href="http://fr.wikipedia.org/wiki/Digital">Digital</a> :</p>

<blockquote>
  <p>Le seul vrai calculateur digital est un instrument très ancien, toujours très employé en Asie, le boulier</p>
</blockquote>

<blockquote>
  <p>L’emploi du terme digital à la place de numérique […] est donc un abus de langage, mais très en vogue pour des raisons de marketing</p>
</blockquote>

<p>Comme c’est déjà perdu, marrons nous un peu. Je suis tombé ce matin sur
<a href="http://www.lesechos.fr/idees-debats/cercle/cercle-123423-lentreprise-a-lere-du-digital-savoir-propulser-sa-transformation-numerique-1092355.php">cet article</a>
 joliment intitulé «L’entreprise à l’ère du digital».</p>

<p>Et si on remplaçait quelques occurrences de «digital» par «lié aux doigts», autrement dit le vrai sens de digital ? C’est parti :</p>

<blockquote>
  <p>L’investissement dans les technologies liées aux doigts va forcer la réflexion sur deux axes fondamentaux : le modèle économique et social lié aux doigts et les capacités liées aux doigts de l’entreprise.</p>
</blockquote>

<blockquote>
  <p>De nouveaux métiers apparaissent, comme […] le scientifique lié aux doigts.</p>
</blockquote>

<blockquote>
  <p>créer de nouvelles offres liées aux doigts sont au cœur de ce nouveau challenge</p>
</blockquote>

<blockquote>
  <p>Être partie prenante dans l’économie liée aux doigts c’est aussi savoir connecter l’entreprise et son organisation au monde extérieur à travers les nouveaux médias comme les réseaux sociaux, les blogs</p>
</blockquote>

<p>Alors j’arrête là, parce que je me rends compte que ça n’est pas drôle en fait.
C’est tout au plus pathétique. Ça c’est le pessimisme qui reprends le dessus.</p>

<p>Vas y, dis «digital» encore une fois !</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/05/ce-que-je-nai-pas-fait-cette-14eme-semaine-de-2015/">Ce que je n&#8217;ai pas fait cette 14ème semaine de 2015</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/29/ce-que-je-nai-pas-fait-cette-semaine-2/">Ce que je n&#8217;ai pas fait cette semaine - 2</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/22/ce-que-je-nai-pas-fait-cette-semaine/">Ce que je n&#8217;ai pas fait cette semaine</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les maths derrière V=RI]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri/"/>
    <updated>2015-02-11T11:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/11/les-maths-derriere-v-equals-ri</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>\(V = RI\), la formule est simple. V pour le voltage (en Volts), R pour la
résistance (en Ohms) et I pour l’intensité (en Ampères).  Grâce à elle nous
pouvons calculer l’ampérage si nous connaissons le voltage et la résistance:</p>

<script type="math/tex; mode=display">
\begin{align}

  I= \frac{V}{R}
\end{align}
</script>

<p>Et nous pouvons aussi calculer la résistance si nous connaissons le voltage et
l’intensité:</p>

<script type="math/tex; mode=display">
\begin{align}

  R= \frac{V}{I}
\end{align}
</script>

<p>Pas besoin d’être fort en math pour pouvoir appliquer ces 3 formules. On a
juste à faire une multiplication, ou bien une division. Mais si on veut
comprendre pourquoi les deux dernières formules <em>découlent</em> de la première, il
faut un minimum de bagage en math.</p>

<p><strong>Cet article est pour celles et ceux qui ont séchés les cours de math au
collège</strong> et qui voudraient maintenant comprendre pourquoi \(V = RI\) implique
nécessairement \(I = V / R\). Je vais tâcher de tirer et d’expliquer tous les
fils qui nous amène à déduire la seconde formule à partir de la première.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/math.jpg" /></p>

<!-- more -->

<h2 id="le-symbole-de-la-multiplication">Le symbole de la multiplication</h2>

<p>Le plus simple d’abord, \(RI\) est la multiplication de R par I.
Donc \(RI\) est la même chose que \(R \times I\).
Pour simplifier les choses (<em>ironie…</em>) on peut aussi
écrire le signe le la multiplication avec un point.
Les 3 lignes suivantes sont donc équivalentes:</p>

<script type="math/tex; mode=display">
\begin{align}

  RI            \\
  R \times I    \\
  R \cdot I
\end{align}
</script>

<h2 id="lgalit">L’égalité</h2>

<p>Parlons maintenant du signe <code>=</code>. Il signifie qu’on a une égalité entre ce qui
se trouve à sa gauche et ce qui se trouve à sa droite. En d’autres termes, ce
qui est à gauche du signe <code>=</code> à la même valeur que ce qui est à sa droite.
Donc si V vaut 12 (c’est un exemple), alors R × I vaut
aussi exactement 12. Si je remplace V par 12 dans la formule, on voit bien que
RI vaut 12:</p>

<script type="math/tex; mode=display">
\begin{align}

  12 = RI
\end{align}
</script>

<p>Ça ne nous
dit pas combien vaut exactement R ni combien vaut exactement I mais on sait
que la multiplication de ces deux là vaut 12. On a peut-être R = 1 et I = 12, ou
encore R = 3 et I = 4. Tout est possible du moment que \(R \times I = 12\).</p>

<p>Cette dernière égalité ( \(R \times I = 12\) ) m’amène à préciser ceci:
\(V = RI\) est la
même chose que \(RI = V\). Si vous avez du mal à penser avec des lettres,
n’hésitez pas à les remplacer régulièrement par des nombres pour voir de quoi
ça a l’air. Par exemple, si on dit que V = 12, R = 3 et I = 4, on peut écrire:</p>

<script type="math/tex; mode=display">
\begin{align}

  12 = 3 \times 4
\end{align}
</script>

<p>Ou encore :</p>

<script type="math/tex; mode=display">
\begin{align}

  3 \times 4 = 12
\end{align}
</script>

<p>C’est bien la même chose.</p>

<h2 id="jouons-avec-lgalit">Jouons avec l’égalité</h2>

<p>On peut faire subir aux deux cotés de l’égalité la même opération sans que cela
pose problème.</p>

<p>Par exemple on peut ajouter 1 de chaque coté:</p>

<script type="math/tex; mode=display">
\begin{align}

  V + 1 = RI + 1
\end{align}
</script>

<p>Essayons avec des nombres. Si V = 12, R = 3 et I = 4 :</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

12 + 1 &= 3 \times 4 + 1 \\
13 &= 12 + 1 \\
13 &= 13
\end{align}
 %]]&gt;</script>

<p>Ça marcherait aussi avec une soustraction ou tiens, avec une multiplication:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

V \times 2 &= R \times I \times 2 \\
12 \times 2 &= 3 \times 4 \times 2 \\
24 &= 12 \times 2 \\
24 &= 24
\end{align}
 %]]&gt;</script>

<p>Et bien sûr, ça fonctionne aussi avec la division, tant qu’on divise par
autre chose que zéro:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

V / 2 &= R \times I / 2 \\
12 / 2 &= 3 \times 4 / 2 \\
6 &= 12 / 2 \\
6 &= 6
\end{align}
 %]]&gt;</script>

<h2 id="un-truc-intressant--propos-de-la-division">Un truc intéressant à propos de la division</h2>

<p>Puisqu’on parle de division, voici un truc intéressant à propos de la division.
Quand on divise un nombre (n’importe lequel à part zéro) par lui-même on obtient toujours 1.
Toujours. Par exemple:</p>

<script type="math/tex; mode=display">
\begin{align}

  12 / 12 = 1
\end{align}
</script>

<p>Si on généralise : \(A / A = 1\). Donc c’est pareil avec R ou I :</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}

  R / R &= 1 \\
  I / I &= 1
\end{align}
 %]]&gt;</script>

<h2 id="division-et-fraction">Division et fraction</h2>

<p>Jusqu’ici j’ai utilisé le signe <code>/</code> pour la division, mais celui-ci n’est pas
toujours très pratique et on le remplace souvent par une fraction. Et oui:
division et fraction c’est la même chose.</p>

<script type="math/tex; mode=display">
\begin{align}

  X / Y= \frac{X}{Y}
\end{align}
</script>

<p>Reprenons notre formule de base :</p>

<script type="math/tex; mode=display">
\begin{align}

  V = R \times I
\end{align}
</script>

<p>Si on divise les deux cotés par R, ça donne :</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{V}{R}= \frac{R \times I}{R}
\end{align}
</script>

<p>On y est presque, je vous assure ! Il faut encore comprendre une dernière chose :</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{R \times I}{R}=I
\end{align}
</script>

<p>Wait</p>

<p><img class="center" src="http://lkdjiin.github.io/images/wut.jpg" /></p>

<p>Rappelez vous qu’une fraction, c’est la même chose qu’une division. Si je
généralise:</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{X \times Y}{Z}=X \times Y / Z
\end{align}
</script>

<p>Il faut aussi savoir qu’il n’y a pas de priorité entre la multiplication et
la division, ainsi \(10 \times 2 / 5 = 4\), tout aussi bien que
\(10 / 5 \times 2 = 4\) ou que \(2 / 5 \times 10 = 4\).</p>

<p>Donc :</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{R \times I}{R}
\end{align}
</script>

<p>Équivaut à :</p>

<script type="math/tex; mode=display">
\begin{align}

  R \times I / R
\end{align}
</script>

<p>Ce qui est exactement pareil que :</p>

<script type="math/tex; mode=display">
\begin{align}

  R / R \times I
\end{align}
</script>

<p>Et nous avons vu que <code>R / R</code> vaut 1, ce qui donne :</p>

<script type="math/tex; mode=display">
\begin{align}

  1 \times I
\end{align}
</script>

<p>Ou plus simplement :</p>

<script type="math/tex; mode=display">
\begin{align}

  I
\end{align}
</script>

<h2 id="conclusion">Conclusion</h2>

<p>Notre formule de base nous permet de calculer V à partir de R et de I:</p>

<script type="math/tex; mode=display">
\begin{align}

  V = RI
\end{align}
</script>

<p>On joue avec en divisant chaque coté par R:</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{V}{R} = \frac{RI}{R}
\end{align}
</script>

<p>Ce qui donne:</p>

<script type="math/tex; mode=display">
\begin{align}

  \frac{V}{R} = I
\end{align}
</script>

<p>Qu’on remet dans le bon sens si on préfère, on peut maintenant calculer I à
partir de V et R:</p>

<script type="math/tex; mode=display">
\begin{align}

  I = \frac{V}{R}
\end{align}
</script>

<p>Si nous avons un voltage de 5 Volts et une résistance de 1000 Ohms, combien
aurons nous d’ampères:</p>

<script type="math/tex; mode=display">
\begin{align}

  I = \frac{5}{1000} = 0.005
\end{align}
</script>

<p>Vous venez de déduire une formule mathématique à partir d’une autre et de
l’utiliser !
Et de rattraper plusieurs heures de sèche du collège en quelques minutes ;)</p>

<p>À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/04/03/arduino-un-metronome-tap-tempo/">Arduino : Un métronome tap tempo</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1/">Un jeu de Simon - Étape 1</a></li><li><a href="http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino/">Mes premiers pas avec Arduino</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - Une bande de données infinie]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/"/>
    <updated>2015-02-05T18:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>Dans la définition d’une machine de Turing on trouve:</p>

<blockquote>
  <p>Le ruban est supposé être de longueur infinie vers la gauche ou vers la droite, en d’autres termes la machine doit toujours avoir assez de longueur de ruban pour son exécution.
— Wikipédia</p>
</blockquote>

<p>C’était une grande limitation de l’implémentation de <a href="https://github.com/lkdjiin/turing_machine">ma machine de Turing</a>
que d’avoir une bande de taille fixe. Avec la nouvelle version, cette limitation
est désormais levée.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/infinity.jpg" /></p>

<!-- more -->

<p>Permettre à la bande de grandir à l’infini (en théorie, hein, parce que en
pratique on est toujours limité par la mémoire de l’ordinateur) est finalement
très simple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/turing_machine/tape.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">TuringMachine</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Tape</span>
</span><span class="line">
</span><span class="line">    <span class="no">BLANK_SYMBOL</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="no">BLANK_SYMBOL</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@symbols</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">shift_left</span>
</span><span class="line">      <span class="k">if</span> <span class="vi">@index</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class="line">        <span class="vi">@symbols</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="no">BLANK_SYMBOL</span><span class="p">)</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="vi">@index</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">shift_right</span>
</span><span class="line">      <span class="vi">@symbols</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="no">BLANK_SYMBOL</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@index</span> <span class="o">==</span> <span class="vi">@symbols</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">      <span class="vi">@index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici quelques explications.</p>

<pre><code>@symbols = data.scan(/./)
</code></pre>

<p>Dans le constructeur, on se sert de <code>String#scan</code> pour construire un tableau
avec les données initiales de la bande. Par exemple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="s2">&quot;110&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span>
</span><span class="line"><span class="go">#=&gt;[&quot;1&quot;, &quot;1&quot;, &quot;0&quot;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>@index = 0
</code></pre>

<p>Dans le constructeur toujours, la position de la tête de lecture est
initialement à zéro.</p>

<pre><code>def shift_left
  if @index == 0
    @symbols.unshift(BLANK_SYMBOL)
  else
    @index -= 1
  end
end
</code></pre>

<p>Lorsqu’on bouge la tête de lecture à gauche, nous avons deux cas possibles.
Soit la tête de lecture est déjà dans la position la plus à gauche
(<code>if @index == 0</code>) et dans ce cas il faut créer une nouvelle cellule en tête
du tableau:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="irb"><span class="line"><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">].</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">)</span>
</span><span class="line"><span class="go">#=&gt;[&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Soit la tête de lecture est dans une autre position, et il suffit de la décaler
d’un cran vers la gauche (<code>@index -= 1</code>).</p>

<pre><code>def shift_right
  @symbols.push(BLANK_SYMBOL) if @index == @symbols.size - 1
  @index += 1
end
</code></pre>

<p>Lorsqu’on bouge la tête de lecture à droite, il faut ajouter une cellule à la
fin du tableau (<code>@symbols.push</code>) seulement si la tête de lecture est placée
toute à droite du tableau (<code>@index == @symbols.size - 1</code>).</p>

<p>Dans tous les cas, il faut déplacer la tête de lecture d’un cran à droite
(<code>@index += 1</code>).</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/">Une machine de Turing en Ruby - Le parser</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/28/pas-de-logique-dans-les-vues-rails/">Pas de logique dans les vues Rails</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - La routine de copie]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/"/>
    <updated>2015-02-04T10:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-2">Niveau : <span>intermédiaire</span></div>

<p>La routine de copie est une brique élémentaire d’un programme pour une machine
de Turing. Par exemple, si les données de la bande sont <code>111</code>, la routine de
copie va doubler ces trois symboles en insérant un zéro au milieu: <code>1110111</code>.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/copie-clone.jpg" /></p>

<!-- more -->

<p>Je ne vais pas expliquer la routine de copie
— <a href="http://en.wikipedia.org/wiki/Turing_machine_examples#A_copy_subroutine">cet article de Wikipédia</a>
le fait très bien — mais plutôt montrer comment j’ai du adapter
<a href="https://github.com/lkdjiin/turing_machine">ma machine de Turing</a>
pour pouvoir faire tourner cette routine.</p>

<p>Voici le jeu d’instructions de la routine de copie:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>copy_with_data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">0 A  =&gt; 1 L B</span>
</span><span class="line"><span class="err">0 B  =&gt; 1 N s1</span>
</span><span class="line"><span class="err">0 s1 =&gt; N N HALT</span>
</span><span class="line"><span class="err">1 s1 =&gt; 0 R s2</span>
</span><span class="line"><span class="err">0 s2 =&gt; 0 R s3</span>
</span><span class="line"><span class="err">1 s2 =&gt; 1 R s2</span>
</span><span class="line"><span class="err">0 s3 =&gt; 1 L s4</span>
</span><span class="line"><span class="err">1 s3 =&gt; 1 R s3</span>
</span><span class="line"><span class="err">0 s4 =&gt; 0 L s5</span>
</span><span class="line"><span class="err">1 s4 =&gt; 1 L s4</span>
</span><span class="line"><span class="err">0 s5 =&gt; 1 R s1</span>
</span><span class="line"><span class="err">1 s5 =&gt; 1 L s5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est en deux parties, les deux premières lignes écrivent des données sur la
bande (le nombre <code>11</code>) et les neuf dernières lignes sont effectivement la
routine de copie. Une des limitations actuelles de ma machine de Turing est de
ne pas pouvoir initialiser la bande avec des données spécifiques, il faut donc
le faire depuis le programme, comme ici les deux premières lignes.</p>

<p>Les nouveautés dans ce jeu d’instructions sont les caractères <code>N</code>, qu’on peut
trouver dans les symboles à écrire et dans le mouvement de la tête de lecture,
par exemple dans la 3ème ligne:</p>

<pre><code>0 s1 =&gt; N N HALT
</code></pre>

<p>Cela signifie pas d’écriture et pas de mouvement (<strong>N</strong>o write, <strong>N</strong>o move).</p>

<p>Le parser étant déjà capable d’attraper n’importe quel mot/symbole, il suffit de
faire évoluer la méthode de mise à jour de la bande ainsi (c’est un peu lourd
comme écriture mais ça reste clair et pragmatique):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/turing_machine/instance.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">TuringMachine</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">Instance</span>
</span><span class="line">
</span><span class="line">  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">update_tape</span><span class="p">(</span><span class="n">current_action</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@tape</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:write</span><span class="o">]</span> <span class="k">unless</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:write</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;N&#39;</span>
</span><span class="line">      <span class="vi">@tape</span><span class="o">.</span><span class="n">shift_left</span> <span class="k">if</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:move</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;L&#39;</span>
</span><span class="line">      <span class="vi">@tape</span><span class="o">.</span><span class="n">shift_right</span> <span class="k">if</span> <span class="n">current_action</span><span class="o">[</span><span class="ss">:move</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;R&#39;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Et maintenant la routine de copie fonctionne !</p>

<pre><code>$ turing_machine instruction_sets/copy_with_data
  1 0000000000000000000000000000000000000000 A -&gt; 1LB
                       ^
  2 0000000000000000000100000000000000000000 B -&gt; 1Ns1
                      ^
  3 0000000000000000001100000000000000000000 s1 -&gt; 0Rs2
                      ^
  4 0000000000000000000100000000000000000000 s2 -&gt; 1Rs2
                       ^
  5 0000000000000000000100000000000000000000 s2 -&gt; 0Rs3
                        ^
  6 0000000000000000000100000000000000000000 s3 -&gt; 1Ls4
                         ^
  7 0000000000000000000101000000000000000000 s4 -&gt; 0Ls5
                        ^
  8 0000000000000000000101000000000000000000 s5 -&gt; 1Ls5
                       ^
  9 0000000000000000000101000000000000000000 s5 -&gt; 1Rs1
                      ^
 10 0000000000000000001101000000000000000000 s1 -&gt; 0Rs2
                       ^
 11 0000000000000000001001000000000000000000 s2 -&gt; 0Rs3
                        ^
 12 0000000000000000001001000000000000000000 s3 -&gt; 1Rs3
                         ^
 13 0000000000000000001001000000000000000000 s3 -&gt; 1Ls4
                          ^
 14 0000000000000000001001100000000000000000 s4 -&gt; 1Ls4
                         ^
 15 0000000000000000001001100000000000000000 s4 -&gt; 0Ls5
                        ^
 16 0000000000000000001001100000000000000000 s5 -&gt; 1Rs1
                       ^
 17 0000000000000000001101100000000000000000 s1 -&gt; NNHALT
                        ^
 18 0000000000000000001101100000000000000000 HALT
</code></pre>

<p>Le code est <a href="https://github.com/lkdjiin/turing_machine">sur Github</a>, à plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/">Une machine de Turing en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/04/30/le-hack-fizzbuzz-en-ruby/">Le hack FizzBuzz en Ruby</a></li><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li></ul></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - Le parser]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/"/>
    <updated>2015-02-02T18:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser</id>
    <content type="html"><![CDATA[<div class="level-tag level-tag-1">Niveau : <span>facile</span></div>

<p>La machine de Turing réalisée dans le <a href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/">dernier article</a>
était seulement un brouillon, et elle souffre de plusieurs limitations.
J’aimerais maintenant faire évoluer le programme en permettant à l’utilisateur
de charger un jeu d’instructions quelconque. Pour cela j’aurai besoin
d’un <em>parser</em>, qui sera vite écrit grâce à Ruby.</p>

<p><img class="center" src="http://lkdjiin.github.io/images/gears4.jpg" /></p>

<!-- more -->

<p>Un jeu d’instruction pour la machine de Turing ressemblera à ceci (si vous avez
besoin du code, <a href="https://github.com/lkdjiin/turing_machine">il est ici</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>instruction_sets/busy_beaver_3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">0 A =&gt; 1 R B</span>
</span><span class="line"><span class="err">1 A =&gt; 1 L C</span>
</span><span class="line"><span class="err">0 B =&gt; 1 L A</span>
</span><span class="line"><span class="err">1 B =&gt; 1 R B</span>
</span><span class="line"><span class="err">0 C =&gt; 1 L B</span>
</span><span class="line"><span class="err">1 C =&gt; 1 R HALT</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C’est l’algorithme <em>busy beaver à 3 états</em> que j’ai utilisé pour coder la
première version de la machine. Il faut écrire un <em>parser</em> qui va transformer
ce <em>code source</em> en ce hash Ruby, utilisé en interne par la machine:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>instruction_sets/busy_beaver_3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">{</span>
</span><span class="line"><span class="err">  [&#39;0&#39;, &#39;A&#39;] =&gt; {write: &#39;1&#39;, move: &#39;R&#39;, next_state: &#39;B&#39;},</span>
</span><span class="line"><span class="err">  [&#39;1&#39;, &#39;A&#39;] =&gt; {write: &#39;1&#39;, move: &#39;L&#39;, next_state: &#39;C&#39;},</span>
</span><span class="line"><span class="err">  [&#39;0&#39;, &#39;B&#39;] =&gt; {write: &#39;1&#39;, move: &#39;L&#39;, next_state: &#39;A&#39;},</span>
</span><span class="line"><span class="err">  [&#39;1&#39;, &#39;B&#39;] =&gt; {write: &#39;1&#39;, move: &#39;R&#39;, next_state: &#39;B&#39;},</span>
</span><span class="line"><span class="err">  [&#39;0&#39;, &#39;C&#39;] =&gt; {write: &#39;1&#39;, move: &#39;L&#39;, next_state: &#39;B&#39;},</span>
</span><span class="line"><span class="err">  [&#39;1&#39;, &#39;C&#39;] =&gt; {write: &#39;1&#39;, move: &#39;R&#39;, next_state: &#39;HALT&#39;},</span>
</span><span class="line"><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voici le parser, qui est construit autour de la méthode <code>String#split</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/turing_machine/instructions_parser.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">TuringMachine</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">InstructionsParser</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">raw_instructions</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@lines</span> <span class="o">=</span> <span class="n">raw_instructions</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@instructions</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">parse</span>
</span><span class="line">      <span class="n">build_instructions</span>
</span><span class="line">      <span class="vi">@instructions</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">private</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">build_instructions</span>
</span><span class="line">      <span class="vi">@lines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">instruction</span><span class="o">|</span>
</span><span class="line">        <span class="n">keys</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">instruction</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;=&gt;&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">key_symbol</span><span class="p">,</span> <span class="n">key_state</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="n">split</span>
</span><span class="line">        <span class="n">write</span><span class="p">,</span> <span class="n">move</span><span class="p">,</span> <span class="n">next_state</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">split</span>
</span><span class="line">        <span class="vi">@instructions</span><span class="o">[[</span><span class="n">key_symbol</span><span class="p">,</span> <span class="n">key_state</span><span class="o">]]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">          <span class="ss">write</span><span class="p">:</span> <span class="n">write</span><span class="p">,</span> <span class="ss">move</span><span class="p">:</span> <span class="n">move</span><span class="p">,</span> <span class="n">next_state</span><span class="p">:</span> <span class="n">next_state</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On va l’utiliser comme ça:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">raw_instructions</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="n">parser</span> <span class="o">=</span> <span class="no">InstructionsParser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">raw_instructions</span><span class="p">)</span>
</span><span class="line"><span class="n">instructions</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Je vais expliquer plus en détail. Tout d’abord dans le constructeur, on divise
la grande chaîne de caractères en entrée en autant de lignes indépendantes:</p>

<pre><code>@lines = raw_instructions.split("\n")
</code></pre>

<p>Puis dans la méthode privée <code>build_instructions</code>, on itère sur chacune des
lignes pour construire le hash:</p>

<pre><code>@lines.each do |instruction|
</code></pre>

<p>Chaque ligne est d’abord divisé en deux parties, de chaque coté de <code>=&gt;</code>:</p>

<pre><code>keys, value = instruction.split('=&gt;')
</code></pre>

<p>La partie des clés (celle de gauche) est à son tour divisé en deux, le symbole
sous la tête de lecture et l’état de la machine:</p>

<pre><code>key_symbol, key_state = keys.split
</code></pre>

<p>Ensuite c’est au tour de la partie de droite, celle qui représente la prochaine
instruction:</p>

<pre><code>write, move, next_state = value.split
</code></pre>

<p>Enfin, on ajoute clé et valeur dans le hash:</p>

<pre><code>@instructions[[key_symbol, key_state]] = {
  write: write, move: move, next_state: next_state
}
</code></pre>

<p>Pour finir, voici mon premier jeu d’instructions pour une machine de Turing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>instruction_sets/write101</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="raw"><span class="line"><span class="err">0 A =&gt; 1 R B</span>
</span><span class="line"><span class="err">0 B =&gt; 0 R C</span>
</span><span class="line"><span class="err">0 C =&gt; 1 R HALT</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ça fait quoi ? Ça écrit 101, tout simplement :</p>

<pre><code> turing_machine instruction_sets/write101 
  1 0000000000000000000000000000000000000000 A -&gt; 1RB
                       ^
  2 0000000000000000000100000000000000000000 B -&gt; 0RC
                        ^
  3 0000000000000000000100000000000000000000 C -&gt; 1RHALT
                         ^
  4 0000000000000000000101000000000000000000 HALT
</code></pre>

<p>Je vous rappelle que vous pouvez consulter le code de la
<a href="https://github.com/lkdjiin/turing_machine">machine de Turing</a>.</p>

<p>Voilà, avec l’aide de <code>String#split</code> il est facile d’écrire un parser simple.
Alors bien sûr, ce parser n’est pas vraiment complet, il manque par exemple la
gestion des erreurs. Mais il y a des choses plus urgentes à implémenter, comme
le mouvement nul, le ruban infini, ou la possibilité de commencer le programme
avec un ruban qui contient des données…</p>

<p>À plus tard.</p>

<section><h1>Articles connexes</h1><ul><li><a href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/">Une machine de Turing en Ruby - Une bande de données infinie</a></li><li><a href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/">Comment convertir un nombre décimal en binaire en Bash ?</a></li><li><a href="http://lkdjiin.github.io/blog/2015/03/28/pas-de-logique-dans-les-vues-rails/">Pas de logique dans les vues Rails</a></li></ul></section>
]]></content>
  </entry>
  
</feed>
