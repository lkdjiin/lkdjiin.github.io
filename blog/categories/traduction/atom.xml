<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : traduction | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/traduction/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-01-18T09:34:57+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simuler une honnête pièce de monnaie à partir d'une truquée]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/15/simuler-une-honnete-piece-de-monnaie-a-partir-dune-truquee/"/>
    <updated>2014-02-15T12:20:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/15/simuler-une-honnete-piece-de-monnaie-a-partir-dune-truquee</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p><em>Ce qui suit est une traduction assez libre de l’article original
<a href="http://jeremykun.com/2014/02/08/simulating-a-fair-coin-with-a-biased-coin/">Simulating a Fair Coin with a Biased Coin</a>,
j’ai laissé le code python original et ajouté du code Ruby.</em></p>

<!-- more -->

<p><strong>Problème</strong> : Simuler une honnête pièce de monnaie, alors qu’on a uniquement
accès à une pièce truquée.</p>

<p><strong>Solution</strong> :</p>

<p>En Python</p>

<p><code>python
def fairCoin(biasedCoin):
   coin1, coin2 = 0,0
   while coin1 == coin2:
      coin1, coin2 = biasedCoin(), biasedCoin()
   return coin1
</code></p>

<p>En Ruby</p>

<p><code>ruby
def fair_coin
  coin1, coin2 = 0, 0
  coin1, coin2 = biased_coin, biased_coin while coin1 == coin2
  coin1
end
</code></p>

<p><strong>Discussion</strong> : C’est à l’origine une idée brillante de
<a href="http://en.wikipedia.org/wiki/John_von_Neumann">von Neumann</a>. Si nous avons
une pièce truquée (c’est à dire une pièce qui tombe sur face avec une
probabilité différente de 1/2), on peut simuler une pièce non truquée
en lançant deux pièces jusqu’à ce que les deux résultats (pile ou face)
soient différents. Comme on a des résultats différents, la probabilité que
la première pièce donne face et que la seconde donne pile est la même que
la probabilité d’obtenir le résultat inverse (pièce 1 donnant pile et pièce 2
donnant face). Donc, si on retourne simplement le résultat de la première
pièce, on aura pile ou face avec une probabilité de 1/2.</p>

<p>Notez que l’on a pas besoin de connaître ni d’assumer quoique ce soit de
la fonction <code>biasedCoin</code>/<code>biased_coin</code>, mis à part qu’elle renvoit 1 ou 0
à chaque appel et que les résultats sont indépendant les uns des autres.
En particulier, nous n’avons pas besoin de connaître la probabilité
d’obtenir 1. De plus, nous n’utilisons pas le hasard directement (seulement
à travers la fonction <code>biasedCoin</code>/<code>biased_coin</code>).</p>

<p>Voici une simulation simple :</p>

<p>En python</p>

<p><code>python
from random import random
def biasedCoin():
   return int(random() &lt; 0.2)
</code></p>

<p>En Ruby</p>

<p><code>ruby
def biased_coin
  rand &lt; 0.2 ? 1 :  0
end
</code></p>

<p>Cette fonction renvoie 1 avec une probabilité de 0.2. Si nous essayons
maintenant:</p>

<p>En Python</p>

<p><code>python
sum(biasedCoin() for i in range(10000))
</code></p>

<p>En Ruby</p>

<p><code>ruby
(1..10_000).reduce {|sum| sum + biased_coin }
</code></p>

<p>Nous devrions obtenir un nombre proche de 2000. J’ai obtenu 2058.</p>

<p>D’un autre coté, si nous faisons:</p>

<p>En Python</p>

<p><code>python
sum(fairCoin(biasedCoin) for i in range(10000))
</code></p>

<p>En Ruby</p>

<p><code>ruby
(1..10_000).reduce {|sum| sum + fair_coin }
</code></p>

<p>Nous devrions obtenir approximativement 5000. Et quand j’ai essayé, j’ai
obtenu 4982, ce qui est la preuve que <code>fairCoin</code>/<code>fair_coin</code> renvoie bien
1 avec une probabilité de 1/2 (même si j’ai déjà fourni cette preuve !).</p>

<p>Pour plus d’informations sur ce sujet, regardez
<a href="http://www.eecs.harvard.edu/~michaelm/coinflipext.pdf">ces notes</a> par Michael Mitzenmacher de l’université de Harvard.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aidez-vous : traduisez !]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez/"/>
    <updated>2013-12-06T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/06/aidez-vous-traduisez</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>D’aussi loin que je me souvienne,
j’ai toujours traduit de la documentation technique anglaise en français.
J’ai commencé par traduire des tutoriaux sur l’assembleur, juste pour moi.
Plus tard, j’ai traduis des pages de documentation sur Netbeans.
C’était un autre temps, un temps où je n’utilisais pas encore Vim, où je
programmais en Java… Et j’ai énormement appris en faisant des traductions.</p>

<!-- more -->

<p>Tous les développeurs ne lisent pas l’anglais, même technique. Certains ont
des problèmes avec la langue de Shakespeare et ont besoin de documentation
en français. On peut toujours se dire que, quand même, ils devraient s’y
mettre, mais en attendant, ils font comment ?</p>

<p>Même quand vous maitrisez assez l’anglais pour lire la documentation dans
la langue originale, il est toujours plaisant de pouvoir
lire dans sa langue, surtout pour une première approche du produit.</p>

<p><strong>Aidez-vous, traduisez de la documentation open-source !</strong> J’y vois trois
avantages:</p>

<ol>
  <li>Quel que soit votre niveau en anglais, vous allez vous améliorer en
en faisant des traductions. Apprendre du nouveau vocabulaire, des
nouvelles tournures, etc.</li>
  <li>En traduisant des documentations, vous allez en apprendre plus sur
le produit, quel qu’il soit, puisque vous serez dans l’obligation
de comprendre chaque détail du produit.</li>
  <li>Ça peut être un avantage pour votre CV. S’il est vrai que certains
employeur ne s’intéressent pas à votre anglais, je n’en ai jamais vu
qui considèrent un bon niveau d’anglais comme un point négatif ;)</li>
</ol>

<p>Même si vous pensez ne pas avoir un niveau suffisant, lancez-vous ! Vous
en retirerez toujours un bénéfice.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une regex pour savoir si un nombre est premier]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/05/une-regex-pour-savoir-si-un-nombre-est-premier/"/>
    <updated>2013-11-05T16:55:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/05/une-regex-pour-savoir-si-un-nombre-est-premier</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd’hui je traduis (approximativement) un article de 2007 qui m’a fasciné:
<a href="http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/">A regular expression to check for prime numbers</a>.</p>

<!-- more -->

<p>Les regexs sont très puissantes. C’est un truc que je lis une ou deux fois par
jour sur le web.</p>

<p>Pendant que j’étais sur le net aujourd’hui, je suis tombé sur
<a href="http://montreal.pm.org/tech/neil_kandalgaonkar.shtml">cette page</a>
qui décrit minutieusement la regex <code>/^1?$|^(11+?)\1+$/</code> en Perl pour voir
si un nombre est premier ou non !</p>

<p>Pour être franc, j’étais sceptique. La regex semble être magique ! Et je 
voulais la comprendre mieux. Je l’ai réécrite en Ruby, pour la tester:</p>

<p><code>irb
[~]⇒ irb
&gt;&gt; def prime?(n)
&gt;&gt;   ("1" * n) !~ /^1?$|^(11+?)\1+$/
&gt;&gt; end
=&gt;
&gt;&gt; prime? 10
=&gt; false
&gt;&gt; prime? 11
=&gt; true
&gt;&gt; prime? 12
=&gt; false
&gt;&gt; prime? 13
=&gt; true
&gt;&gt; prime? 99
=&gt; false
&gt;&gt; prime? 100
=&gt; false
&gt;&gt; prime? 101
=&gt; true
</code></p>

<p>Cool ! Ça marche aussi en Ruby ! Ce qui veut dire qu’il n’y a aucune magie
due à Perl. La regex fonctionne vraiment. Mais comment ? Essayons de la
décortiquer.</p>

<h2 id="est-ce-que-7-est-un-nombre-premier-">Est-ce-que 7 est un nombre premier ?</h2>

<p>Pour le savoir, la méthode génère “1111111” et regarde si cette chaîne
<strong>ne correspond pas</strong> avec <code>/^1?$|^(11+?)\1+$/</code>. Si il n’y a pas
correspondance, alors le nombre est premier.</p>

<p>Notez que la regex a deux parties (séparées par une barre verticale <code>|</code>).</p>

<p>La première partie <code>/^1?$/</code> est triviale, et cherche une correspondance
avec un début de ligne (<code>^</code>), un 1 optionel (<code>1?</code>) et une fin de ligne
(<code>$</code>), ce qui implique une chaîne vide ou “1”. Donc l’appel de cette
méthode quand n vaut 0 ou 1 renverra false, le bon résultat.</p>

<p>La seconde partie est plus… magique…</p>

<p><code>/^(11+?)\1+$/</code> cherche une correspondance avec un début de ligne (<code>^</code>)
puis <code>11+?</code> puis <code>\1+</code> et finalement une fin de ligne (<code>$</code>).
Je suppose que vous savez que <code>\1</code> est une variable attachée à ce qui a été
mis en correspondance précédement (dans notre cas avec <code>11+?</code>).</p>

<p>Allons y lentement…</p>

<p><code>(11+?)</code> fait deux choses:</p>

<ol>
  <li>Il cherche une correspondance avec un “1” suivi par un ou plusieurs autres
“1” <strong>de façon minimale</strong>. Ce qui signifie qu’on aura une correspondance
avec “11” la première fois (notez que si il n’y avait pas de <code>?</code> dans
<code>(11+?)</code> c’est la chaîne entière qui serait mise en correspondance).</li>
  <li>La chaîne obtenue (“11” la première fois) est attachée à la variable <code>\1</code>.</li>
</ol>

<p><code>\1+</code> cherche alors une correspondance avec ce qu’on a obtenu avant (“11”
la première fois) <strong>de manière répétitive, une ou plusieurs fois</strong>.
Si une correspondance est trouvée, alors le nombre n’est pas premier.</p>

<p>Si vous suivez jusqu’ici, vous avez peut-être réalisé que cela éliminait tout
les nombres pairs, excepté 2 (par exemple, 8 est “11111111” and donc <code>(11+?)</code>
va correspondre avec “11” et <code>\1+</code> va correspondre avec “111111”).</p>

<p>Pour les nombres impairs (7 dans notre cas), le <code>(11+?)</code> correspond à “11”
la première fois mais <code>\1+$</code> ne peut pas être vrai (notez le <code>$</code>) puisqu’il
reste cinq “1”. Le moteur de regexp va <strong>revenir en arrière</strong> et <code>(11+?)</code>
va alors correspondre avec “111” et là aussi, <code>\1+$</code> sera faux puisqu’il
reste quatre “1” (et à ce moment là, <code>\1+$</code> ne peut correspondre qu’avec un
nombre de “1” qui est multiple de 3, suivi par une fin de ligne), etc…
D’où le fait que “1111111” ne correspondra jamais avec la regex, ce qui
implique que 7 est un nombre premier.</p>

<p>[…] Voyons ce qu’il se passe avec 9, qui n’est pas un nombre premier:
“1” * 9 devrait correspondre avec la regex.</p>

<p>“1” * 9 = “111111111”. <code>(11+?)</code> correspond initialement à “11”. <code>\1+$</code> ne
peut être mis en correspondance puisqu’il reste 7 “1”. Quand le moteur de
regex repart en arrière, <code>(11+?)</code> correspond alors avec “111”. Et cette
fois <code>\1+$</code> correspond aux 6 “1” restants ! D’où 9 n’est pas premier.</p>

<p>Simple et beau en même temps.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
