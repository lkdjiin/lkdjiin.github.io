<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : scheme | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/scheme/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-07-20T13:51:12+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installer Scheme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/31/installer-scheme/"/>
    <updated>2013-10-31T18:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/31/installer-scheme</id>
    <content type="html"><![CDATA[<p>Avant d’apprendre Scheme, il faut l’installer. Avant de l’installer, il
faut choisir une implémentation: interpréteur ou compilateur ? Les deux ?
Quel OS ? Quel(s) dialecte(s) ? Le site
<a href="http://community.schemewiki.org/?scheme-faq-standards#implementations">community.schemewiki.org</a>
recense 75 implémentations ! Oui, j’ai compté.</p>

<!-- more -->

<p>Après prises de conseils et réflexion, j’ai décidé d’essayer trois
implémentations:
<a href="http://www.gnu.org/software/guile/">Guile</a>,
<a href="http://www.call-cc.org/">Chicken</a>
et <a href="http://racket-lang.org/">Racket</a>.
<strong>Guile</strong> parce qu’il est déjà installé sur ma machine.
<strong>Chicken</strong> pour son compilateur vers
le langage C. <strong>Racket</strong> pour ses nombreux DSL, parce qu’il a l’air très cool
pour créer de nouveaux DSL et parce qu’il semble être le plus utilisé.</p>

<h2 id="guile">Guile</h2>

<p>Guile semble être déjà installé sur la plupart des Linux. En tout cas, il
l’était sur ma machine…
Le REPL n’utilise pas readline par défaut, ce qui est d’ailleurs le cas
des 3 implementations que j’ai testé.
Pour activer readline, il faut créer un fichier <code>.guile</code> dans le <code>home</code> et y mettre:</p>

<p><code>scheme .guile
(use-modules (ice-9 readline))
(activate-readline)
</code></p>

<h2 id="chicken">Chicken</h2>

<p>J’ai installé Chicken grâce aux paquets Debian, rien à dire… Pour activer
readline dans le REPL, il faut d’abord installer une bibliothèque (un <em>egg</em>
dans le jargon Chicken):</p>

<pre><code>sudo chicken-install readline
</code></pre>

<p>Ensuite on crée un fichier <code>~/.csirc</code> avec le contenu suivant:</p>

<p><code>scheme .csirc
(use readline)
(current-input-port (make-gnu-readline-port))
(gnu-history-install-file-manager
 (string-append (or (get-environment-variable "HOME") ".") "/.csi.history"))
</code></p>

<p>Enfin on crée le fichier d’historique:</p>

<pre><code>touch ~/.csi.history
</code></pre>

<h2 id="racket">Racket</h2>

<p>Je voulais la toute dernière version, j’ai donc téléchargé les sources et
lancé une compilation. Tout a très bien fonctionné, le fichier <code>README</code> est
parfaitement clair. Pour activer readline dans le REPL de Racket, il faut
cette fois créé un fichier <code>~/.racketrc</code> avec le texte suivant:</p>

<p><code>scheme .racketrc
(require xrepl)
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je vais apprendre Scheme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme/"/>
    <updated>2013-10-29T22:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme</id>
    <content type="html"><![CDATA[<p>C’est décidé, je me mets à <a href="http://en.wikipedia.org/wiki/Scheme_%28programming_language%29">Scheme</a>.
En voici les raisons principales:</p>

<ul>
  <li>Je veux apprendre <a href="http://racket-lang.org/">Racket</a>, qui est me semble-t-il un surensemble de Scheme.</li>
  <li>J’ai essayé Emacs Lisp il y a longtemps (au siècle dernier !), 
j’avais trouvé ça intéressant.</li>
  <li>J’ai fait du Logo il y a encore plus longtemps et j’en garde un très
bon souvenir.</li>
  <li>Je cherche un langage qui ne soit pas orienté objet pour écrire des
algorithmes génétiques, parce que je ne suis pas persuadé que ce soit
le meilleur paradigme pour ce type de programmes.</li>
  <li>Je cherche un langage qui ait un coté fonctionnel mais je ne suis pas
encore prêt à abandonner le confort des variables mutables.</li>
</ul>

<!-- more -->

<p>Bref, je crois que Scheme (Racket en fait) est le langage que je cherche.
Vous pouvez donc vous attendre à quelques articles sur le sujet dans les
semaines qui viennent ;) Et pour commencer je parlerais un peu de la
<strong>véritable jungle</strong> des interpreteurs/compilateurs pour Scheme.
J’en ai sélectionné deux pour l’instant: Guile et Racket.</p>

<p>Est-ce-que certains d’entre vous ont de l’expérience avec Scheme et/ou
Racket ? Des conseils à me donner ?</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
