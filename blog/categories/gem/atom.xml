<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : gem | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-02-05T18:43:44+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mieux utiliser le programme gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem/"/>
    <updated>2015-01-23T11:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/23/mieux-utiliser-le-programme-gem</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Le programme <code>gem</code> est bien connu des rubyistes, et ce pour une bonne raison:
il est au coeur de l'utilisation de Ruby. Si je veux par exemple profiter
de <a href="https://github.com/michaeldv/awesome_print">awesome_print</a>
dans ma console irb, je vais l'installer grâce à <code>gem</code>:</p>

<pre><code>$ gem install awesome_print
</code></pre>

<p>De même, avez-vous déjà vu une appli Rails se passer d'un Gemfile ?</p>

<p>``` ruby Gemfile
source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>&rsquo;
ruby &lsquo;2.0.0&rsquo;</p>

<p>gem &lsquo;rails&rsquo;, &lsquo;4.0.0&rsquo;
gem &lsquo;pg&rsquo;
&hellip;
```</p>

<p>En fait, si vous avez fait seulement 3 jours de Ruby dans votre vie, vous savez
utiliser <code>gem</code>. Mais l'utilisez-vous à fond ? Moi, non. Enfin pas encore.</p>

<p><img class="center" src="/images/diamond-1_512.png"></p>

<!-- more -->


<p>Depuis 5 ou 6 ans que j'utilise quotidiennement Ruby, je n'avais jamais
écrit <code>gem --help</code>. Jamais. Pas une seule fois.</p>

<pre><code>$ gem --help
RubyGems is a sophisticated package manager for Ruby.  This is a
...
  Further help:
    gem help commands            list all 'gem' commands
    gem help examples            show some examples of usage
    gem help gem_dependencies    gem dependencies file guide
    gem help platforms           gem platforms guide
    gem help &lt;COMMAND&gt;           show help on COMMAND
    gem server                   present a web page at
...
</code></pre>

<p>J'ai l'impression qu'il y a de quoi lire et de quoi faire. Voici donc un rapide
tour d'horizon des possibilités offertes par <code>gem</code>.</p>

<h2>gem help commands</h2>

<p>Commençons par regarder les différentes commandes:</p>

<pre><code>$ gem help commands
GEM commands are:

    build                  Build a gem from a gemspec
    cert                   Manage RubyGems certificates and signing settings
...
    wrappers               Re run generation of environment wrappers for gems.
    yank                   Remove a pushed gem from the index
...
Commands may be abbreviated, so long as they are unambiguous.
</code></pre>

<p>J'ai abrégé la sortie ci-dessus car il y a <strong>33 commandes</strong>, je n'avais vraiment
pas la moindre idée d'un nombre si important de commande. En voici la liste:</p>

<ul>
<li>build</li>
<li>cert</li>
<li>check</li>
<li>cleanup</li>
<li>contents</li>
<li>dependency</li>
<li>environment</li>
<li>fetch</li>
<li>generate_index</li>
<li>help</li>
<li>install</li>
<li>list</li>
<li>lock</li>
<li>mirror</li>
<li>open</li>
<li>outdated</li>
<li>owner</li>
<li>pristine</li>
<li>push</li>
<li>query</li>
<li>rdoc</li>
<li>regenerate_binstubs</li>
<li>search</li>
<li>server</li>
<li>sources</li>
<li>specification</li>
<li>stale</li>
<li>uninstall</li>
<li>unpack</li>
<li>update</li>
<li>which</li>
<li>wrappers</li>
<li>yank</li>
</ul>


<p>Personnellement j'ai déjà utilisé <code>build</code>, <code>cleanup</code>, <code>install</code>, <code>list</code>,
<code>push</code>, <code>uninstall</code>, <code>update</code> et c'est tout. 7 commandes sur 33, je suis loin du compte.</p>

<p>En regardant d'un peu plus près la sortie de <code>gem help commands</code>,
je m'aperçois qu'on peut abréger chaque commande:</p>

<pre><code>$ gem install my_gem
</code></pre>

<p>seras donc identique à:</p>

<pre><code>$ gem i my_gem
</code></pre>

<p>J'aime beaucoup cette idée.</p>

<h2>gem help a_command</h2>

<p>On peut obtenir de l'aide sur une commande spécifique.
Par exemple, avec <code>gem help install</code>, j'apprend que les options permettant de
ne pas générer la documentation:</p>

<pre><code>--no-rdoc
--no-ri
</code></pre>

<p>sont des options dépréciées. On peut maintenant utiliser:</p>

<pre><code>-N, --no-document
</code></pre>

<h2>gem help examples</h2>

<p>Évidemment cette commande affiche plusieurs exemples ;) Comme la manière
d'installer une version spécifique d'une gem:</p>

<pre><code>$ gem install rake --version 0.3.1
</code></pre>

<p>Je ne sais pas pourquoi je ne me souviens jamais de cette manière de faire,
pourtant évidente. Maintenant je n'aurais plus besoin de poser la question à
un moteur de recherche, je me contenterais de <code>gem help examples</code>.</p>

<h2>gem server</h2>

<p>Une petite curiosité : <code>gem server</code> fournit une page html, à consulter à
l'adresse <code>localhost:8808</code> avec la liste des gems installées. Ça semble un peu
gadget, d'autant plus qu'on peut avoir ces informations rapidement dans la
console avec la commande <code>list</code>:</p>

<pre><code>$ gem list

*** LOCAL GEMS ***

awesome_print (1.6.1)
bigdecimal (1.2.6)
bundler (1.7.9)
...
</code></pre>

<p>Et puis avec <code>gem help list</code>, j'ai trouvé comment obtenir des détails sur les
gems:</p>

<pre><code>$ gem list -d

*** LOCAL GEMS ***

awesome_print (1.6.1)
    Author: Michael Dvorkin
    Homepage: http://github.com/michaeldv/awesome_print
    License: MIT
    Installed at: /home/xavier/.rvm/gems/ruby-2.2.0

    Pretty print Ruby objects with proper indentation and colors

bigdecimal (1.2.6)
    Authors: Kenta Murata, Zachary Scott, Shigeo Kobayashi
    Homepage: http://www.ruby-lang.org
    Installed at (default): /home/xavier/.rvm/rubies/ruby-2.2.0/lib/ruby/gems/2.2.0

Arbitrary-precision decimal floating-point number library.

...
</code></pre>

<h2>Encore du boulot…</h2>

<p>Je n'ai pas fini de la lire, cette documentation. Elle semble prometteuse, et
je sens que je vais apprendre encore pas mal de choses.</p>

<p>J'espère vous avoir donné envie de regarder certaines commandes plus en détails.
Dans un monde idéal, il faudrait que je regarde les 33…</p>

<p>À bientôt.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sortie de Coco version 0.11.0]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/24/sortie-de-coco-version-0-dot-11-dot-0/"/>
    <updated>2014-05-24T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/24/sortie-de-coco-version-0-dot-11-dot-0</id>
    <content type="html"><![CDATA[<p>Je viens juste de mettre en ligne la version 0.11.0 de Coco, une gem de
<em>code coverage</em> pour Ruby.</p>

<!-- more -->


<p>Ce que fait cette nouvelle version:</p>

<ul>
<li>Échappe proprement les entités HTML dans les rapports.</li>
<li>Implémente des compteurs de <em>hit</em>.</li>
<li>Sortie d'avertissement sur la console lors de l'utilisation de
fonctionnalités dépréciées.</li>
</ul>


<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser une version particulière d'une gem Ruby... dans une gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem/"/>
    <updated>2014-05-21T20:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>On connait tous le moyen d'utiliser une gem d'une version précise dans un
projet Rails. Il suffit de mettre ceci dans le Gemfile:</p>

<p><code>ruby Gemfile
gem 'foo', '=1.2.3'
</code></p>

<p>Et hop, Rails, avec son coté <em>magique</em>, fait automatiquement le <code>require</code>
nécéssaire pour charger la gem <code>foo</code>, avec la version <code>1.2.3</code>.
Mais qu'en est-il lorsqu'on veut faire la même chose dans une gem, ou bien
dans un simple script ?</p>

<!-- more -->


<p>Si j'écris un article sur ce sujet c'est parce que j'oublie régulièrement
comment faire. Et qu'à chaque fois je dois perdre quelques minutes à chercher.
En l'écrivant une fois pour toutes, j'éspère que ça va rentrer ;)</p>

<p>La solution est évidemment très simple, on écrit ce qui suit dans son script:</p>

<p><code>ruby
gem 'foo', '=1.2.3'
require 'foo'
</code></p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mettre à jour des gems ayants des références circulaires avec Bundle]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/"/>
    <updated>2014-04-28T21:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ok, c'est sûrement le titre le plus incompréhensible de l'histoire de ce
blog. Mais je n'arrive pas à trouver mieux…</p>

<p>Prenons le Gemfile fictif suivant:</p>

<pre><code>gem a
gem b
gem c
</code></pre>

<p>Je veux mettre à jour la gem a, de la version 1.0.0 vers la nouvelle version
1.0.1.</p>

<!-- more -->


<p>Pour ça je fais évidemment:</p>

<pre><code>bundle update a
</code></pre>

<p>Mais voilà que <code>bundle</code> me répond quelque chose comme ça:</p>

<pre><code>impossible de mettre à jour la gem a
la gem a 1.0.1 dépend de la gem b 1.0.1
</code></pre>

<p>D'accord, pas de souci, je fais donc:</p>

<pre><code>bundle update b
</code></pre>

<p>Et devinez ce que ce cher <code>bundle</code> me répond ?</p>

<pre><code>impossible de mettre à jour la gem b
la gem b 1.0.1 dépend de la gem c 1.0.1
</code></pre>

<p>Bon, j'espère que c'est bientôt fini. Parce que évidemment mon Gemfile
réel ne comporte pas que 3 gems, lui. Donc je me soumet:</p>

<pre><code>bundle update c
</code></pre>

<p>Et la réponse ne tarde pas:</p>

<pre><code>impossible de mettre à jour la gem c
la gem c 1.0.1 dépend de la gem a 1.0.1
</code></pre>

<p>Super :( J'ai l'impression qu'on me demande de remplir un formulaire
administratif ! La gem a dépend de b, qui elle, dépend de c, qui à son
tour dépend de a…</p>

<p>Malgré tout, la solution est très simple (merci collègue
<a href="https://twitter.com/hellvinz">@hellvinz</a>) il suffit de mettre à jour les
3 gems en même temps:</p>

<pre><code>bundle update a b c
</code></pre>

<p>Et le tour est joué. Peut-être que vous le saviez déjà ? Mais moi j'avais
raté cette partie de Bundle.</p>

<p>Aujourd'hui j'ai encore appris quelque chose :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sortie de coco 0.9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/11/sortie-de-coco-0-dot-9/"/>
    <updated>2014-02-11T20:40:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/11/sortie-de-coco-0-dot-9</id>
    <content type="html"><![CDATA[<p>La version 0.9 de la gem coco est sortie il y a quelques jours.
Coco est une bibliothèque de couverture de code (code coverage) pour
Ruby de 1.9.2 à 2.1.</p>

<!-- more -->


<p>Cette nouvelle version ajoute une option de configuration qui permet
de dire à <em>coco</em> quand démarrer, ou quand ne pas démarrer.</p>

<p>Pour les projets où la suite de tests met beaucoup de temps à tourner,
on fini souvent par jouer un seul test quand on développe, et la suite
entière seulement avant de commiter et/ou pusher. Dans ce cas, le
comportement de <em>coco</em> pouvait être assez agaçant puisque la gem
reportait une longue liste de fichiers non-couverts. Maintenant c'est
arrangé, mettez ceci dans votre fichier de configuration:</p>

<pre><code>:always_run: false
</code></pre>

<p>Lorsque vous lancez les tests comme d'habitude (ou <code>rake</code>, ou un
seul fichier, etc):</p>

<pre><code>rspec spec/
</code></pre>

<p><em>Coco</em> ne démarrera pas. Pour lui dire de faire son travail, il suffit
de définir la variable d'environnement <code>COCO</code>:</p>

<pre><code>COCO=1 rspec spec/
</code></pre>

<p>Vous pouvez <a href="https://github.com/lkdjiin/coco">télécharger</a> coco sur Github.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
