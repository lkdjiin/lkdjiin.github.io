<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : guest | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/guest/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-08-06T17:40:22+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to stay productive while working from home]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/27/how-to-stay-productive-while-working-from-home/"/>
    <updated>2015-07-27T13:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/27/how-to-stay-productive-while-working-from-home</id>
    <content type="html"><![CDATA[<p><em>Pour la première fois voici un article en anglais écrit par une développeuse qui
travaille pour une entreprise française, depuis le Mexique et le Brésil.</em></p>

<h2 id="guest-post-"><code>{ Guest Post }</code></h2>

<p>It’s been a bit more than year since I started remote working from Mexico and Brazil. I must admit it wasn’t easy to adapt myself to this way of working, as I consider myself someone who likes to talk and share some fun moments with my colleagues and friends.</p>

<!-- more -->

<p>The reasons why I took the decision of working remotely were purely personal, from spending more time with my family to visit friends in other countries. I took all this as my main motivation in this new adventure. </p>

<p>But even with this, motivation is not the only thing that can get you through a successful to remote working.</p>

<h2 id="distractions">Distractions</h2>

<p>If you don’t live alone, you won’t be the only one at your home adapting to remote working. Your family or roommates will have to adapt too.
Having your own space at your house, where you can focus during your working hours will help you a lot. It is a good idea to avoid common areas such as the living room or dinning. Neither working from your bedroom the best option. 
You should find a place dedicated only for work and where you feel confortable, that way you can disconnect from your duties once your working hours are finished, and the people in your house will think twice before interrupting you.</p>

<p>From time to time is nice to work from co working spaces, there you can meet other people that do remote working as well, it is nice to chat about their projects, and even how they handle remote working. If you will be doing remote working while travelling maybe it is worth for you to take a look at  <a href="https://www.desktimeapp.com/">Desktime App</a> there you can look for co working space by city.</p>

<h2 id="organization">Organization</h2>

<p>Organizing your day is one of the things that will lead you to achieving your objectives easily. 
People tend to think that remote working equals to “working in your own schedule”, which for some people might be true, I strongly advice to organize your day as if you were in your office or in a “regular job”. This way you can maintain a routine, stick to lunch hours and mainly you work only the hours you should work. Without a schedule you can easily find yourself having 2 lunches a day or working more time than you should. Resting is always important to maintain your productivity.</p>

<h2 id="communication">Communication</h2>

<p>One of trickiest thing about remote working is communication among your team, first off you have to work a lot in your writing and speaking skills. 
Also, I think it is important to maintain meetings like: <strong>Retrospective meetings</strong> so everyone can talk about the issues they encounter during the week and find a solution with your team.
Standups are important too, it is a really good way to communicate to your team what you are currently doing and if you might need a hand from them. 
In my case, communication is even harder, as I’m the only one in my team that works outside France, which means I start my day at 2 p.m. (Paris time). To handle this, we do asynchronous standups, which are written in Slack (our main communication tool), pinging if necessary the people we need to talk with. </p>

<p>At Tigerlily we even have a Slack room, where we come to say hi to everyone when we arrive and aware people if we will be away for some reason. This channel is also use to share articles or even fun stuff we found on the Internet is like a water cooler room.</p>

<p>Besides Slack, we use a lot Google Hangouts to do our meetings, and lately we have started using appear.in, which is a very simple app that allows you to start a video call without signing in, just by sharing a dedicated URL.</p>

<h2 id="breaks">Breaks</h2>

<p>It is important to take small breaks during your working hours, as you could do in your office. Some people find pomodoring a good way to manage their time, if you haven’t use it give it a try.</p>

<p>Finally, working from home or remotely doesn’t mean you don’t get to socialize with other people. With the extra time you gain from commuting you can use it to enroll in outside activities, or any kind of hobby you have been willing to practice, even assisting to your local meet up or why not organizing one :) </p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="/images/Ana.jpg"></p>

<p><strong>Ana Rosas</strong><br />
Full-stack developer, working remotely at Tigerlily from Mexico and Brazil.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment j'ai amélioré mon Ruby avec des contrats]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/07/13/comment-jai-ameliore-mon-ruby-avec-des-contrats/"/>
    <updated>2015-07-13T12:42:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/07/13/comment-jai-ameliore-mon-ruby-avec-des-contrats</id>
    <content type="html"><![CDATA[<h2 id="guest-post-"><code>{ Guest Post }</code></h2>

<p>Mes aventures avec une quantité de langages m’ont permis d’entrevoir de nouvelles approches et techniques.
Par exemple, un des gros apports d’Haskell sont les <a href="http://lyah.haskell.fr/creer-nos-propres-types-et-classes-de-types">Types</a> et dans Erlang/Elixir le <a href="http://learnyousomeerlang.com/syntax-in-functions">Pattern-matching</a> est roi.
Professionnellement je code principalement en Ruby et je rêvais d’avoir un système de Types avancé ainsi que du pattern-matching.
C’est ainsi que j’ai découvert une super gem <a href="https://github.com/egonSchiele/contracts.ruby">Contracts.ruby</a> et dans cet article je vais essayer de vous présenter le <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design par Contrats</a> à travers l’utilisation de cette gem.</p>

<!-- more -->

<h2 id="quest-ce-quun-contrat-">Qu’est-ce qu’un contrat ?</h2>

<p>Un contrat permet de s’assurer de ce qu’une méthode attend en entrée (pré-condition), de ce qu’elle produit en sortie (post-condition). Il va définir comment notre méthode se comporte mais aussi vérifier ce comportement.
La gem <code>Contracts.ruby</code> nous permet de décorer nos méthodes avec du code qui va vérifier que les entrées et les sorties correspondent à ce que le contrat spécifie. Bien sûr, on est pas obligé d’annoter chacune de nos méthodes mais je pense que spécifier le contrat sur toutes celles qui sont publiques ne peut qu’être bénéfique.</p>

<h2 id="un-premier-exemple">Un premier exemple</h2>

<p><code>ruby
Contract Num, Num =&gt; Num
def add(a, b)
  a + b
end
</code></p>

<p>Le contrat de ma méthode est <code>Contract Num, Num =&gt; Num</code> ce qui nous indique que la méthode <em>add</em> prend deux nombres en entrée et retourne un nombre. Simple, non ?
Vous allez me dire que ok, c’est de la documentation, j’aurais pu juste ajouter un commentaire. Mais, puisqu’il s’agit d’un contrat, la gem Contracts.ruby va permettre de nous assurer que celui-ci est respecté.</p>

<p>```ruby
require ‘contracts’</p>

<p>class Foo
  include Contracts</p>

<p>Contract Num, Num =&gt; Num
  def self.add(a, b)
    a + b
  end
end
```</p>

<p><code>Foo.add(1, 2)</code> nous retourne évidemmement <code>3</code> par contre <code>Foo.add(1, '2')</code> va retourner:</p>

<p><code>ruby
ParamContractError: Contract violation for argument 2 of 2:
        Expected: Num,
        Actual: "2"
        Value guarded in: Foo::add
        With Contract: Num, Num =&gt; Num
</code></p>

<p>L’erreur nous montre que le contrat de la méthode <em>add</em> n’a pas été respecté par le second paramètre que nous lui avons passé, ‘2’, car il n’est pas du type <em>Num</em>.</p>

<p>Notez que l’on doit toujours spécifier le type de la valeur retournée même si la méthode ne retourne rien:</p>

<p><code>ruby
Contract String =&gt; nil
def hello(name)
  puts "hello, #{name}!"
end
</code></p>

<p>Par exemple, si notre méthode retourne plusieurs valeurs, sa signature sera <code>Contract Num =&gt; [Num, Num]</code>.</p>

<h2 id="les-diffrents-types--notre-disposition">Les différents Types à notre disposition</h2>

<p>Outre les classiques <em>Num</em>, <em>String</em>, <em>Bool</em>, nous avons à notre disposition des types plus intéressants comme:</p>

<ul>
  <li><code>Any</code> lorsque votre argument n’a pas de contrainte</li>
  <li><code>None</code> lorsqu’on n’a pas d’argument</li>
  <li><code>Or</code> si notre argument peut être de plusieurs types, par exemple <code>Or[Fixnum, Float]</code></li>
  <li><code>Not</code> si notre argument ne peut pas être d’un certain type, par exemple <code>Not[nil]</code></li>
  <li><code>Maybe</code> si notre argument est optionnel, par exemple <code>Maybe[String]</code></li>
</ul>

<p>Et bien d’autres que vous pourrez découvrir dans la documentation.</p>

<h2 id="contrats-sur-des-types-avancs">Contrats sur des Types avancés</h2>

<p>On peut utiliser des contrats avec des Types plus avancés comme des listes:</p>

<p><code>ruby
Contract ArrayOf[Num] =&gt; Num
def multiply(vals)
  vals.reduce(:*)
end
</code></p>

<p>Le contrat de la méthode <em>multiply</em> nous indique qu’elle attend une liste de valeurs du type Num. Par conséquent on peut faire <code>multiply([2, 4, 16])</code> mais pas <code>multiply([2, 4, 'foo'])</code>.</p>

<p>Des Hash:</p>

<p><code>ruby
Contract ({ nom: String, age: Num, ville: String }) =&gt; nil
</code></p>

<p>Des méthodes:</p>

<p><code>ruby
Contract ArrayOf[Any], Proc =&gt; ArrayOf[Any]
</code></p>

<p>Si vous utilisez les arguments nommés de Ruby 2.x, le contrat ressemblera à:</p>

<p><code>ruby
Contract KeywordArgs[foo: String, bar: Num] =&gt; String
</code></p>

<p>On peut aussi définir nos propres contrats grâce aux <code>synonymes</code>:</p>

<p>```ruby
Token = String
Client = Or[Hash, nil]</p>

<p>Contract Token =&gt; Client
def authenticate(token)
```</p>

<p>Notre méthode est ainsi plus claire quant à ce qu’elle attend et ce qu’elle permet de faire. On désire un <code>Token</code> qui est de type <code>String</code> en entrée et on retourne un <code>Client</code> qui peut être un <code>Hash</code> ou rien (nil).</p>

<h2 id="le-pattern-matching">Le pattern-matching</h2>

<p>Le pattern-matching consiste, pour une valeur donnée, à tester si elle correspond à un motif ou pas. Si c’est le cas une action est déclenchée. C’est un peu comme de l’overloading de méthode en Java. On pourrait l’imaginer comme un switch case géant mais en beaucoup plus élégant.</p>

<p>Un exemple simple avec le calcul (pas efficace du tout) de la suite de Fibonacci:</p>

<p>```ruby
Contract 0 =&gt; 0
def fib(n)
  0
end</p>

<p>Contract 1 =&gt; 1
def fib(n)
  1
end</p>

<p>Contract Num =&gt; Num
def fib(n)
  fib(n-1) + fib(n-2)
end
```</p>

<p>Pour un argument donné, chaque méthode va être essayée dans l’ordre. La première méthode qui ne génère pas d’erreur sera utilisée.</p>

<p>Un exemple un peu plus utile, la gestion d’une réponse HTTP en fonction de son code:</p>

<p>```ruby
Contract 200, JsonString =&gt; JsonString
def handle_response(status, response)
  transform_response(response)
end</p>

<p>Contract Num, JsonString =&gt; JsonString
def handle_response(status, response)
  response
end
```</p>

<p>Si le code de la réponse HTTP est 200 on va transformer la réponse, sinon on se contentera de retourner la réponse.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Les bénéfices sont nombreux. Les contrats nous permettent d’avoir une plus grande cohérence dans les entrées et les sorties. Le flux des données dans notre système est plus clair. Et la plupart des erreurs liées aux types dans notre système peuvent être corrigées rapidement et simplement. De plus ils permettent de rapidement comprendre ce que fait une méthode, ce qu’elle attend et ce qu’elle retourne, un peu comme de la documentation mais qui serait tout le temps à jour :p.
Je pense que l’on peut ainsi économiser pas mal de tests unitaires sur le type d’argument reçu par une méthode et se concentrer sur ce qu’elle produit avec ce système de contrats.</p>

<p>Voilà j’espère que cet article vous aura convaincu de l’utilité des contrats et du pattern-matching dans votre Ruby quotidien et vous donnera aussi l’envie d’explorer d’autres langages avec d’autres paradigmes.</p>

<h1 id="qui-a-crit-cet-article-">Qui a écrit cet article ?</h1>

<p><img src="/images/julien.jpeg"></p>

<p><strong>Julien Blanchard</strong><br />
M-x CTO RET Sush.io</p>
]]></content>
  </entry>
  
</feed>
