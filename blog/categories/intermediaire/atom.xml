<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : intermédiaire | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/intermediaire/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-01-26T16:13:22+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/"/>
    <updated>2014-01-26T16:03:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après <a href="/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/">l'installation basique du plugin Airline</a>, voyons maintenant
comment modifier quelque peu le thème.</p>

<!-- more -->


<p>On peut visualiser les thèmes disponibles pour Airline
<a href="https://github.com/bling/vim-airline/wiki/Screenshots">sur cette page</a>.
J'ai choisi wombat pour l'instant, puisque je trouve que c'est celui
qui <em>colle</em> le mieux avec mon jeu de couleurs actuel. Voici ce qu'il
faut ajouter au <code>.vimrc</code> pour changer de thème:</p>

<p><code>vim
let g:airline_theme='wombat'
</code></p>

<p>Si vous n'êtes pas sûr du nom pour le thème que vous avez choisi,
regardez le nom du fichier dans le dossier
<code>vim-airline/autoload/airline/themes</code>.</p>

<p>J'ai ensuite installé quelques polices de caractères patchées pour Powerline,
trouvées
<a href="https://github.com/Lokaltog/powerline-fonts">ici</a>, mais aucunes
ne m'a vraiment séduite. J'utilise la font <code>Inconsolata-g</code>, qui me
convient parfaitement, je ne vois donc pas de raison d'en changer.</p>

<p>Il faut maintenant paramétrer les symboles pour les bords des sections,
la branche git, les fichiers en lectures seules, etc. Mettez donc
ceci dans votre <code>.vimrc</code>:</p>

<p><code>vim
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
</code></p>

<p>Comme il n'est pas certain que les symboles ci-dessus apparaissent dans
votre navigateur, en voici une version en image:</p>

<p><img src="/images/symboles-airline.png"></p>

<p>La prochaine fois, on verra comment modifier une section.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/"/>
    <updated>2014-01-25T18:34:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Pour disposer de quelques informations dans la barre de statut,
j'utilisais jusqu'ici statline, qui me convenait assez bien, rien de
tape à l'œil. Et puis j'ai décidé d'essayer quelque chose de
plus coloré, histoire de voir si ça m'était utile.</p>

<!-- more -->


<p>Avant d'installer <a href="https://github.com/bling/vim-airline">Airline</a>,
il faut bien entendu retirer Powerline, ou Statline (je n'en connais pas
d'autres).</p>

<p>Comme j'utilise Pathogen pour gérer mes plugins, voici comment rapatrier
le code d'Airline:</p>

<pre><code>git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline
</code></pre>

<p>La documentation est exhaustive et fournit
<a href="https://github.com/bling/vim-airline#installation">ici</a>
d'autres méthodes d'installation pour Vundle, NeoBundle et VAM.</p>

<p>Avec Pathogen, ne pas oublier de générer la documentation, vous en
aurez besoin pour personnaliser l'apparence et les fonctionnalités
de Airline:</p>

<p><code>vim
:Helptags
</code></p>

<p>Un rapide coup d'œil à la documentation, justement, montre que la
personnalisation aux petits oignons va prendre un peu plus longtemps
que quelques minutes. Bref, on va devoir se manger de la doc…</p>

<p>À ce stade, c'est à dire en ayant seulement installé Airline et rien
configuré encore, ça fonctionne déja. Mais curieusement (du moins c'est
curieux à mes yeux) Airline est configuré par défaut pour n'apparaître que
lorsqu'une fenêtre est splittée. Pour l'avoir tout le temps, il faut ajouter
ceci dans le <code>.vimrc</code>:</p>

<p><code>vim
set laststatus=2
</code></p>

<p>La prochaine fois, je m'attaquerais à la modification du thème.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiler votre Vim sous Linux]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux/"/>
    <updated>2014-01-19T12:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment compiler la dernière version de
Vim sur Linux (Debian, mais Ubuntu devrait marcher aussi).</p>

<!-- more -->


<h2>Pourquoi vouloir faire ça ?</h2>

<p>Tout d'abord, pourquoi voudrais-t-on compiler Vim alors que Debian nous
le fournit dans les paquets ? Je vois plusieurs raisons:</p>

<ol>
<li>Parce qu'on peut le faire. Mais je sens que cet argument n'est pas
fait pour vous convaincre.</li>
<li>Parce que c'est fun. Idem, pas convaincant, hein ?</li>
<li>Parce qu'on peut vouloir profiter d'une des dernières fonctionnalités
ajoutées, ou du dernier bugfix.</li>
<li>Parce que Debian est parfois à la ramasse lorsqu'il s'agit de nous
fournir des versions suffisament récentes de certains logiciels.
J'ai par exemple une machine qui est toujours en Debian 6 et que je
ne peux pas upgrader, Vim y est <em>coincé</em> en version 7.2.</li>
</ol>


<h2>On y va</h2>

<p>Assurez vous d'abord d'avoir toutes les dépendances:</p>

<pre><code>$ sudo apt-get build-dep vim
</code></pre>

<p>Ensuite, on va télécharger les sources depuis GitHub:</p>

<pre><code>$ git clone https://github.com/b4winckler/vim.git
</code></pre>

<p>Puis peut-être aller chercher une release particulière:</p>

<pre><code>$ cd vim
$ git checkout tags/v-7-4-155
</code></pre>

<p>Ensuite on va dans les sources:</p>

<pre><code>$ cd src
</code></pre>

<p>On nettoie (ça fait pas de mal):</p>

<pre><code>$ make distclean
</code></pre>

<p>On configure avec la plupart des features disponibles, notamment une
interface graphique et le support de perl, python et ruby:</p>

<pre><code>$ ./configure --with-features=huge --enable-gui=gnome2
  --with-compiledby=lkdjiin --enable-perlinterp  --enable-pythoninterp
  --enable-rubyinterp
</code></pre>

<p>Il reste à compiler:</p>

<pre><code>$ make
</code></pre>

<p>Et enfin à installer notre nouveau Vim:</p>

<pre><code>$ sudo make install
</code></pre>

<p>Et voilà:</p>

<p><img src="/images/vim-7-4-155.png"></p>

<h2>Désinstaller la version que vous avez compilé</h2>

<p>Si, pour une raison ou une autre, vous vouliez désinstaller
votre nouveau Vim, il faut d'abord trouver où il est installé.
Pour cela, lancez la commande suivante dans Vim:</p>

<p><code>vim
:echo $VIMRUNTIME
</code></p>

<p>Dans mon cas, cela donne: <code>/usr/local/share/vim/vim74</code>.</p>

<p>Rendez-vous ensuite dans les sources que vous avez téléchargées,
par exemple:</p>

<pre><code>$ cd ~/tmp/vim/src
</code></pre>

<p>Puis:</p>

<pre><code>$ make VIMRUNTIME=/usr/local/share/vim/vim74
$ sudo make uninstall
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion en Bash - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5/"/>
    <updated>2014-01-15T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/15/lauto-completion-en-bash-partie-5</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/">L'auto complétion programmable en bash: partie 4</a>.</p>

<h2>Les bases de l'auto complétion programmable</h2>

<p>Une application peut proposer ses services d'auto complétion en déposant
un fichier bash dans le dossier <code>/etc/bash_completion.d/</code>.
On y voit un tas de fichiers, pour des programmes bien connus:</p>

<pre><code>[~]⇒ ls /etc/bash_completion.d/
abook
ant
apache2.2-common
apache2ctl
apt
...
git
...
</code></pre>

<p>Il suffit juste de savoir quoi mettre dedans. Allons-y:</p>

<!-- more -->


<p><code>bash /etc/bash_completion.d/mytool
complete -W "new compile test" mytool
</code></p>

<p>Le fichier sera chargé automatiquement au lancement de bash. Donc pour que
ça fonctionne maintenant, soit vous le sourcez, soit vous lancez une
nouvelle console et, &ndash; <em>roulements de tambours</em>&ndash;</p>

<pre><code>[~]⇒ mytool [TAB]
compile  new      test     
[~]⇒ mytool 
</code></pre>

<p>Magique, non ? Il faut noter que l'auto complétion fonctionnera aussi
avec des options:</p>

<p><code>bash /etc/bash_completion.d/mytool
complete -W "new compile test --verbose" mytool
</code></p>

<pre><code>[~]⇒ mytool c[TAB] -[TAB]
mytool compile --verbose
</code></pre>

<p>Donc, comment ça marche ? Voici la traduction de l'aide de <code>complete</code>,
simplifiée au maximum:</p>

<p><strong>complete</strong> [<em>options</em>] <em>name</em>   <br/>
Spécifie comment les arguments doivent être complétés, pour chaque <em>name</em>.</p>

<p>L'option <code>-W</code> permet de lui passer une liste de mots. Finalement c'était
facile ? Humm… En fait ce sera rarement aussi simple. Pour continuer notre
jeu de rôle, disons que l'option <code>--verbose</code> peut s'appliquer uniquement
à l'argument <code>new</code>, et pas aux deux autres. Du coup, notre commande
<code>complete</code> ne suffit plus. Il va falloir trouver autre chose et c'est ce
qu'on verra dans un prochain article.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en bash - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4/"/>
    <updated>2014-01-14T20:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/14/lauto-completion-programmable-en-bash-partie-4</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Cet article est la suite de:
<a href="http://lkdjiin.github.io/blog/2014/01/13/lauto-completion-programmable-en-bash-partie-3/">L'auto complétion programmable en bash: partie 3</a>.</p>

<h2>Un programme bidon pour tester</h2>

<p>On va faire un petit jeu de rôle : Vous avez écrit un nouveau langage
informatique revolutionnaire, et maintenant vous voulez lui adjoindre
un outil pour faciliter la gestion des projets. Ce fameux programme, qui
va s'appeller «mytool» aura 3 commandes: <code>new</code>, pour créer un projet,
<code>compile</code>, pour compiler le projet, et <code>test</code>, pour le tester. Et bien sûr,
vous voulez profiter des joies de l'auto complétion:</p>

<pre><code>mytool c[TAB]
</code></pre>

<p>devra devenir:</p>

<pre><code>mytool compile
</code></pre>

<!-- more -->


<p>Pour comprendre les prochains articles, on est pas obligé d'avoir un «vrai»
programme. Mais c'est quand même plus drôle pour faire tout un tas de tests.
Voici donc le magnifique programme <code>mytool</code>:</p>

<p>``` bash mytool</p>

<h1>!/usr/bin/env bash</h1>

<p>case $1 in
  new )</p>

<pre><code>echo Project created ;;
</code></pre>

<p>  test )</p>

<pre><code>echo Project tested ;;
</code></pre>

<p>  compile )</p>

<pre><code>echo Project compiled ;;
</code></pre>

<ul>
<li>)
echo error ;;
esac
```</li>
</ul>


<p>Assurez vous que le programme ait les droits d'exécution (<code>chmod +x</code>)
et qu'il soit dans votre PATH:</p>

<pre><code>[~]⇒ mytool new
Project created
[~]⇒ mytool test
Project tested
[~]⇒ mytool compile
Project compiled
[~]⇒ mytool
error
</code></pre>

<p>La prochaine, promis, on commencera vraiment à faire de l'auto-complétion.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
