<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : intermédiaire | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/intermediaire/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-04T21:21:11+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6/"/>
    <updated>2014-03-03T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/03/ecrire-un-editeur-pour-le-terminal-partie-6</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir vu
<a href="/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4/">comment centrer du texte</a>
et
<a href="/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/">comment faire du fenêtrage</a>,
on peut réunir les deux pour afficher un fichier, et le nom de ce fichier
centré sur la première ligne du terminal.</p>

<!-- more -->


<p>``` ruby test.rb</p>

<h1>!/usr/bin/env ruby</h1>

<p>require &lsquo;curses&rsquo;
include Curses</p>

<p>def display_filename
  setpos(0, (cols &ndash; ARGV[0].size) / 2)
  addstr(ARGV[0])
end</p>

<p>def display_file
  setpos(2, 0)
  File.open(ARGV[0]).each {|line| addstr(line) }
end</p>

<p>begin
  init_screen
  display_filename
  display_file
  refresh
  getch
ensure
  close_screen
end
```</p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5/"/>
    <updated>2014-03-02T20:54:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/02/ecrire-un-editeur-pour-le-terminal-partie-5</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>La bibliothèque <em>curses</em> sait gérer le fenêtrage. Voici un programme qui
montre comment faire.</p>

<!-- more -->


<p>C'est une traduction en ruby d'un programme C issu d'un tutoriel
sur <em>ncurses</em> (dont je ne retrouve plus la référence dans l'immédiat).</p>

<p>``` ruby
require &lsquo;curses&rsquo;
include Curses</p>

<p>def create_newwin(height, width, top, left)
  local_win = Window.new(height, width, top, left)
  local_win.box(?|, ?&ndash;)
  local_win.refresh
  local_win
end</p>

<p>def destroy_win(w)
  w.clear
  w.refresh
  w.close
end</p>

<p>begin
  init_screen
  cbreak
  stdscr.keypad(true)
  height = 3
  width = 10
  top = (lines &ndash; height) / 2
  left = (cols &ndash; width) / 2
  addstr(&ldquo;Press F1 to exit&rdquo;)
  refresh
  my_win = create_newwin(height, width, top, left)</p>

<p>  while (ch = getch) != KEY_F1</p>

<pre><code>case ch
when KEY_LEFT then left -= 1
when KEY_RIGHT then left += 1
when KEY_UP then top -= 1
when KEY_DOWN then top += 1
end
destroy_win(my_win)
my_win = create_newwin(height, width, top, left)
</code></pre>

<p>  end
ensure
  close_screen
end
```</p>

<p>En étudiant ce programme avec en parallèle la documentation ruby
de <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/curses/rdoc/Curses.html">curses</a>,
vous devriez comprendre sans problèmes la gestion des fenêtres.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4/"/>
    <updated>2014-03-01T17:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment écrire un message centré horizontalement et
verticalement, comment lire une chaîne de caractères, et comment être
tranquille avec les caractères non ASCII.</p>

<!-- more -->


<p>Voici un programme qui montre tout ça:</p>

<p>``` ruby
require &lsquo;curses&rsquo;
include Curses</p>

<p>message = &ldquo;Enter a string: &rdquo;</p>

<p>begin
  init_screen
  setpos(lines / 2, (cols &ndash; message.size) / 2)
  addstr(message)
  str = getstr
  setpos(lines &ndash; 2, 0)
  addstr(sprintf(&ldquo;You entered: %s&rdquo;, str))
  getch
ensure
  close_screen
end
```</p>

<p>Quelques brèves explications maintenant:</p>

<p>Tout d'abord, on affiche un message centré ainsi:</p>

<p><code>ruby
  setpos(lines / 2, (cols - message.size) / 2)
  addstr(message)
</code></p>

<p>Pour lire une chaîne de caractères, on utilise <code>getstr</code>:</p>

<p><code>ruby
  str = getstr
</code></p>

<p>Puis on affiche ce qu'on vient de lire sur l'avant-dernière ligne du
terminal:</p>

<p><code>ruby
  setpos(lines - 2, 0)
  addstr(sprintf("You entered: %s", str))
</code></p>

<p>Le <a href="http://www.ruby-doc.org/core-2.1.1/Kernel.html#method-i-sprintf">sprintf</a>,
qui vous rappelera des choses si vous avez fait du C, est ce que j'ai
trouvé de mieux pour ne pas avoir de soucis avec les caractères
non ASCII.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtrer ses logs en direct]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/28/filtrer-ses-logs-en-direct/"/>
    <updated>2014-02-28T20:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/28/filtrer-ses-logs-en-direct</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment filtrer nos fichiers de log en direct à l'aide
des commandes UNIX <code>tail</code> et <code>sed</code>.</p>

<!-- more -->


<p>Pour afficher un fichier en direct live sur le terminal, autrement dit pour
visualiser au fur et à mesure les ajouts dans ce fichier, on utilise
<code>tail -f</code>:</p>

<p><code>bash
tail -f un/fichier/de/log
</code></p>

<p>Pour afficher <strong>uniquement</strong> les lignes d'un fichier qui contiennent la
chaîne de caractères <code>ERROR</code>, on va utiliser <code>sed</code>:</p>

<p><code>bash
sed -n '/ERROR/p' un/fichier/de/log
</code></p>

<p>Ou bien pour afficher toutes les lignes d'un fichier <strong>sauf</strong> celles qui
contiennent la chaîne de caractères <code>bruit</code>, on utilisera:</p>

<p><code>bash
sed '/bruit/d' un/fichier/de/log
</code></p>

<p>Et en combinant les deux, on aura un log en direct et filtré:</p>

<p><code>bash
tail -f un/fichier/de/log | sed -n '/ERROR/p'
</code></p>

<p>Et vous, vous utilisez quelle(s) commande(s) ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed - Remplacer la n-ième occurence]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/25/sed-remplacer-la-n-ieme-occurence/"/>
    <updated>2014-02-25T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/25/sed-remplacer-la-n-ieme-occurence</id>
    <content type="html"><![CDATA[<p>J'adore Sed. Je l'utilise depuis de longues années. Et pourtant je n'avais
jamais remarqué qu'on pouvait remplacer la n-ième occurence d'un pattern
dans une ligne.</p>

<!-- more -->


<p>Soit le fichier <code>test</code> suivant:</p>

<pre><code>Bonjour le monde !
</code></pre>

<p>Pour remplacer le premier <code>o</code> par un <code>-</code>:</p>

<p><code>bash
sed 's/o/-/' test
</code></p>

<p>Pour remplacer tous les <code>o</code> par des <code>-</code>:</p>

<p><code>bash
sed 's/o/-/g' test
</code></p>

<p>Pour remplacer le deuxième <code>o</code> par un <code>-</code>:</p>

<p><code>bash
sed 's/o/-/2' test
</code></p>

<p>Sed, c'est magique !</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
