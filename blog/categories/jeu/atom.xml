<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : jeu | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/jeu/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-19T21:35:10+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/19/un-space-invaders-avec-opal-dot-rb-partie-10/"/>
    <updated>2014-06-19T21:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/19/un-space-invaders-avec-opal-dot-rb-partie-10</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Le code suivant ne me convient toujours pas :</p>

<p>``` ruby</p>

<pre><code>@enemies.map do |enemy|
  @direction == :left ? enemy.move_left : enemy.move_right
end
</code></pre>

<p>```</p>

<p>Pourquoi ne pas dire
simplement à la classe <code>Enemy</code> ce qu'elle doit faire en une seule fois:</p>

<p>``` ruby</p>

<pre><code>@enemies.map {|enemy| enemy.move(@direction) }
</code></pre>

<p>```</p>

<!-- more -->


<p>C'est quand même bien plus simple ! Bien sûr, pour que ça fonctionne il
faut ajouter une méthode à la classe <code>Enemy</code>:</p>

<p>``` ruby
  def move(direction)</p>

<pre><code>direction == :left ? move_left : move_right
</code></pre>

<p>  end
```</p>

<p>Et tant qu'on y est, on fait pareil avec la méthode <code>enemies_down</code>.</p>

<p>Avant:</p>

<p>``` ruby
  def enemies_down</p>

<pre><code>@enemies.each do |e|
  e.y = e.y + 4
end
</code></pre>

<p>  end
```</p>

<p>Après:</p>

<p>``` ruby
  def enemies_down</p>

<pre><code>@enemies.map(&amp;:move_down)
</code></pre>

<p>  end
```</p>

<p>Et on ajoute ceci à <code>Enemy</code>:</p>

<p>``` ruby
  def move_down</p>

<pre><code>@y += 4
</code></pre>

<p>  end
```</p>

<p>Pour terminer cet article,
voici le code des classes <code>Enemy</code> et <code>Enemies</code>:</p>

<p>``` ruby app/enemy.rb
class Enemy
  DELTA = 2</p>

<p>  attr_accessor :x, :y, :w, :h, :color</p>

<p>  def initialize(x, y, w, h, color)</p>

<pre><code>@x = x
@y = y
@w = w
@h = h
@color = color
</code></pre>

<p>  end</p>

<p>  def move_left</p>

<pre><code>@x -= DELTA
</code></pre>

<p>  end</p>

<p>  def move_right</p>

<pre><code>@x += DELTA
</code></pre>

<p>  end</p>

<p>  def move(direction)</p>

<pre><code>direction == :left ? move_left : move_right
</code></pre>

<p>  end</p>

<p>  def move_down</p>

<pre><code>@y += 4
</code></pre>

<p>  end
end
```</p>

<p>``` ruby app/enemies.rb
class Enemies
  include Enumerable
  ENEMIES_PER_ROW = 10</p>

<p>  def initialize</p>

<pre><code>@enemies = []
@direction = :right
build(60, '#0000ff')
build(120, '#0000dd')
build(180, '#0000bb')
build(240, '#000099')
build(300, '#000077')
</code></pre>

<p>  end</p>

<p>  def each(&amp;block)</p>

<pre><code>@enemies.each(&amp;block)
</code></pre>

<p>  end</p>

<p>  def update</p>

<pre><code>@enemies.each do |e|
  if e.x &lt;= 10 || e.x + e.w &gt;= 690
    change_enemies_direction
    enemies_down
    break
  end
end
@enemies.map {|enemy| enemy.move(@direction) }
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def change_enemies_direction</p>

<pre><code>if @direction == :left
  @direction = :right
else
  @direction = :left
end
</code></pre>

<p>  end</p>

<p>  def enemies_down</p>

<pre><code>@enemies.map(&amp;:move_down)
</code></pre>

<p>  end</p>

<p>  def build(y, color)</p>

<pre><code>(1..ENEMIES_PER_ROW).each do |i|
  @enemies &lt;&lt; Enemy.new(50 + i * 60, y, 40, 40, color)
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Il reste encore un peu de travail…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/18/un-space-invaders-avec-opal-dot-rb-partie-9/"/>
    <updated>2014-06-18T21:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/18/un-space-invaders-avec-opal-dot-rb-partie-9</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Le code que j'ai posté hier, pour gérer le déplacement des envahisseurs,
a été écrit vite et sans trop de réflexion. Il nécessite donc un <del>petit</del>
gros coup de refactoring.</p>

<!-- more -->


<p>Le pire morceau, tout du moins celui qui me saute aux yeux ce soir, est
la méthode <code>update</code> de la classe <code>Enemies</code>. C'est le genre de chose que je
ne laisserais jamais passer au boulot, par exemple. C'est un concentré de
mauvais code et de <em>code smells</em>:</p>

<p>``` ruby
  def update</p>

<pre><code>@enemies.each do |e|
  if e.x &lt;= 10 || e.x + e.w &gt;= 690
    change_enemies_direction
    enemies_down
    break
  end
end
@enemies.each do |e|
  if @direction == :left
    e.x = e.x - 2
  else
    e.x = e.x + 2
  end
end
</code></pre>

<p>  end
```</p>

<p>Je vais m'occuper d'abord de la seconde partie, celle qui déplace les
envahisseurs à droite ou à gauche:</p>

<pre><code>@enemies.each do |e|
  if @direction == :left
    e.x = e.x - 2
  else
    e.x = e.x + 2
  end
end
</code></pre>

<p>Comme on a des méthodes <code>move_left</code> et <code>move_right</code> pour la classe <code>Player</code>,
pourquoi ne pas faire pareil avec la classe <code>Enemy</code> ? Voici donc une
nouvelle écriture de la classe <code>Enemy</code>:</p>

<p>``` ruby app/enemy.rb
class Enemy
  DELTA = 2</p>

<p>  attr_accessor :x, :y, :w, :h, :color</p>

<p>  def initialize(x, y, w, h, color)</p>

<pre><code>@x = x
@y = y
@w = w
@h = h
@color = color
</code></pre>

<p>  end</p>

<p>  def move_left</p>

<pre><code>@x -= DELTA
</code></pre>

<p>  end</p>

<p>  def move_right</p>

<pre><code>@x += DELTA
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Si on la compare avec la classe <code>Player</code>, on s'aperçoit qu'elles sont
bien trop similaires. Mais on verra ça plus tard, retournons à
<code>Enemies#update</code>.</p>

<p>Avant:</p>

<p>``` ruby</p>

<pre><code>@enemies.each do |e|
  if @direction == :left
    e.x = e.x - 2
  else
    e.x = e.x + 2
  end
end
</code></pre>

<p>```</p>

<p>Après:</p>

<p>``` ruby</p>

<pre><code>@enemies.map do |enemy|
  @direction == :left ? enemy.move_left : enemy.move_right
end
</code></pre>

<p>```</p>

<p>J'utilise <code>map</code> au lieu de <code>each</code>, qui marque mieux l'intention de modifier
la collection. L'argument <code>e</code>, illisible, est devenu <code>enemy</code>, clair. Et
grâce à <code>move_left</code> et <code>move_right</code>, les messages envoyés à un objet
<code>Enemy</code> sont plus simples. On s'est aussi débarrassé d'un nombre magique.</p>

<p>OK, c'est bien mieux. Mais y a encore un truc qui me dérange profondément.
Vous voyez ce que je veux dire ? Non ? Alors rendez-vous demain ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/17/un-space-invaders-avec-opal-dot-rb-partie-8/"/>
    <updated>2014-06-17T21:08:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/17/un-space-invaders-avec-opal-dot-rb-partie-8</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Comme promis, on ajoute aujourd'hui les envahisseurs. Mais comme j'ai une
petite flemme ce soir, il y aura peu d'explications ;) De plus le code est
un premier jet…</p>

<p>Quoiqu'il en soit, c'est parti.</p>

<!-- more -->


<p>La classe <code>Enemy</code>:</p>

<p>``` ruby app/enemy.rb
class Enemy
  attr_accessor :x, :y, :w, :h, :color
  def initialize(x, y, w, h, color)</p>

<pre><code>@x = x
@y = y
@w = w
@h = h
@color = color
</code></pre>

<p>  end
end
```</p>

<p>La classe <code>Enemies</code>, pour gérer une collection d'envahisseurs:</p>

<p>``` ruby app/enemies.rb
class Enemies
  include Enumerable
  ENEMIES_PER_ROW = 10</p>

<p>  def initialize</p>

<pre><code>@enemies = []
@direction = :right
build(60, '#0000ff')
build(120, '#0000dd')
build(180, '#0000bb')
build(240, '#000099')
build(300, '#000077')
</code></pre>

<p>  end</p>

<p>  def each(&amp;block)</p>

<pre><code>@enemies.each(&amp;block)
</code></pre>

<p>  end</p>

<p>  def update</p>

<pre><code>@enemies.each do |e|
  if e.x &lt;= 10 || e.x + e.w &gt;= 690
    change_enemies_direction
    enemies_down
    break
  end
end
@enemies.each do |e|
  if @direction == :left
    e.x = e.x - 2
  else
    e.x = e.x + 2
  end
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def change_enemies_direction</p>

<pre><code>if @direction == :left
  @direction = :right
else
  @direction = :left
end
</code></pre>

<p>  end</p>

<p>  def enemies_down</p>

<pre><code>@enemies.each do |e|
  e.y = e.y + 4
end
</code></pre>

<p>  end</p>

<p>  def build(y, color)</p>

<pre><code>(1..ENEMIES_PER_ROW).each do |i|
  @enemies &lt;&lt; Enemy.new(50 + i * 60, y, 40, 40, color)
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>La classe <code>Game</code>, remaniée:</p>

<p>``` ruby app/game.rb
class Game</p>

<p>  def initialize</p>

<pre><code>@canvas = SpaceCanvas.new
@player = Player.new
@enemies = Enemies.new
</code></pre>

<p>  end</p>

<p>  def start</p>

<pre><code>init_keyboard
main_loop(50) do
  @canvas.clear_background
  @canvas.draw_player(@player)
  @enemies.update
  @enemies.each {|e| @canvas.draw_enemy(e) }
end
</code></pre>

<p>  end</p>

<p>  def main_loop(interval, &amp;block)</p>

<pre><code>`setInterval(#{block.to_n}, #{interval})`
</code></pre>

<p>  end</p>

<p>  def init_keyboard</p>

<pre><code>%x(
  window.addEventListener("keydown",
    function(e) {
      if(e.keyCode == 37) { #{@player.move_left} }
      if(e.keyCode == 39) { #{@player.move_right} }
    },
    false);
)
</code></pre>

<p>  end
end
```</p>

<p>La classe <code>SpaceCanvas</code>, avec sa nouvelle méthode <code>draw_enemy</code>:</p>

<p>``` ruby app/space_canvas.rb
class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>draw_rect(0, 0, @width, @height, 'black')
</code></pre>

<p>  end</p>

<p>  def draw_player(player)</p>

<pre><code>draw_rect(player.x, player.y, player.w, player.h, player.color)
</code></pre>

<p>  end</p>

<p>  def draw_enemy(enemy)</p>

<pre><code>draw_rect(enemy.x, enemy.y, enemy.w, enemy.h, enemy.color)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def draw_rect(x, y, w, h, color)</p>

<pre><code>`#@context.fillStyle = #{color}`
`#@context.fillRect(#{x}, #{y}, #{w}, #{h})`
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Et enfin <code>application.rb</code>, qui inclus les nouvelles classes:</p>

<p>``` ruby app/application.rb
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>require &lsquo;space_canvas&rsquo;
require &lsquo;player&rsquo;
require &lsquo;game&rsquo;
require &lsquo;enemy&rsquo;
require &lsquo;enemies&rsquo;</p>

<p>game = Game.new
game.start
```</p>

<p>Voilà, il y aura surement un petit travail de refactoring à faire
prochainement ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/16/un-space-invaders-avec-opal-dot-rb-partie-7/"/>
    <updated>2014-06-16T21:00:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/16/un-space-invaders-avec-opal-dot-rb-partie-7</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Le fichier <code>app/application.rb</code> commence a enfler et a ressembler à un
script. On peut rassembler ce qu'il contient dans une classe <code>Game</code>.
L'idéal serait de n'avoir dans ce fichier que:</p>

<pre><code>game = Game.new
game.start
</code></pre>

<!-- more -->


<p>On va donc déplacer tout dans une classe <code>Game</code>, et on ajoute une méthode
<code>initialize</code>:</p>

<p>``` ruby app/game.rb
class Game</p>

<p>  def initialize</p>

<pre><code>@canvas = SpaceCanvas.new
@player = Player.new
</code></pre>

<p>  end</p>

<p>  def start</p>

<pre><code>init_keyboard
main_loop(50) do
  @canvas.clear_background
  @canvas.draw_player(@player)
end
</code></pre>

<p>  end</p>

<p>  def main_loop(interval, &amp;block)</p>

<pre><code>`setInterval(#{block.to_n}, #{interval})`
</code></pre>

<p>  end</p>

<p>  def init_keyboard</p>

<pre><code>%x(
  window.addEventListener("keydown",
    function(e) {
      if(e.keyCode == 37) { #{@player.move_left} }
      if(e.keyCode == 39) { #{@player.move_right} }
    },
    false);
)
</code></pre>

<p>  end
end
```</p>

<p>Et voici le nouveau fichier application:</p>

<p>``` ruby app/application.rb
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>require &lsquo;space_canvas&rsquo;
require &lsquo;player&rsquo;
require &lsquo;game&rsquo;</p>

<p>game = Game.new
game.start
```</p>

<p>J'aime bien quand c'est organisé ;)</p>

<p>Pour info, voici l'arbre de notre projet:</p>

<pre><code>$ tree
.
├── app
│   ├── application.rb
│   ├── game.rb
│   ├── player.rb
│   └── space_canvas.rb
├── build.js
├── Gemfile
├── Gemfile.lock
├── index.html
└── Rakefile
</code></pre>

<p>Je sais que j'avais dit qu'on ajouterait les envahisseurs aujourd'hui,
mais là je n'ai plus le temps ! On verra demain.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/15/un-space-invaders-avec-opal-dot-rb-partie-6/"/>
    <updated>2014-06-15T19:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/15/un-space-invaders-avec-opal-dot-rb-partie-6</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Et si on controlait notre joueur au clavier ? On commence par ajouter deux
méthodes à la classe <code>Player</code>, une pour changer sa position vers la
gauche (<code>move_left</code>), et une autre pour aller à droite (<code>move_right</code>):</p>

<p>``` ruby app/player.rb
class Player
  DELTA = 10</p>

<p>  attr_accessor :x, :y, :w, :h, :color</p>

<p>  def initialize</p>

<pre><code>@x = 325
@y = 560
@w = 50
@h = 30
@color = 'green'
</code></pre>

<p>  end</p>

<p>  def move_left</p>

<pre><code>@x -= DELTA
</code></pre>

<p>  end</p>

<p>  def move_right</p>

<pre><code>@x += DELTA
</code></pre>

<p>  end</p>

<p>end
```</p>

<!-- more -->


<p>Maintenant, il faut faire en sorte qu'un appui sur la touche <em>flêche gauche</em>
appelle la méthode <code>move_left</code> (et qu'un appui sur <em>flêche droite</em> appelle
<code>move_right</code>). Pour ça, je vais encore écrire un mélange de ruby/javascript:</p>

<p>``` ruby
def init_keyboard
  %x(</p>

<pre><code>window.addEventListener("keydown",
  function(e) {
    if(e.keyCode == 37) { #{@player.move_left} }
    if(e.keyCode == 39) { #{@player.move_right} }
  },
  false);
</code></pre>

<p>  )
end
```</p>

<p>Le <code>%x()</code> joue le même rôle que les backticks, mais sur plusieurs lignes.
Ce qui est entre <code>%x(</code> et <code>)</code> est donc du code javascript (mais qui peut
utiliser l'interpolation de chaînes de caractères ruby…).</p>

<p>Le code javascript est simple, on enregistre un <em>listener</em> sur l'évenement
<code>"keydown"</code>. Le code <code>37</code> correspond à la touche <em>flêche gauche</em>, le code
<code>39</code>, bin, vous avez deviné ;)</p>

<p>Il reste a insérer la méthode <code>init_keyboard</code> dans la méthode <code>start</code>:</p>

<p>``` ruby
def start
  init_keyboard
  main_loop(50) do</p>

<pre><code>@canvas.clear_background
@canvas.draw_player(@player)
</code></pre>

<p>  end
end
```</p>

<p>Après un <code>rake build</code>, vous pouvez déplacer le joueur au clavier.</p>

<p>Pour info, voici le code complet de <code>application.rb</code>:</p>

<p>``` ruby app/application.rb
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>require &lsquo;space_canvas&rsquo;
require &lsquo;player&rsquo;</p>

<p>@canvas = SpaceCanvas.new
@player = Player.new</p>

<p>def main_loop(interval, &amp;block)
  <code>setInterval(#{block.to_n}, #{interval})</code>
end</p>

<p>def init_keyboard
  %x(</p>

<pre><code>window.addEventListener("keydown",
  function(e) {
    if(e.keyCode == 37) { #{@player.move_left} }
    if(e.keyCode == 39) { #{@player.move_right} }
  },
  false);
</code></pre>

<p>  )
end</p>

<p>def start
  init_keyboard
  main_loop(50) do</p>

<pre><code>@canvas.clear_background
@canvas.draw_player(@player)
</code></pre>

<p>  end
end</p>

<p>start
```</p>

<p>Je pense que demain, on commencera à s'occuper des envahisseurs…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
