<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : plugin | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/plugin/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-03-18T10:21:13+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un nouveau dépot pour les plugins Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/28/un-nouveau-depot-pour-les-plugins-vim/"/>
    <updated>2014-06-28T21:13:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/28/un-nouveau-depot-pour-les-plugins-vim</id>
    <content type="html"><![CDATA[<p>Un nouveau dépot pour plugins Vim est disponible ici : <a href="http://vimawesome.com/">vimawesome</a>.</p>

<!-- more -->

<p>L’interface tranche radicalement avec celle de vim.org, et ça fait du bien.</p>

<p>Le code du site est disponible sur Github : <a href="https://github.com/divad12/vim-awesome">wim-awesome</a> 
et nous sommes tous invités à contribuer ;)</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trois bibliothèques de fonctions pour écrire vos plugins Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/08/trois-bibliotheques-de-fonctions-pour-ecrire-vos-plugins-vim/"/>
    <updated>2014-06-08T21:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/08/trois-bibliotheques-de-fonctions-pour-ecrire-vos-plugins-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd’hui je vous propose trois bibliothèques de fonctions Vimscript, pour
faciliter l’écriture de plugins pour Vim.</p>

<!-- more -->

<p>J’en ai pour l’instant testé… aucune ! Mais j’ai bien l’intention de les
essayer ;)</p>

<p>Tout d’abord <a href="https://github.com/google/maktaba">maktaba</a>, par Google. Parmi
les fonctionnalités qui m’intéresse, je note une interface pour <em>logger</em> et
la gestion des exceptions.</p>

<p>Ensuite <a href="https://github.com/vim-jp/vital.vim">vital.vim</a>. Le readme annonce
que le projet a pour objectif de réunir les fonctions de Bundler et de
jQuery, mais pour Vim.</p>

<p>Et enfin <a href="https://github.com/mattn/webapi-vim">webapi-vim</a>, qui gère notamment
la connexion OAuth, le parsing JSON et quelques algorithmes de hashage.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin vim-refactor pour Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/"/>
    <updated>2014-04-15T21:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Voici un plugin Vim issu d’une expérience qu’on mène avec un collègue:
<a href="https://github.com/lkdjiin/vim-refactor">vim-refactor</a>.
Il fonctionne pour l’instant sur du code Ruby et permet d’extraire une
méthode.</p>

<!-- more -->

<p>À partir de ce genre de code:</p>

<p>``` ruby
class HelloWorld</p>

<p>def greet
    greeting = “Hello World!”
    puts greeting
  end</p>

<p>end
```</p>

<p>En étant positionné sur la ligne 4, et en appelant <code>:ExtractMethod</code>
(ou bien sûr un mapping quelconque) vous obtenez ceci:</p>

<p>``` ruby
class HelloWorld</p>

<p>def greet
    puts greeting
  end</p>

<p>def greeting
    “Hello World!”
  end
end
```</p>

<p>C’est vraiment une version <em>alpha</em>. On espère implémenter d’autres types
de refactoring et supporter d’autres langages.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/"/>
    <updated>2014-04-04T21:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je voudrais maintenant tester que ma fonction pour passer un mot en
italique fonctionne sur le dernier mot de la phrase, lorsque celui-ci
n’a qu’un seul caractère…</p>

<!-- more -->

<p>Voilà le test Vader:</p>

<p>``` raw
Given (a line whose the last word is of length 1):
  abc def ghi j</p>

<p>Execute (starting at the end of the last word who is of length 1):
  execute “normal! fj”
  QuickMarkdownItalic</p>

<p>Expect (last word in italic):
  abc def ghi <em>j</em>
```</p>

<p>Et malheureusement, il échoue:</p>

<p><code>raw
    (4/4) [  GIVEN] a line whose the last word is of length 1
    (4/4) [EXECUTE] starting at the end of the last word who is of length 1
    (4/4) [ EXPECT] (X) last word in italic
      - Expected:
          abc def ghi *j*
      - Got:
          abc def ghi j
</code></p>

<p>Je m’attendais à un échec, mais pas à celui-ci ! Je pensais obtenir ceci:</p>

<pre><code>abc def *ghi* j
</code></pre>

<p>Donc je trouve ça assez bizarre et j’écris deux autres tests sur le dernier
mot d’une phrase, quand ce mot est d’une longueur correcte:</p>

<p>```
Given (some text):
  abc def ghi jkl mno</p>

<p>Execute (from the beginning of the last word):
  execute “normal! fm”
  QuickMarkdownItalic</p>

<p>Expect (last word in italic):
  abc def ghi jkl <em>mno</em></p>

<p>Execute (from the end of the last word):
  execute “normal! fo”
  QuickMarkdownItalic</p>

<p>Expect (last word in italic):
  abc def ghi jkl <em>mno</em>
```</p>

<p>Là encore le test qui débute sur le dernier caractère échoue de la même
manière, c’est à dire sans avoir ajouter aucun <code>*</code>.</p>

<p>J’ai déjà entendu dire que Vim pouvait faire des choses bizarres quand
on se trouve à la fin d’une phrase. Je ne sais pas si c’est cela ou la
logique de ma fonction qui est en cause, c’est toujours un mystère et
j’espère avoir le temps ce week-end pour investiguer.</p>

<p>En attendant que je m’y mette, si vous avez des pistes, je suis preneur ;)</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/"/>
    <updated>2014-03-31T20:58:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>On continue d’implémenter <a href="/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/">la fonctionnalité commencée hier</a>
en testant deux cas exceptionnels, toujours à l’aide de Vader.</p>

<!-- more -->

<p>Revoici le fichier de test d’hier:</p>

<p>``` raw
Given (some text):
  abc def ghi jkl mno</p>

<p>Execute (starting in middle of a word):
  execute “normal! fe”
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno
```</p>

<p>Je vais ajouter deux tests. L’un pour voir ce qu’il se passe quand le
curseur se trouve au début d’un mot, et idem pour la fin d’un mot:</p>

<p>``` raw
Given (some text):
  abc def ghi jkl mno</p>

<p>Execute (starting in middle of a word):
  execute “normal! fe”
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno</p>

<p>Execute (starting at beginning of a word):
  execute “normal! fd”
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno</p>

<p>Execute (starting at the end of a word):
  execute “normal! ff”
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno
```</p>

<p>Et avec l’implémentation de la dernière fois:</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#italic()
  execute "normal! bi*\&lt;Esc&gt;ea*\&lt;Esc&gt;"
endfunction
</code></p>

<p>… le test où le curseur se trouve au début d’un mot échoue
misérablement.</p>

<p>Pour le faire passer, on doit d’abord déplacer le curseur d’un cran
vers la droite:</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#italic()
  execute "normal! lbi*\&lt;Esc&gt;ea*\&lt;Esc&gt;"
endfunction
</code></p>

<p>La prochaine fois on continue avec d’autres cas exceptionnels.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
