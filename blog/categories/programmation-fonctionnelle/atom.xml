<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : programmation fonctionnelle | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/programmation-fonctionnelle/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-07-15T13:44:39+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un algorithme génétique en Julia - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/13/un-algorithme-genetique-en-julia-partie-1/"/>
    <updated>2014-05-13T21:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/13/un-algorithme-genetique-en-julia-partie-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Pour continuer d’apprendre le langage Julia, je vais coder un algorithme
génétique simple.</p>

<!-- more -->

<p>Tout d’abord un chromosome, qui va contenir 10 valeurs, chaque valeur pouvant
être soit zéro, soit un:</p>

<pre><code>julia&gt; chromosome() = rand(0:1, 10)
</code></pre>

<p>La fonction <code>rand</code> prend un <em>range</em> en premier paramêtre.</p>

<p>On teste cette fonction:</p>

<pre><code>julia&gt; chromosome()
10-element Array{Int32,1}:
 0
 1
 1
 1
 1
 1
 1
 0
 1
 1
</code></pre>

<p>Maintenant je veux une population:</p>

<pre><code>julia&gt; population(size) = [ chromosome() for _ in 1:size ]
</code></pre>

<p>Il s’agit d’une <em>compréhension de liste</em>. Pour chaque valeur (symbolisée
par le <code>_</code>) du <em>range</em> de 1 à <code>size</code>, on applique la fonction <code>chromosome</code>.
Je peux donc avoir une population:</p>

<pre><code>julia&gt; population(8)
8-element Array{Array{Int32,1},1}:
 [1,0,1,0,1,0,0,1,1,0]
 [1,1,0,1,0,1,0,1,0,0]
 [1,0,1,1,0,1,1,1,1,1]
 [0,0,1,0,0,1,0,0,1,1]
 [1,0,0,1,0,1,1,1,1,0]
 [0,1,0,0,1,1,1,0,1,1]
 [0,0,0,1,0,1,0,1,1,1]
 [0,1,0,0,0,1,0,1,1,0]
</code></pre>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les fonctions en Julia - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/12/les-fonctions-en-julia-partie-2/"/>
    <updated>2014-05-12T21:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/12/les-fonctions-en-julia-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Suite du tour d’horizon des fonctions en Julia. Je m’intéresse aujourd’hui
aux arguments par défaut et aux arguments nommés (souvent appellés
<em>keyword arguments</em>).</p>

<!-- more -->

<p>La fonction suivante possède un argument <em>normal</em>, <code>a</code>, et un argument par
défaut, <code>b</code>:</p>

<pre><code>julia&gt; function add(a, b = 10)
           a + b
       end
</code></pre>

<p>Lorsqu’on l’appelle avec deux arguments, elle les additionne:</p>

<pre><code>julia&gt; add(1, 2)
3
</code></pre>

<p>Lorsqu’on l’appelle avec un seul argument, la valeur par défaut du second
argument est utilisé:</p>

<pre><code>julia&gt; add(1)
11
</code></pre>

<p>Tout ça est très classique, sans surprise. Voyons maintenant les arguments
nommés:</p>

<pre><code>julia&gt; function add(a, b = 10 ; c = 0)
           a + b + c
       end
</code></pre>

<p>J’ai ici défini la fonction <code>add</code> avec un argument normal, <code>a</code>, un argument par
défaut, <code>b</code>, et un argument nommé, <code>c</code>. On doit séparer les arguments
nommés par un point-virgule.</p>

<p>Avec une seule valeur, <code>b</code> vaut 10 et <code>c</code> vaut 0:</p>

<pre><code>julia&gt; add(1)
11
</code></pre>

<p>Avec deux valeurs, <code>b</code> vaut 2 et <code>c</code> vaut 0:</p>

<pre><code>julia&gt; add(1, 2)
3
</code></pre>

<p>Avec trois valeurs, je suis obligé de <em>nommer</em> <code>c</code>:</p>

<pre><code>julia&gt; add(1, 2, c = 10)
13
</code></pre>

<p>Lorsqu’on a uniquement des arguments nommés, la syntaxe peut paraître
étrange, il ne faut pas oublier le point-virgule:</p>

<pre><code>julia&gt; function foo(; bar = "bar", baz = "baz")
           "$bar $baz"
       end

julia&gt; foo()
"bar baz"

julia&gt; foo(bar = "hello", baz = "world")
"hello world"
</code></pre>

<p>Pour finir, on va mettre en exergue une différence de <em>portée</em> entre les
arguments par défaut et les arguments nommés. Soit <code>b</code> qui vaut 3:</p>

<pre><code>julia&gt; b = 3
3
</code></pre>

<p>Dans la fonction <code>foo</code> suivante je n’ai que des arguments par défaut.
L’argument <code>a</code> a comme valeur par défaut le contenu de <code>b</code>. Il s’agit du
contenu du <code>b</code> précédent, pas celui de l’argument:</p>

<pre><code>julia&gt; foo(a = b, b = 9) = a + b

julia&gt; foo()
12
</code></pre>

<p>Maintenant, même chose avec des arguments nommés:</p>

<pre><code>julia&gt; foo(; a = b, b = 9) = a + b

julia&gt; foo()
ERROR: b not defined
</code></pre>

<p>Oups ! Les arguments nommés n’ont pas accès au monde extérieur.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les fonctions en Julia]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/11/les-fonctions-en-julia/"/>
    <updated>2014-05-11T18:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/11/les-fonctions-en-julia</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Voici une présentation de base des fonctions en Julia, d’après ce que j’en ai retenu ;)</p>

<p>Tout d’abord, une définition d’une fonction nommée <code>double</code>:</p>

<p><code>julia
function double(x)
  x + x
end
</code></p>

<!-- more -->

<p>On voit que la valeur de retour est <em>implicite</em>, pas besoin du mot-clé
<code>return</code>. On peut le mettre si on veut, la fonction suivante est identique
à la précédente:</p>

<p><code>julia
function double(x)
  return x + x
end
</code></p>

<p>Et voilà comment on appelle cette fonction, rien à dire de particulier
là-dessus:</p>

<p><code>julia
double(12) # =&gt; 24
</code></p>

<p>Quand une fonction est aussi simple que la fonction <code>double</code>, on peut aussi
la définir comme suit:</p>

<p><code>julia
double(x) = x + x
</code></p>

<p>Si notre programme comporte de nombreuses petites fonctions, cette concision
peut être un atout.</p>

<p>Une fonction Julia est une valeur comme une autre:</p>

<p><code>julia
typeof(double) # =&gt; Function
</code></p>

<p>On peut donc affecter cette <em>valeur</em> à une autre variable:</p>

<p><code>julia
bis = double
bis(3) # =&gt; 6
</code></p>

<p>On peut passer une fonction en argument:</p>

<p><code>julia
map(double, [1, 2, 3]) # =&gt; [2, 4, 6]
</code></p>

<p>Un truc sympa en Julia, c’est qu’une fonction est composée de une ou plusieurs
méthodes ! Quand j’ai lu ça la première fois… j’ai pensé que l’auteur de cette
phrase était dingue. En fait il s’agit simplement de fonctions avec un nom
identique mais des signatures différentes. Par exemple, si j’essaye de
<em>doubler</em> une chaîne de caractères:</p>

<p><code>julia
double("hello")
# =&gt; ERROR: no method +(ASCIIString, ASCIIString)
#     in double at none:1
</code></p>

<p>J’obtiens une erreur car il n’y a pas de fonction <code>+</code> pour les <em>strings</em>.
Je vais donc ajouter une seconde <em>méthode</em> à la fonction <code>double</code>, qui
s’occupera du cas particulier des chaînes de caractères:</p>

<p><code>julia
double(x::String) = "$x$x"
</code></p>

<p>Au passage, le caractère <code>$</code> permet l’interpolation. Plus intéressant, on voit
que j’ai donné un <em>type</em> à l’argument <code>x</code>. Quand <code>double</code> recevra un argument
de type <em>String</em>, c’est cette version (méthode) de la fonction qui sera
utilisée:</p>

<p><code>julia
double("hello") # =&gt; "hellohello"
</code></p>

<p>Alors que dans tous les autres cas, ce sera la version (méthode) <em>générique</em>
qui sera utilisée:</p>

<p><code>julia
double(12)   # =&gt; 24
double(0.78) # =&gt; 1.56
double(0xf)  # =&gt; 0x0000001e
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le langage Julia - 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/10/le-langage-julia-2/"/>
    <updated>2014-05-10T21:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/10/le-langage-julia-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>J’ai continué aujourd’hui a tester le langage
<a href="http://julialang.org/">Julia</a>.
Et en faisant quelques recherches, je me suis aperçu qu’il était très
souvent présenté comme un langage pour le calcul scientifique (voir par
exemple <a href="http://fr.wikipedia.org/wiki/Julia_%28langage_de_programmation%29">la page consacrée à Julia</a> sur Wikipédia). Ça m’énerve un peu.</p>

<!-- more -->

<p>Car sur le blog de Julia, on peut lire dans l’article d’introduction
<a href="http://julialang.org/blog/2012/02/why-we-created-julia/">Why we created Julia</a>:</p>

<p><blockquote><p>We want a language that’s open source, with a liberal license. We want the speed of C with the dynamism of Ruby. We want a language that’s homoiconic, with true macros like Lisp, but with obvious, familiar mathematical notation like Matlab. We want something as usable for general programming as Python, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.</p></blockquote></p>

<p>C’est donc loin d’être un langage utile seulement pour le calcul scientifique.
Enfin, je verrais bien qui dit vrai une fois que je le maitriserai assez…</p>

<p>Si vous avez déjà testé/utilisé Julia, qu’en avez vous pensez ?</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le langage Julia]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/09/le-langage-julia/"/>
    <updated>2014-05-09T21:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/09/le-langage-julia</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd’hui j’ai commencé à jouer un peu (2 heures à peine) avec le langage
<a href="http://julialang.org/">Julia</a>.
Ça faisait longtemps que j’en avais envie et j’ai été enthousiasmé.</p>

<!-- more -->

<p>Je cherche un langage fonctionnel qui, entre autres,:</p>

<ul>
  <li>ne soit pas <em>purement</em> fonctionnel.</li>
  <li>soit rapide.</li>
  <li>ai une syntaxe assez simple.</li>
</ul>

<p>J’ai peut-être trouvé ça avec Julia. Cet après-midi j’ai installé la
version binaire sur OS X sans problème. En ce moment je suis en train de
la compiler sur Debian (c’est très long…).</p>

<p>J’en suis encore à faire le tour de la syntaxe en suivant
<a href="http://learnxinyminutes.com/docs/julia/">cette introduction</a>. J’en parlerais
plus quand j’aurais un peu avancé ;)</p>

<p>Deux/trois trucs que j’ai retenu:</p>

<p>L’operateur de division est logiquement:</p>

<p><code>julia
5 / 2 # =&gt; 2.5
</code></p>

<p>Mais plus surprenant (pour moi en tous cas):</p>

<p><code>julia
2 \ 5 # =&gt; 2.5
</code></p>

<p>J’ai hâte de savoir si il y a une utilité à ça ;)</p>

<p>J’ai eu aussi plaisir à retrouver une arithmétique binaire, par exemple
la multiplication par 2:</p>

<p><code>julia
8 &lt;&lt; 1 # =&gt; 16
</code></p>

<p>Dernier truc, et je m’arrête là, j’aime quand les indices commencent à
1, et non pas à 0:</p>

<p><code>julia
"Bonjour"[1] # =&gt; 'B'
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
