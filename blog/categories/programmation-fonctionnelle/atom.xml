<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : programmation fonctionnelle | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/programmation-fonctionnelle/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-11-05T17:00:21+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programmation fonctionnelle pour les développeurs Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/19/programmation-fonctionnelle-pour-les-developpeurs-ruby/"/>
    <updated>2013-10-19T16:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/19/programmation-fonctionnelle-pour-les-developpeurs-ruby</id>
    <content type="html"><![CDATA[<p>Si vous êtes comme moi, la programmation fonctionnelle vous intéresse,
mais vous n'y comprenez pas grand chose…
Je vous encourage à regarder cette conférence de Jessica Kerr:
<a href="http://vimeo.com/75181845">Functional Principles for Ruby Developers</a>.</p>

<!-- more -->


<p>Elle y développe une analogie que j'ai beaucoup aimé: C'est Watson qui
demande
à Sherlock Holmes «Vous saviez qu'on a découvert une nouvelle planète dans
le système solaire ?». Et Holmes de répondre un truc du genre «Non. Pourtant
vous venez de me le dire, mais je l'ai déjà oublié.»</p>

<p>Dans cette histoire, Holmes ne veut pas remplir son cerveau avec ce genre
d'information qui lui est inutile pour résoudre ses enquêtes. Il se contente
de savoir ce dont il a besoin.</p>

<p>Jessica Kerr nous explique que c'est cela la programmation fonctionnelle:
se contenter de faire seulement ce qu'on a à faire, sans toucher au monde
extérieur. Et elle nous explique comment le faire en Ruby.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une définition de la programmation fonctionnelle avec Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir/"/>
    <updated>2013-08-16T09:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<h2>Ou ma tentative désespérée de comprendre la non mutabilité</h2>

<p>Cet article est un article égoiste ! Depuis que je joue un peu avec Elixir, je
m'aperçois que j'ai des soucis à comprendre <em>vraiment</em> la programmation
fonctionnelle.
J'ai entre autres, des difficultés à me faire au coté immuable, non-mutable,
de la chose (<em>immutable</em> en anglais). Je tente donc aujourd'hui de
mettre au clair mes idées sur la question. Ce qui suit peut ressembler
à un dialogue de fou, vous êtes prévenus.</p>

<!-- more -->


<p>Revoici le module Somme, que j'ai utilisé dans un <a href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/">précédent article</a>.</p>

<p><code>elixir somme.exs
defmodule Somme do
  def run(0, acc), do: acc
  def run(n, acc), do: run(n - 1, n + acc)
end
IO.puts Somme.run(5, 0)
</code></p>

<p>Je vais l'écrire dans un bon vieux langage procédural, et analyser ce qu'il
s'y passe.</p>

<p>``` c somme.c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void)
{</p>

<pre><code>int somme = 0;
for(int n = 5 ; n &gt; 0 ; n--) {
    somme += n;
} 
printf("%i\n", somme);
return 0;
</code></pre>

<p>}
```</p>

<p>On compile et on lance:</p>

<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
15
</code></pre>

<p>Ici pas de récursivité mais une simple itération. Une boucle qui change la
variable <code>somme</code> à chaque passage. Je crois qu'on devrait d'abord définir
ce qu'est une variable. Une variable, c'est un concept. Une variable définit
à la fois un contenant, un contenu et un type, tout cela accessible par un
nom. Notre variable a ici pour nom <code>somme</code>. Son type est <code>int</code>. Son contenu,
ou encore sa valeur est initialement 0 et change à chaque itération. Son
contenant est un emplacement en mémoire, qui lui ne change pas. «<em>Et tu sais ça
comment que ça change pas ?</em>» Bon, puisque j'ai besoin d'une preuve,
j'ajoute un traceur qui affiche l'emplacement mémoire de <code>somme</code>:</p>

<p>``` c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void)
{</p>

<pre><code>int somme = 0;
printf("%d\n", &amp;somme);
for(int n = 5 ; n &gt; 0 ; n--) {
    somme += n;
    printf("%d\n", &amp;somme);
} 
printf("%i\n", somme);
return 0;
</code></pre>

<p>}
```</p>

<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
15
</code></pre>

<p>Voilà, on le sait maintenant: la <em>valeur</em> de <code>somme</code> change, mais son
<em>emplacement</em> (son contenant) reste identique.</p>

<p>Si je tente maintenant de mimer ce comportement avec Elixir, je serais tenté
d'écrire:</p>

<p><code>elixir
somme = 0
Enum.each 5..1, fn n -&gt;
  somme = somme + n
end
IO.puts somme
</code></p>

<pre><code>$ elixir somme.exs 
/home/xavier/somme.exs:3: variable somme is unused
0
</code></pre>

<p>Comme Elixir est sympa, il tente de me prévenir que quelque chose ne
tourne pas rond. On peut penser à un problème de <em>scope</em>, se dire que le
<code>somme</code> à l'intérieur de la fonction anonyme n'est pas le même que le
<code>somme</code> à l'extérieur de cette fonction. Mais c'est pas ça. Ou
plus exactement ce n'est pas <em>seulement</em> ça:</p>

<p><code>elixir
somme = 100
Enum.each 5..1, fn n -&gt;
  somme = somme + n
  IO.puts somme
end
IO.puts somme
</code></p>

<pre><code>$ elixir somme.exs 
105
104
103
102
101
100
</code></pre>

<p>La valeur du <code>somme</code> de l'intérieur est initialisée à chaque
itération par la valeur du <code>somme</code> de l'extérieur.
Donc le <code>somme</code> extérieur est connu dans la fonction anonyme.
Ce comportement me
fais m'arracher les cheveux, je sens que je passe complètement à coté
d'un truc essentiel. Je sais qu'on n'écrirait pas cette fonction de
cette manière, mais je veux comprendre <em>pourquoi</em> ce comportement
quand je fais ça. En fait donner le même nom à ces deux variables est
une illusion.
Pour Elixir le contenu de <code>somme</code> est immuable, il ne peut pas changer.
Il serait donc plus juste d'écrire ça:</p>

<p><code>elixir
somme = 0
Enum.each 5..1, fn n -&gt;
  temp = somme + n
end
IO.puts somme
</code></p>

<p>Ce qui, évidemment, ne mène à rien. Je commence peut-être à comprendre.
Si je reprend le programme du départ:</p>

<p><code>elixir somme.exs
defmodule Somme do
  def run(0, acc), do: acc
  def run(n, acc), do: run(n - 1, n + acc)
end
IO.puts Somme.run(5, 0)
</code></p>

<p>On voit bien que les variables ne changent (ne mutent) jamais. Ce sont à
chaque fois de <em>nouvelle création</em> qui sont passées dans les paramètres.</p>

<p><code>elixir
def run(n, acc), do: run(n - 1, n + acc)
</code></p>

<p>Lors d'un passage précis dans cette fonction, on se fiche royalement de savoir
quel était l'état de <code>n</code> et de <code>acc</code> lors des passages précédents. Ce qui
n'est pas le cas dans l'exemple en C:</p>

<p>``` c
for(int n = 5 ; n > 0 ; n&mdash;) {</p>

<pre><code>somme += n;
</code></pre>

<p>}
```</p>

<p>À chaque passage dans la boucle, il faut connaître l'état de <code>somme</code> dans
l'itération précédente.</p>

<p>On m'avait pourtant bien dit que la programmation fonctionnelle s'occupait
des <em>transformations</em> et pas des <em>états</em>. Mais je ne voyais pas du tout
ce que ça pouvait bien signifier. C'est maintenant un peu plus clair,
même s'il me reste encore du chemin à parcourir pour bien saisir tout
ce qu'implique la programmation fonctionnelle…</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
