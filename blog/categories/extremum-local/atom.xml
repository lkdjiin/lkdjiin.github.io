<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : extremum local | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/extremum-local/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-07-08T21:15:16+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 29]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29/"/>
    <updated>2013-10-07T18:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment sortir de l'extremum local qui bloque notre
algorithme sur le problème des 8 dames.</p>

<!-- more -->


<p>Pour rappel, on essaie de faire fonctionner l'algorithme sur des échiquiers
de plus grande taille: 16, 20 ou 30 cases.
On a vu dernièrement que le faible taux de mutation (1/<em>n</em>, où <em>n</em> est la
taille de la population) qu'on emploie à du bon et du mauvais.
Il est bon puisqu'en exploitant les chromosomes, il mène assez vite à une
<em>presque</em> solution. Et il est mauvais puisque arrivé à cette <em>presque</em> solution,
qui est un extremum local, il ne permet pas l'exploration d'autres chromosomes.</p>

<p>À priori, on peut penser qu'il suffit d'augmenter le taux de mutation.
Effectivement, on obtiendra souvent de très bons résultats entre 1 et
3%. Mais souvent ne veut pas dire toujours et on restera régulièrement
coincé.</p>

<p>Une solution envisageable est d'avoir un taux de mutation variable. 1/<em>n</em>
au début, puis quand on sent arriver l'extremum local on augmente le taux
pour permettre à l'exploration de reprendre. Enfin, quand on pense être
sorti de l'extremum local, on repasse au taux original.</p>

<p>Voici la nouvelle classe <code>Mutator</code>, j'ai mis le code supplémentaire
entre <code># ---</code>:</p>

<p>``` ruby
class Mutator
  def initialize(chromosome_size, mutation_rate)</p>

<pre><code>@size = chromosome_size
@rate = mutation_rate
# ---
@original = mutation_rate
# ---
</code></pre>

<p>  end</p>

<p>  def mutate(chromosome)</p>

<pre><code>@size.times do |index|
  if rand &lt; @rate
    chromosome[index] = Gene.random(@size)
  end
end
chromosome
</code></pre>

<p>  end</p>

<p>  # &mdash;&ndash;
  def increase_mutation_rate</p>

<pre><code>@rate += 0.1
</code></pre>

<p>  end</p>

<p>  def original_mutation_rate</p>

<pre><code>@rate = @original
</code></pre>

<p>  end
  # &mdash;&ndash;
end
```</p>

<p>Le nouveau membre <code>@original</code> et les deux nouvelles méthodes permettent
d'augmenter le taux de mutation (de 10% carrément) et de le repasser
à l'original.</p>

<p>Les autres modifications du code sont en rapport avec ceci. Voici le code
complet:</p>

<p>``` ruby 8_queens.rb
class Individual
  def self.random(chromosome_size)</p>

<pre><code>new(nil, chromosome_size)
</code></pre>

<p>  end</p>

<p>  def self.from_chromosome(chromosome)</p>

<pre><code>new(chromosome)
</code></pre>

<p>  end</p>

<p>  def display</p>

<pre><code>@chromosome.each do |queen_position|
  row = ""
  @chromosome.size.times do |cell|
    row += (cell == queen_position) ? "Q" : "."
  end
  puts row
end
</code></pre>

<p>  end</p>

<p>  attr_accessor :score, :fitness
  attr_reader :chromosome</p>

<p>  def initialize(chromosome = nil, chromosome_size = nil)</p>

<pre><code>if chromosome
  @chromosome = chromosome
else
  @chromosome = []
  chromosome_size.times { @chromosome &lt;&lt; Gene.random(chromosome_size) }
end
</code></pre>

<p>  end
  private_class_method :new
end</p>

<p>class Gene
  def self.random(limit)</p>

<pre><code>rand(limit)
</code></pre>

<p>  end
end</p>

<p>class Population &lt; Array
  def initialize(chromosome_size, population_size)</p>

<pre><code>population_size.times { self &lt;&lt; Individual.random(chromosome_size) }
</code></pre>

<p>  end</p>

<p>  def best</p>

<pre><code>self.sort_by{|individual| individual.score}.last
</code></pre>

<p>  end
end</p>

<p>class Evaluator
  def initialize(board_size, population)</p>

<pre><code>@board_size = board_size
@population = population
</code></pre>

<p>  end</p>

<p>  def evaluate</p>

<pre><code>@population.each {|individual| score(individual) }
fitness
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def score(individual)</p>

<pre><code>individual.score = 1.0 / conflicts(individual)
</code></pre>

<p>  end</p>

<p>  def conflicts(individual)</p>

<pre><code>board = individual.chromosome
score = 0
@board_size.times do |row1|
  gene1 = board[row1]
  (row1+1...@board_size).each do |row2|
    gene2 = board[row2]
    score += 1 if gene1 == gene2
    score += 1 if row2 - row1 == (gene1 - gene2).abs
  end
end
score
</code></pre>

<p>  end</p>

<p>  def fitness</p>

<pre><code>total = @population.inject(0) {|sum, individual| sum + individual.score }
@population.each do |individual|
  individual.fitness = individual.score.to_f / total * @population.size
end
</code></pre>

<p>  end
end</p>

<p>class GeneticAlgorithm
  def initialize(generations, population, board_size, mutation_rate)</p>

<pre><code>@generations = generations
@population = population
@board_size = board_size
@mutation_rate = mutation_rate
@crossover = Crossover.new(board_size, mutation_rate)
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code># ---
old_best = 0
same_best = 1
# ---
@generations.times do |generation|
  Evaluator.new(@board_size, @population).evaluate
  best = @population.best
  display(generation, best)
  if best.score &gt; 1.0
    best.display
    exit
  end
  # ---
  if best.score == old_best
    same_best += 1
  else
    same_best = 1
    @crossover.original_mutation_rate
  end
  old_best = best.score
  if same_best == 5
    same_best = 1
    puts "Increase mutation rate to #{@crossover.increase_mutation_rate}"
  end
  # ---
  next_generation
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def display(generation, best)</p>

<pre><code>puts "#{generation} #{best.score}"
</code></pre>

<p>  end</p>

<p>  def next_generation</p>

<pre><code>pool = MatingPool.new(@population)
population_size = @population.size
@population.clear
population_size.times do
  @population &lt;&lt; @crossover.two_point(pool.random, pool.random)
end
</code></pre>

<p>  end
end</p>

<p>class MatingPool
  def initialize(population)</p>

<pre><code>@mating_pool = []
population.each do |individual|
  integer_part = individual.fitness.to_i
  real_part = individual.fitness - integer_part
  integer_part.times { @mating_pool &lt;&lt; individual.dup }
  @mating_pool &lt;&lt; individual.dup if rand &lt; real_part
end
@size = @mating_pool.size
</code></pre>

<p>  end</p>

<p>  def random</p>

<pre><code>@mating_pool[rand(@size)]
</code></pre>

<p>  end
end</p>

<p>class Crossover
  def initialize(chromosome_size, mutation_rate)</p>

<pre><code>@size = chromosome_size
@rate = mutation_rate
@mutator = Mutator.new(@size, @rate)
</code></pre>

<p>  end</p>

<p>  def two_point(parent1, parent2)</p>

<pre><code>child = assemble(parent1, parent2, two_cut_points)
child = @mutator.mutate(child)
Individual.from_chromosome(child)
</code></pre>

<p>  end</p>

<p>  # &mdash;&ndash;
  def increase_mutation_rate</p>

<pre><code>@mutator.increase_mutation_rate
</code></pre>

<p>  end</p>

<p>  def original_mutation_rate</p>

<pre><code>@mutator.original_mutation_rate
</code></pre>

<p>  end
  # &mdash;&ndash;</p>

<p>  private</p>

<p>  def two_cut_points</p>

<pre><code>point1 = cut_point
point2 = cut_point
point1, point2 = point2, point1 if point1 &gt; point2
[point1, point2]
</code></pre>

<p>  end</p>

<p>  def cut_point</p>

<pre><code>rand(@size)
</code></pre>

<p>  end</p>

<p>  def assemble(parent1, parent2, points)</p>

<pre><code>point1, point2 = points
parent1.chromosome[0...point1] + 
  parent2.chromosome[point1..point2] +
  parent1.chromosome[point2+1..-1]
</code></pre>

<p>  end
end</p>

<p>class Mutator
  def initialize(chromosome_size, mutation_rate)</p>

<pre><code>@size = chromosome_size
@rate = mutation_rate
# ---
@original = mutation_rate
# ---
</code></pre>

<p>  end</p>

<p>  def mutate(chromosome)</p>

<pre><code>@size.times do |index|
  if rand &lt; @rate
    chromosome[index] = Gene.random(@size)
  end
end
chromosome
</code></pre>

<p>  end</p>

<p>  # &mdash;&ndash;
  def increase_mutation_rate</p>

<pre><code>@rate += 0.1
</code></pre>

<p>  end</p>

<p>  def original_mutation_rate</p>

<pre><code>@rate = @original
</code></pre>

<p>  end
  # &mdash;&ndash;
end</p>

<p>generations = 1_000
board_size = 16
population = Population.new(board_size, 1000)
mutation = 0.001
GeneticAlgorithm.new(generations, population, board_size, mutation).run
```</p>

<p>On peut voir dans la méthode <code>run</code> que l'augmentation du taux de mutation
se fait lorsque 5 générations successives on le même meilleur score.
Avec cette méthode, je génère une solution pour un échiquier de 16x16 cases
avec une moyenne de 311 générations.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 28]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28/"/>
    <updated>2013-10-04T18:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans le <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">dernier article</a> on a vu quelle forme concrete prenait un extremum
local dans nos algorithmes génétiques: les chromosomes tendent à devenir
identiques. On doit maintenant comprendre pourquoi on bloque sur un
extremum local dans ce problème particulier des 8 dames, alors qu'on avait
bien supprimé ce souci dans le <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">paradoxe du singe savant</a>.</p>

<!-- more -->


<p>On reprend <a href="http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/">le code</a> pour le paradoxe du singe savant et on modifie
la méthode <code>run</code> de la classe <code>GeneticAlgorithm</code> pour inspecter l'état des
chromosomes une fois la solution trouvée:</p>

<p>``` ruby
  def run</p>

<pre><code>@generations.times do |generation|
  Evaluator.new(@search_value, @population).evaluate
  best = @population.best
  # display(generation, best)
  # exit if best.score == @search_value.size
  if best.score == @search_value.size
    @population.each {|i| p i.chromosome}
    exit
  end
  next_generation
end
</code></pre>

<p>  end
```</p>

<p>En se servant du <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">petit script d'analyse</a> du dernier article, vous vous
apercevrez que pratiquement chaque chromosome est unique. Pourquoi cela
fonctionne ici et pas là ?</p>

<p>Lorsque, dans le paradoxe du singe savant, on mute une phrase, chaque
mutation a une chance réelle d'améliorer la phrase. Bien sûr, pour améliorer
la phrase, il faut que toutes les conditions soit réunies. Il faut
premièrement, que le gène qui mute soit un «mauvais» gène et deuxièmement,
que le remplaçant soit un «bon» gène. Par contre, quelque soit le gène
mutant, les autres gènes n'entrent pas en ligne de compte. Dans la phrase,
chaque gène est totalement indépendant des autres. Voici un exemple pour
clarifier mon propos. On cherche la phrase &ldquo;bonjour&rdquo; et on a pour l'instant
ceci:</p>

<pre><code>xxxxxxx
</code></pre>

<p>Cette phrase n'a que des mauvais gènes, son score est de zéro. Si on mute
le premier gène en &ldquo;b&rdquo;:</p>

<pre><code>bxxxxxx
</code></pre>

<p>La phrase s'est améliorée, son score a augmenté. Vous remarquez que quelque soit
les autres gènes, bons ou mauvais, le score augmente de toutes manières de 1.
C'est ce que j'appelle des <em>gènes indépendants</em>.</p>

<p>Dans le problème des 8 dames, c'est très différent. Il me manque malheureusement
les outils mathématiques et/ou statistiques pour conceptualiser tout ça mais
je vais néanmoins essayer d'expliquer. Lorsqu'on déplace une dame sur le
plateau, c'est à dire quand un gène mute, son déplacement à un effet
potentiel sur les autres dames, elle peut entrer en conflit avec une ou
plusieurs. Donc dans le problème des 8 dames les gènes sont dépendants les
uns des autres. On ne peut pas en muter un sans affecter <em>potentiellement</em>
les autres. Ça signifie qu'il doit y avoir certains chromosomes pour lequels
la mutation d'un seul gène, quel qu'il soit (ou même de plusieurs en
augmentant la taille de l'échiquier), ne peut pas améliorer ce chromosome.
Comme le taux de mutation doit être petit pour permettre
<a href="http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation/">l'exploitation</a> des chromosomes, la probabilité qu'un chromosome voit
suffisament de ses gènes mutés comme il faut est infime, quasi-inexistante.</p>

<p>J'espère avoir été suffisament clair, n'hésitez pas à me demander des précisions
le cas échéant, je ferais de mon mieux pour y répondre. Je vous proposerais
une solution dans le prochain article.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 27]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/"/>
    <updated>2013-10-02T12:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Maintenant qu'on a vu ce qu'était <em>en théorie</em> un extremum local, on
regarde <em>en pratique</em> comment il se manifeste dans les algorithmes
génétiques.</p>

<!-- more -->


<h2>Comment un extremum local se manifeste dans les algorithmes génétiques ?</h2>

<p>On va reprendre le <a href="http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/">dernier code</a>
sur le problème des 8 dames et modifier deux ou trois petites choses.
D'abord on s'assure d'avoir des soucis en passant la taille de l'échiquier
à 16, et on réduit le nombre de générations pour ne pas avoir à attendre
trop longtemps, 200 semble un bon compromis:</p>

<p><code>ruby
generations = 200
board_size = 16
</code></p>

<p>Puis on modifie la méthode <code>run</code> de la classe <code>GeneticAlgorithm</code> de cette
manière:</p>

<p>``` ruby
def run
  @generations.times do |generation|</p>

<pre><code>Evaluator.new(@board_size, @population).evaluate
best = @population.best
# display(generation, best)
if best.score &gt; 1.0
  best.display
  exit
end
next_generation
</code></pre>

<p>  end
  @population.each {|individual| p individual.chromosome }
end
```</p>

<p>La nouveauté est la ligne suivante:</p>

<p><code>ruby
  @population.each {|individual| p individual.chromosome }
</code></p>

<p>Ainsi, au bout de 200 générations, on affiche la liste des chromosomes.
Pour ceux qui ne connaisse pas Ruby, <code>p x</code> est un raccourci pour
<code>puts x.inspect</code>.</p>

<p>J'ai aussi pris soin de commenter la ligne <code>display(generation, best)</code>
pour pouvoir enregistrer plus tard le résultat dans un fichier sans que
celui-ci soit pollué par des données inutiles.</p>

<p>Quand on lance le programme, on obtient quelque chose comme ça:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 14, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 11, 3]
[10, 8, 5, 11, 2, 0, 15, 12, 9, 13, 1, 4, 14, 7, 14, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 11, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 14, 3]
...
</code></pre>

<p>Les chromosomes sont tous identiques, ou presque ! Pour savoir à quel
point ils sont identiques, on peut les compter à la main (!?) où écrire
un petit script de trois lignes:</p>

<p><code>ruby 8_queens_stat.rb
hash = Hash.new(0)
File.open(ARGV.first, "r").each_line {|line| hash[line] += 1 }
hash.each {|key, value| puts "#{"%3d" % value} =&gt; #{key}" }
</code></p>

<p><strong>Edit 3 octobre 2013</strong> Si vous ne comprenez pas le script ci-dessus,
voici <a href="http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash/">une explication</a>.</p>

<p>L'explication de ce script dépasse le cadre de cet article, l'objectif
étant de savoir combien de chromosomes sont identiques. Pour cela on
refait tourner notre algorithme génétique en enregistrant le résultat
(c'est à dire la liste des chromosomes après 200 générations) dans un
fichier:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb &gt; result.txt
</code></pre>

<p>Puis on fait travailler notre script sur ce fichier:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens_stat.rb result.txt
971 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 2, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 8, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 12, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 0]
  2 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 9, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 13, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  3 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 6]
  8 =&gt; [3, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 2, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 14]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 3, 4]
  1 =&gt; [1, 7, 13, 3, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 5, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 13, 10, 2, 4]
  1 =&gt; [1, 7, 14, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 3, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  2 =&gt; [1, 7, 13, 11, 4, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 14, 2, 4]
</code></pre>

<p>971 chromosomes sur 1000 sont identiques ! Question diversité génétique
on repassera… Voilà donc comment un extremum local se manifeste dans
un algorithme génétique: toutes les solutions convergent vers un même
point. L'algorithme ne peut plus produire de nouvelles solutions originales,
il patauge. Les quelques chromosomes différents, 29 sur 1000 dans ce cas là
(ou encore 2,9%) s'expliquent en grande partie par la mutation.</p>

<p>Si vous étudiez en détail le résultat ci-dessus, vous verrez que chaque
chromosome différent ne diffère du chromosome majoritaire que par un
seul de ses gènes. C'est la clé pour comprendre pourquoi la mutation
semble impuissante à nous aider dans ce problème des 8 dames, alors que
tout avait bien fonctionné avec le paradoxe du singe savant. On verra
ça dans le prochain article.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: exploration vs exploitation]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation/"/>
    <updated>2013-10-01T14:32:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Pour en finir avec la <em>théorie</em> sur les extremums locaux, je voudrais
aujourd'hui parler des concepts d'exploration et d'exploitation.</p>

<!-- more -->


<h2>Exploration versus exploitation</h2>

<p>Je vais me resservir de quelques petits dessins que j'ai fait pour l'article
précédent. Lorsqu'on lance des sondes au hasard le long de notre fonction,
on est dans une phase d'exploration:</p>

<p><img src="/images/algo2.jpg"></p>

<p>On <em>explore</em> toute la fonction.</p>

<p>À l'opposé, quand on se concentre sur une valeur de x et qu'on compare
<em>f</em>(x) avec <em>f</em>(x + petite valeur) et <em>f</em>(x &ndash; petite valeur), on est
dans une phase d'exploitation:</p>

<p><img src="/images/algo3.jpg"></p>

<p>On <em>exploite</em> un petit morceau de la fonction. Plus la petite valeur ajoutée
(ou retranchée) à x est petite, plus on exploite la fonction. (<em>Si x peut-être
un nombre entier, ajouter ou soustraire 1 à x est la plus grande exploitation
possible.</em>) Plus cette petite valeur augmente et moins on exploite, plus on
se rapproche d'une exploration.</p>

<p>Il faut comprendre, et accepter, qu'à un moment donné, on ne peut pas à la
fois explorer la fonction et l'exploiter. Il faut choisir entre les deux.
L'exploration seule ne peut pas nous garantir qu'on va trouver un
extremum (pas même un extremum local) et l'exploitation seule risque fort
de trouver un extremum local (et non pas le global).</p>

<p>Pour donner une image &ndash;<em> toutes proportions gardées </em>&ndash; c'est un peu
comme dans le monde quantique : vous ne pouvez pas mesurer à la fois la
masse et la position d'une particule, vous devez choisir l'un ou l'autre.
Une autre image, plus macroscopique, serait ces jeux vidéos où un brouillard
de guerre masque la carte du monde : vous devez constamment choisir entre
explorer le monde loin de vous et exploiter ce qui est tout près de vous.</p>

<p>Un bon algorithme génétique doit trouver le bon équilibre entre ses deux
possibilités : exploration et exploitation. Et malheureusement pour nous,
ce bon équilibre dépend des chromosomes, il est donc différent pour chaque
problème.</p>

<p>La prochaine fois, fini la théorie, on verra comment un extremum local
se manifeste en pratique dans l'algorithme génétique du problème des 8 dames.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 25: extremum local]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/30/les-algorithmes-genetiques-demystifies-25-extremum-local/"/>
    <updated>2013-09-30T21:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/30/les-algorithmes-genetiques-demystifies-25-extremum-local</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans cette serie d'articles sur les algorithmes génétiques, j'ai
employé le terme <em>extremum local</em> à plusieurs reprises sans jamais
vraiment l'expliquer.</p>

<!-- more -->


<p>Pour comprendre ce qu'est un extremum local, on va se servir d'une
fonction mathématique. Rassurez-vous on ne va pas faire de math, je vais
juste me servir du visuel. Imaginons la fonction <em>f</em>(x) suivante:</p>

<p><img src="/images/algo1.jpg"></p>

<p>Admettons que la fonction <em>f</em> soit notre fonction d'évaluation. Dans ce
cas chaque x représente un chromosome parmi tous ceux possibles. Et à chaque
valeur x correspond une valeur y qui serait notre score.</p>

<p>Nous voulons connaitre la valeur de x qui maximise la fonction, qui donne
le plus grand y/score possible. Comment faire ? Le plus simple est de
balayer toutes les valeurs possibles de x, soit calculer <em>f</em>(0), <em>f</em>(1),
<em>f</em>(2), etc. Une fois tout ça calculé, on sait quel x donne le plus grand y.
Où est le problème ? Imaginons que x puisse prendre comme valeur les
nombres entiers de zéro à un milliard, imaginons aussi que la fonction
d'évaluation (<em>f</em>) soit un peu longue et prenne 1 seconde de calcul.
Ça veut dire qu'il faudra (à la louche) 11820 jours pour balayer
toutes les valeurs de x. Pas possible, faut trouver autre chose.</p>

<p>Les algorithmes génétiques, et plus largement les algorithmes
<em>stochastiques</em>, utilisent en partie le hasard pour résoudre ce
type de problème. La solution la plus simple est d'évaluer des valeurs
de x tirées au hasard. Plus on disposera de temps, et plus on s'approchera
<em>théoriquement</em> de la valeur maximum (l'extremum). La figure suivante
propose cinq valeurs de x au hasard. Un premier hic, c'est que pour obtenir
l'extremum en un temps raisonnable, il faut avoir beaucoup de chance.
Un second hic, c'est que pour être <em>sûr</em> d'obtenir l'extremum il faut
toujours balayer toutes les possibilités.</p>

<p><img src="/images/algo2.jpg"></p>

<p>Une solution plus intelligente est de tirer une première valeur de x au
hasard.
Puis on ajoute une petite valeur à x, par exemple 1, 5, 10 ou 100 suivant
l'étendue des x possibles.
On a donc x1 = x + 1. Si le nouveau y
obtenu est plus grand que l'ancien on est sur la bonne voie, sinon on
retranche cette petite valeur (x2 = x &ndash; 1). En progressant ainsi par petits
bonds, on arrivera à l'extremum.</p>

<p><img src="/images/algo3.jpg"></p>

<p>Cette progression par petits bonds est assez proche, dans l'idée, de la
mecanique des algorithmes génétiques. En ajustant comme il faut la
<em>petite valeur</em> qu'on ajoute aux x successifs, on obtiendra l'extremum en
un temps raisonnable.</p>

<p><strong>Edit du 1 oct 2013</strong> Cette petite valeur ajoutée à x peut-être considérée
comme une mutation.</p>

<p>Alors où est le problème maintenant ? Pour le visualiser il faut changer
de fonction mathématique:</p>

<p><img src="/images/algo4.jpg"></p>

<p>Si on n'a pas de chance, on va tirer au hasard une première valeur de x
qui nous emmènera immanquablement vers un extremum <em>local</em>, et non
pas vers l'extremum <em>global</em> !</p>

<p>Voilà, j'espère que cette petite démonstration a remplie son office et
que vous visualisez maintenant clairement cette histoire
d'extremum local.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
