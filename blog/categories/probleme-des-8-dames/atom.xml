<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : problème des 8 dames | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/probleme-des-8-dames/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-05-15T13:58:52+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 32]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/11/les-algorithmes-genetiques-demystifies-32/"/>
    <updated>2013-10-11T20:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/11/les-algorithmes-genetiques-demystifies-32</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je vais arrêter d’écrire sur le problème des 8 dames, temporairement. On a
réussi à développer un programme qui permet de trouver des solutions pour
un échiquier de 50 x 50 cases en un temps acceptable. Voici un joli
graphique avec en x, la taille d’un coté de l’échiquier et en y, le nombre
de secondes requis pour obtenir une solution:</p>

<p><img src="/images/secondes-pour-tailles.png"></p>

<!-- more -->

<p>26 minutes pour un échiquier de 50 x 50 cases, je trouve que ça n’est pas
si mal. Par contre on voit bien comme le temps augmente de manière
exponentielle ! J’aimerais parvenir à trouver des solutions pour un
échiquier de 100 x 100 cases (voir même 1000 x 1000) en un temps raisonable,
disons quelques heures. Pour ça, il faudra améliorer le programme. Peut-être
explorer d’autres méthodes de sélection et/ou croisement ; utiliser les
multiples coeurs de nos machines ; peut-être changer de langage (je pense
en ce moment à Elixir ou Scala, mais je suis ouvert aux suggestions).
Enfin, tout ça sera pour plus tard.</p>

<p>En attendant, je voudrais aborder un problème d’imagerie: un algorithme
génétique qui copierait au mieux une photo à partir de petits carrés de
couleurs et de tailles quelconques. Je compte le faire en Javascript
mais je dois vous prévenir que Javascript et moi, ça fait deux.
Je vais commencer à regarder ça ce week-end, et je compte sur vous pour
pointer les erreurs et les maladresses de mon futur code…</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: un point sur les performances]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/"/>
    <updated>2013-10-09T11:57:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd’hui j’ai peu de temps à consacrer à ce blog. Je voudrais faire
un petit point sur les performances de différentes versions de
l’interpréteur Ruby.</p>

<!-- more -->

<p>Utiliser un interpréteur plus rapide est le moyen le plus simple de
booster les performances. J’ai calculé le temps que prends une génération
avec diverses tailles d’échiquier (16, 30 et 40) et trois interpréteurs
différents: MRI 1.9.3, MRI 2.0.0 et Rubinius 2.0.0.
Voici les résultats:</p>

<pre><code>Temps en seconde pour une génération
====================================

                 16x16  30x30  40x40

MRI 1.9.3        0.092  0.24   0.40
MRI 2.0.0        0.081  0.20   0.34
Rubinius 2.0.0   0.075  0.15   0.24
</code></pre>

<p>C’est sans appel et sans surprise. On peut quand même noter que plus
la taille de l’échiquier augmente, plus Rubinius est proportionnelement rapide.
En gros 22% plus rapide sur un échiquier de 16x16 cases et 66% plus rapide sur
un échiquier de 40x40 cases.</p>

<p>Conclusion évidente: choisissez bien vos outils ;-)</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 30: La population initiale]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale/"/>
    <updated>2013-10-08T21:30:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd’hui je voudrais parler un peu de la population initiale dans
l’algorithme génétique du problème des 8 dames et en général.</p>

<!-- more -->

<h2 id="la-population-initiale">La population initiale</h2>

<p>Dans le paradoxe du singe savant, les chromosomes de la population initiale,
c’est à dire les phrases, étaient générés complètement au hasard. Ce n’est
pas le cas dans le programme qu’on a développé pour solutionner le problème
des 8 dames…</p>

<p>Les dames ne sont pas placées au hasard sur l’échiquier, mais sont
placées une seule par rangée. Cela a pour effet d’<em>orienter</em> la population
initiale. Les chromosomes de la population initiale appartiennent à un
sous-ensemble des chromosomes possibles. Et comme la fonction de mutation
s’applique elle aussi sur une rangée on ne peut jamais sortir de ce
sous-ensemble.</p>

<p>On pourrait même <em>orienter</em> encore plus la population initiale en faisant
en sorte que les dames ne puissent se trouver ni sur une même rangée, ni
sur une même colonne. Pour cela, on pourrait changer la méthode
<code>initialize</code> de la classe <code>Individual</code> ainsi:</p>

<p><code>ruby
  def initialize(chromosome = nil, chromosome_size = nil)
    if chromosome
      # Comme précédement…
    else
      @chromosome = (0...chromosome_size).to_a.shuffle
    end
  end
</code></p>

<p>Alors est-ce-que c’est bien d’orienter la population initiale ? Ça dépend.
Le truc c’est qu’on ne possède pas toujours une totale compréhension du
problème et de l’ensemble des solutions potentielles. Et bien souvent,
orienter la population initiale d’une manière que l’on <em>croit</em> bonne a pour
effet d’emmener le programme dans un extremum local d’où il peut être
long de sortir. Il est difficile d’obtenir la preuve qu’on puisse se passer
de certains gènes…</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 29]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29/"/>
    <updated>2013-10-07T18:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/07/les-algorithmes-genetiques-demystifies-29</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd’hui on voit comment sortir de l’extremum local qui bloque notre
algorithme sur le problème des 8 dames.</p>

<!-- more -->

<p>Pour rappel, on essaie de faire fonctionner l’algorithme sur des échiquiers
de plus grande taille: 16, 20 ou 30 cases.
On a vu dernièrement que le faible taux de mutation (1/<em>n</em>, où <em>n</em> est la
taille de la population) qu’on emploie à du bon et du mauvais.
Il est bon puisqu’en exploitant les chromosomes, il mène assez vite à une
<em>presque</em> solution. Et il est mauvais puisque arrivé à cette <em>presque</em> solution,
qui est un extremum local, il ne permet pas l’exploration d’autres chromosomes.</p>

<p>À priori, on peut penser qu’il suffit d’augmenter le taux de mutation.
Effectivement, on obtiendra souvent de très bons résultats entre 1 et
3%. Mais souvent ne veut pas dire toujours et on restera régulièrement
coincé.</p>

<p>Une solution envisageable est d’avoir un taux de mutation variable. 1/<em>n</em>
au début, puis quand on sent arriver l’extremum local on augmente le taux
pour permettre à l’exploration de reprendre. Enfin, quand on pense être
sorti de l’extremum local, on repasse au taux original.</p>

<p>Voici la nouvelle classe <code>Mutator</code>, j’ai mis le code supplémentaire
entre <code># ---</code>:</p>

<p>``` ruby
class Mutator
  def initialize(chromosome_size, mutation_rate)
    @size = chromosome_size
    @rate = mutation_rate
    # —
    @original = mutation_rate
    # —
  end</p>

<p>def mutate(chromosome)
    @size.times do |index|
      if rand &lt; @rate
        chromosome[index] = Gene.random(@size)
      end
    end
    chromosome
  end</p>

<p># —
  def increase_mutation_rate
    @rate += 0.1
  end</p>

<p>def original_mutation_rate
    @rate = @original
  end
  # —
end
```</p>

<p>Le nouveau membre <code>@original</code> et les deux nouvelles méthodes permettent
d’augmenter le taux de mutation (de 10% carrément) et de le repasser
à l’original.</p>

<p>Les autres modifications du code sont en rapport avec ceci. Voici le code
complet:</p>

<p>``` ruby 8_queens.rb
class Individual
  def self.random(chromosome_size)
    new(nil, chromosome_size)
  end</p>

<p>def self.from_chromosome(chromosome)
    new(chromosome)
  end</p>

<p>def display
    @chromosome.each do |queen_position|
      row = “”
      @chromosome.size.times do |cell|
        row += (cell == queen_position) ? “Q” : “.”
      end
      puts row
    end
  end</p>

<p>attr_accessor :score, :fitness
  attr_reader :chromosome</p>

<p>def initialize(chromosome = nil, chromosome_size = nil)
    if chromosome
      @chromosome = chromosome
    else
      @chromosome = []
      chromosome_size.times { @chromosome « Gene.random(chromosome_size) }
    end
  end
  private_class_method :new
end</p>

<p>class Gene
  def self.random(limit)
    rand(limit)
  end
end</p>

<p>class Population &lt; Array
  def initialize(chromosome_size, population_size)
    population_size.times { self « Individual.random(chromosome_size) }
  end</p>

<p>def best
    self.sort_by{|individual| individual.score}.last
  end
end</p>

<p>class Evaluator
  def initialize(board_size, population)
    @board_size = board_size
    @population = population
  end</p>

<p>def evaluate
    @population.each {|individual| score(individual) }
    fitness
  end</p>

<p>private</p>

<p>def score(individual)
    individual.score = 1.0 / conflicts(individual)
  end</p>

<p>def conflicts(individual)
    board = individual.chromosome
    score = 0
    @board_size.times do |row1|
      gene1 = board[row1]
      (row1+1…@board_size).each do |row2|
        gene2 = board[row2]
        score += 1 if gene1 == gene2
        score += 1 if row2 - row1 == (gene1 - gene2).abs
      end
    end
    score
  end</p>

<p>def fitness
    total = @population.inject(0) {|sum, individual| sum + individual.score }
    @population.each do |individual|
      individual.fitness = individual.score.to_f / total * @population.size
    end
  end
end</p>

<p>class GeneticAlgorithm
  def initialize(generations, population, board_size, mutation_rate)
    @generations = generations
    @population = population
    @board_size = board_size
    @mutation_rate = mutation_rate
    @crossover = Crossover.new(board_size, mutation_rate)
  end</p>

<p>def run
    # —
    old_best = 0
    same_best = 1
    # —
    @generations.times do |generation|
      Evaluator.new(@board_size, @population).evaluate
      best = @population.best
      display(generation, best)
      if best.score &gt; 1.0
        best.display
        exit
      end
      # —
      if best.score == old_best
        same_best += 1
      else
        same_best = 1
        @crossover.original_mutation_rate
      end
      old_best = best.score
      if same_best == 5
        same_best = 1
        puts “Increase mutation rate to #{@crossover.increase_mutation_rate}”
      end
      # —
      next_generation
    end
  end</p>

<p>private</p>

<p>def display(generation, best)
    puts “#{generation} #{best.score}”
  end</p>

<p>def next_generation
    pool = MatingPool.new(@population)
    population_size = @population.size
    @population.clear
    population_size.times do
      @population « @crossover.two_point(pool.random, pool.random)
    end
  end
end</p>

<p>class MatingPool
  def initialize(population)
    @mating_pool = []
    population.each do |individual|
      integer_part = individual.fitness.to_i
      real_part = individual.fitness - integer_part
      integer_part.times { @mating_pool « individual.dup }
      @mating_pool « individual.dup if rand &lt; real_part
    end
    @size = @mating_pool.size
  end</p>

<p>def random
    @mating_pool[rand(@size)]
  end
end</p>

<p>class Crossover
  def initialize(chromosome_size, mutation_rate)
    @size = chromosome_size
    @rate = mutation_rate
    @mutator = Mutator.new(@size, @rate)
  end</p>

<p>def two_point(parent1, parent2)
    child = assemble(parent1, parent2, two_cut_points)
    child = @mutator.mutate(child)
    Individual.from_chromosome(child)
  end</p>

<p># —
  def increase_mutation_rate
    @mutator.increase_mutation_rate
  end</p>

<p>def original_mutation_rate
    @mutator.original_mutation_rate
  end
  # —</p>

<p>private</p>

<p>def two_cut_points
    point1 = cut_point
    point2 = cut_point
    point1, point2 = point2, point1 if point1 &gt; point2
    [point1, point2]
  end</p>

<p>def cut_point
    rand(@size)
  end</p>

<p>def assemble(parent1, parent2, points)
    point1, point2 = points
    parent1.chromosome[0…point1] + 
      parent2.chromosome[point1..point2] +
      parent1.chromosome[point2+1..-1]
  end
end</p>

<p>class Mutator
  def initialize(chromosome_size, mutation_rate)
    @size = chromosome_size
    @rate = mutation_rate
    # —
    @original = mutation_rate
    # —
  end</p>

<p>def mutate(chromosome)
    @size.times do |index|
      if rand &lt; @rate
        chromosome[index] = Gene.random(@size)
      end
    end
    chromosome
  end</p>

<p># —
  def increase_mutation_rate
    @rate += 0.1
  end</p>

<p>def original_mutation_rate
    @rate = @original
  end
  # —
end</p>

<p>generations = 1_000
board_size = 16
population = Population.new(board_size, 1000)
mutation = 0.001
GeneticAlgorithm.new(generations, population, board_size, mutation).run
```</p>

<p>On peut voir dans la méthode <code>run</code> que l’augmentation du taux de mutation
se fait lorsque 5 générations successives on le même meilleur score.
Avec cette méthode, je génère une solution pour un échiquier de 16x16 cases
avec une moyenne de 311 générations.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 28]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28/"/>
    <updated>2013-10-04T18:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans le <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">dernier article</a> on a vu quelle forme concrete prenait un extremum
local dans nos algorithmes génétiques: les chromosomes tendent à devenir
identiques. On doit maintenant comprendre pourquoi on bloque sur un
extremum local dans ce problème particulier des 8 dames, alors qu’on avait
bien supprimé ce souci dans le <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">paradoxe du singe savant</a>.</p>

<!-- more -->

<p>On reprend <a href="http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/">le code</a> pour le paradoxe du singe savant et on modifie
la méthode <code>run</code> de la classe <code>GeneticAlgorithm</code> pour inspecter l’état des
chromosomes une fois la solution trouvée:</p>

<p><code>ruby
  def run
    @generations.times do |generation|
      Evaluator.new(@search_value, @population).evaluate
      best = @population.best
      # display(generation, best)
      # exit if best.score == @search_value.size
      if best.score == @search_value.size
        @population.each {|i| p i.chromosome}
        exit
      end
      next_generation
    end
  end
</code></p>

<p>En se servant du <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">petit script d’analyse</a> du dernier article, vous vous
apercevrez que pratiquement chaque chromosome est unique. Pourquoi cela
fonctionne ici et pas là ?</p>

<p>Lorsque, dans le paradoxe du singe savant, on mute une phrase, chaque
mutation a une chance réelle d’améliorer la phrase. Bien sûr, pour améliorer
la phrase, il faut que toutes les conditions soit réunies. Il faut
premièrement, que le gène qui mute soit un «mauvais» gène et deuxièmement,
que le remplaçant soit un «bon» gène. Par contre, quelque soit le gène
mutant, les autres gènes n’entrent pas en ligne de compte. Dans la phrase,
chaque gène est totalement indépendant des autres. Voici un exemple pour
clarifier mon propos. On cherche la phrase “bonjour” et on a pour l’instant
ceci:</p>

<pre><code>xxxxxxx
</code></pre>

<p>Cette phrase n’a que des mauvais gènes, son score est de zéro. Si on mute
le premier gène en “b”:</p>

<pre><code>bxxxxxx
</code></pre>

<p>La phrase s’est améliorée, son score a augmenté. Vous remarquez que quelque soit
les autres gènes, bons ou mauvais, le score augmente de toutes manières de 1.
C’est ce que j’appelle des <em>gènes indépendants</em>.</p>

<p>Dans le problème des 8 dames, c’est très différent. Il me manque malheureusement
les outils mathématiques et/ou statistiques pour conceptualiser tout ça mais
je vais néanmoins essayer d’expliquer. Lorsqu’on déplace une dame sur le
plateau, c’est à dire quand un gène mute, son déplacement à un effet
potentiel sur les autres dames, elle peut entrer en conflit avec une ou
plusieurs. Donc dans le problème des 8 dames les gènes sont dépendants les
uns des autres. On ne peut pas en muter un sans affecter <em>potentiellement</em>
les autres. Ça signifie qu’il doit y avoir certains chromosomes pour lequels
la mutation d’un seul gène, quel qu’il soit (ou même de plusieurs en
augmentant la taille de l’échiquier), ne peut pas améliorer ce chromosome.
Comme le taux de mutation doit être petit pour permettre
<a href="http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation/">l’exploitation</a> des chromosomes, la probabilité qu’un chromosome voit
suffisament de ses gènes mutés comme il faut est infime, quasi-inexistante.</p>

<p>J’espère avoir été suffisament clair, n’hésitez pas à me demander des précisions
le cas échéant, je ferais de mon mieux pour y répondre. Je vous proposerais
une solution dans le prochain article.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
