<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : code propre | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/code-propre/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-13T21:16:26+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quel est l'intérêt de cette syntaxe ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe/"/>
    <updated>2013-07-10T09:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>En googlant sur <code>ruby design pattern factory</code> je suis tombé sur un
<a href="http://blog.rubybestpractices.com/posts/gregory/059-issue-25-creational-design-patterns.html">post intéressant</a>.
Non, je ne vais pas vous parler de design pattern dans cet article. L'exemple
qui m'a plus particulierment intrigué est le suivant:</p>

<p>``` ruby Exemple original
class AdjacencyMatrix<br/>
  class &lt;&lt; self</p>

<pre><code>def undirected(data)  
  new(data)  
end  

def directed(data)  
  new(data,true)  
end  

private :new  
</code></pre>

<p>  end</p>

<p>  def initialize(data, directed=false)</p>

<pre><code>#...  
</code></pre>

<p>  end<br/>
end</p>

<p>undirected_matrix = AdjacencyMatrix.undirected(data) <br/>
directed_matrix   = AdjacencyMatrix.directed(data)
```</p>

<p>Pourquoi cet exemple m'a intrigué ? Pas parce qu'il parle de matrice, je vous
rassure. Je ne comprends pas grand chose aux matrices, et je n'ai jamais
entendu parler d'«adjacency matrix». Si cet exemple m'intrigue, c'est parce que
je ne comprends pas, <em>à priori</em>, l'intérêt du <code>class &lt;&lt; self</code>.  Il me semble
que je peux réécrire ça sans <code>class &lt;&lt; self</code> et que le résultat serait le même.</p>

<!-- more -->


<p>Alors allons y. Voilà le nouveau bout de code qui fait la même chose que
le précédent:</p>

<p>``` ruby Seconde version
class AdjacencyMatrix<br/>
  def self.undirected(data)</p>

<pre><code>new(data)  
</code></pre>

<p>  end</p>

<p>  def self.directed(data)</p>

<pre><code>new(data,true)  
</code></pre>

<p>  end</p>

<p>  private_class_method :new</p>

<p>  def initialize(data, directed=false)</p>

<pre><code>#...  
</code></pre>

<p>  end
end</p>

<p>undirected_matrix = AdjacencyMatrix.undirected(data)
directed_matrix   = AdjacencyMatrix.directed(data)
```</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<h2>Quel est l'intérêt de <code>class &lt;&lt; self</code> ?</h2>

<p>Quoi qu'il en soit, je n'ai toujours pas de réponse à ma première question:
«quel est l'intérêt de <code>class &lt;&lt; self</code>» dans cet exemple précis.
Il est possible que dans une ancienne
version de Ruby, il n'y avait pas moyen de faire autrement et qu'on ai gardé
l'habitude ? Peut-être qu'il n'y a aucune réponse ? Je vais donc aller faire un
tour du coté de la divinité StackOverflow pour tenter d'y voir plus clair. Je
vous tient au courant dans un futur article si je trouve quelque chose.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
