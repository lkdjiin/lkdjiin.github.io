<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : dsl | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/dsl/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-08T21:56:06+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Écrire un DSL en Ruby facilement avec Docile]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile/"/>
    <updated>2013-08-14T10:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je suis en train de lire «<a href="http://www.wolframscience.com/">A new kind of science</a>» de Stephen Wolfram
et ça me donne envie de me replonger dans les <a href="https://fr.wikipedia.org/wiki/Automate_cellulaire">automates cellulaires</a>.
Le jeu de la vie est sûrement le programme que j'ai écrit le plus souvent,
mais curieusement jamais en Ruby.</p>

<!-- more -->


<p>J'ai commencé à écrire un
<a href="https://github.com/lkdjiin/cellula">framework pour automate cellulaire</a>,
qui n'aboutira peut-être pas faute de temps. Quoiqu'il en soit, je voudrais
que ce framework soit utilisable par des non-développeurs, d'où le recours
à un DSL (Domain Specific Language). Et pour développer mon DSL, je n'ai
pas trouver plus simple que la gem
<a href="https://github.com/ms-ati/docile">docile</a>.</p>

<p>Voici le DSL que je voudrais:</p>

<p><code>ruby my_automaton.rb
automaton "Test Automaton" do
  dimensions       2
  type             :elementary
  width            100
  height           100
  rule             :b36s26
  pattern          :random
  live_probability 0.1789
end
</code></p>

<p>Docile encourage l'utilisation du design pattern builder. Alors allons-y
pour une classe builder qui va contenir les valeurs par défaut de notre
futur Automaton:</p>

<p>``` ruby automaton_builder.rb
class AutomatonBuilder
  def initialize(name)</p>

<pre><code>@name = name
@dimensions = 2
@type = :elementary
@width = 0
@height = 0
@rule = :b3s23
@pattern = :random
@live_probability = 0.5
</code></pre>

<p>  end</p>

<p>  def dimensions(val); @dimensions = val; self; end
  def type(val); @type = val; self; end
  def width(val); @width = val; self; end
  def height(val); @height = val; self; end
  def rule(val); @rule = val; self; end
  def pattern(val); @pattern = val; self; end
  def live_probability(val); @live_probability = val; self; end</p>

<p>  def build</p>

<pre><code>Automaton.new(@name, @dimensions, @type, @width, @height,
              @rule, @pattern, @live_probability)
</code></pre>

<p>  end
end
```</p>

<p>Il nous faut maintenant une classe Automaton:</p>

<p>``` ruby automaton.rb
class Automaton
  def initialize(name, dimensions, type, width, height, rule,</p>

<pre><code>            pattern, live_probability)
@name = name
@dimensions = dimensions
@type = type
@width = width
@height = height
@rule = rule
@pattern = pattern
@live_probability = live_probability
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code>puts "#{@name} running"
</code></pre>

<p>  end
end
```</p>

<p>Et pour finir, on demande à Docile d'évaluer notre DSL puis on charge le
fichier <code>my_automaton.rb</code>. Il ne reste plus qu'à lancer la machine:</p>

<p>``` ruby main.rb
require &lsquo;docile&rsquo;
require &lsquo;./automaton_builder&rsquo;
require &lsquo;./automaton&rsquo;</p>

<p>def automaton(name, &amp;block)
  @auto = Docile.dsl_eval(AutomatonBuilder.new(name), &amp;block).build
end</p>

<p>load ARGV[0]</p>

<p>@auto.run
```</p>

<p>La boucle est bouclée. Vous remarquerez que la méthode <code>automaton</code> définie
dans <code>main.rb</code> ci-dessus est celle qui est utilisée dans le DSL
(<code>my_automaton.rb</code>).</p>

<pre><code>$ ruby ./main.rb my_automaton.rb 
Test Automaton running
</code></pre>

<p>Et voilà. C'est presque trop facile d'écrire un DSL avec Docile…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
