<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : framework | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/framework/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-11T14:28:53+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exemple de test pour Vim avec le framework Vader]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader/"/>
    <updated>2014-03-29T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour mon plugin <a href="https://github.com/lkdjiin/quickmarkdown">QuickMarkdown</a>, je vais ajouter une petite fonction
qui insère la ligne <code>&lt;!-- more --&gt;</code> quand je tape la combinaison de
touche <code>&lt;Leader&gt;qm</code>. Ça devrait m'être utile vu que j'écris du markdown
pour Octopress tous les jours ;) Si on est pas obligé de passer par un
plugin pour ce genre de chose, ça va aussi me permettre de parler un peu
de Vader. Voici donc un exemple simple de TDD pour
Vim, avec le framework de test Vader.</p>

<!-- more -->


<p>Tout d'abord, j'écris le test:</p>

<p>``` raw test/more.vader
Given (some text):
  First line
  Last line</p>

<p>Do (insert more marker in normal mode):
  gg
  :QuickMarkdownMore&lt;Enter></p>

<p>Expect (marker inserted):
  First line
  <!-- more -->
  Last line
```</p>

<p>Voici comment il fonctionne. La directive <code>Given</code> produit un buffer (=~ fichier)
utilisé dans les directives suivante, qui contient 2 lignes, respectivement
<code>First line</code> et <code>Last line</code>:</p>

<p><code>raw
Given (some text):
  First line
  Last line
</code></p>

<p>Ensuite, la directive <code>Do</code> joue des commandes en mode normal. Tout d'abord
<code>gg</code>, pour s'assurer qu'on est sur la première ligne, puis la commande
<code>QuickMarkdownMore</code>, qui est celle qui est censée faire le travail:</p>

<p><code>raw
Do (insert more marker in normal mode):
  gg
  :QuickMarkdownMore\&lt;Enter&gt;
</code></p>

<p>Finalement, la directive <code>Expect</code> s'assure que le buffer de test a été
transformé comme je le voulais:</p>

<p><code>raw
Expect (marker inserted):
  First line
  &lt;!-- more --&gt;
  Last line
</code></p>

<p>Il reste à lancer le test (avec <code>:Vader</code>) pour s'assurer qu'il ne passe
pas, puis à écrire la fonction, et relancer le test en s'assurant qu'il
passe bien cette fois-ci.</p>

<p>Et voici pour finir le code d'implémentation:</p>

<p><code>vim plugin/markdown.vim
command! QuickMarkdownMore call quickmarkdown#more()
</code></p>

<p><code>vim autoload/markdown.vim
function! quickmarkdown#more()
  call append('.', "&lt;!-- more --&gt;")
endfunction
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vader, un framework de test pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim/"/>
    <updated>2014-03-16T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/junegunn/vader.vim">Vader</a> est un framework de test pour Vim, écrit en VimScript. Sa syntaxe très simple
fait penser un peu à un mélange de Cucumber et de Python. Il est vraiment sympa
à utiliser.</p>

<!-- more -->


<p>Voici à quoi ressemble un test simple avec Vader:</p>

<pre><code>Given (A line of text):
  Make a title of this

Execute (To level 1 title):
  QuickMarkdownTitle1

Expect (to be a level 1 title):
  Make a title of this
  ====================
</code></pre>

<p>Le bloc <code>Given</code> permet de remplir un buffer de test avec des données.</p>

<p>Le bloc <code>Execute</code> lance des fonctions Vim.</p>

<p>Le bloc <code>Expect</code> vérifie que le buffer de test est bien celui attendu
après le passage du bloc <code>Execute</code>.</p>

<p>Il existe aussi un bloc <code>Do</code>, qui simule le mode normal:</p>

<pre><code>Given (Some text):
  Make a title of this
  and not of this one

Do (To title 1):
  gg
  :QuickMarkdownTitle1\&lt;Enter&gt;

Expect (to be a level 1 title):
  Make a title of this
  ====================
  and not of this one
</code></pre>

<p>On lance Vader simplement avec:</p>

<p><code>vim
:Vader
</code></p>

<p>et le framework ouvre un nouveau buffer avec toutes les informations
nécessaires:</p>

<pre><code>Starting Vader: 1 suite(s), 6 case(s)
  Starting Vader: /home/xavier/devel/vim/quickmarkdown/test/titles.vader
    (1/6) [  GIVEN] A line of text
    (1/6) [EXECUTE] To level 1 title
    (1/6) [ EXPECT] to be a level 1 title
    (2/6) [  GIVEN] A line of text
    (2/6) [EXECUTE] To level 2 title
    (2/6) [ EXPECT] to be a level 2 title
    (3/6) [  GIVEN] A line of text
    (3/6) [EXECUTE] To level 3 title
    (3/6) [ EXPECT] to be a level 3 title
    (4/6) [  GIVEN] Some text
    (4/6) [     DO] To title 1
    (4/6) [ EXPECT] to be a level 1 title
    (5/6) [  GIVEN] Some text
    (5/6) [     DO] To title 2
    (5/6) [ EXPECT] to be a level 2 title
    (6/6) [  GIVEN] Some text
    (6/6) [     DO] To title 3
    (6/6) [ EXPECT] to be a level 3 title
  Success/Total: 6/6
Success/Total: 6/6 (assertions: 0/0)
Elapsed time: 0.419884 sec.
</code></pre>

<p>Vader est «livré» avec coloration syntaxique, ftplugin, plusieurs exemples
d'utilisations. Il peut aussi faire des hooks <code>before</code> et <code>after</code>, inclure des
fichiers et d'autres choses encore…</p>

<p>Une très bonne découverte, très agréable à utiliser.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
