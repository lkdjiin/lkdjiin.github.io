<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : terminal | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/terminal/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-01T18:00:04+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4/"/>
    <updated>2014-03-01T17:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/01/ecrire-un-editeur-pour-le-terminal-partie-4</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment écrire un message centré horizontalement et
verticalement, comment lire une chaîne de caractères, et comment être
tranquille avec les caractères non ASCII.</p>

<!-- more -->


<p>Voici un programme qui montre tout ça:</p>

<p>``` ruby
require &lsquo;curses&rsquo;
include Curses</p>

<p>message = &ldquo;Enter a string: &rdquo;</p>

<p>begin
  init_screen
  setpos(lines / 2, (cols &ndash; message.size) / 2)
  addstr(message)
  str = getstr
  setpos(lines &ndash; 2, 0)
  addstr(sprintf(&ldquo;You entered: %s&rdquo;, str))
  getch
ensure
  close_screen
end
```</p>

<p>Quelques brèves explications maintenant:</p>

<p>Tout d'abord, on affiche un message centré ainsi:</p>

<p><code>ruby
  setpos(lines / 2, (cols - message.size) / 2)
  addstr(message)
</code></p>

<p>Pour lire une chaîne de caractères, on utilise <code>getstr</code>:</p>

<p><code>ruby
  str = getstr
</code></p>

<p>Puis on affiche ce qu'on vient de lire sur l'avant-dernière ligne du
terminal:</p>

<p><code>ruby
  setpos(lines - 2, 0)
  addstr(sprintf("You entered: %s", str))
</code></p>

<p>Le <a href="http://www.ruby-doc.org/core-2.1.1/Kernel.html#method-i-sprintf">sprintf</a>,
qui vous rappelera des choses si vous avez fait du C, est ce que j'ai
trouvé de mieux pour ne pas avoir de soucis avec les caractères
non ASCII.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtrer ses logs en direct]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/28/filtrer-ses-logs-en-direct/"/>
    <updated>2014-02-28T20:50:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/28/filtrer-ses-logs-en-direct</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment filtrer nos fichiers de log en direct à l'aide
des commandes UNIX <code>tail</code> et <code>sed</code>.</p>

<!-- more -->


<p>Pour afficher un fichier en direct live sur le terminal, autrement dit pour
visualiser au fur et à mesure les ajouts dans ce fichier, on utilise
<code>tail -f</code>:</p>

<p><code>bash
tail -f un/fichier/de/log
</code></p>

<p>Pour afficher <strong>uniquement</strong> les lignes d'un fichier qui contiennent la
chaîne de caractères <code>ERROR</code>, on va utiliser <code>sed</code>:</p>

<p><code>bash
sed -n '/ERROR/p' un/fichier/de/log
</code></p>

<p>Ou bien pour afficher toutes les lignes d'un fichier <strong>sauf</strong> celles qui
contiennent la chaîne de caractères <code>bruit</code>, on utilisera:</p>

<p><code>bash
sed '/bruit/d' un/fichier/de/log
</code></p>

<p>Et en combinant les deux, on aura un log en direct et filtré:</p>

<p><code>bash
tail -f un/fichier/de/log | sed -n '/ERROR/p'
</code></p>

<p>Et vous, vous utilisez quelle(s) commande(s) ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La commande cat peut aussi afficher les numéros de lignes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/27/la-commande-cat-peut-aussi-afficher-les-numeros-de-lignes/"/>
    <updated>2014-02-27T20:48:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/27/la-commande-cat-peut-aussi-afficher-les-numeros-de-lignes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je crois bien que je n'avais jamais regardé la documentation de la commande
unix <code>cat</code> jusqu'à il y a quelques jours. Je viens donc tout juste
d'apprendre qu'on pouvait afficher les numéros de lignes.</p>

<!-- more -->


<p>Afficher un fichier avec <code>cat</code>:</p>

<p><code>bash
$ cat exemple
Je suis
un fichier
exemple.
</code></p>

<p>Afficher avec les numéros de ligne:</p>

<p>``` bash
$ cat -n exemple</p>

<pre><code> 1  Je suis
 2  un fichier
 3  exemple.
</code></pre>

<p>```</p>

<p>Voilà, ça peut servir de temps en temps…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/24/ecrire-un-editeur-pour-le-terminal-partie-3/"/>
    <updated>2014-02-24T20:59:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/24/ecrire-un-editeur-pour-le-terminal-partie-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Comment connaitre le nombre de lignes et de colonnes du terminal ?
Voici la réponse…</p>

<!-- more -->


<p>Le programme suivant utilise les méthodes <code>cols</code> et <code>lines</code> de la
bibliothèque <code>Curses</code> pour avoir ces informations:</p>

<p>``` ruby
require &lsquo;curses&rsquo;
include Curses</p>

<p>begin
  init_screen
  addstr(&ldquo;#{cols} x #{lines}&rdquo;)
  getch
ensure
  close_screen
end
```</p>

<p>Redimensionnez votre terminal et relancez le programme pour être sûr
que ça fonctionne ;)</p>

<p>Ces informations nous seront bien utiles pour l'écriture d'un éditeur…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un éditeur pour le terminal - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/23/ecrire-un-editeur-pour-le-terminal-partie-2/"/>
    <updated>2014-02-23T16:33:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/23/ecrire-un-editeur-pour-le-terminal-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Comme j'ai eu un peu trop de problêmes à faire tourner <em>ncurses</em> sur
plusieurs machines, j'ai décidé de repasser à <em>curses</em>.</p>

<!-- more -->


<p>Voici donc le programme de <a href="/blog/2014/02/22/ecrire-un-editeur-pour-le-terminal-partie-1/">la dernière fois</a>, réécrit pour <em>curses</em>:</p>

<p>``` ruby redvim.rb</p>

<h1>!/usr/bin/env ruby</h1>

<p>require &lsquo;curses&rsquo;
include Curses</p>

<p>file = File.open ARGV[0]</p>

<p>begin
  init_screen
  file.each {|line| addstr(line) }
  refresh
  getch
ensure
  close_screen
end
```</p>

<h2>Un problème avec Unicode ?</h2>

<p>Il se peut que vous ayez des problèmes pour afficher correctement les
caractères unicode. À tous les coups, c'est parce que la gem <em>curses</em>
à été compilée sans les headers indispensables.
Installez donc ces headers: libncurses5.dev et libncurses5w.dev, ensuite
vous avez deux solutions:</p>

<ol>
<li>Si vous utilisez Ruby 2.1, désinstallez <em>curses</em> et réinstallez la:
<code>gem uninstall curses &amp;&amp; gem install curses</code>.</li>
<li>Si vous utilisez Ruby 2.0 ou inférieur, <em>curses</em> fait partie de la
bibliothèque standard, c'est donc Ruby qu'il faudra recompiler.</li>
</ol>


<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
