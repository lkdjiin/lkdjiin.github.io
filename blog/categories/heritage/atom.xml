<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : héritage | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/heritage/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-12-20T16:35:12+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2/"/>
    <updated>2014-03-25T19:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/25/la-methode-super-en-ruby-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Comme me le faisait remarquer ce matin un lecteur, il manque un cas à
mon article d’hier sur l’utilisation de <code>super</code> en Ruby. C’est d’autant
plus impardonnable que c’est un cas où, pour une fois, les parenthèses
sont <strong>obligatoires</strong> à la fin d’une méthode.</p>

<!-- more -->

<p>Voici donc une classe de base et une classe fille:</p>

<p>``` ruby
class Base
  def foo
    puts “Base#foo”
  end
end</p>

<p>class Child &lt; Base
  def foo(bar)
    super
    puts “Child#foo with #{bar}”
  end
end
```</p>

<p>Et maintenant on essaye le tout:</p>

<p><code>ruby
child = Child.new
child.foo
#=&gt; ArgumentError: wrong number of arguments (0 for 1)
</code></p>

<p>Boum ! Comme on l’a vu hier, <code>super</code> passe automatiquement tous les
paramètres de la méthode dans laquelle il est appelé vers la classe
de base. Et là, notre méthode <code>foo</code> dans la classe de base est sans
argument.</p>

<p>Pour résoudre ce problème, on est obligé de mettre des parenthèses
à la suite de <code>super</code>:</p>

<p><code>ruby
class Child &lt; Base
  def foo(bar)
    super()
    puts "Child#foo with #{bar}"
  end
end
</code></p>

<p><code>ruby
child = Child.new
child.foo('ok')
Base#foo
Child#foo with ok
</code></p>

<p>Voilà, oubli réparé.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/"/>
    <updated>2014-03-24T21:21:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd’hui un aperçu de la méthode <code>super</code> pour les débutants en Ruby.
C’est une méthode dont le comportement peut surprendre si vous venez
de certains autres langages…</p>

<!-- more -->
<p>Pour étudier le comportement de <code>super</code> il va nous falloir utiliser
l’héritage. Voici une classe de base toute simple:</p>

<p><code>ruby
class Base
  def foo(bar)
    puts "#{bar} from Base"
  end
end
</code></p>

<p>Et voici comment l’utiliser:</p>

<p><code>ruby
base = Base.new
base.foo("Hello")
#=&gt; Hello from Base
</code></p>

<p>Maintenant créons une classe fille qui hérite de <code>Base</code> et
<em>redéfinissons</em> la méthode <code>foo</code>:</p>

<p><code>ruby
class Child &lt; Base
  def foo(bar)
    super
    puts "#{bar} from Child"
  end
end
</code></p>

<p>Voici ce que ça donne:</p>

<p><code>ruby
child = Child.new
child.foo("Hello")
#=&gt; Hello from Base
#=&gt; Hello from Child
</code></p>

<p>Il faut noter que:</p>

<ol>
  <li>La méthode éponyme <code>foo</code> de la classe de base n’est pas appelée
implicitement. Il faut le faire explicitement avec <code>super</code>.</li>
  <li>On est pas limité à un <em>constructeur</em>, on peut appeler <code>super</code> dans
une <em>simple</em> méthode.</li>
  <li>Dans ce cas précis, pas besoin de passer l’argument <code>bar</code> à la
méthode <code>super</code>, c’est fait <strong>automagiquement</strong>.</li>
</ol>

<p>Allons plus loin et faisons faire plus de choses à la méthode <code>foo</code> de la
classe fille:</p>

<p><code>ruby
class Child &lt; Base
  def foo(bar, baz)
    super
    puts "#{bar} #{baz} from Child"
  end
end
</code></p>

<p>Cette fois-ci la magie n’opère plus et nous avons droit à une belle erreur:</p>

<p><code>ruby
child = Child.new
child.foo("Hello", "world")
#=&gt; super.rb:2:in `foo': wrong number of arguments (2 for 1) (ArgumentError)
</code></p>

<p>Ruby nous signale que la méthode <code>foo</code> de la classe <code>Base</code> a reçu 2
arguments, alors qu’elle n’en attendait qu’un seul ! Pourquoi, alors que
nous n’avons même pas passé un seul argument ? Parce que <code>super</code>, sans
arguments, prends <strong>tous</strong> les arguments passés à la méthode dans
laquelle il se trouve et les envoient tous vers la méthode éponyme de la
classe de base…</p>

<p>Alors comment on s’en sort ? Très simplement en passant à <code>super</code> les
paramètres que l’on veut:</p>

<p><code>ruby
class Child &lt; Base
  def foo(bar, baz)
    super(bar)
    puts "#{bar} #{baz} from Child"
  end
end
</code></p>

<p>Et cette fois-ci, ça fonctionne parfaitement:</p>

<p><code>ruby
child = Child.new
child.foo("Hello", "world")
#=&gt; Hello from Base
#=&gt; Hello world from Child
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
