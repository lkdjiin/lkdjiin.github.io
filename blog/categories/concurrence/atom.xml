<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : concurrence | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/concurrence/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-06T21:43:07+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programmation concurrente pour Ruby avec eldritch]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/06/programmation-concurrente-pour-ruby-avec-eldritch/"/>
    <updated>2014-05-06T21:38:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/06/programmation-concurrente-pour-ruby-avec-eldritch</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Ce matin j'ai découvert la gem <a href="https://github.com/beraboris/eldritch">eldritch</a>,
pour faire de la programmation concurrente. Son API m'a paru vraiment
simple et élégante. Ce soir j'ai seulement 5 minutes pour faire un premier
test, alors on y va sans fioritures.</p>

<!-- more -->


<p>Tout d'abord, je vais utiliser Rubinius, puisqu'un ruby MRI ne permet pas
l'utilisation de plusieurs coeurs.</p>

<pre><code>$ rvm use rbx-2.0.0
Using /home/xavier/.rvm/gems/rbx-2.0.0
</code></pre>

<p>Ensuite, installation de la gem:</p>

<pre><code>gem install eldritch
</code></pre>

<p>Il me faut un programme simple pour tester rapidement. Le voici:</p>

<p>``` ruby eldritch.rb
def long_method1
  sleep(2)
  &ldquo;1&rdquo;
end</p>

<p>def long_method2
  sleep(2)
  &ldquo;2&rdquo;
end</p>

<p>puts long_method1
puts long_method2
```</p>

<p>Je simule deux méthodes assez longues grâce à <code>sleep(2)</code>, qui <em>endort</em> le
programme pendant 2 secondes. Le temps d'exécution est conforme à mes
attentes:</p>

<pre><code>$ time ruby eldritch.rb
1
2

real    0m4.821s
</code></pre>

<p>Maintenant on va utiliser la gem eldritch et son concept de <strong>tâche</strong> pour
réécrire le programme:</p>

<p>``` ruby eldritch.rb
require &lsquo;eldritch&rsquo;</p>

<p>long_task1 = async do
  sleep(2)
  &ldquo;1&rdquo;
end</p>

<p>long_task2 = async do
  sleep(2)
  &ldquo;2&rdquo;
end</p>

<p>puts long_task1.value
puts long_task2.value
```</p>

<p>Et voici le résultat:</p>

<pre><code>$ time ruby eldritch.rb
1
2

real    0m2.869s
</code></pre>

<p><strong>Tada !</strong> Mes deux <em>tâches</em> ont tournées en parallèle.</p>

<p>Ça me plait ce concept de tâche. Mais ce n'était qu'un premier test
rapide, eldritch nous réserve encore de bonne surprises. J'espère pouvoir
tester le reste demain.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
