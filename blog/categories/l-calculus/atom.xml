<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : λ calculus | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/l-calculus/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-02-12T10:21:35+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[La fonction d'auto-application en Lambda Calculus 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/01/la-fonction-dauto-application-en-lambda-calculus-2eme-partie/"/>
    <updated>2014-01-01T17:43:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/01/la-fonction-dauto-application-en-lambda-calculus-2eme-partie</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Hier on a vu <a href="http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus/">la fonction d’auto-application</a> appliquée à divers arguments.
Aujourd’hui on regarde ce qu’il se passe lorsqu’elle est appliquée à
elle-même.</p>

<!-- more -->

<h2 id="ss-s-ss-s">(λs.(s s) λs.(s s))</h2>

<p>Que ce passe-t-il quand on applique la fonction d’auto-application sur
elle-même ? Regardons cela:</p>

<pre><code>(λs.(s s) λs.(s s))
</code></pre>

<p>Le premier <code>s</code> de cette application est la variable liée. Je le met entre
chevrons doubles pour être sûr de bien me faire comprendre:</p>

<pre><code>(λ&lt;&lt;s&gt;&gt;.(s s) λs.(s s))
</code></pre>

<p>Ensuite nous avons le corps de la fonction:</p>

<pre><code>(λs.&lt;&lt;(s s)&gt;&gt; λs.(s s))
</code></pre>

<p>Vient ensuite l’argument de l’application:</p>

<pre><code>(λs.(s s) &lt;&lt;λs.(s s)&gt;&gt;)
</code></pre>

<p>Pour évaluer cette application, on utilise le même mécanisme que
précédement: on remplace chaques occurences de la variable liée par
l’argument, dans le corps de la fonction, et on renvoie ce corps.
Ce qui nous donne donc:</p>

<pre><code>(λs.(s s) λs.(s s))
</code></pre>

<p>Nous avons obtenu exactement la même application que celle de départ !
L’évaluation n’étant pas terminée, on doit continuer et on voit qu’on
entre dans une <em>boucle infinie</em>: l’évaluation ne se termine jamais.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>Bonne année 2014 et à demain !</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La fonction d'auto-application en Lambda Calculus]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus/"/>
    <updated>2013-12-31T15:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>La dernière fois on a vu <a href="http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/">la fonction d’identité</a>, cette fois ci on
va parler de la fonction d’auto-application en λ calculus.</p>

<!-- more -->

<h2 id="la-fonction-dauto-application--ss-s">La fonction d’auto-application : λs.(s s)</h2>

<p>Appliquée à un argument A, la fonction d’auto-application crée une nouvelle
application, dont la fonction et l’argument sont A. Décortiquons d’abord un peu cette
fonction:</p>

<pre><code>λs.(s s)
</code></pre>

<p>Le premier <code>s</code>, coincé entre le caractère lambda et le point est la
variable liée. À droite du point, nous avons le corps de la fonction :</p>

<pre><code>(s s)
</code></pre>

<p>qui est une application.</p>

<h2 id="ss-s-foo">(λs.(s s) foo)</h2>

<p>Voyons ce qu’il se passe quand la fonction d’auto-application est appliquée
à l’argument <code>foo</code>:</p>

<pre><code>(λs.(s s) foo)
</code></pre>

<p>On remplace, dans le corps de la fonction, chaque occurence de la variable liée
par l’argument. Et c’est ce corps de fonction, après substitution, qui
est renvoyé:</p>

<pre><code>(foo foo)
</code></pre>

<p><code>foo</code> étant un nom, il s’évalue en tant que lui-même, et on ne peut donc
pas aller plus loin.</p>

<h2 id="ss-s-xx">(λs.(s s) λx.x)</h2>

<p>Voyons maintenant l’application de la fonction d’auto-application à la
fonction d’identité, vue la dernière fois:</p>

<pre><code>(λs.(s s) λx.x)
</code></pre>

<p>Comme précédement, on remplace chaque occurence de <code>s</code> dans le corps de
la fonction:</p>

<pre><code>(λx.x λx.x)
</code></pre>

<p>Cette fois, l’application peut être évaluée. On a vu la dernière fois
que la fonction d’identité renvoyait l’argument, donc:</p>

<pre><code>λx.x
</code></pre>

<p>La prochaine fois, on verra ce qu’il se passe quand la fonction
d’auto-application est appliquée sur elle-même. En fait, si vous avez
compris le mécanisme, vous pouvez d’ores et déjà essayer par vous même…</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La fonction d'identité en lambda calculus]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/"/>
    <updated>2013-12-28T20:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Après avoir introduit les expressions du λ calculus, on voit
aujourd’hui comment appliquer une fonction sur un argument, à
travers la fonction d’identité.</p>

<!-- more -->

<p>La fonction d’identité est <code>λx.x</code>. Sa particularité est qu’elle renvoie
l’argument sur lequel elle est appliquée. Les noms utilisés n’ont aucune
importance: on pourrait l’écrire <code>λa.a</code>, ou encore <code>λtruc.truc</code>.</p>

<p>Voyons le mécanisme pour appliquer une fonction, en appliquant la fonction
d’identité sur l’argument <code>foo</code>:</p>

<pre><code>(λx.x foo)
</code></pre>

<p>Les parenthèses nous disent qu’il s’agit d’une application. L’expression qui
tient lieu de fonction est la fonction:</p>

<pre><code>λx.x
</code></pre>

<p>Et l’expression qui tient lieu d’argument est le nom:</p>

<pre><code>foo
</code></pre>

<p>Dans la fonction <code>λx.x</code>, le premier <code>x</code> est la variable liée, le second
<code>x</code> est le corps de la fonction.</p>

<p>Pour appliquer la fonction <code>λx.x</code> sur <code>foo</code>, il faut substituer chaque
occurences de la variable liée (x) dans le corps de la fonction par l’argument.
Le nom <code>x</code> dans le corps de la fonction est substitué par le nom
<code>foo</code>. Le résultat est donc:</p>

<pre><code>foo
</code></pre>

<p>Voilà, j’ai cherché à décomposer au maximum ce mécanisme fort simple de
substitution. N’ayez pas peur, il se pourrait que cela se complique
quelque peu par la suite ;-)</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction à Lambda Calculus]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/27/introduction-a-lambda-calculus/"/>
    <updated>2013-12-27T14:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/27/introduction-a-lambda-calculus</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour mieux comprendre la programmation fonctionnelle, j’ai décidé
de plonger aux racines de ce paradigme, à savoir le langage λ calculus
(λ se prononce lambda).
Je rédigerais quelques articles sur ce sujet, en tentant à chaque fois
d’expliquer le plus simplement possible ce que j’aurais compris de ce
langage.</p>

<!-- more -->

<p>Le langage λ calculus, inventé dans la décennie 1930 par
<a href="http://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</a>, repose sur
3 types d’expressions:</p>

<ol>
  <li>Les noms</li>
  <li>Les fonctions</li>
  <li>Les applications</li>
</ol>

<h2 id="les-noms">Les noms</h2>

<p>Un nom peut être n’importe quelle suite de caractères affichables, à
l’exception des caractères utilisés pour définir une fonction ou
une application. Voici quelques exemples de noms possibles en
lambda calculus:</p>

<pre><code>x
xavier
1
123
0,345
foo_BAR
-
@!^
</code></pre>

<p>Autrement dit, tout et n’importe quoi.</p>

<h2 id="les-fonctions">Les fonctions</h2>

<p>Une fonction débute par le caractère lambda, est suivie d’un nom, puis d’un
point et enfin du corps de la fonction. Le corps de la fonction est
une expression, ce qui signifie que cela peut être un nom, une fonction ou
même une application.
Quelques exemples:</p>

<pre><code>λx.x
λfoo.bar
λa.λb.c
λfoo.(λbar.ba truc)
</code></pre>

<p>Il faut noter que les fonctions lambda sont anonymes, elles n’ont pas de noms.
Le nom qui suit le caractère λ n’est donc pas le nom de la fonction, mais le
nom d’une variable liée, ou <em>bound variable</em>, qui sera utilisée dans les
applications pour transformer le corps de la fonction.</p>

<p>Si on décortique la fonction <code>λa.λb.c</code>, cela donne:</p>

<pre><code>variable liée: a
corps        : λb.c
</code></pre>

<h2 id="les-applications">Les applications</h2>

<p>Plutôt que d’<em>appeler</em> une fonction, en λ calculus on va <em>appliquer</em> une
fonction à un argument. Pour cela on écrit entre parenthèses une fonction,
suivie d’un argument. Par exemple:</p>

<pre><code>(λx.x foo)
</code></pre>

<p>signifie que l’on applique la fonction <code>λx.x</code> à l’argument <code>foo</code>.</p>

<p>Il faut encore signaler qu’en λ calculus tout est fonction. Donc:</p>

<pre><code>(a b)
</code></pre>

<p>est une application valide.</p>

<p>La prochaine fois, on verra comment évaluer une application.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
