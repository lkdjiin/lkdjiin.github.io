<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : auto complétion | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/auto-completion/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2017-01-20T14:57:34+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/21/lauto-completion-programmable-en-bash-partie-11/"/>
    <updated>2014-02-21T20:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/21/lauto-completion-programmable-en-bash-partie-11</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div></p>

<p>Cet article est la suite de:
<a href="/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/">L’auto complétion programmable en bash: partie 10</a>.</p>

<h2 id="compltion-des-options-longues---suite">Complétion des options longues - suite</h2>

<p>Aujourd’hui on voit que <code>_get_comp_words_by_ref</code> peut être appellée
avec une option bien utile qui modifie <code>COMP_WORDBREAKS</code>.</p>

<!-- more -->

<p>La variable <code>COMP_WORDBREAKS</code> contient les caractères qui permettent
de splitter les mots pour la complétion. Voici son contenu:</p>

<pre><code>$  echo $COMP_WORDBREAKS 
"'&gt;&lt;=;|&amp;(:
</code></pre>

<p>On voit que <code>=</code> en fait partie, et c’est ce qui rendait un peu compliqué
le <a href="/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/">code de la dernière fois</a>.
Grâce à l’option <code>-n</code> de la fonction <code>_get_comp_words_by_ref</code>, on va pouvoir
simplifier ça:</p>

<p>``` bash
_mytool_long_options()
{
    case $1 in
        –format)
            options=’dot documentation’
            ;;
    esac
    COMPREPLY=( $( compgen -W “$options” – “$2” ) )
}</p>

<p>_mytool()
{
    local cur prev command options
    COMPREPLY=( )
    _get_comp_words_by_ref -n = cur prev
    commands=’new compile test’</p>

<pre><code>if [[ $COMP_CWORD -eq 1 ]]; then
    COMPREPLY=( $( compgen -W "$commands" -- "$cur" ) )
elif [[ "$cur" == --*=* ]]; then
    _split_longopt
    _mytool_long_options "$prev" "$cur" 
elif [[ "$cur" == -* ]]; then
    command=${COMP_WORDS[1]}
    case $command in
        new)
            options='--without-test'
            ;;
        compile)
            options='--verbose'
            ;;
        test)
            options='--format='
            compopt -o nospace
            ;;
    esac
    COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
fi } complete -F _mytool mytool ```
</code></pre>

<p>Ce code fait la même chose que celui du <a href="/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/">dernier article</a>,
mais est bien plus simple et lisible.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10/"/>
    <updated>2014-02-10T20:45:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/10/lauto-completion-programmable-en-bash-partie-10</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div></p>

<p>Cet article est la suite de:
<a href="/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9/">L’auto complétion programmable en bash: partie 9</a>.</p>

<h2 id="compltion-des-options-longues">Complétion des options longues</h2>

<p>Aujourd’hui j’ai envie de voir comment on pourrait utiliser
l’auto-complétion pour les options longues, du genre
<code>--format=documentation</code>.</p>

<!-- more -->

<p>L’option <code>--format=</code> peut prendre deux valeurs: <code>dot</code> ou <code>documentation</code>.
Je veux donc obtenir ceci:</p>

<pre><code>$ mytool test -[TAB]
$ mytool test --format=[TAB]
documentation  dot            
$ mytool test --format=do

$ mytool test --format=doc[TAB]
$ mytool test --format=documentation 
</code></pre>

<p>Voici une manière d’obtenir ça:</p>

<p>``` bash
_mytool_long_options()
{
    case $1 in
        –format)
            options=’dot documentation’
            ;;
    esac
    COMPREPLY=( $( compgen -W “$options” – “$2” ) )
}</p>

<p>_mytool()
{
    local cur prev command options
    COMPREPLY=( )
    _get_comp_words_by_ref cur prev
    commands=’new compile test’</p>

<pre><code>if [[ $COMP_CWORD -eq 1 ]]; then
    COMPREPLY=( $( compgen -W "$commands" -- "$cur" ) )
elif [[ "$prev" == = ]]; then
    _mytool_long_options "${COMP_WORDS[COMP_CWORD-2]}" "$cur"
elif [[ "$cur" == = ]]; then
    _mytool_long_options "$prev"
elif [[ "$cur" == -* ]]; then
    command=${COMP_WORDS[1]}
    case $command in
        new)
            options='--without-test'
            ;;
        compile)
            options='--verbose'
            ;;
        test)
            options='--format='
            compopt -o nospace
            ;;
    esac
    COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
fi } complete -F _mytool mytool
</code></pre>

<h1 id="vim-ftsh-ts4-sw4">vim: ft=sh ts=4 sw=4</h1>
<p>```</p>

<p>La fonction <code>_mytool_long_options</code> prend un paramètre obligatoire et
un second optionnel. Le premier est le mot <em>avant</em> le signe <code>=</code> et le
second est l’éventuel mot <em>après</em> le signe <code>=</code>:</p>

<p><code>bash
_mytool_long_options()
{
    case $1 in
        --format)
            options='dot documentation'
            ;;
    esac
    COMPREPLY=( $( compgen -W "$options" -- "$2" ) )
}
</code></p>

<p>J’ai ajouté deux <code>elif</code>, qui regarde si le mot sous le curseur (<code>$cur</code>)
ou le mot précédent (<code>$pre</code>) est le caractère <code>=</code>. Dans ce cas,
on appelle la fonction <code>_mytool_long_options</code> qui s’occupe de gérer
la complétion des options du style <code>--foo=bar</code>:</p>

<p><code>bash
    elif [[ "$prev" == = ]]; then
        _mytool_long_options "${COMP_WORDS[COMP_CWORD-2]}" "$cur"
    elif [[ "$cur" == = ]]; then
        _mytool_long_options "$prev"
</code></p>

<p>Même si cela fonctionne, je pense pouvoir trouver plus simple, et c’est
ce que j’espère faire dans un prochain article.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9/"/>
    <updated>2014-02-09T18:55:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/09/lauto-completion-programmable-en-bash-partie-9</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div></p>

<p>Cet article est la suite de:
<a href="/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/">L’auto complétion programmable en bash: partie 8</a>.</p>

<h2 id="une-compltion-amliore">Une complétion améliorée</h2>

<p>On voit aujourd’hui deux fonctions bien utiles lors de l’écriture
de votre script d’auto-complétion: <code>_get_comp_words_by_ref</code> et
<code>compopt</code>.</p>

<!-- more -->

<p>On va ajouter une option <code>--format=</code> à notre commande <code>test</code>. Ce que
je veux, c’est pouvoir écrire quelque chose comme ça:</p>

<pre><code>$ mytool test --format=documentation
</code></pre>

<p>Il faut donc que:</p>

<pre><code>$ mytool test -[TAB]
</code></pre>

<p>nous donne ceci:</p>

<pre><code>$ mytool test --format=
</code></pre>

<p>Mais contrairement à ce qu’il se passe jusqu’ici, je ne veux pas
que l’auto-complétion ajoute un espace après <code>--format=</code>.</p>

<p>Voici tout d’abord le script qui fait ça :</p>

<p>``` bash
_mytool()
{
    local cur prev command options
    COMPREPLY=( )
    _get_comp_words_by_ref cur prev
    commands=’new compile test’</p>

<pre><code>if [[ $COMP_CWORD -eq 1 ]]; then
    COMPREPLY=( $( compgen -W "$commands" -- "$cur" ) )
elif [[ "$cur" == -* ]]; then
    command=${COMP_WORDS[1]}
    case $command in
        new)
            options='--without-test'
            ;;
        compile)
            options='--verbose'
            ;;
        test)
            options='--format='
            compopt -o nospace
            ;;
    esac
    COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
fi } complete -F _mytool mytool ```
</code></pre>

<p>Et maintenant, je vais détailler les nouveautés. D’abord, vous avez
peut-être remarqué que la ligne:</p>

<p><code>bash
    _get_comp_words_by_ref cur prev
</code></p>

<p>a remplacé les deux lignes suivantes
(<a href="">voir article précédent</a>):</p>

<p><code>bash
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
</code></p>

<p>C’est plus simple, plus lisible, plus propre. Cette fonction,
<code>_get_comp_words_by_ref</code>, se trouve dans le script <code>/etc/bash_completion</code>,
que je vous invite à étudier. Ce fichier défini plusieurs fonctions
utiles pour la complétion.</p>

<p>Voyons maintenant l’ajout de la nouvelle option:</p>

<p><code>bash
            test)
                options='--format='
                compopt -o nospace
                ;;
</code></p>

<p>La nouveauté est ici <code>compopt -o nospace</code>. La fonction <code>compopt</code> permet
d’allumer/éteindre certaines options pour la complétion en cours. Ici on
demande de ne pas ajouter d’espace à la fin de la chaîne renvoyée par
la complétion.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8/"/>
    <updated>2014-02-08T14:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/08/lauto-completion-programmable-en-bash-partie-8</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div></p>

<p>Cet article est la suite de:
<a href="/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7/">L’auto complétion programmable en bash: partie 7</a>.</p>

<h2 id="une-compltion-plus-toffe">Une complétion plus étoffée</h2>

<p>Après avoir étudié les variables <code>COMPREPLY</code>, <code>COMP_WORDS</code>, <code>COMP_CWORD</code>,
et le motif minimal, voici maintenant un programme plus utile.</p>

<!-- more -->

<p>Je veux que <code>mytool new</code> réponde à la seule option <code>--without-test</code>.
Donc:</p>

<pre><code>$ mytool new -[TAB]
</code></pre>

<p>doit donner:</p>

<pre><code>$ mytool new --without-test
</code></pre>

<p>Je veux aussi que <code>mytool commpile</code> réponde seulement à <code>--verbose</code>, donc:</p>

<pre><code>$ mytool compile -[TAB]
</code></pre>

<p>doit donner:</p>

<pre><code>$ mytool compile --verbose
</code></pre>

<p>Quant à <code>mytool test</code>, il ne prend aucune option.</p>

<p>Voici sans plus tarder un programme qui fait ça:</p>

<p>``` bash
_mytool()
{
    local cur prev command options
    COMPREPLY=( )
    cur=”${COMP_WORDS[COMP_CWORD]}”
    prev=”${COMP_WORDS[COMP_CWORD-1]}”
    commands=’new compile test’</p>

<pre><code>if [[ $COMP_CWORD -eq 1 ]] ; then
    COMPREPLY=( $( compgen -W "$commands" -- "$cur" ) )
else
    command=${COMP_WORDS[1]}
    if [[ "$cur" == -* ]]; then
        case $command in
            new)
                options='--without-test'
                ;;
            compile)
                options='--verbose'
                ;;
        esac
        COMPREPLY=( $( compgen -W "$options" -- "$cur" ) )
    fi
fi } complete -F _mytool mytool ```
</code></pre>

<p>Ok, Bash n’est pas le plus lisible des langages, mais si vous avez suivi
tous les articles précédent, vous êtes en mesure de suivre la logique
de ce programme. Voilà ce que donne l’algorithme:</p>

<pre><code>Si le curseur est en position 1
  Compléter avec les commandes
Sinon
  Trouver la commande courante
  Si le mot sous le curseur commence par '-'
    Compléter les options suivant la commande courante
</code></pre>

<p>Quelques points précis maintenant : on calcule le mot sous le curseur
dans <code>cur</code> et le mot précédent dans <code>prev</code>:</p>

<p><code>bash
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
</code></p>

<p>On place toutes les commandes dans une variable <code>commands</code>,</p>

<p><code>bash
    commands='new compile test'
</code></p>

<p>ce qui permet de calculer les complétions possibles de la manière
suivante (plus lisible et flexible quand on a beaucoup de commandes):</p>

<p><code>bash
        COMPREPLY=( $( compgen -W "$commands" -- "$cur" ) )
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[L'auto-complétion programmable en Bash - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7/"/>
    <updated>2014-02-02T18:35:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/02/lauto-completion-programmable-en-bash-partie-7</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-3'>Niveau : <span>avancé</span></div></p>

<p>Cet article est la suite de:
<a href="/blog/2014/01/29/lauto-completion-programmable-en-bash-partie-6/">L’auto complétion programmable en bash: partie 6</a>.</p>

<h2 id="un-motif-gnral-et-basique-la-suite">Un motif général et basique, la suite</h2>

<p>Après avoir regardé la variable <code>COMPREPLY</code> dans le dernier article,
on étudie aujourd’hui les variables <code>COMP_WORDS</code> et <code>COMP_CWORD</code>.</p>

<!-- more -->

<p>On va encore modifier notre script, cette fois pour examiner le
contenu de la variable <code>COMP_WORDS</code>:</p>

<p><code>bash /etc/bash_completion.d/mytool
_mytool()
{
    COMPREPLY=${COMP_WORDS[@]}
}
complete -F _mytool mytool
</code></p>

<p>N’oubliez pas de sourcer:</p>

<pre><code>$ source /etc/bash_completion.d/mytool
</code></pre>

<p>Testons:</p>

<pre><code>$ mytool foo bar[TAB]
</code></pre>

<p>est remplacé par:</p>

<pre><code>$ mytool foo mytool foo bar
</code></pre>

<p>On voit que <code>COMP_WORDS</code> est un tableau qui contient chaque éléments
de notre ligne de commande, au moment où celle ci est envoyée à
l’auto-complétion.</p>

<p>Voyons maintenant <code>COMP_CWORD</code>:</p>

<p><code>bash /etc/bash_completion.d/mytool
_mytool()
{
    COMPREPLY=( $COMP_CWORD )
}
complete -F _mytool mytool
</code></p>

<p>Si je tapes:</p>

<pre><code>$ mytool foo bar[TAB]
</code></pre>

<p>Cela va être remplacé par:</p>

<pre><code>$ mytool foo 2
</code></pre>

<p>Donc, <code>COMP_CWORD</code> contient l’index de l’élément de la ligne de
commande dans lequel se trouve le curseur.</p>

<p>On a maintenant tous les éléments en main pour comprendre le script
présenté la dernière fois comme le motif de base pour
l’auto-complétion:</p>

<p><code>bash /etc/bash_completion.d/mytool
_mytool()
{
    local current=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "new compile test" -- $current) )
}
complete -F _mytool mytool
</code></p>

<p>Il reste juste à expliquer la dernière ligne:</p>

<p><code>bash
complete -F _mytool mytool
</code></p>

<p>La fonction <code>complete</code>, interne à Bash, s’occupe bien sûr de l’auto-complétion
du programme <code>mytool</code>. Le nombre d’options possibles est important, vous pouvez
jeter un oeil au manuel si vous avez le temps. On se contentera ici de l’option
<code>-F</code>. Cette option est très intéressante, elle prend en argument le nom d’une
fonction (ici <code>_mytool</code>) qui va calculer la complétion. Cette fameuse option
<code>-F</code> permet aussi à <code>complete</code> de savoir qu’elle doit chercher des résultats
dans la variable <code>COMPREPLY</code>. Notez la convention utilisée: la fonction
<code>_mytool</code> calcule la complétion du programme <code>mytool</code>.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
