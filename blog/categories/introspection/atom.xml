<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : introspection | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/introspection/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-10-08T13:13:14+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction à l'introspection en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/08/introduction-a-lintrospection-en-ruby/"/>
    <updated>2014-04-08T21:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/08/introduction-a-lintrospection-en-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>L'introspection consiste à obtenir des informations sur un objet au
moment de l'exécution d'un programme. Voyons à quoi ça ressemble.</p>

<!-- more -->


<p>Créons une classe <code>Inspector</code> qui va extraire certaines informations
des objets qu'on lui donnera:</p>

<p>``` ruby introspection.rb
class Inspector
  class &lt;&lt; self</p>

<pre><code>def classname(o)
  o.class.name
end

def methods(c)
  c.instance_methods(false)
end

def parameters(o, m)
  o.method(m).parameters
end
</code></pre>

<p>  end
end
```</p>

<p>Dans cet exemple nous allons récupérer le nom de la classe, le nom des
méthodes et certaines informations sur les arguments des méthodes.</p>

<p>Voyons comment ça marche en récupérant le nom de la classe <code>Object</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>load &lsquo;./introspection.rb&rsquo;
p Inspector.classname(Object.new)
&ldquo;Object&rdquo;
```</p></blockquote></blockquote>

<p>Maintenant ajoutons une classe <code>C</code> avec quelques méthodes:</p>

<p>``` ruby introspection.rb
class Inspector
  class &lt;&lt; self</p>

<pre><code>def classname(o)
  o.class.name
end

def methods(c)
  c.instance_methods(false)
end

def parameters(o, m)
  o.method(m).parameters
end
</code></pre>

<p>  end
end</p>

<p>class C
  def foo
  end</p>

<p>  def bar(arg1, arg2)
  end</p>

<p>  def baz(arg1, *args, &amp;block)
  end
end
```</p>

<p>Les méthodes de la classe <code>C</code> ne font rien. C'est normal, ce qui nous
intéresse ici c'est leur signature. D'abord le nom de la classe:</p>

<p>``` irb</p>

<blockquote><blockquote><p>load &lsquo;./introspection.rb&rsquo;
p Inspector.classname(C.new)
&ldquo;C&rdquo;
```</p></blockquote></blockquote>

<p>Facile. Maintenant récupérons les méthodes:</p>

<p>``` irb</p>

<blockquote><blockquote><p>p Inspector.methods&copy;
[:foo, :bar, :baz]
```</p></blockquote></blockquote>

<p>Pas mal. Encore plus fort, inspectons les arguments de chacune des
méthodes:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Inspector.methods&copy;.each do |m|
?>   p Inspector.parameters(C.new, m)
end
[]
[[:req, :arg1], [:req, :arg2]]
[[:req, :arg1], [:rest, :args], [:block, :block]]
```</p></blockquote></blockquote>

<p>Voilà, c'était une rapide mise en bouche du <em>comment faire ?</em>.
Pour le <em>à quoi ça sert ?</em>, il faudra attendre un prochain article ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
