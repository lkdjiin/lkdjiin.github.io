<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : bépo | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/bepo/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-29T21:34:33+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/"/>
    <updated>2014-03-23T20:57:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>On fait un peu de nettoyage en mettant du code en commun, et on voit un
mapping plus intéressant.</p>

<!-- more -->


<p>Voici ce que ça donne après un refactoring:</p>

<p>``` vim autoload/quickmarkdown.vim
function s:build_big_title(char)
  let s:line_content = substitute(getline(&ldquo;.&rdquo;), &lsquo;.&rsquo;, a:char, &lsquo;g&rsquo;)
  call append(&lsquo;.&rsquo;, s:line_content)
endfunction</p>

<p>function s:build_little_title(str)
  call setline(line(&lsquo;.&rsquo;), a:str . getline(&lsquo;.&rsquo;))
endfunction</p>

<p>function! quickmarkdown#title(level)
  if a:level == 1</p>

<pre><code>call s:build_big_title("=")
</code></pre>

<p>  elseif a:level == 2</p>

<pre><code>call s:build_big_title("-")
</code></pre>

<p>  elseif a:level == 3</p>

<pre><code>call s:build_little_title("### ")
</code></pre>

<p>  elseif a:level == 4</p>

<pre><code>call s:build_little_title("#### ")
</code></pre>

<p>  elseif a:level == 5</p>

<pre><code>call s:build_little_title("##### ")
</code></pre>

<p>  elseif a:level == 6</p>

<pre><code>call s:build_little_title("###### ")
</code></pre>

<p>  endif
endfunction
```</p>

<p><code>vim plugin/quickmarkdown.vim
command! QuickMarkdownTitle1 call quickmarkdown#title(1)
command! QuickMarkdownTitle2 call quickmarkdown#title(2)
command! QuickMarkdownTitle3 call quickmarkdown#title(3)
command! QuickMarkdownTitle4 call quickmarkdown#title(4)
command! QuickMarkdownTitle5 call quickmarkdown#title(5)
command! QuickMarkdownTitle6 call quickmarkdown#title(6)
</code></p>

<p>On n'a plus qu'un seule fonction <code>quickmarkdown#title</code>, à laquelle on passe
en paramêtre le niveau du titre.</p>

<p>J'ai aussi changé le mapping.
Tout d'abord j'utilise leader+q, au lieu de leader+m. Pourquoi, parce que
je voulais m'en servir aussi en mode insertion avec la touche Control. Et
en mode insertion, Control+m est équivalent à la touche Entrée, ce qui pose
bien sûr quelques problèmes ;) Voici le mapping pour un clavier qwerty:</p>

<p><code>vim .vimrc
nmap &lt;Leader&gt;q1 :QuickMarkdownTitle1&lt;Enter&gt;
nmap &lt;Leader&gt;q2 :QuickMarkdownTitle2&lt;Enter&gt;
nmap &lt;Leader&gt;q3 :QuickMarkdownTitle3&lt;Enter&gt;
nmap &lt;Leader&gt;q4 :QuickMarkdownTitle4&lt;Enter&gt;
nmap &lt;Leader&gt;q5 :QuickMarkdownTitle5&lt;Enter&gt;
nmap &lt;Leader&gt;q6 :QuickMarkdownTitle6&lt;Enter&gt;
imap &lt;C-q&gt;1 &lt;C-o&gt;:QuickMarkdownTitle1&lt;Enter&gt;
imap &lt;C-q&gt;2 &lt;C-o&gt;:QuickMarkdownTitle2&lt;Enter&gt;
imap &lt;C-q&gt;3 &lt;C-o&gt;:QuickMarkdownTitle3&lt;Enter&gt;
imap &lt;C-q&gt;4 &lt;C-o&gt;:QuickMarkdownTitle4&lt;Enter&gt;
imap &lt;C-q&gt;5 &lt;C-o&gt;:QuickMarkdownTitle5&lt;Enter&gt;
imap &lt;C-q&gt;6 &lt;C-o&gt;:QuickMarkdownTitle6&lt;Enter&gt;
</code></p>

<p>Au fait, vous pouvez trouver ce plugin sur <a href="https://github.com/lkdjiin/quickmarkdown">Github</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4/"/>
    <updated>2014-03-22T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/22/vim-un-plugin-pour-markdown-partie-4</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Maintenant on fait tous les titres, jusqu'au niveau 6 donc.</p>

<!-- more -->


<p>``` vim autoload/quickmarkdown.vim
function s:build_big_title(char)
  let s:line_content = substitute(getline(&ldquo;.&rdquo;), &lsquo;.&rsquo;, a:char, &lsquo;g&rsquo;)
  call append(&lsquo;.&rsquo;, s:line_content)
endfunction</p>

<p>function s:build_little_title(str)
  call setline(line(&lsquo;.&rsquo;), a:str . getline(&lsquo;.&rsquo;))
endfunction</p>

<p>function! quickmarkdown#title1()
  call s:build_big_title(&ldquo;=&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title2()
  call s:build_big_title(&ldquo;&ndash;&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title3()
  call s:build_little_title(&ldquo;### &rdquo;)
endfunction</p>

<p>function! quickmarkdown#title4()
  call s:build_little_title(&ldquo;#### &rdquo;)
endfunction</p>

<p>function! quickmarkdown#title5()
  call s:build_little_title(&ldquo;##### &rdquo;)
endfunction</p>

<p>function! quickmarkdown#title6()
  call s:build_little_title(&ldquo;###### &rdquo;)
endfunction
```</p>

<p><code>vim plugin/quickmarkdown.vim
command! QuickMarkdownTitle1 call quickmarkdown#title1()
command! QuickMarkdownTitle2 call quickmarkdown#title2()
command! QuickMarkdownTitle3 call quickmarkdown#title3()
command! QuickMarkdownTitle4 call quickmarkdown#title4()
command! QuickMarkdownTitle5 call quickmarkdown#title5()
command! QuickMarkdownTitle6 call quickmarkdown#title6()
</code></p>

<p>J'ai aussi changé mon mapping pour qu'il soit plus homogène.</p>

<p><strong>En qwerty:</strong></p>

<p><code>vim .vimrc
nmap &lt;Leader&gt;m1 :QuickMarkdownTitle1&lt;Enter&gt;
nmap &lt;Leader&gt;m2 :QuickMarkdownTitle2&lt;Enter&gt;
nmap &lt;Leader&gt;m3 :QuickMarkdownTitle3&lt;Enter&gt;
nmap &lt;Leader&gt;m4 :QuickMarkdownTitle4&lt;Enter&gt;
nmap &lt;Leader&gt;m5 :QuickMarkdownTitle5&lt;Enter&gt;
nmap &lt;Leader&gt;m6 :QuickMarkdownTitle6&lt;Enter&gt;
</code></p>

<p><strong>En azerty:</strong></p>

<p><code>vim .vimrc
nmap &lt;Leader&gt;m&amp; :QuickMarkdownTitle1&lt;Enter&gt;
nmap &lt;Leader&gt;mé :QuickMarkdownTitle2&lt;Enter&gt;
nmap &lt;Leader&gt;m" :QuickMarkdownTitle3&lt;Enter&gt;
nmap &lt;Leader&gt;m' :QuickMarkdownTitle4&lt;Enter&gt;
nmap &lt;Leader&gt;m( :QuickMarkdownTitle5&lt;Enter&gt;
nmap &lt;Leader&gt;m- :QuickMarkdownTitle6&lt;Enter&gt;
</code></p>

<p><strong>En bépo:</strong></p>

<p><code>vim .vimrc
nmap &lt;Leader&gt;m" :QuickMarkdownTitle1&lt;Enter&gt;
nmap &lt;Leader&gt;m« :QuickMarkdownTitle2&lt;Enter&gt;
nmap &lt;Leader&gt;m» :QuickMarkdownTitle3&lt;Enter&gt;
nmap &lt;Leader&gt;m( :QuickMarkdownTitle4&lt;Enter&gt;
nmap &lt;Leader&gt;m) :QuickMarkdownTitle5&lt;Enter&gt;
nmap &lt;Leader&gt;m@ :QuickMarkdownTitle6&lt;Enter&gt;
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/"/>
    <updated>2014-03-17T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>J'ai ajouté les titres de niveau 2 et 3, nettoyer un peu le code et
et remplacer l'utilisation des commandes en mode normal <code>yy</code> et <code>p</code>
(qu'un utilisateur peut toujours avoir remappé) par des fonctions
d'évaluations:</p>

<!-- more -->


<p>``` vim
function s:build_title(char)
  let s:line_content = substitute(getline(&ldquo;.&rdquo;), &lsquo;.&rsquo;, a:char, &lsquo;g&rsquo;)
  call append(&lsquo;.&rsquo;, s:line_content)
endfunction</p>

<p>function! quickmarkdown#title1()
  call s:build_title(&ldquo;=&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title2()
  call s:build_title(&ldquo;&ndash;&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title3()
  call setline(line(&lsquo;.&rsquo;), &lsquo;### &rsquo; . getline(&lsquo;.&rsquo;))
endfunction
```</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - plugin pour markdown - la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/"/>
    <updated>2014-03-15T20:24:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>L'embryon de plugin Vim pour les titres en markdown écrit
<a href="/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/">la dernière fois</a>
ne me satisfait pas du tout. En effet, il ne fonctionne pas avec ma
configuration personnelle, adapté pour le clavier bépo.</p>

<!-- more -->


<p>La fonction pour faire un titre était la suivante:</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#title1()
  execute "normal yypVr="
endfunction
</code></p>

<p>Chez moi, la touche pour la fonction de remplacement n'est pas <code>r</code>, mais <code>h</code>.
Voici donc une nouvelle fonction qui devrait marcher pour tout type de
configuration (enfin j'espère):</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#title1()
  execute "normal yyp"
  execute ":s/./=/g"
endfunction
</code></p>

<p>Plutôt que de remplacer la ligne avec <code>Vr=</code>, on la remplace avec une
substitution. Pour être <em>vraiment</em> utilisable partout, il me reste à
trouver comment me passer du <code>yyp</code> pour dupliquer une ligne, histoire
que ça fonctionne même si vous avez remappé <code>y</code> ou <code>p</code>…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
