<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby 2.1 | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby-2-dot-1/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-11-02T09:47:03+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1: Les nouvelles méthodes de Set]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/"/>
    <updated>2013-12-30T19:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Avec la sortie de Ruby 2.1, la bibliothèque standard <code>Set</code> s’enrichie de 
deux méthodes supplémentaires: <code>disjoint?</code> et <code>intersect?</code>.</p>

<!-- more -->

<p><code>Set</code> permet de créer un ensemble d’éléments uniques:</p>

<p><code>irb
&gt;&gt; require 'set'
&gt;&gt; Set.new [1, 2, 1, 2, 2]
=&gt; #&lt;Set: {1, 2}&gt;
</code></p>

<p>La nouvelle méthode <code>intersect?</code> permet de tester si deux sets ont au moins
un élément en commun:</p>

<p>``` irb
» s1 = Set.new [1, 2, 3]
» s2 = Set.new [4, 5, 6]
» s3 = Set.new [1, 8, 9]</p>

<blockquote>
  <blockquote>
    <p>s1.intersect? s2
=&gt; false
s1.intersect? s3
=&gt; true
```</p>
  </blockquote>
</blockquote>

<p>La seconde méthode, <code>disjoint?</code>, est son opposée. Elle teste si deux sets n’ont
aucuns éléments communs:</p>

<p><code>irb
&gt;&gt; s1.disjoint? s2
=&gt; true
&gt;&gt; s1.disjoint? s3
=&gt; false
</code></p>

<p>Ce genre de méthode n’est pas très compliqué à coder soi-même, comme le
montre le code source de <code>intersect?</code>:</p>

<p><code>ruby
def intersect?(set)
  set.is_a?(Set) or raise ArgumentError, "value must be a set"
  if size &lt; set.size
    any? { |o| set.include?(o) }
  else
    set.any? { |o| include?(o) }
  end
end
</code></p>

<p>Mais l’avoir en standard permet de ne pas réinventer la roue…
Quant au code source de <code>disjoint?</code>, c’est très exactement comme je
le disais plus haut, l’opposé de <code>intersect?</code>:</p>

<p><code>ruby
def disjoint?(set)
  !intersect?(set)
end
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1: la méthode Array#to_h]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/29/ruby-2-dot-1-la-methode-array-number-to-h/"/>
    <updated>2013-12-29T11:31:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/29/ruby-2-dot-1-la-methode-array-number-to-h</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>La version 2.1 de Ruby est sortie comme promis à Noël. La classe Array y gagne
une nouvelle méthode: <code>to_h</code>.</p>

<!-- more -->

<p>Pour transformer ce tableau:</p>

<p><code>ruby
[[:key1, "one"], [:key2, "two"], [:key3, "three"]]
</code></p>

<p>en un Hash:</p>

<p>``` ruby</p>
<p>```</p>

<p>La méthode était jusqu’ici la suivante:</p>

<p><code>irb
&gt;&gt; my_array = [[:key1, "one"], [:key2, "two"], [:key3, "three"]]
&gt;&gt; Hash[*my_array.flatten]
=&gt; {:key1=&gt;"one", :key2=&gt;"two", :key3=&gt;"three"}
</code></p>

<p>Ruby 2.1 rend ceci plus simple, plus lisse, en ajoutant une méthode
de transformation à la classe Array, <code>to_h</code>:</p>

<p><code>irb
&gt;&gt; my_array.to_h
=&gt; {:key1=&gt;"one", :key2=&gt;"two", :key3=&gt;"three"}
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Argument nommé et requis]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/"/>
    <updated>2013-11-27T18:14:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ruby 2.0 a introduit les arguments nommés, appelés <em>keyword argument</em>
dans la langue de Shakespeare, soit: «argument mot-clé». Ruby 2.1 ajoute
la notion d’argument nommé <strong>et</strong> requis.</p>

<p>Voilà à quoi ça ressemble, un argument nommé:</p>

<!-- more -->

<p>``` ruby
def foo(arg: “hello”)
  puts arg
end</p>

<p>foo #=&gt; “hello”
```</p>

<h2 id="avant-ruby-21">Avant Ruby 2.1</h2>
<p>Mais en Ruby 2.0, vous êtes obligé de donner une valeur par défaut:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
</code></pre>

<p><code>irb
&gt;&gt; def foo(arg:)
&gt;&gt;   puts arg
&gt;&gt; end
SyntaxError: (irb):10: syntax error, unexpected ')'
</code></p>

<p>Imaginez que ça soit pareil avec les arguments dit
<em>normaux</em>. On ne pourrait pas écrire:</p>

<pre><code>def foo(arg)
</code></pre>

<p>On serait obligé d’écrire à la place:</p>

<pre><code>def foo(arg="hello")
</code></pre>

<p>Un peu bizarre, non ?</p>

<h2 id="avec-ruby-21">Avec Ruby 2.1</h2>
<p>On peut maintenant définir un argument nommé sans valeur par défaut, et
donc faire en sorte qu’il soit requis:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<p><code>irb
&gt;&gt; def foo(arg:)
&gt;&gt;   puts arg
&gt;&gt; end
=&gt; :foo
&gt;&gt; foo
ArgumentError: missing keyword: arg
&gt;&gt; foo "hello"
ArgumentError: missing keyword: arg
&gt;&gt; foo arg: "hello"
hello
</code></p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/"/>
    <updated>2013-11-26T20:33:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd’hui c’est au tour du nouveau suffixe <code>f</code> (comme frozen) d’être passé
en revue.</p>

<!-- more -->

<h2 id="avant-ruby-21">Avant Ruby 2.1</h2>
<p>Les chaînes de caractères en Ruby sont des objets <em>mutables</em>. Ce qui
signifie qu’à chaque fois que l’interpréteur rencontre <code>"foo"</code>, il crée
un nouvel objet:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; "foo".object_id
74667700
&gt;&gt; "foo".object_id
74664050
</code></pre>

<p>Ce qui peut influer sur les performances d’un programme quand on compare
beaucoup de chaînes. Voici un exemple trivial:</p>

<p><code>ruby
def foo?(string)
  foo = "foo"
  p foo.object_id
  string == foo
end
</code></p>

<p>Encore une fois, on peut constater qu’un nouvel objet est créé à chaque
appel de la méthode:</p>

<p><code>irb
&gt;&gt; foo? "bépo"
76675080
false
&gt;&gt; foo? "bar"
76669680
false
</code></p>

<p>Et géler (<em>freeze</em>) l’objet n’empêchera pas sa création à chaque appel:</p>

<p><code>irb
&gt;&gt; def foo
&gt;&gt;   foo = "foo".freeze
&gt;&gt;   foo.object_id
&gt;&gt; end
nil
&gt;&gt; foo
82081130
&gt;&gt; foo
82079520
</code></p>

<h2 id="avec-ruby-21">Avec Ruby 2.1</h2>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<p>Le suffixe <code>f</code> permet de géler (<em>freeze</em>) les chaînes de
caractères:</p>

<p><code>irb
&gt;&gt; a = "foo"f
=&gt; "foo"
&gt;&gt; a.reverse!
RuntimeError: can't modify frozen String
</code></p>

<p>Et surtout, le suffixe <code>f</code> les gèlent une fois pour toutes.
L’exemple précédent donne ceci:</p>

<p><code>irb
&gt;&gt; def foo?(string)
&gt;&gt;   foo = "foo"f
&gt;&gt;   p foo.object_id
&gt;&gt;   string == foo
&gt;&gt; end
=&gt; :foo?
&gt;&gt; foo? "bépo"
79029020
=&gt; false
&gt;&gt; foo? "bar"
79029020
=&gt; false
</code></p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p><strong>Edit du 1er décembre 2013</strong> Cette fonctionnalité a été supprimé dans
la version <a href="https://www.ruby-lang.org/en/news/2013/11/22/ruby-2-1-0-preview2-is-released/">2.1.0-preview2</a>.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe r]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/"/>
    <updated>2013-11-25T23:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd’hui on voit une nouvelle façon d’écrire un nombre rationnel dans
Ruby 2.1.</p>

<!-- more -->

<p>Jusqu’ici pour écrire un nombre rationnel, on devait faire ceci:</p>

<p><code>ruby
Rational('1/3')
</code></p>

<p>Ce qui est loin d’être concis:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; Rational('1/3') + Rational('1/9')
4/9
</code></pre>

<p>Désormais, avec Ruby 2.1, on pourra se servir du suffixe <code>r</code>:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
&gt;&gt; 1/3r + 1/9r
=&gt; (4/9)
</code></pre>

<p>Encore un peu plus de sucre dans notre langage ;)</p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
