<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-01-17T21:36:02+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raccourcis clavier pour le terminal]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal/"/>
    <updated>2014-01-17T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/17/raccourcis-clavier-pour-le-terminal</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je parle des raccourcis clavier du terminal. Pas tous, il y
en a des tonnes, seulement ceux que j'utilise régulièrement.</p>

<!-- more -->


<h2>Linux et OS X</h2>

<p>Les raccourcis qui suivent fonctionnent aussi bien sous Linux et
OS X:</p>

<pre><code>Crtl-a   Aller en début de ligne
Crtl-e   Aller en fin de ligne
Crtl-k   Supprimer du curseur à la fin de la ligne
Crtl-u   Supprimer avant le curseur
Crtl-w   Supprimer le mot avant le curseur
Crtl-t   Échanger les 2 caractères avant le curseur
Esc-t    Échanger les 2 mots avant le curseur
</code></pre>

<p>Pour voir la liste de tous les mappings:</p>

<p><code>bash
bind -P
</code></p>

<h2>Linux seulement</h2>

<pre><code>Shift-Ctrl-c  Copier le texte sélectionné
Shift-Ctrl-v  Coller le texte
</code></pre>

<h2>OS X seulement</h2>

<pre><code>Meta-c        Copier le texte sélectionné
Meta-v        Coller le texte
</code></pre>

<p>En bonus, voici un truc très pratique sous OS X, qu'un collègue
(<a href="https://twitter.com/julienXX">@julienXX</a>) m'a
montré la semaine dernière: Un triple clic sur une ligne la sélectionne en
entier, avec le caractère de fin de ligne mais sans le prompt. On peut ensuite
faire un copier/coller avec <code>Shift-Meta-v</code>, ce qui lance la commande
directement.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: Trouves mon nombre - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4/"/>
    <updated>2014-01-16T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/16/racket-trouves-mon-nombre-partie-4</id>
    <content type="html"><![CDATA[<p>Suite à <a href="http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/">l'article précédent</a>,
on voit aujourd'hui la fonction <code>start</code> qui permet de démarrer le jeu avec
n'importe quelle étendue de nombres.</p>

<!-- more -->


<p>Voici tout d'abord le programme complet:</p>

<p>``` racket guess.rkt</p>

<h1>lang racket</h1>

<p>(define lower 1)
(define upper 100)</p>

<p>(define (guess)
  (quotient (+ lower upper) 2))</p>

<p>(define (smaller)
  (set! upper (max lower (sub1 (guess))))
  (guess))</p>

<p>(define (bigger)
  (set! lower (min upper (add1 (guess))))
  (guess))</p>

<p>(define (start n m)
  (set! lower (min n m))
  (set! upper (max n m))
  (guess))
```</p>

<p>On peut maintenant demander à la machine de <em>deviner</em> un nombre entre
n et m:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
-&gt; (start 1 10)
5
-&gt; (bigger)
8
-&gt; (smaller)
6
</code></pre>

<p>La fonction <code>start</code> utilise des notions déjà vues dans les articles
précédents.</p>

<p><code>racket
(define (start n m)
  (set! lower (min n m))
  (set! upper (max n m))
  (guess))
</code></p>

<p>Grâce à <code>set!</code>, on redéfini la valeur des variables <code>lower</code> et <code>upper</code>. Puis
on débute le jeu en lançant <code>guess</code>.</p>

<p>La variable <code>lower</code> se voit affecter la plus petite des valeurs passées en
arguments, grâce à <code>min</code>. Et <code>upper</code> se voit affecter la plus grande
grâce à <code>max</code>. Du coup, l'ordre des arguments de <code>start</code> n'a plus
d'importance:</p>

<pre><code>-&gt; (start 1000 1)
500
-&gt; (start 1 1000)
500
</code></pre>

<p>Voilà qui conclue cette petite introduction au langage Racket.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim et les digraphes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes/"/>
    <updated>2014-01-12T11:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Comment saisir facilement et rapidement des caractères tels que ¡, ¿ ou encore
ß dans Vim ?</p>

<!-- more -->


<p>Pour voir à quoi ressemble ces fameux digraphes dans Vim, tapez la commande
<code>:digraphs</code>. Vous allez obtenir la liste des digraphes qui sont définis.
La définition d'un digraphe ressemble à ceci:</p>

<pre><code>?I ¿  191
</code></pre>

<p>Ici, seules les deux premières colonnes nous intéressent. La première colonne
est le code de deux caractères qu'il faut saisir pour obtenir le caractère
de la seconde colonne.</p>

<p>Pour saisir un digraphe, il faut être en mode insertion et entrer
Control + k, puis les deux caractères du code. Donc <code>Control</code>, puis <code>k</code>,
puis <code>?</code>, puis <code>I</code> donnera le caractère <code>¿</code>.</p>

<p>Voici quelques exemples:</p>

<pre><code>!I ¡
?I ¿
ss ß
%0 ‰
13 ⅓
78 ⅞
l* λ
p* π
-&gt; →
=&gt; ⇒
</code></pre>

<p>Si vous utilisez régulièrement certains digraphes, il existe une manière
plus rapide de les saisir. Activez tout d'abord l'option <code>digraph</code> dans
votre <code>.vimrc</code>:</p>

<p><code>vim
set digraph
</code></p>

<p>Maintenant vous pouvez saisir un digraphe en entrant le premier caractère
du code, puis la touche Backspace, puis le second caractère du code.
Donc <code>p</code>, puis <code>Backspace</code>, puis <code>*</code> vous donneront le caractère Pi (<code>π</code>).
Attention quand même avec cette option, si vous faites régulièrement des
fautes de frappes, vous risquez de voir apparaître assez souvent des caractères
étranges et inattendus ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trouves mon nombre - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3/"/>
    <updated>2014-01-09T21:00:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/09/trouves-mon-nombre-partie-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui on regarde la fonction <code>bigger</code>, qui est l'inverse de la
fonction <code>smaller</code> <a href="http://lkdjiin.github.io/blog/2014/01/05/racket-trouves-mon-nombre-partie-2/">vue la dernière fois</a>.</p>

<!-- more -->


<p>Voici donc notre nouveau fichier <code>guess.rkt</code> avec sa nouvelle fonction:</p>

<p>``` racket guess.rkt</p>

<h1>lang racket</h1>

<p>(define lower 1)
(define upper 100)</p>

<p>(define (guess)
  (quotient (+ lower upper) 2))</p>

<p>(define (smaller)
  (set! upper (max lower (sub1 (guess))))
  (guess))</p>

<p>(define (bigger)
  (set! lower (min upper (add1 (guess))))
  (guess))
```</p>

<p>La fonction <code>bigger</code> fait exactement l'inverse de <code>smaller</code>:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
-&gt; (guess)
50
-&gt; (bigger)
75
</code></pre>

<p>Et c'est tout ce qu'il nous faut pour que la machine trouve le
nombre que j'ai choisi. Si par exemple je pensais au nombre
77, on continuerait ainsi:</p>

<pre><code>-&gt; (bigger)
88
-&gt; (smaller)
81
-&gt; (smaller)
78
-&gt; (smaller)
76
-&gt; (bigger)
77
</code></pre>

<p>La prochaine fois, on verra comment démarrer le jeu avec n'importe
quelle étendue de nombres.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deuxième jour sur OS X]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/07/deuxieme-jour-sur-os-x/"/>
    <updated>2014-01-07T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/07/deuxieme-jour-sur-os-x</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>C'est mon second jour sur OS X. Pendant la nuit, des petits lutins
on fait une mise à jour de mon poste. Je suis passé de la version 10.6
(dont j'ai oublié le nom), à Mavericks (si j'ai bien tout bon).</p>

<!-- more -->


<p>Et donc, en arrivant ce matin, pratiquement tout fonctionnait normalement.
Merci les lutins ! J'avais emmené avec moi mon TypeMatrix 2030, et ça aide.
Par contre la deception: le mode «102 key layout» ne fonctionne tout
simplement pas. Ce qui fait que je n'ai pas un accès direct à la touche
<code>ê</code>. Ce qui pourrait sembler insignifiant, sauf que c'est ma touche
<code>&lt;Leader&gt;</code> sous Vim. Du coup, obligé de changer de touche Leader…
Autre déception, qui cette fois fois concerne OS X: impossible de
remapper facilement la touche «verrou majuscule» au niveau de l'OS.
Agaçant, puisque j'ai l'habitude de m'en servir comme d'une touche Escape.
Bon, c'est pas la mort, je suis revenu au bon vieux Ctrl-C, mais quand
même, j'attendais mieux de OS X.</p>

<p>Mais je ne voudrais quand même pas donné l'impression de n'avoir rencontré
que des problèmes.
Par exemple, j'ai découvert <em>rbenv</em> et <em>homebrew</em>, les deux très bonnes
surprises du jour. Avec homebrew, on se croirait presque sous Linux, et
la gestion des listes (les Formulas) avec git me semble assez ingénieuse. J'en parlerais
sûrement en détail quand j'aurais bien compris le truc.
Quand à rbenv, que je ne connaissais pas, il m'a paru beaucoup plus simple
que rvm, que j'utilise depuis … depuis le début quoi. Il y a de
grandes chances que je me mette à écrire aussi à propos de rbenv, donc.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
