<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-02T21:15:51+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cherchez avec grep dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim/"/>
    <updated>2014-05-26T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Comment cherchez un mot ou un <em>pattern</em> dans votre base de code sans
quitter Vim ? Voici une réponse.</p>

<!-- more -->


<p>La commande <code>:grep</code> fait appel au programme <code>grep</code> installé sur votre
machine. La ligne suivante va chercher dans ma base de code le texte
<code>TODO</code>:</p>

<p><code>vim
:grep TODO */*.rb
</code></p>

<p>Sauf que, peut-être, ça ne marche pas chez vous. Si c'est le cas, il y
a fort à parier que le répertoire courant de Vim est, non pas celui du
fichier actif, mais votre <em>home</em>. Pour en être sûr, vous pouvez afficher
le répertoire courant:</p>

<p><code>vim
:pwd
</code></p>

<p>Pour changer le répertoire courant et qu'il coincide avec celui du fichier
courant, le plus rapide est:</p>

<p><code>vim
:set autochdir
</code></p>

<p>Après, ça <em>devrait</em> marcher ;) Je vous invite à lire
<a href="http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file">cette page</a>
pour les histoires de dossier courant.</p>

<p>Personnellement, ce truc de répertoire courant m'a toujours pris la tête,
et je préfère utiliser un plugin comme <a href="https://github.com/mileszs/ack.vim">Ack.vim</a> ou <a href="https://github.com/rking/ag.vim">Ag.vim</a>,
ou plus souvent encore, faire la recherche directement dans une console. Mais chacun
ses goûts ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rechercher avec grep dans un fichier compressé]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse/"/>
    <updated>2014-05-22T21:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Il vous arrive peut-être parfois d'avoir à fouiller des fichiers de log ?
Vous utiliser <code>grep</code> pour ça ? Et comment faire quand les logs sont
compressés ?</p>

<!-- more -->


<p>Lorsque le log est normal, c'est à dire non-compressé, on peut utiliser la
commande <code>grep</code> suivante:</p>

<p><code>bash
$ grep --color 'LOWER' test.log
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Elle va afficher toutes les lignes du fichier <code>test.log</code> qui contiennent le
mot <code>LOWER</code>.</p>

<p>Mais si on fait la même chose sur un log compressé:</p>

<p><code>bash
$ grep --color 'LOWER' test.log.1.gz
$ 1
</code></p>

<p>Ça ne fonctionne pas. Ci-dessus, le <code>$ 1</code>, c'est mon shell qui m'affiche
une erreur sous la forme du code de retour (une idée pour un futur article).</p>

<p>Pour chercher dans un fichier compressé avec <code>grep</code>, on peut utiliser très
simplement la commande <code>zgrep</code>:</p>

<p><code>bash
$ zgrep --color 'LOWER' test.log.1.gz
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser une version particulière d'une gem Ruby... dans une gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem/"/>
    <updated>2014-05-21T20:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>On connait tous le moyen d'utiliser une gem d'une version précise dans un
projet Rails. Il suffit de mettre ceci dans le Gemfile:</p>

<p><code>ruby Gemfile
gem 'foo', '=1.2.3'
</code></p>

<p>Et hop, Rails, avec son coté <em>magique</em>, fait automatiquement le <code>require</code>
nécéssaire pour charger la gem <code>foo</code>, avec la version <code>1.2.3</code>.
Mais qu'en est-il lorsqu'on veut faire la même chose dans une gem, ou bien
dans un simple script ?</p>

<!-- more -->


<p>Si j'écris un article sur ce sujet c'est parce que j'oublie régulièrement
comment faire. Et qu'à chaque fois je dois perdre quelques minutes à chercher.
En l'écrivant une fois pour toutes, j'éspère que ça va rentrer ;)</p>

<p>La solution est évidemment très simple, on écrit ce qui suit dans son script:</p>

<p><code>ruby
gem 'foo', '=1.2.3'
require 'foo'
</code></p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hub - Git plus facile avec Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github/"/>
    <updated>2014-05-20T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui j'ai découvert <a href="http://hub.github.com/">Hub</a>.
Un programme (en Ruby) qui étend les fonctionnalités de Git en ligne de
commande quand on travaille avec un dépot Github. Je n'est pas encore
eu le temps de le tester, ni même de l'installer, mais je voulais tout
de même vous en parler au cas où, comme moi, vous seriez passé à coté.</p>

<!-- more -->


<p>Ne l'ayant pas tester, je me contente de paraphraser la page d'acceuil
pour vous donner l'eau à la bouche ;)</p>

<p>Pour cloner un de vos propre projet, il suffit de:</p>

<pre><code>git clone projet
</code></pre>

<p>Si le projet ne vous appartient pas, il faut faire:</p>

<pre><code>git clone github/projet
</code></pre>

<p>Rien que ça, c'est déjà sympathique. Mais je suis impatient d'essayer la
commande suivante:</p>

<pre><code>git pull-request
</code></pre>

<p>Il y plusieurs autres commandes avec lesquelles j'ai hâte de m'amuser.
Si vous avez déjà utiliser Hub, dites moi donc ce que vous en pensez.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le thème Gruvbox pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim/"/>
    <updated>2014-05-19T20:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça fait quelques semaines maintenant que j'utilise le thème
<a href="https://github.com/morhetz/gruvbox">Gruvbox</a> pour Vim. Je le trouve
excellent.</p>

<!-- more -->


<p>Il propose deux modes, un sombre et un clair, comme le fameux thème
Solarized, qu'on active ainsi:</p>

<p><code>vim
:set bg=dark
:set bg=light
</code></p>

<p>C'est comfortable de pouvoir changer selon l'humeur, ou la lumière… Il y a
pas mal de langages supportés, regardez donc les
<a href="https://github.com/morhetz/gruvbox/wiki/Gallery">captures d'écrans</a>
pour voir si ça vous convient.</p>

<p>Mais ce que j'aime vraiment, c'est la très bonne intégration de base avec
plusieurs plugins que j'utilise : Easy Motion, Rainbow Parentheses, Airline,
Git Gutter, Syntastic, CtrlP, etc.</p>

<p>Je vous recommande chaudement de l'essayer.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
