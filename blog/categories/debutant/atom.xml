<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-04-29T21:57:51+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Insérer le contenu d'un fichier ou d'une commande shell dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/"/>
    <updated>2014-04-29T21:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour insérer le contenu d'un fichier quelconque dans le buffer courant de
Vim, utilisez la commande <code>:r</code>:</p>

<!-- more -->


<p>Comme dans: <code>:r /mon/fichier/quelconque</code>.</p>

<p>C'est vraiment utile parfois, le problème est que le nom du fichier doit
être
absolu, ou doit commencer par le tilde (<code>~</code>). Ce qui dans certains cas
limite pas mal l'usage de cette commande.</p>

<p>Au fait, <code>r</code> est le petit nom de <code>read</code> :)</p>

<p>La version avec un point d'exclamation <code>:r!</code> est aussi très intéressante
puisqu'elle insère la sortie d'une commande shell. Par exemple, si je tape:</p>

<pre><code>:r! cal
</code></pre>

<p>Cela va insèrer le calendrier du mois dans cet article, comme ceci:</p>

<pre><code>     Avril 2014
di lu ma me je ve sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30
</code></pre>

<p>Mais là encore j'ai un souci. Ça ne fonctionne qu'avec des commandes shell
et automatiquement dans mon <em>home</em>. Je m'explique:</p>

<ol>
<li>Si j'édite un fichier <code>~/dossier/fichier</code> et que je veuille insérer le
contenu de <code>dossier</code>, je dois écrire <code>:r! ls ~/dossier</code>. Alors que
j'aimerais écrire juste <code>:r! ls</code>.</li>
<li>J'aimerais bien pouvoir insérer avec <code>r</code> la sortie de mes tests Rspec,
par exemple. Mais <code>:r! rspec ~/mon/fichier</code> ne fonctionne pas, <code>rspec</code>
n'étant pas reconnu par Vim comme étant une commande.</li>
</ol>


<p>Enfin, bref, si tu sais comment venir à bout de ses limitations, ton
commentaire m'intéresse. Sinon, il m'intéresse aussi ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mettre à jour des gems ayants des références circulaires avec Bundle]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle/"/>
    <updated>2014-04-28T21:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/28/mettre-a-jour-des-gems-ayants-des-references-circulaires-avec-bundle</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ok, c'est sûrement le titre le plus incompréhensible de l'histoire de ce
blog. Mais je n'arrive pas à trouver mieux…</p>

<p>Prenons le Gemfile fictif suivant:</p>

<pre><code>gem a
gem b
gem c
</code></pre>

<p>Je veux mettre à jour la gem a, de la version 1.0.0 vers la nouvelle version
1.0.1.</p>

<!-- more -->


<p>Pour ça je fais évidemment:</p>

<pre><code>bundle update a
</code></pre>

<p>Mais voilà que <code>bundle</code> me répond quelque chose comme ça:</p>

<pre><code>impossible de mettre à jour la gem a
la gem a 1.0.1 dépend de la gem b 1.0.1
</code></pre>

<p>D'accord, pas de souci, je fais donc:</p>

<pre><code>bundle update b
</code></pre>

<p>Et devinez ce que ce cher <code>bundle</code> me répond ?</p>

<pre><code>impossible de mettre à jour la gem b
la gem b 1.0.1 dépend de la gem c 1.0.1
</code></pre>

<p>Bon, j'espère que c'est bientôt fini. Parce que évidemment mon Gemfile
réel ne comporte pas que 3 gems, lui. Donc je me soumet:</p>

<pre><code>bundle update c
</code></pre>

<p>Et la réponse ne tarde pas:</p>

<pre><code>impossible de mettre à jour la gem c
la gem c 1.0.1 dépend de la gem a 1.0.1
</code></pre>

<p>Super :( J'ai l'impression qu'on me demande de remplir un formulaire
administratif ! La gem a dépend de b, qui elle, dépend de c, qui à son
tour dépend de a…</p>

<p>Malgré tout, la solution est très simple (merci collègue
<a href="https://twitter.com/hellvinz">@hellvinz</a>) il suffit de mettre à jour les
3 gems en même temps:</p>

<pre><code>bundle update a b c
</code></pre>

<p>Et le tour est joué. Peut-être que vous le saviez déjà ? Mais moi j'avais
raté cette partie de Bundle.</p>

<p>Aujourd'hui j'ai encore appris quelque chose :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le double bang en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby/"/>
    <updated>2014-04-23T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Ou encore !!, ou double point d'exclamation</h2>

<p>On peut voir ici ou là ce genre de code Ruby:</p>

<pre><code>!!expression
</code></pre>

<p><em>-C'est un truc qui n'est d'ailleurs pas spécifique au langage Ruby-</em>
Pourquoi voudrait-on écrire ça ?</p>

<!-- more -->


<p>Le <code>!</code> (not) fait une négation booléenne. Donc si une expression est <code>true</code>,
cela va donner <code>false</code>, et inversement, si une expression est <code>false</code>, cela
va donner <code>true</code>. Exemple:</p>

<p>``` irb
$ irb</p>

<blockquote><blockquote><p>!true
=> false
!false
=> true
```</p></blockquote></blockquote>

<p>Donc le <code>!!</code> est la négation booléenne d'une négation booléenne! Hum, ça
a l'air un peu inutile, hein:</p>

<p>``` irb</p>

<blockquote><blockquote><p>!!true
=> true
!!false
=> false
```</p></blockquote></blockquote>

<p>Ce qu'il ne faut pas oublier, c'est qu'en Ruby, comme dans plein d'autres
langages, beaucoup de choses peuvent être <strong>true</strong> ou <strong>false</strong>.
La preuve pour <code>true</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>puts &lsquo;ok&rsquo; if &lsquo;kind of true value&rsquo;
ok
puts &lsquo;ok&rsquo; if [1, 2]
ok
puts &lsquo;ok&rsquo; if []
ok
```</p></blockquote></blockquote>

<p>En fait, toute valeur autre que <code>false</code> ou <code>nil</code> est considérée comme <code>true</code>.
Et le corollaire: sont considérées comme <code>false</code> les valeurs <code>false</code> ou <code>nil</code>.</p>

<p>On peut maintenant voir l'intérêt du <code>!!</code>. Soit la classe suivante pour nous
servir d'exemple:</p>

<p>``` ruby
class Connection
  def initialize(connection = nil)</p>

<pre><code>@connection = connection
</code></pre>

<p>  end</p>

<p>  # Returns a boolean.
  def connected?</p>

<pre><code>!!@connection
</code></pre>

<p>  end
end
```</p>

<p>Bien que <code>@connection</code> soit <code>nil</code> ou un objet quelconque, je veux que
<code>connected?</code> renvoit <code>true</code> ou <code>false</code>. Pour ça je peux écrire:</p>

<pre><code>if @connection
  true
else
  false
end
</code></pre>

<p>ou bien encore:</p>

<pre><code>@connection ? true : false
</code></pre>

<p>Mais le <code>!!@connection</code> fonctionne tout aussi bien. Il est plus concis, et
surtout exprime bien le <em>cast</em> en booléen:</p>

<p>``` irb</p>

<blockquote><blockquote><p>c1 = Connection.new
=> #&lt;Connection:0x9236910 @connection=nil>
c1.connected?
=> false
c2 = Connection.new(Object.new)
=> #&lt;Connection:0x922deb4 @connection=#&lt;Object:0x922dec8>>
c2.connected?
=> true
```</p></blockquote></blockquote>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demandez conseil régulièrement]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/22/demandez-conseil-regulierement/"/>
    <updated>2014-04-22T21:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/22/demandez-conseil-regulierement</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je réparais un bug, rien de très compliqué, juste un
évènement qui n'était pas appelé. Et j'en ai profité pour faire un
refactoring: passer d'une grosse méthode de classe à quelque chose de
plus construit.</p>

<!-- more -->


<p>En gros on avait cette structure:</p>

<p>``` ruby
module Machin
  class Truc</p>

<pre><code>def self.foo(des, arguments)
  # Plusieurs
  # lignes
  # d'initialisation
  # de variables.
  # Plusieurs
  # lignes
  # de calculs
  # divers.
  # Et j'en passe
  # ...
end
</code></pre>

<p>  end
end
```</p>

<p>J'ai fait un refactoring dans ce genre:</p>

<p>```
module Machin
  class Truc</p>

<pre><code>def self.foo
  implementation = TrucImplementation.new(des, arguments)
  implementation.fait_ce_que_tu_as_a_faire
end

class TrucImplementation
  def initialize(des, arguments)
    # Initialisation.
  end

  def fait_ce_que_tu_as_a_faire
    # Ceci.
    # Cela.
  end

  private

  def ceci
    # ...
  end

  def cela
    # ...
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Mais j'étais vraiment ennuyé avec ce nom <code>TrucImplementation</code>. Je trouvais
que ça ne faisait pas très Ruby. Bref j'avais un sentiment bizarre sur ce
code donc j'ai demandé aux collègues une revue de code en disant que
j'aimerais bien nommé ça autrement…</p>

<p>La réponse n'a pas tardée, simple et sybilline: «Tu passes juste les méthodes de
<code>TrucImplementation</code> dans <code>Truc</code> et plus de soucis».</p>

<p>Pourquoi je raconte ça ? Pour me rappeler que parfois, avoir le nez dans le
code trop longtemps fait que tu ne vois plus ce qui est évident. Il ne faut
pas hésiter à demander un coup de main ; un point de vue différent, ou juste
plus frais, peut vite faire une différence.</p>

<p>Je pense que je n'ai pas fini d'être chambré là-dessus ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 avec Spring, Rspec ou Minitest et Coco]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/21/rails-4-dot-1-avec-spring-rspec-ou-minitest-et-coco/"/>
    <updated>2014-04-21T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/21/rails-4-dot-1-avec-spring-rspec-ou-minitest-et-coco</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Rails 4.1 est sorti récemment. Une des nouveautés est qu'il est livré avec
<a href="https://github.com/rails/spring">Spring</a>, qui permet d'accélerer le
développement en gardant, en quelque sorte, l'application rails en mémoire.
Voici, très rapidement, comment configurer Rails 4.1 avec soit Rspec, soit
Minitest comme framework de test, et <a href="https://github.com/lkdjiin/coco">Coco</a> comme outil de <em>code coverage</em>.</p>

<!-- more -->


<p>Tout d'abord, l'installation de la dernière version de rails:</p>

<pre><code>gem install rails
</code></pre>

<p>Puis la création d'une application de test:</p>

<pre><code>rails new testappli -T
</code></pre>

<p>Ensuite, si vous utiliser <strong>Rspec</strong>, le Gemfile:</p>

<p>``` ruby Gemfile
group :development, :test do
  gem &lsquo;spring-commands-rspec&rsquo;
  gem &lsquo;rspec-rails&rsquo;
end</p>

<p>group :test do
  gem &lsquo;coco&rsquo;
end
```</p>

<p>L'installation des gems:</p>

<pre><code>bundle install
</code></pre>

<p>L'installation de rspec:</p>

<pre><code>rails g rspec:install
</code></pre>

<p>La création de <code>bin/rspec</code>:</p>

<pre><code>spring binstub --all
</code></pre>

<p>La mise en place de Coco dans le fichier <code>spec/spec_helper.rb</code>:</p>

<p>``` ruby spec/spec_helper.rb</p>

<h1>Toute dernière ligne (ou bien toute première, au choix)</h1>

<p>require &lsquo;coco&rsquo;
```</p>

<p>Finalement vous pouvez lancer les tests ainsi:</p>

<pre><code>bin/rspec
</code></pre>

<p>Si, au contraire, vous avez choisi <strong>Minitest</strong>, vous ajouterez ceci dans votre Gemfile:</p>

<p>``` ruby Gemfile
group :development, :test do
  gem &lsquo;minitest-rails&rsquo;, &lsquo;2.0.0.beta1&rsquo;
end</p>

<p>group :test do
  gem &lsquo;coco&rsquo;
end
```</p>

<p>Ensuite, l'installation:</p>

<pre><code>bundle install
rails g minitest:install 
</code></pre>

<p>La mise en place de Coco dans le fichier <code>test/test_helper.rb</code>:</p>

<p>``` ruby spec/spec_helper.rb</p>

<h1>Toute dernière ligne (ou bien toute première, au choix)</h1>

<p>require &lsquo;coco&rsquo;
```</p>

<p>Finalement vous pouvez lancer les tests ainsi:</p>

<pre><code>bin/rake
</code></pre>

<p>Ou bien:</p>

<pre><code>bin/rake test
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
