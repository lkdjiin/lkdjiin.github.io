<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-24T21:55:03+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[La méthode super en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby/"/>
    <updated>2014-03-24T21:21:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/24/la-methode-super-en-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui un aperçu de la méthode <code>super</code> pour les débutants en Ruby.
C'est une méthode dont le comportement peut surprendre si vous venez
de certains autres langages…</p>

<!-- more -->


<p>Pour étudier le comportement de <code>super</code> il va nous falloir utiliser
l'héritage. Voici une classe de base toute simple:</p>

<p>``` ruby
class Base
  def foo(bar)</p>

<pre><code>puts "#{bar} from Base"
</code></pre>

<p>  end
end
```</p>

<p>Et voici comment l'utiliser:</p>

<p>``` ruby
base = Base.new
base.foo(&ldquo;Hello&rdquo;)</p>

<h1>=> Hello from Base</h1>

<p>```</p>

<p>Maintenant créons une classe fille qui hérite de <code>Base</code> et
<em>redéfinissons</em> la méthode <code>foo</code>:</p>

<p>``` ruby
class Child &lt; Base
  def foo(bar)</p>

<pre><code>super
puts "#{bar} from Child"
</code></pre>

<p>  end
end
```</p>

<p>Voici ce que ça donne:</p>

<p>``` ruby
child = Child.new
child.foo(&ldquo;Hello&rdquo;)</p>

<h1>=> Hello from Base</h1>

<h1>=> Hello from Child</h1>

<p>```</p>

<p>Il faut noter que:</p>

<ol>
<li>La méthode éponyme <code>foo</code> de la classe de base n'est pas appelée
implicitement. Il faut le faire explicitement avec <code>super</code>.</li>
<li>On est pas limité à un <em>constructeur</em>, on peut appeler <code>super</code> dans
une <em>simple</em> méthode.</li>
<li>Dans ce cas précis, pas besoin de passer l'argument <code>bar</code> à la
méthode <code>super</code>, c'est fait <strong>automagiquement</strong>.</li>
</ol>


<p>Allons plus loin et faisons faire plus de choses à la méthode <code>foo</code> de la
classe fille:</p>

<p>``` ruby
class Child &lt; Base
  def foo(bar, baz)</p>

<pre><code>super
puts "#{bar} #{baz} from Child"
</code></pre>

<p>  end
end
```</p>

<p>Cette fois-ci la magie n'opère plus et nous avons droit à une belle erreur:</p>

<p>``` ruby
child = Child.new
child.foo(&ldquo;Hello&rdquo;, &ldquo;world&rdquo;)</p>

<h1>=> super.rb:2:in `foo': wrong number of arguments (2 for 1) (ArgumentError)</h1>

<p>```</p>

<p>Ruby nous signale que la méthode <code>foo</code> de la classe <code>Base</code> a reçu 2
arguments, alors qu'elle n'en attendait qu'un seul ! Pourquoi, alors que
nous n'avons même pas passé un seul argument ? Parce que <code>super</code>, sans
arguments, prends <strong>tous</strong> les arguments passés à la méthode dans
laquelle il se trouve et les envoient tous vers la méthode éponyme de la
classe de base…</p>

<p>Alors comment on s'en sort ? Très simplement en passant à <code>super</code> les
paramètres que l'on veut:</p>

<p>``` ruby
class Child &lt; Base
  def foo(bar, baz)</p>

<pre><code>super(bar)
puts "#{bar} #{baz} from Child"
</code></pre>

<p>  end
end
```</p>

<p>Et cette fois-ci, ça fonctionne parfaitement:</p>

<p>``` ruby
child = Child.new
child.foo(&ldquo;Hello&rdquo;, &ldquo;world&rdquo;)</p>

<h1>=> Hello from Base</h1>

<h1>=> Hello world from Child</h1>

<p>```</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques trucs pour lancer Rspec]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/"/>
    <updated>2014-03-20T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><a href="http://rspec.info/">Rspec</a> est un framework de test très utilisé dans le monde Ruby.
Il y a bien des manières différentes de le lancer et aujourd'hui on
voit quelques options basiques qu'on peut utiliser tous les jours.</p>

<!-- more -->


<p>Tout d'abord, on peut lancer Rspec avec ses options par défaut:</p>

<pre><code>$ rspec spec/
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>À noter que le programme repose, comme souvent dans l'éco-système Ruby,
sur certaines conventions. Si le répertoire qui comporte vos tests est
nommé <code>spec</code>, vous pouvez vous contentez de:</p>

<pre><code>$ rspec
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>Parfois, on a envie de voir le nom des tests, plutôt que des petits points:</p>

<pre><code>$ rspec --format=documentation spec/
Coco::Configuration
  should respond to #user_wants_to_run?
  with no config file
    should give a default threshold of 100%
    should give a default list of directories
    should give an empty default list of files to excludes
    should give false for 'single_line_report'
    #user_wants_to_run? returns true
    give false for 'show_link_in_terminal'
[...]
Finished in 0.08854 seconds
65 examples, 0 failures
</code></pre>

<p>Nos tests doivent fonctionner en isolation, le résultat doit être le même
quel que soit l'ordre:</p>

<pre><code>$ rspec --order=random spec/
.................................................................
Finished in 0.08785 seconds
65 examples, 0 failures
Randomized with seed 8689
</code></pre>

<p>Vous pouvez mettre ses options, et d'autres, dans un fichier <code>.rspec</code> à la
racine de votre projet pour qu'elles deviennent les options par défaut.
Par exemple, le fichier suivant vous donnera une sortie en couleur et des
tests joués aléatoirement à chaque lancement de <code>rspec</code>:</p>

<p><code>raw .rspec
--color
--order=random
</code></p>

<p>Pour lancer les tests d'un seul fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb 
.......................
Finished in 0.03708 seconds
23 examples, 0 failures
</code></pre>

<p>Pour lancer un seul test, ajouter le numéro de la ligne derrière le nom du
fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb:41
Run options: include {:locations=&gt;{"./spec/configuration_spec.rb"=&gt;[41]}}
Coco::Configuration
  with no config file
    #user_wants_to_run? returns true
Finished in 0.00333 seconds
1 example, 0 failures
</code></pre>

<p>Pour terminer ce <em>Rspec basics</em>, on peut désactiver un test en écrivant <code>xit</code>
à la place de <code>it</code>:</p>

<p>``` ruby</p>

<pre><code>xit "should give a default threshold of 100%" do
  @config[:threshold].should == 100
end
</code></pre>

<p>```</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un badge pour la documentation pour vos projets Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby/"/>
    <updated>2014-03-19T20:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/19/un-badge-pour-la-documentation-pour-vos-projets-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Un nouveau badge à afficher dans vos README vient de voir le jour. Celui-ci
est consacré à la documentation du code Ruby.</p>

<!-- more -->


<p>Le projet s'appelle <a href="http://inch-pages.github.io/">inch-pages</a> et s'appuie
sur la gem <a href="http://trivelop.de/inch/">inch</a>.</p>

<p>Parmi les utilisateurs ont notera entre autre Haml, Pry, Reek, Rubocop
et Tweeter.</p>

<p>N'hésitez pas à l'utiliser pour faire savoir au monde entier que vos projets
sont bien documentés ;)</p>

<p>Pour ma part, je vais tester ça dès que possible…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le format JSON et les caractères de fin de lignes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/18/le-format-json-et-les-caracteres-de-fin-de-lignes/"/>
    <updated>2014-03-18T21:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/18/le-format-json-et-les-caracteres-de-fin-de-lignes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans un fichier au format JSON, on ne met pas tout ce qu'on veut…
Notamment en ce qui concerne les caractères de fin de ligne et les
tabulations.</p>

<!-- more -->


<p>En effet, ceux-ci ne sont pas autorisés à l'intérieur des chaines de
caractères. Voici un exemple.</p>

<p>Tout d'abord, pas de caractères spéciaux:</p>

<p><code>json doc.json
{
  "item" : "article"
}
</code></p>

<p>``` irb
$ rvm use 2.1.0
Using /home/xavier/.rvm/gems/ruby-2.1.0
$ irb</p>

<blockquote><blockquote><p>require &lsquo;json&rsquo;
=> file = IO.read File.expand_path(&lsquo;./doc.json&rsquo;)
JSON.parse file
=> {&ldquo;item&rdquo;=>&ldquo;Article&rdquo;}
```</p></blockquote></blockquote>

<p>Tout va bien.</p>

<p>Maintenant avec des caractères de fin de lignes échappés:</p>

<p><code>json doc.json
{
  "item" : "article\ndescription\nprice"
}
</code></p>

<p>``` irb
=> file = IO.read File.expand_path(&lsquo;./doc.json&rsquo;)
=> &ldquo;{\n  \"item\&rdquo; : \&ldquo;article\ndescription\nprice\&rdquo;\n}\n"</p>

<blockquote><blockquote><p>JSON.parse file
=> {&ldquo;item&rdquo;=>&ldquo;article\ndescription\nprice&rdquo;}
```</p></blockquote></blockquote>

<p>C'est toujours bon.</p>

<p>Par contre, avec des fins de lignes «en dur» dans le fichier:</p>

<p>``` json doc.json
{
  &ldquo;item&rdquo; : &ldquo;Article</p>

<pre><code>description
price"
</code></pre>

<p>}
```</p>

<p>``` irb</p>

<blockquote><blockquote><p>file = IO.read File.expand_path(&lsquo;./doc.json&rsquo;)
=> &ldquo;{\n  \"item\&rdquo; : \&ldquo;Article\n    description\n    price\&rdquo;\n}\n"
JSON.parse file
JSON::ParserError: 757: unexpected token at &lsquo;{
  &ldquo;item&rdquo; : &ldquo;Article</p>

<pre><code>description
price"
</code></pre>

<p>}
&lsquo;
```</p></blockquote></blockquote>

<p>Rien ne va plus. C'est pareil avec les tabulations.</p>

<p>Si vous récupérez ce genre de fichier, vous pouvez les nettoyer en
remplaçant par exemple les tabulations et les fins de ligne par un
espace:</p>

<p><code>ruby
file.gsub(/[\t\n]/, ' ')
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/"/>
    <updated>2014-03-17T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>J'ai ajouté les titres de niveau 2 et 3, nettoyer un peu le code et
et remplacer l'utilisation des commandes en mode normal <code>yy</code> et <code>p</code>
(qu'un utilisateur peut toujours avoir remappé) par des fonctions
d'évaluations:</p>

<!-- more -->


<p>``` vim
function s:build_title(char)
  let s:line_content = substitute(getline(&ldquo;.&rdquo;), &lsquo;.&rsquo;, a:char, &lsquo;g&rsquo;)
  call append(&lsquo;.&rsquo;, s:line_content)
endfunction</p>

<p>function! quickmarkdown#title1()
  call s:build_title(&ldquo;=&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title2()
  call s:build_title(&ldquo;&ndash;&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title3()
  call setline(line(&lsquo;.&rsquo;), &lsquo;### &rsquo; . getline(&lsquo;.&rsquo;))
endfunction
```</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
