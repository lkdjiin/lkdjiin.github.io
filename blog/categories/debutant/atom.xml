<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-14T21:45:11+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Créer facilement des thèmes pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/07/creer-facilement-des-themes-pour-vim/"/>
    <updated>2014-06-07T21:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/07/creer-facilement-des-themes-pour-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui, pas d'article technique mais une adresse internet :
<a href="http://www.vimtax.com/">www.vimtax.com</a>.</p>

<!-- more -->


<p>Ce site vous permettra de réaliser simplement et rapidement des thèmes
de coloration syntaxique pour Vim.</p>

<p>Choisissez un thème de base, puis
cliquez sur un élément (numéro de ligne, commentaire, mot-clé, couleur de
fond, etc) que vous souhaitez personnaliser. Les changements sont visibles
en temps réel.</p>

<p>Voilà, bonne création ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction à Opal.rb]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb/"/>
    <updated>2014-06-06T19:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça faisait un certain temps que je voulais essayer
<a href="http://opalrb.org/">Opal.rb</a>, un compilateur Ruby vers Javascript.</p>

<p>C'est fait ! Voici donc un <em>Hello world!</em> avec Opal.rb.</p>

<!-- more -->


<p>Tout d'abord, on installe la gem:</p>

<pre><code>gem install opal
</code></pre>

<p>Ensuite, on se fait un fichier <code>hello.rb</code> avec le contenu suivant:</p>

<p><code>ruby hello.rb
puts 'Hello world!'
</code></p>

<p>Bon jusque là, c'est simple ;) Maintenant on arrive au passage que j'aime le
moins. Je n'ai pas trouvé de commande pour compiler un fichier Ruby. Il
faut se l'écrire soi-même, bizarre. En voici un possible:</p>

<p>``` ruby rb2js.rb
require &lsquo;opal&rsquo;</p>

<p>puts Opal.compile(IO.read(ARGV[0]))
```</p>

<p>Voici ce que ça donne:</p>

<pre><code>$ ruby rb2js.rb hello.rb
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs(['$puts']);
  return self.$puts("Hello world!")
})(Opal);
</code></pre>

<p>On va s'enregistrer ça dans un fichier <code>hello.js</code>:</p>

<pre><code>$ ruby rb2js.rb hello.rb &gt; hello.js
</code></pre>

<p>Reste à se faire un fichier HTML pour voir ce que ça donne:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;
&lt;script src="lib/opal.min.js"&gt;&lt;/script&gt;
&lt;script src="lib/opal-parser.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;script src="hello.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>On peut ouvrir <code>index.html</code> avec <code>see index.html</code> si on est sous Linux, ou
bien <code>open index.html</code> si on est sous OS X. Et enfin, <strong>dans la console</strong>, on
peut voir notre <em>Hello world!</em>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une histoire de git diff]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff/"/>
    <updated>2014-06-05T21:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je devais fusionner notre branche <code>development</code> dans la branche
<code>master</code> et envoyer cette nouvelle version en production.</p>

<p>Mais avant d'envoyer quoi que ce soit, en production ou même sur Github,
je lance toujours la suite de tests. Vu notre <em>workflow</em>, quand il s'agit
de <em>merger</em> <code>development</code> dans <code>master</code>, c'est plus une formalité, une
habitude, qu'autre chose.</p>

<p>Sauf que cette fois-ci, certains tests ne passaient pas.</p>

<!-- more -->


<p>Comme je l'ai dit, vu notre <em>workflow</em>, c'est normalement impossible !
À moins que…</p>

<p>À moins qu'un collêgue &ndash;<em> pas moi bien sûr ;) </em>&ndash; ai fusionné un <em>hotfix</em>
dans <code>master</code> et oublié de le mettre dans <code>development</code> ? Vu qu'on déploit
plusieurs fois par semaines, ça a été vite à controler. C'était pas ça…</p>

<p>En regardant de plus près ce que racontaient les tests qui échouaient, j'ai
remarqué un truc très bizarre. Une des lignes d'où était sensée partir
l'erreur dans le code était … vide ! <code>Rspec</code> me disait que l'erreur partait
de la ligne 6, alors qu'elle partait en réalité de la ligne 7 ! Et c'est pas
tout, <code>Rspec</code> me soutenait que j'envoyais deux arguments à telle méthode
(c'était ça les erreurs), alors
qu'en réalité j'en envoyais bien un seul ! J'avais le code sous les yeux !</p>

<p>Qui mentait ? <code>Rspec</code> ou le code ?</p>

<p>C'est là qu'intervient la commande Git du titre de cet article, si vous avez
lu jusqu'ici.</p>

<pre><code>git diff master..development
</code></pre>

<p>Ça m'a permis de voir les différences entre les deux branches. Il y avait
simplement un fichier qui avait été déplacé et remanié. Seulement l'ancienne
version de ce fichier était elle aussi toujours là, à son ancien emplacement.</p>

<p>Après la suppression de ce fichier indélicat, j'ai pu envoyer le tout
en production. Je ne sais toujours pas pourquoi il y avait cette différence.
Je n'ai pas eu (<em>pris ?</em>) le temps de chercher. Enfin bref, merci Git :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cherchez avec grep dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim/"/>
    <updated>2014-05-26T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/26/cherchez-avec-grep-dans-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Comment cherchez un mot ou un <em>pattern</em> dans votre base de code sans
quitter Vim ? Voici une réponse.</p>

<!-- more -->


<p>La commande <code>:grep</code> fait appel au programme <code>grep</code> installé sur votre
machine. La ligne suivante va chercher dans ma base de code le texte
<code>TODO</code>:</p>

<p><code>vim
:grep TODO */*.rb
</code></p>

<p>Sauf que, peut-être, ça ne marche pas chez vous. Si c'est le cas, il y
a fort à parier que le répertoire courant de Vim est, non pas celui du
fichier actif, mais votre <em>home</em>. Pour en être sûr, vous pouvez afficher
le répertoire courant:</p>

<p><code>vim
:pwd
</code></p>

<p>Pour changer le répertoire courant et qu'il coincide avec celui du fichier
courant, le plus rapide est:</p>

<p><code>vim
:set autochdir
</code></p>

<p>Après, ça <em>devrait</em> marcher ;) Je vous invite à lire
<a href="http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file">cette page</a>
pour les histoires de dossier courant.</p>

<p>Personnellement, ce truc de répertoire courant m'a toujours pris la tête,
et je préfère utiliser un plugin comme <a href="https://github.com/mileszs/ack.vim">Ack.vim</a> ou <a href="https://github.com/rking/ag.vim">Ag.vim</a>,
ou plus souvent encore, faire la recherche directement dans une console. Mais chacun
ses goûts ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rechercher avec grep dans un fichier compressé]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse/"/>
    <updated>2014-05-22T21:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Il vous arrive peut-être parfois d'avoir à fouiller des fichiers de log ?
Vous utiliser <code>grep</code> pour ça ? Et comment faire quand les logs sont
compressés ?</p>

<!-- more -->


<p>Lorsque le log est normal, c'est à dire non-compressé, on peut utiliser la
commande <code>grep</code> suivante:</p>

<p><code>bash
$ grep --color 'LOWER' test.log
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Elle va afficher toutes les lignes du fichier <code>test.log</code> qui contiennent le
mot <code>LOWER</code>.</p>

<p>Mais si on fait la même chose sur un log compressé:</p>

<p><code>bash
$ grep --color 'LOWER' test.log.1.gz
$ 1
</code></p>

<p>Ça ne fonctionne pas. Ci-dessus, le <code>$ 1</code>, c'est mon shell qui m'affiche
une erreur sous la forme du code de retour (une idée pour un futur article).</p>

<p>Pour chercher dans un fichier compressé avec <code>grep</code>, on peut utiliser très
simplement la commande <code>zgrep</code>:</p>

<p><code>bash
$ zgrep --color 'LOWER' test.log.1.gz
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
