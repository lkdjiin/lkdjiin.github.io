<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-07-08T21:15:16+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Affichage de toutes les tâches rake]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake/"/>
    <updated>2014-06-25T20:54:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Hier je parlais des switchs <code>-T</code> et <code>-D</code> de l'executable <code>rake</code> pour
obtenir la liste des tâches, respectivement tronquées ou détaillées.</p>

<p>Aujourd'hui, pour ceux qui aurait la flemme de lire la sortie de
<code>rake --help</code>, c'est comment les obtenir <strong>toutes</strong>, car il y en a souvent
plus que l'on croit ;)</p>

<!-- more -->


<p>En effet, les switchs <code>-T</code> et <code>-D</code> n'affichent que les tâches possédant
une description. Et quand on débarque sur un projet Rails, ou Ruby, il
n'est pas rare qu'une petite armée de développeurs soient passés avant
vous en ajoutant plusieurs tâches bien utiles, mais sans description.</p>

<p>Pour en avoir la liste sans avoir à lire les nombreux fichiers <code>*.rake</code>,
il vous suffit d'utiliser le switch <code>--all</code>:</p>

<pre><code>$ rake --all -T
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Description détaillée des tâches rake]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake/"/>
    <updated>2014-06-24T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vous savez certainement comment obtenir la liste des tâches <code>rake</code> disponibles
dans votre projet Rails ou dans votre gem Ruby. Il faut utiliser le switch
<code>-T</code>. Par exemple, à partir d'un projet Rails bidon:</p>

<pre><code>$ rake -T
rake about                              # List versions of all Rails framew...
rake assets:clean[keep]                 # Remove old compiled assets
rake assets:clobber                     # Remove compiled assets
rake assets:environment                 # Load asset compile environment
rake assets:precompile                  # Compile all the assets named in c...
rake cache_digests:dependencies         # Lookup first-level dependencies f...
rake cache_digests:nested_dependencies  # Lookup nested dependencies for TE...
rake db:create                          # Creates the database from DATABAS...
rake db:drop                            # Drops the database from DATABASE_...
</code></pre>

<!-- more -->


<p>Et il y en a quelques dizaines d'autres. Vous remarquez que certaines descriptions sont
tronquées, comme <code># Compile all the assets named in c...</code>. Lorsqu'il s'agit d'une
tâche qu'on ne connait pas très bien, on aimerait pouvoir lire la description
complête. Pour cela, il faut utiliser le switch <code>-D</code>:</p>

<pre><code>$ rake -D
rake about
    List versions of all Rails frameworks and the environment

rake assets:clean[keep]
    Remove old compiled assets

rake assets:clobber
    Remove compiled assets

rake assets:environment
    Load asset compile environment

rake assets:precompile
    Compile all the assets named in config.assets.precompile

rake cache_digests:dependencies
    Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)
</code></pre>

<p>Pour en savoir plus sur les switchs de rake, tapez <code>rake --help</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Créer facilement des thèmes pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/07/creer-facilement-des-themes-pour-vim/"/>
    <updated>2014-06-07T21:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/07/creer-facilement-des-themes-pour-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui, pas d'article technique mais une adresse internet :
<a href="http://www.vimtax.com/">www.vimtax.com</a>.</p>

<!-- more -->


<p>Ce site vous permettra de réaliser simplement et rapidement des thèmes
de coloration syntaxique pour Vim.</p>

<p>Choisissez un thème de base, puis
cliquez sur un élément (numéro de ligne, commentaire, mot-clé, couleur de
fond, etc) que vous souhaitez personnaliser. Les changements sont visibles
en temps réel.</p>

<p>Voilà, bonne création ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction à Opal.rb]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb/"/>
    <updated>2014-06-06T19:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça faisait un certain temps que je voulais essayer
<a href="http://opalrb.org/">Opal.rb</a>, un compilateur Ruby vers Javascript.</p>

<p>C'est fait ! Voici donc un <em>Hello world!</em> avec Opal.rb.</p>

<!-- more -->


<p>Tout d'abord, on installe la gem:</p>

<pre><code>gem install opal
</code></pre>

<p>Ensuite, on se fait un fichier <code>hello.rb</code> avec le contenu suivant:</p>

<p><code>ruby hello.rb
puts 'Hello world!'
</code></p>

<p>Bon jusque là, c'est simple ;) Maintenant on arrive au passage que j'aime le
moins. Je n'ai pas trouvé de commande pour compiler un fichier Ruby. Il
faut se l'écrire soi-même, bizarre. En voici un possible:</p>

<p>``` ruby rb2js.rb
require &lsquo;opal&rsquo;</p>

<p>puts Opal.compile(IO.read(ARGV[0]))
```</p>

<p>Voici ce que ça donne:</p>

<pre><code>$ ruby rb2js.rb hello.rb
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs(['$puts']);
  return self.$puts("Hello world!")
})(Opal);
</code></pre>

<p>On va s'enregistrer ça dans un fichier <code>hello.js</code>:</p>

<pre><code>$ ruby rb2js.rb hello.rb &gt; hello.js
</code></pre>

<p>Reste à se faire un fichier HTML pour voir ce que ça donne:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;
&lt;script src="lib/opal.min.js"&gt;&lt;/script&gt;
&lt;script src="lib/opal-parser.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;script src="hello.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>On peut ouvrir <code>index.html</code> avec <code>see index.html</code> si on est sous Linux, ou
bien <code>open index.html</code> si on est sous OS X. Et enfin, <strong>dans la console</strong>, on
peut voir notre <em>Hello world!</em>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une histoire de git diff]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff/"/>
    <updated>2014-06-05T21:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je devais fusionner notre branche <code>development</code> dans la branche
<code>master</code> et envoyer cette nouvelle version en production.</p>

<p>Mais avant d'envoyer quoi que ce soit, en production ou même sur Github,
je lance toujours la suite de tests. Vu notre <em>workflow</em>, quand il s'agit
de <em>merger</em> <code>development</code> dans <code>master</code>, c'est plus une formalité, une
habitude, qu'autre chose.</p>

<p>Sauf que cette fois-ci, certains tests ne passaient pas.</p>

<!-- more -->


<p>Comme je l'ai dit, vu notre <em>workflow</em>, c'est normalement impossible !
À moins que…</p>

<p>À moins qu'un collêgue &ndash;<em> pas moi bien sûr ;) </em>&ndash; ai fusionné un <em>hotfix</em>
dans <code>master</code> et oublié de le mettre dans <code>development</code> ? Vu qu'on déploit
plusieurs fois par semaines, ça a été vite à controler. C'était pas ça…</p>

<p>En regardant de plus près ce que racontaient les tests qui échouaient, j'ai
remarqué un truc très bizarre. Une des lignes d'où était sensée partir
l'erreur dans le code était … vide ! <code>Rspec</code> me disait que l'erreur partait
de la ligne 6, alors qu'elle partait en réalité de la ligne 7 ! Et c'est pas
tout, <code>Rspec</code> me soutenait que j'envoyais deux arguments à telle méthode
(c'était ça les erreurs), alors
qu'en réalité j'en envoyais bien un seul ! J'avais le code sous les yeux !</p>

<p>Qui mentait ? <code>Rspec</code> ou le code ?</p>

<p>C'est là qu'intervient la commande Git du titre de cet article, si vous avez
lu jusqu'ici.</p>

<pre><code>git diff master..development
</code></pre>

<p>Ça m'a permis de voir les différences entre les deux branches. Il y avait
simplement un fichier qui avait été déplacé et remanié. Seulement l'ancienne
version de ce fichier était elle aussi toujours là, à son ancien emplacement.</p>

<p>Après la suppression de ce fichier indélicat, j'ai pu envoyer le tout
en production. Je ne sais toujours pas pourquoi il y avait cette différence.
Je n'ai pas eu (<em>pris ?</em>) le temps de chercher. Enfin bref, merci Git :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
