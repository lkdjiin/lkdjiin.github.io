<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-01-04T20:23:33+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Racket: Trouves mon nombre - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1/"/>
    <updated>2014-01-04T19:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/04/racket-trouves-mon-nombre-partie-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>«Devines un nombre entre 1 et 100 !» C'est le jeu que je vous propose
d'écrire en Racket pour apprendre ce langage.
Le code provient du livre <a href="http://realmofracket.com/">Realm of Racket</a>
et il est livré avec Racket. Vous pourrez le trouver dans le dossier
<code>collects/realm/chapter2</code> de votre installation de Racket.</p>

<!-- more -->


<p>Voici le morceau de code qu'on va voir aujourd'hui:</p>

<p>``` racket guess.rkt</p>

<h1>lang racket</h1>

<p>(define lower 1)
(define upper 100)</p>

<p>(define (guess)
  (quotient (+ lower upper) 2))
```</p>

<p>Enregistrez le dans un fichier <code>guess.rkt</code>. Pour le charger, lancez <code>racket</code>
et tapez <code>(enter! "guess.rkt")</code>:</p>

<pre><code>[~]⇒ racket
Welcome to Racket v5.3.6.
-&gt; (enter! "guess.rkt")
</code></pre>

<p>Si vous demandez l'évaluation de la fonction <code>guess</code>, vous obtiendrez 50:</p>

<pre><code>-&gt; (guess)
50
</code></pre>

<p>Voici quelques explications. On a tout d'abord défini deux variables,
<code>lower</code> et <code>upper</code>, qui sont les limites basses et hautes de l'étendue
sur laquelle la machine va <em>deviner</em> un nombre:</p>

<p><code>racket
(define lower 1)
(define upper 100)
</code></p>

<p>Plus tard dans le programme, le contenu de ces variables changera pour
réduire l'étendue.</p>

<p>Maintenant, voyons comment la machine <em>devine</em> un nombre:</p>

<p><code>racket
(define (guess)
  (quotient (+ lower upper) 2))
</code></p>

<p>Tout simplement en donnant le nombre qui se trouve au milieu des limites
basses et hautes. Pour trouver ce nombre, on divise par 2 la somme de la limite
basse et de la limite haute. On doit ici utiliser <code>quotient</code> pour faire
la division, et non pas <code>/</code>. En effet:</p>

<pre><code>-&gt; (/ 101 2)
101/2
</code></pre>

<p>En Racket, les nombres restent <em>exacts</em> tant qu'ils le peuvent. Comme nous
voulons un nombre entier, il faut le tronquer:</p>

<pre><code>-&gt; (truncate 101/2)
50
</code></pre>

<p>Voilà ce à quoi sert <code>quotient</code>. Autrement dit:</p>

<p><code>racket
(quotient a b)
</code></p>

<p>est égal à:</p>

<p><code>racket
(truncate (/ a b))
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: Afficher les tables de multiplication]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/03/racket-afficher-les-tables-de-multiplication/"/>
    <updated>2014-01-03T17:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/03/racket-afficher-les-tables-de-multiplication</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui un programme vraiment très simple pour débuter en Racket:
comment afficher les tables de multiplication de 1 à 12.
Attention: vrais débutants uniquement !</p>

<!-- more -->


<p>On commence par une fonction qui affiche une ligne d'une table de
multiplication:</p>

<p><code>racket
(define (display-table-line rank n)
  (printf "~a x ~a = ~a\n" rank n (* rank n)))
</code></p>

<p>Cette fonction se nomme <code>display-table-line</code> et prends deux
paramètres: <code>rank</code> et <code>n</code>. <code>n</code> est le numéro de la table (table des 1,
table des 2, table des 3, etc).
<code>printf</code> permet d'afficher une ligne de texte formaté, chaque occurence
de <code>~a</code> sera remplacée, dans l'ordre, par les arguments qui suivent.</p>

<p>Voici maintenant la fonction <code>display-table</code>, qui va afficher une table entière:</p>

<p>``` racket
(define (display-table n)
  (for ([rank (in-range 1 11)])</p>

<pre><code>   (display-table-line rank n)))
</code></pre>

<p>```</p>

<p>Cette fonction affiche la table des <code>n</code>. Tout se passe dans une boucle <code>for</code>.
La fonction <code>(in-range x y)</code> retourne un range de x inclus, à y non-inclus.</p>

<p>Et enfin, voici la boucle principale qui provoque l'affichage des tables de
1 à 12:</p>

<p>``` racket
(for ([num (in-range 1 13)])</p>

<pre><code> (printf "Table des ~a\n\n" num)
 (display-table num)
 (newline))
</code></pre>

<p>```</p>

<p>On peut paraphraser le code ainsi: pour chaque table de 1 à 12, écrire un
entête, afficher la table, puis passer une ligne.</p>

<p>Voici donc, pour finir, le code complet:</p>

<p>``` racket</p>

<h1>lang racket</h1>

<p>(define (display-table-line rank n)
  (printf &ldquo;~a x ~a = ~a\n&rdquo; rank n (* rank n)))</p>

<p>(define (display-table n)
  (for ([rank (in-range 1 11)])</p>

<pre><code>   (display-table-line rank n)))
</code></pre>

<p>(for ([num (in-range 1 13)])</p>

<pre><code> (printf "Table des ~a\n\n" num)
 (display-table num)
 (newline))
</code></pre>

<p>```</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La fonction d'auto-application en Lambda Calculus 2ème partie]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/01/la-fonction-dauto-application-en-lambda-calculus-2eme-partie/"/>
    <updated>2014-01-01T17:43:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/01/la-fonction-dauto-application-en-lambda-calculus-2eme-partie</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Hier on a vu <a href="http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus/">la fonction d'auto-application</a> appliquée à divers arguments.
Aujourd'hui on regarde ce qu'il se passe lorsqu'elle est appliquée à
elle-même.</p>

<!-- more -->


<h2>(λs.(s s) λs.(s s))</h2>

<p>Que ce passe-t-il quand on applique la fonction d'auto-application sur
elle-même ? Regardons cela:</p>

<pre><code>(λs.(s s) λs.(s s))
</code></pre>

<p>Le premier <code>s</code> de cette application est la variable liée. Je le met entre
chevrons doubles pour être sûr de bien me faire comprendre:</p>

<pre><code>(λ&lt;&lt;s&gt;&gt;.(s s) λs.(s s))
</code></pre>

<p>Ensuite nous avons le corps de la fonction:</p>

<pre><code>(λs.&lt;&lt;(s s)&gt;&gt; λs.(s s))
</code></pre>

<p>Vient ensuite l'argument de l'application:</p>

<pre><code>(λs.(s s) &lt;&lt;λs.(s s)&gt;&gt;)
</code></pre>

<p>Pour évaluer cette application, on utilise le même mécanisme que
précédement: on remplace chaques occurences de la variable liée par
l'argument, dans le corps de la fonction, et on renvoie ce corps.
Ce qui nous donne donc:</p>

<pre><code>(λs.(s s) λs.(s s))
</code></pre>

<p>Nous avons obtenu exactement la même application que celle de départ !
L'évaluation n'étant pas terminée, on doit continuer et on voit qu'on
entre dans une <em>boucle infinie</em>: l'évaluation ne se termine jamais.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>Bonne année 2014 et à demain !</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La fonction d'auto-application en Lambda Calculus]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus/"/>
    <updated>2013-12-31T15:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/31/la-fonction-dauto-application-en-lambda-calculus</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>La dernière fois on a vu <a href="http://lkdjiin.github.io/blog/2013/12/28/la-fonction-didentite-en-lambda-calculus/">la fonction d'identité</a>, cette fois ci on
va parler de la fonction d'auto-application en λ calculus.</p>

<!-- more -->


<h2>La fonction d'auto-application : λs.(s s)</h2>

<p>Appliquée à un argument A, la fonction d'auto-application crée une nouvelle
application, dont la fonction et l'argument sont A. Décortiquons d'abord un peu cette
fonction:</p>

<pre><code>λs.(s s)
</code></pre>

<p>Le premier <code>s</code>, coincé entre le caractère lambda et le point est la
variable liée. À droite du point, nous avons le corps de la fonction :</p>

<pre><code>(s s)
</code></pre>

<p>qui est une application.</p>

<h2>(λs.(s s) foo)</h2>

<p>Voyons ce qu'il se passe quand la fonction d'auto-application est appliquée
à l'argument <code>foo</code>:</p>

<pre><code>(λs.(s s) foo)
</code></pre>

<p>On remplace, dans le corps de la fonction, chaque occurence de la variable liée
par l'argument. Et c'est ce corps de fonction, après substitution, qui
est renvoyé:</p>

<pre><code>(foo foo)
</code></pre>

<p><code>foo</code> étant un nom, il s'évalue en tant que lui-même, et on ne peut donc
pas aller plus loin.</p>

<h2>(λs.(s s) λx.x)</h2>

<p>Voyons maintenant l'application de la fonction d'auto-application à la
fonction d'identité, vue la dernière fois:</p>

<pre><code>(λs.(s s) λx.x)
</code></pre>

<p>Comme précédement, on remplace chaque occurence de <code>s</code> dans le corps de
la fonction:</p>

<pre><code>(λx.x λx.x)
</code></pre>

<p>Cette fois, l'application peut être évaluée. On a vu la dernière fois
que la fonction d'identité renvoyait l'argument, donc:</p>

<pre><code>λx.x
</code></pre>

<p>La prochaine fois, on verra ce qu'il se passe quand la fonction
d'auto-application est appliquée sur elle-même. En fait, si vous avez
compris le mécanisme, vous pouvez d'ores et déjà essayer par vous même…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1: Les nouvelles méthodes de Set]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set/"/>
    <updated>2013-12-30T19:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/30/ruby-2-dot-1-les-nouvelles-methodes-de-set</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Avec la sortie de Ruby 2.1, la bibliothèque standard <code>Set</code> s'enrichie de
deux méthodes supplémentaires: <code>disjoint?</code> et <code>intersect?</code>.</p>

<!-- more -->


<p><code>Set</code> permet de créer un ensemble d'éléments uniques:</p>

<p>``` irb</p>

<blockquote><blockquote><p>require &lsquo;set&rsquo;
Set.new [1, 2, 1, 2, 2]
=> #&lt;Set: {1, 2}>
```</p></blockquote></blockquote>

<p>La nouvelle méthode <code>intersect?</code> permet de tester si deux sets ont au moins
un élément en commun:</p>

<p>``` irb</p>

<blockquote><blockquote><p>s1 = Set.new [1, 2, 3]
s2 = Set.new [4, 5, 6]
s3 = Set.new [1, 8, 9]</p>

<p>s1.intersect? s2
=> false
s1.intersect? s3
=> true
```</p></blockquote></blockquote>

<p>La seconde méthode, <code>disjoint?</code>, est son opposée. Elle teste si deux sets n'ont
aucuns éléments communs:</p>

<p>``` irb</p>

<blockquote><blockquote><p>s1.disjoint? s2
=> true
s1.disjoint? s3
=> false
```</p></blockquote></blockquote>

<p>Ce genre de méthode n'est pas très compliqué à coder soi-même, comme le
montre le code source de <code>intersect?</code>:</p>

<p>``` ruby
def intersect?(set)
  set.is_a?(Set) or raise ArgumentError, &ldquo;value must be a set&rdquo;
  if size &lt; set.size</p>

<pre><code>any? { |o| set.include?(o) }
</code></pre>

<p>  else</p>

<pre><code>set.any? { |o| include?(o) }
</code></pre>

<p>  end
end
```</p>

<p>Mais l'avoir en standard permet de ne pas réinventer la roue…
Quant au code source de <code>disjoint?</code>, c'est très exactement comme je
le disais plus haut, l'opposé de <code>intersect?</code>:</p>

<p><code>ruby
def disjoint?(set)
  !intersect?(set)
end
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
