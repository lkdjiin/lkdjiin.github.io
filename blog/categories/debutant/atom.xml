<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-11-29T18:38:01+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/"/>
    <updated>2013-11-29T18:31:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Sed et Awk sont deux petits langages spécialisés dans l'édition, le
traitement, l'analyse, le filtrage, etc, des fichiers texte.
Ce que peuvent faire ces deux langages, Ruby peut le faire.</p>

<!-- more -->


<p>Dans mon <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédant</a>
j'ai écrit:</p>

<p><blockquote><p>le fichier <a href="https://github.com/ruby/ruby/blob/trunk/lib/csv.rb">https://github.com/ruby/ruby/blob/trunk/lib/csv.rb</a> de<br/>Ruby contient à ce jour 46% de lignes qui sont des commentaires.</p></blockquote></p>

<p>Je n'ai bien sûr pas compté chaque commentaire du fichier. J'ai écrit pour
cela un petit script Ruby.</p>

<p>Un algorithme standard pour ce type de tâche serait:</p>

<pre><code>ouvrir le fichier
initialiser des variables

pour chaque ligne du fichier
    mettre à jour des variables
fin

fermer le fichier
calculer le résultat
afficher le résultat
</code></pre>

<p>En fait, quand on traite/édite/analyse/filtre un fichier texte, un pattern
basique apparait:</p>

<pre><code>ouvrir le fichier
pour chaque ligne du fichier
    # faire un truc
fin
fermer le fichier
</code></pre>

<p>Avec Sed et Awk, l'ouverture du fichier, sa fermeture et la boucle de
traitement sont <em>implicites</em>. Autrement dit, on n'écrit jamais ce code.
On écrit seulement le code du traitement.</p>

<p>Ruby peut faire cela.</p>

<p>Une question se pose alors :
si Sed et Awk sont faits pour ça, pourquoi utiliser Ruby à la place ?
Il y a plusieurs raisons possibles:</p>

<ul>
<li>Vous ne connaissez ni Sed, ni Awk mais vous connaissez déjà Ruby,
même un peu. Pourquoi apprendre un nouveau langage ?</li>
<li>Vous pratiquez Sed et Awk et vous trouvez la syntaxe … comment dire …
ésotérique (surtout celle de Sed).</li>
<li>Utiliser Ruby permet d'avoir accès à toutes ses bibliothèques.</li>
</ul>


<p>Convaincu ? Dans ce cas surveillez ce blog, je vais rapidement écrire
quelques articles sur ce sujet.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Argument nommé et requis]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis/"/>
    <updated>2013-11-27T18:14:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/27/du-nouveau-dans-ruby-2-dot-1-argument-nomme-et-requis</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ruby 2.0 a introduit les arguments nommés, appelés <em>keyword argument</em>
dans la langue de Shakespeare, soit: «argument mot-clé». Ruby 2.1 ajoute
la notion d'argument nommé <strong>et</strong> requis.</p>

<p>Voilà à quoi ça ressemble, un argument nommé:</p>

<!-- more -->


<p>``` ruby
def foo(arg: &ldquo;hello&rdquo;)
  puts arg
end</p>

<p>foo #=> &ldquo;hello&rdquo;
```</p>

<h2>Avant Ruby 2.1</h2>

<p>Mais en Ruby 2.0, vous êtes obligé de donner une valeur par défaut:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
</code></pre>

<p>``` irb</p>

<blockquote><blockquote><p>def foo(arg:)
  puts arg
end
SyntaxError: (irb):10: syntax error, unexpected &lsquo;)&rsquo;
```</p></blockquote></blockquote>

<p>Imaginez que ça soit pareil avec les arguments dit
<em>normaux</em>. On ne pourrait pas écrire:</p>

<pre><code>def foo(arg)
</code></pre>

<p>On serait obligé d'écrire à la place:</p>

<pre><code>def foo(arg="hello")
</code></pre>

<p>Un peu bizarre, non ?</p>

<h2>Avec Ruby 2.1</h2>

<p>On peut maintenant définir un argument nommé sans valeur par défaut, et
donc faire en sorte qu'il soit requis:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<p>``` irb</p>

<blockquote><blockquote><p>def foo(arg:)
  puts arg
end
=> :foo
foo
ArgumentError: missing keyword: arg
foo &ldquo;hello&rdquo;
ArgumentError: missing keyword: arg
foo arg: &ldquo;hello&rdquo;
hello
```</p></blockquote></blockquote>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe f pour les chaînes de caractères]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres/"/>
    <updated>2013-11-26T20:33:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/26/du-nouveau-dans-ruby-2-dot-1-le-suffixe-f-pour-les-chaines-de-caracteres</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui c'est au tour du nouveau suffixe <code>f</code> (comme frozen) d'être passé
en revue.</p>

<!-- more -->


<h2>Avant Ruby 2.1</h2>

<p>Les chaînes de caractères en Ruby sont des objets <em>mutables</em>. Ce qui
signifie qu'à chaque fois que l'interpréteur rencontre <code>"foo"</code>, il crée
un nouvel objet:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; "foo".object_id
74667700
&gt;&gt; "foo".object_id
74664050
</code></pre>

<p>Ce qui peut influer sur les performances d'un programme quand on compare
beaucoup de chaînes. Voici un exemple trivial:</p>

<p><code>ruby
def foo?(string)
  foo = "foo"
  p foo.object_id
  string == foo
end
</code></p>

<p>Encore une fois, on peut constater qu'un nouvel objet est créé à chaque
appel de la méthode:</p>

<p>``` irb</p>

<blockquote><blockquote><p>foo? &ldquo;bépo&rdquo;
76675080
false
foo? &ldquo;bar&rdquo;
76669680
false
```</p></blockquote></blockquote>

<p>Et géler (<em>freeze</em>) l'objet n'empêchera pas sa création à chaque appel:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def foo
  foo = &ldquo;foo&rdquo;.freeze
  foo.object_id
end
nil
foo
82081130
foo
82079520
```</p></blockquote></blockquote>

<h2>Avec Ruby 2.1</h2>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
</code></pre>

<p>Le suffixe <code>f</code> permet de géler (<em>freeze</em>) les chaînes de
caractères:</p>

<p>``` irb</p>

<blockquote><blockquote><p>a = &ldquo;foo"f
=> "foo&rdquo;
a.reverse!
RuntimeError: can&rsquo;t modify frozen String
```</p></blockquote></blockquote>

<p>Et surtout, le suffixe <code>f</code> les gèlent une fois pour toutes.
L'exemple précédent donne ceci:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def foo?(string)
  foo = &ldquo;foo"f
  p foo.object_id
  string == foo
end
=> :foo?
foo? "bépo&rdquo;
79029020
=> false
foo? &ldquo;bar&rdquo;
79029020
=> false
```</p></blockquote></blockquote>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du nouveau dans Ruby 2.1: Le suffixe r]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r/"/>
    <updated>2013-11-25T23:56:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/25/du-nouveau-dans-ruby-2-dot-1-le-suffixe-r</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui on voit une nouvelle façon d'écrire un nombre rationnel dans
Ruby 2.1.</p>

<!-- more -->


<p>Jusqu'ici pour écrire un nombre rationnel, on devait faire ceci:</p>

<p><code>ruby
Rational('1/3')
</code></p>

<p>Ce qui est loin d'être concis:</p>

<pre><code>[~]⇒ rvm use 2.0.0
[~]⇒ irb
&gt;&gt; Rational('1/3') + Rational('1/9')
4/9
</code></pre>

<p>Désormais, avec Ruby 2.1, on pourra se servir du suffixe <code>r</code>:</p>

<pre><code>[~]⇒ rvm use 2.1.0-preview1
[~]⇒ irb
&gt;&gt; 1/3r + 1/9r
=&gt; (4/9)
</code></pre>

<p>Encore un peu plus de sucre dans notre langage ;)</p>

<p><strong>Source (pdf)</strong> <a href="http://www.atdot.net/~ko1/activities/toruby05-ko1.pdf">toruby</a></p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket: première approche de lambda]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/21/racket-premiere-approche-de-lambda/"/>
    <updated>2013-11-21T19:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/21/racket-premiere-approche-de-lambda</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/11/11/racket-pour-les-rubyists-6-une-premiere-fonction/">article précédent</a>, j'ai écrit une fonction Racket pour calculer
les diviseurs d'un nombre n:</p>

<p>``` racket</p>

<h1>lang racket</h1>

<p>(define (divisors n)
  ; Is i a divisor of n?
  (define (divisor? i)</p>

<pre><code>(= 0 (remainder n i)))
</code></pre>

<p>  (filter divisor? (range 1 (+ n 1))))</p>

<p>(provide divisors)
```</p>

<p>Puis on a vu comment <a href="http://lkdjiin.github.io/blog/2013/11/17/racket-pour-les-rubyists-8-tests-unitaires-simples/">faire des tests unitaires</a>.
Il est temps maintenant de faire un peu de refactoring.</p>

<!-- more -->


<p>Tout d'abord, le plus simple, on va extraire une fonction qui calcule
un <em>range</em> de 1 à n inclus:</p>

<p>``` racket number.rkt</p>

<h1>lang racket</h1>

<p>; divisors : integer &ndash;> list of integers
; Get divisors of a number n.
(define (divisors n)
  ; Is i a divisor of n?
  (define (divisor? i)</p>

<pre><code>(= 0 (remainder n i)))
</code></pre>

<p>  (filter divisor? (range-inclusive n)))</p>

<p>; range-inclusive : integer &ndash;> list of integers
; Build a list from 1 to n inclusive.
(define (range-inclusive n)
  (range 1 (+ n 1)))</p>

<p>(provide divisors)
```</p>

<p>Vous noterez au passage que j'ai commencé à documenter mes fonctions en
spécifiant les types de données en entrée et en sortie. Vous remarquez aussi
que <code>range-inclusive</code> ne fait pas partie de l'API du module:
<code>(provide divisors)</code>.</p>

<p>Maintenant il nous faut extraire la fonction qui regarde si un nombre <em>i</em> est
un diviseur de <em>n</em>:</p>

<p><code>racket
; divisor-of? : integer integer -&gt; boolean
; Tells if i is a divisor of n.
(define (divisor-of? n i)
  (= 0 (remainder n i)))
</code></p>

<p>Le nom de la fonction a changé au passage pour <code>divisor-of?</code>. Mais surtout
nous avons du inclure <em>n</em> dans les arguments de la fonction.</p>

<p>On doit maintenant <em>insérer</em> cette fonction dans le code de la fonction
principale <code>divisors</code>. Voici une première tentative un peu naive:</p>

<p><code>racket
; Attention, ce code ne fonctionne pas.
(define (divisors n)
  (filter (divisor-of? n i) (range-inclusive n)))
</code></p>

<p>Évidemment ça ne marche pas, puisque Racket ne connait pas <em>i</em>, mais
ça nous donne une orientation. Pour que Racket sache ce que nous voulons
placer dans <em>i</em>, à savoir l'élément en cours de traitement par la fonction
<code>filter</code>, on va passer par une fonction anonyme:</p>

<p><code>racket
(define (divisors n)
  (filter (lambda (i) (divisor-of? n i)) (range-inclusive n)))
</code></p>

<p>Une fonction anonyme (lambda) prend un argument (ou plusieurs) et une
expression. À chaque itération, <code>filter</code> passe un élément tiré de
<code>(range-inclusive n)</code> à la fonction anonyme <code>(lambda (i) (divisors-of? n i))</code>.</p>

<p>Voilà donc notre module, après refactoring:</p>

<p>``` racket number.rkt</p>

<h1>lang racket</h1>

<p>; divisors : integer &ndash;> list of integers
; Get divisors of a number n.
(define (divisors n)
  (filter (lambda (i) (divisor-of? n i)) (range-inclusive n)))</p>

<p>; divisor-of? : integer integer &ndash;> boolean
; Tells if i is a divisor of n.
(define (divisor-of? n i)
  (= 0 (remainder n i)))</p>

<p>; range-inclusive : integer &ndash;> list of integers
; Build a list from 1 to n inclusive.
(define (range-inclusive n)
  (range 1 (+ n 1)))</p>

<p>(provide divisors)
```</p>

<p>On aurait aussi pu écrire ce qui suit, à la place des trois fonctions ci-dessus:</p>

<p><code>racket
; divisors : integer -&gt; list of integers
; Get divisors of a number n.
(define (divisors n)
  (filter (lambda (i) (= 0 (remainder n i))) (range 1 (+ n 1))))
</code></p>

<p>Ça fait bien sûr beaucoup moins de code… Peut-être est-ce parceque je ne suis
pas encore habitué à Racket, mais je trouve aussi cela bien moins lisible.
Si on doit réutiliser les fonctions <code>divisor-of?</code> et <code>range-inclusive</code>, il
n'y a pas de question à se poser. Sinon…? Si vous connaissez bien
Racket/Scheme/Lisp laissez donc un commentaire pour me dire quelle version
est la plus idiomatique de ce type de langages.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
