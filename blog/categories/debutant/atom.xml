<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-16T16:35:32+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0: Les arguments nommés]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/"/>
    <updated>2013-10-14T19:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Les arguments nommés étaient absents de Ruby jusqu'à sa version 2.0, curieux
pour un langage qui fait tellement penser à Smalltalk.</p>

<!-- more -->


<p>Il était bien sûr possible de les <em>simuler</em> en utilisant un hash, un peu
comme ce qu'on fait en Javascript:</p>

<p><code>ruby
def person(opts = {})
  defaults = {name: "toto", age: 99}
  opts = defaults.merge opts
  puts opts[:name]
  puts opts[:age]
end
</code></p>

<p>Mais bof. Ça ressemble à tout sauf à du Ruby. C'est un <em>hack</em>, un truc, une
astuce, tout ce qu'on veut mais ça ne s'intègre pas au langage.
Voici la même méthode, avec cette fois-ci des arguments nommés:</p>

<p><code>ruby
def person(name: "toto", age: 99)
  puts name
  puts age
end
</code></p>

<p>Et voici comment différentes manières d'appeler cette méthode:</p>

<p><code>ruby
person
person name: "oscar"
person age: 18
person name: "oscar", age: 18
person age: 18, name: "oscar"
</code></p>

<p>Cool, ça fonctionne dans tous les sens. Par contre, pas question d'oublier
le nom de l'argument:</p>

<p><code>irb
person "oscar", 18
ArgumentError: wrong number of arguments (2 for 0)
</code></p>

<p>On peut aussi mélanger arguments normaux et nommés, à condition que les
arguments nommés viennent après. Le code suivant est valide:</p>

<p>``` ruby
def person(name, age: 99)
  puts name
  puts age
end</p>

<p>person &ldquo;oscar&rdquo;
```</p>

<p>Mais pas celui-ci:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def person(age: 99, name)
end
SyntaxError: (irb):1: syntax error, unexpected tIDENTIFIER
def person(age: 99, name)</p>

<pre><code>                    ^
</code></pre>

<p>```</p></blockquote></blockquote>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Créez des présentations avec Vimdeck]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/"/>
    <updated>2013-10-13T13:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck</id>
    <content type="html"><![CDATA[<p>Vimdeck est un programme écrit en Ruby qui transforme un fichier texte au
format Markdown en plusieurs <em>slides</em> pour effectuer une présentation avec
l'éditeur de texte Vim !</p>

<!-- more -->


<h2>Installation</h2>

<p>Installez tout d'abord le plugin Vim <a href="https://github.com/vim-scripts/SyntaxRange">SyntaxRange</a>.</p>

<p>Ensuite, installez le programme de manière classique:</p>

<pre><code>gem install vimdeck
</code></pre>

<p>Note: J'ai eu un problème de dépendance (sur Debian) et il a fallu installer la
librairie systême <code>libmagickwand-dev</code> pour que tout fonctionne bien.</p>

<h2>Utilisation</h2>

<p>Maintenant on écrit notre présentation au format Markdown, par exemple:</p>

<pre><code># Premier slide

- Premier point
- Second point
- Troisième point


# Deuxième slide

- Premier
{~- Deuxième point~}
{~- Troisième point~}


# Troisième et dernier slide

```ruby
class Foo
  def bar
    puts "Hello Vimdeck!"
  end
end
```
</code></pre>

<p>Et on lance la présentation ainsi:</p>

<pre><code>vimdeck mon_fichier.md
</code></pre>

<p>Ensuite, on change de slide avec les touches PageUp/PageDown.</p>

<p>Vous pouvez voir des captures d'écrans sur le <a href="https://github.com/tybenz/vimdeck">site du projet</a>.</p>

<h2>Conclusion</h2>

<p>Bon, le projet est un peu jeune et pas mal buggé, mais l'idée est vraiment
intéressante. C'est totalement improbable, complêtement loufoque, inutilisable
avec des graphiques, donc
rigoureusement indispensable, ne serait-ce que pour frimer devant les
collègues: «Regardez comment je fais une présentation en 3 minutes avec mon
éditeur de texte…».</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0: Raffinement de méthode]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode/"/>
    <updated>2013-10-10T18:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ruby possède un truc cool : les classes ouvertes. Lorsque j'écris :</p>

<p>``` ruby
class String
  def foo</p>

<pre><code>"foo"
</code></pre>

<p>  end
end
```</p>

<p>Je ne suis pas en train de <em>définir</em> une nouvelle classe <code>String</code>, je suis
simplement en train <em>d'ouvrir</em> la classe <code>String</code> existante pour lui ajouter
une nouvelle méthode.</p>

<!-- more -->


<p>C'est très utile et très cohérent avec l'esprit orienté objet de Ruby.
Mettons que j'ai besoin de cacher les voyelles d'une phrase pour un
hypothétique jeu de lettre, je peux écrire un module avec une collection
de méthodes utilitaires, par exemple:</p>

<p>``` ruby
module Util
  def self.hide_vowels(string)</p>

<pre><code>string.tr('aeiouy', '*')
</code></pre>

<p>  end
end</p>

<p>puts Util.hide_vowels(&ldquo;bonjour xavier&rdquo;)
```</p>

<p>Ce qui donne:</p>

<pre><code>b*nj**r x*v**r
</code></pre>

<p>Mais on peut aussi tirer parti des classes ouvertes de cette manière:</p>

<p>``` ruby
class String
  def hide_vowels</p>

<pre><code>tr('aeiouy', '*')
</code></pre>

<p>  end
end</p>

<p>puts &ldquo;bonjour xavier&rdquo;.hide_vowels
```</p>

<p>C'est plus élégant, à la fois dans la définition et dans l'utilisation.
Seulement ce genre de code peut poser problème quand il est utilisé dans
des bibliothèques, puisque une fois chargée, la nouvelle méthode est visible
dans tout le code client. Parfois c'est ce qu'on veut, parfois ce ne devrait
être qu'une méthode utilitaire du code tiers.</p>

<p>Ruby 2.0 propose le raffinement de méthode (<em>method refinement</em>) pour
pallier à ce problème. L'idée est de limiter la portée des méthodes ajoutées
ou modifiées avec le mécanisme des classes ouvertes. Voici un petit exemple:</p>

<p>```
module CoolString
  refine String do</p>

<pre><code>def hide_vowels
  tr('aeiouy', '*')
end
</code></pre>

<p>  end
end</p>

<h1>puts &ldquo;abc&rdquo;.hide_vowels</h1>

<p>using CoolString
puts &ldquo;abc&rdquo;.hide_vowels
```</p>

<p>La ligne en commentaire provoquerait une erreur (NoMethodError). Pour pouvoir
utiliser la méthode <code>hide_vowels</code> il faut explicitement écrire
<code>using CoolString</code>. La portée de <code>hide_vowels</code> s'étend du moment où on utilise
la méthode <code>using</code> jusqu'à la fin du fichier.</p>

<p>Le raffinement de méthode est expérimental dans Ruby 2.0 et devrait être
définitivement adopté dans Ruby 2.1. Pour aller plus loin, on peut se
reporter à la <a href="http://www.ruby-doc.org/core-2.0.0/doc/syntax/refinements_rdoc.html">documentation</a>.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: un exemple de valeur par défaut pour un Hash]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash/"/>
    <updated>2013-10-03T10:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J'oublie régulièrement qu'un Hash peut renvoyer une valeur par défaut.
Du coup, je me retrouve souvent avec un code inutilement lourd.
Aujourd'hui je montre un exemple d'initialisation d'un Hash avec une
valeur par défaut et pourquoi c'est intéressant.</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">l'article d'hier</a>
(sur les algorithmes génétiques) je donnais un script de trois lignes sans
fournir d'explications, les voici.</p>

<h2>L'objectif</h2>

<p>J'ai un fichier (&ldquo;mots.txt&rdquo;) contenant un certain nombre de mots pouvant
apparaitre plusieurs fois:</p>

<pre><code>casserole
casserole
assiette
fourchette
casserole
fourchette
verre
...
</code></pre>

<p>Je veux connaitre le nombre d'occurence de chaque mot et produire une sortie
de ce genre:</p>

<pre><code>187 =&gt; casserole
 13 =&gt; assiette
  2 =&gt; fourchette
  1 =&gt; verre
</code></pre>

<h2>La classe Hash expliquée en 30 secondes</h2>

<p><em>Si vous savez déjà ce qu'est un hash, passez directement à la section
suivante.</em></p>

<p>Un <em>hash</em> peut contenir un nombre indeterminé de paires d'objets ; ces paires
étants organisées en clé/valeur. Ça marche comme un dictionnaire. Dans
d'autres langages, vous les connaissez peut-être sous le nom de dict, map,
tableau associatif, hashtable, etc. En Ruby, on peut créer un hash vide de
deux façons:</p>

<p><code>ruby
hash = {}
autre_hash = Hash.new
</code></p>

<p>On peut créer et remplir un hash en même temps:</p>

<p><code>ruby
hash = { "clef1" =&gt; 123, "clef2" =&gt; 456 }
</code></p>

<p>Pour connaitre la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<p><code>ruby
hash["clef1"]
</code></p>

<p>Pour modifier la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<p><code>ruby
hash["clef1"] = 0
</code></p>

<p>Pour ajouter une paire clé/valeur:</p>

<p><code>ruby
hash["nouvelle clef"] = 123546789
</code></p>

<p>Notez que les clés et leurs valeurs peuvent être de n'importe quel type.
On n'est pas limité à des chaînes de caractères et des nombres.</p>

<h2>Première version</h2>

<p>Mon premier jet a donné ceci:</p>

<p>``` ruby</p>

<h1>Version 1</h1>

<p>hash = Hash.new</p>

<p>File.open(&ldquo;mots.txt&rdquo;, &ldquo;r&rdquo;).each_line do |line|
  if hash.key?(line)</p>

<pre><code>hash[line] = hash[line] + 1
</code></pre>

<p>  else</p>

<pre><code>hash[line] = 1
</code></pre>

<p>  end
end</p>

<p>hash.each {|key, value| puts &ldquo;#{&rdquo;%3d" % value} => #{key}&ldquo; }
```</p>

<p>La première ligne crée un hash vide tandis que la dernière affiche
le contenu du hash, formaté comme je le veux. Au milieu, on itère sur
les lignes du fichier texte (les mots) pour remplir le hash,
c'est ça qui m'intéresse:</p>

<p>``` ruby
  if hash.key?(line)</p>

<pre><code>hash[line] = hash[line] + 1
</code></pre>

<p>  else</p>

<pre><code>hash[line] = 1
</code></pre>

<p>  end
```</p>

<p>C'est une construction classique à base de if/else. Si le hash possède
une clé identique à la ligne en cours (<code>if hash.key?(line)</code>) alors on
incrémente sa valeur associée. Sinon on crée cette clé, associée à la
valeur 1 puisque c'est la première fois qu'on rencontre ce mot
(<code>hash[line] = 1</code>).</p>

<h2>Deuxième version</h2>

<p>Ruby possède un opérateur ternaire (<em>ternary operator</em>) qui peut remplacer
un if/else simple comme le notre:</p>

<pre><code>condition ? oui : non
</code></pre>

<p>Si <code>condition</code> est vérifiée, on execute <code>oui</code>, sinon on execute <code>non</code>.
Dans notre cas on peut donc écrire:</p>

<p><code>ruby
File.open("mots.txt", "r").each_line do |line|
  hash[line] = hash.key?(line) ? hash[line] + 1 : 1
end
</code></p>

<p>Certains adorent ce genre de construction, d'autres détestent. <em>À priori</em> je
n'ai rien contre, mais il faut avouer que dans ce cas précis c'est tout
simplement illisible.</p>

<h2>Troisième version</h2>

<p>Ruby possède un opérateur sympa qu'on peut parfois utiliser quand on veut
initialiser une variable si elle n'existe pas où la modifier si elle
existe: <code>||=</code>. Il faut savoir qu'un hash renvoie la valeur <code>nil</code> quand on
lui fournit une clé inexistante:</p>

<p><code>ruby
File.open("result.txt", "r").each_line do |line|
  hash[line] ||= 0
  hash[line] += 1
end
</code></p>

<p><code>hash[line] ||= 0</code> va créer la clé et lui donner la valeur 0 si cette clé
n'existe pas, sinon la clé se voit affecter sa valeur. Ensuite la valeur de
la clé est incrémentée avec <code>hash[line] += 1</code>. Je trouve cela plus lisible
que la version avec l'opérateur ternaire, mais moins lisible que la version
avec le if/else, car cela fait appel à un «truc».</p>

<h2>Quatrième et dernière version</h2>

<p>Voici la <em>bonne</em> version (selon moi bien entendu). Il faut modifier
légerement la création du hash:</p>

<p><code>ruby
hash = Hash.new(0)
File.open("result.txt", "r").each_line do |line|
  hash[line] += 1
end
</code></p>

<p>Quand vous créer un hash, vous pouvez lui dire: «Je veux que tu renvois
telle valeur quand on te donne une clé inexistante». Dans notre cas, les
clés inexistantes renverront toujours zéro. Le tour est joué: une simple
incrémentation suffit maintenant, qu'une clé existe déjà ou non.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3/"/>
    <updated>2013-09-29T12:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui c'est dimanche, l'article sera court, on voit deux méthodes
utiles pour le débugage ou pour les fichiers
de log: <code>__method__</code> et <code>__dir__</code>.</p>

<!-- more -->


<h2><code>__method__</code></h2>

<p><code>__method__</code> renvoit le nom de la méthode courante comme un type Symbol:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def foo
<strong>method</strong>
end
nil
foo
:foo
```</p></blockquote></blockquote>

<p>Et si vous avez besoin de récupérer une chaîne de caractère:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def bar
<strong>method</strong>.to_s
end
nil
bar
&ldquo;bar&rdquo;
```</p></blockquote></blockquote>

<h2><code>__dir__</code></h2>

<p>Comme son nom l'indique presque, cette méthode renvoit le nom (complet)
du répértoire du fichier dans lequel la méthode est appelée:</p>

<p>``` ruby ~/test/dir.rb
def this_dir
  <strong>dir</strong>
end</p>

<p>puts this_dir
```</p>

<pre><code>[~/test]⇒ rvm use 2.0.0
Using /home/xavier/.rvm/gems/ruby-2.0.0-p247
[~/test]⇒ ruby dir.rb 
/home/xavier/test
</code></pre>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
