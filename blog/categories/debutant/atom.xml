<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-02-10T20:51:48+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Astuce Ruby - Utiliser les variables d'environnement]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement/"/>
    <updated>2014-02-07T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour un projet en cours, je dois accéder à une variable d'environnement
passée par la ligne de commande. Voici comment faire, et pourquoi le
faire.</p>

<!-- more -->


<h2>Comment faire ?</h2>

<p>Dans Ruby, on accède aux variables d'environnement à l'aide
du hash <code>ENV</code>. Pour créer une variable d'environnement qui ne sera
connue que de votre programme, il faut
l'affecter avant la commande:</p>

<p>``` irb
$ MYVAR=1 irb</p>

<blockquote><blockquote><p>p ENV[&lsquo;MYVAR&rsquo;]
&ldquo;1&rdquo;
exit
```</p></blockquote></blockquote>

<p>La syntaxe suivante crée une variable d'environnement avec une chaîne
vide:</p>

<p>``` irb
$ MYVAR= irb</p>

<blockquote><blockquote><p>p ENV[&lsquo;MYVAR&rsquo;]
&ldquo;&rdquo;
```</p></blockquote></blockquote>

<p>Une variable d'environnement inexistante renverra <code>nil</code>:</p>

<p>``` irb
$ irb</p>

<blockquote><blockquote><p>ENV[&lsquo;MYVAR&rsquo;]
nil
```</p></blockquote></blockquote>

<h2>Pourquoi faire ?</h2>

<p>Pour prendre des décisions qui ne sont connues
qu'au lancement du programme, on se sert normalement des options en
ligne de commande, du genre:</p>

<pre><code>$ foo -a --bar
</code></pre>

<p>Mais quand un programme A est lancé par un autre programme B, ou
bien par le
déclenchement du programme B, on n'a pas forcement la possibilité
d'ajouter des options au programme A. Dans ce cas les variables
d'environnement sont une solution.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Dossier parent dans l'explorateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/"/>
    <updated>2014-02-06T20:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui : Comment ouvrir le dossier parent dans le Finder,
(l'explorateur d'OS X).</p>

<!-- more -->


<h2>Remonter au dossier parent dans le Finder</h2>

<p>L'idée est bien sûr de pouvoir faire ça avec le clavier. Avec une
souris vous savez déjà comment faire ;)</p>

<p>Sur Linux, on utilise la touche <code>Backspace</code>, et parfois
<code>Alt flèche haut</code>.</p>

<p>Sur OS X, on utilisera <code>Meta flèche haut</code>, la touche <code>Backspace</code> ne
fonctionnera pas.</p>

<p><a href="/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Raccourcis clavier pour changer de bureau]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/"/>
    <updated>2014-02-05T20:28:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui : Comment changer facilement et rapidement de bureau
virtuel.</p>

<!-- more -->


<h2>Les raccourcis de Mission Control</h2>

<p>Pour passer au bureau virtuel de gauche, c'est <code>Control flèche gauche</code>.  <br/>
Pour passer au bureau virtuel de droite, c'est <code>Control flèche droite</code>.</p>

<p>À cause du temps de transition de l'animation entre les changements
de bureau, il est intéressant de pouvoir accéder directement au
bureau souhaité. <code>Control 1</code> vous ammène sur le bureau numéro 1,
<code>Control 2</code> sur le bureau numéro 2, etc. Si ce genre de raccourci
ne fonctionne pas pour vous, allez voir ici:</p>

<pre><code>Menu pomme &gt; Préférences système &gt; Clavier &gt; Raccourcis
</code></pre>

<p>Notez au passage qu'il est impossible de désactiver l'animation entre
les changements de bureau (<em>!!??</em>), ce qui s'avère très pénible
certains jours…</p>

<p><a href="/blog/2014/02/06/de-linux-debian-vers-os-x-dossier-parent-dans-lexplorateur/">Astuce suivante</a>  <br/>
<a href="/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Linux (Debian) vers OS X - Les bureaux virtuels]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels/"/>
    <updated>2014-02-04T20:41:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/04/de-linux-debian-vers-os-x-les-bureaux-virtuels</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui : Comment activer les bureaux virtuels à la sauce OS X.</p>

<!-- more -->


<h2>Mission Control</h2>

<p>Si il y a un truc dont je ne veux vraiment pas me passer, c'est bien
l'utilisation des bureaux virtuels. Je sais que ça ne convient pas
à tous le monde, loin de là, mais si vous êtes comme moi, vous serez
heureux d'apprendre qu'il y a un équivalent sur OS X : Mission Control.</p>

<p>Pour l'activer :</p>

<pre><code>Menu pomme &gt; Préférences système &gt; Mission control &gt; Activation
</code></pre>

<p>Une fois activé, appuyez sur F9 pour avoir accès à une vue de tous
vos bureaux, en ajouter, modifier l'ordre, etc.</p>

<p><a href="/blog/2014/02/05/de-linux-debian-vers-os-x-raccourcis-clavier-pour-changer-de-bureau/">Astuce suivante</a>  <br/>
<a href="/blog/2014/01/31/de-linux-debian-vers-os-x-naviguer-dans-lexplorateur/">Astuce précédente</a></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Vim - Les sections]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections/"/>
    <updated>2014-02-03T20:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je viens juste de découvrir deux nouveaux mouvements avec Vim que
j'aimerais partager avec vous:
section suivante et section précédente.</p>

<!-- more -->


<p>Pour aller à la section suivante :</p>

<pre><code>]]
</code></pre>

<p>Pour aller à la section précédente :</p>

<pre><code>[[
</code></pre>

<p>Le tout étant de savoir ce qu'est une section !? J'étudierais l'aide
de Vim plus tard… Pour l'instant, voici ce que ça donne avec les
langages suivants:</p>

<p><strong>Bash, C</strong> : Va au caractère <code>{</code> d'une fonction
 (uniquement quand il débute une ligne).</p>

<p><strong>Python</strong> : Va à chaque <code>class</code> et <code>def</code>.</p>

<p><strong>Ruby</strong> : Va à chaque <code>module</code> et <code>class</code>.</p>

<p><strong>Vim</strong> : Va à chaque <code>function</code>.</p>

<p>Notez que ça semble ne rien faire avec les fichiers Javascript,
Racket, Scheme, Java, Haskell, et j'en passe. Je n'ai pas plus
d'informations pour l'instant, mais je compte bien m'y pencher de
plus près. En attendant, si vous avez des connaissances sur ces
mouvements, n'hésitez pas à nous en faire profiter dans un
commentaire.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
