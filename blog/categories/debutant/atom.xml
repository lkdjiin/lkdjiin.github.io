<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-22T21:29:03+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rechercher avec grep dans un fichier compressé]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse/"/>
    <updated>2014-05-22T21:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Il vous arrive peut-être parfois d'avoir à fouiller des fichiers de log ?
Vous utiliser <code>grep</code> pour ça ? Et comment faire quand les logs sont
compressés ?</p>

<!-- more -->


<p>Lorsque le log est normal, c'est à dire non-compressé, on peut utiliser la
commande <code>grep</code> suivante:</p>

<p><code>bash
$ grep --color 'LOWER' test.log
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Elle va afficher toutes les lignes du fichier <code>test.log</code> qui contiennent le
mot <code>LOWER</code>.</p>

<p>Mais si on fait la même chose sur un log compressé:</p>

<p><code>bash
$ grep --color 'LOWER' test.log.1.gz
$ 1
</code></p>

<p>Ça ne fonctionne pas. Ci-dessus, le <code>$ 1</code>, c'est mon shell qui m'affiche
une erreur sous la forme du code de retour (une idée pour un futur article).</p>

<p>Pour chercher dans un fichier compressé avec <code>grep</code>, on peut utiliser très
simplement la commande <code>zgrep</code>:</p>

<p><code>bash
$ zgrep --color 'LOWER' test.log.1.gz
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser une version particulière d'une gem Ruby... dans une gem]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem/"/>
    <updated>2014-05-21T20:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/21/utiliser-une-version-particuliere-dune-gem-ruby-dot-dot-dot-dans-une-gem</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>On connait tous le moyen d'utiliser une gem d'une version précise dans un
projet Rails. Il suffit de mettre ceci dans le Gemfile:</p>

<p><code>ruby Gemfile
gem 'foo', '=1.2.3'
</code></p>

<p>Et hop, Rails, avec son coté <em>magique</em>, fait automatiquement le <code>require</code>
nécéssaire pour charger la gem <code>foo</code>, avec la version <code>1.2.3</code>.
Mais qu'en est-il lorsqu'on veut faire la même chose dans une gem, ou bien
dans un simple script ?</p>

<!-- more -->


<p>Si j'écris un article sur ce sujet c'est parce que j'oublie régulièrement
comment faire. Et qu'à chaque fois je dois perdre quelques minutes à chercher.
En l'écrivant une fois pour toutes, j'éspère que ça va rentrer ;)</p>

<p>La solution est évidemment très simple, on écrit ce qui suit dans son script:</p>

<p><code>ruby
gem 'foo', '=1.2.3'
require 'foo'
</code></p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hub - Git plus facile avec Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github/"/>
    <updated>2014-05-20T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui j'ai découvert <a href="http://hub.github.com/">Hub</a>.
Un programme (en Ruby) qui étend les fonctionnalités de Git en ligne de
commande quand on travaille avec un dépot Github. Je n'est pas encore
eu le temps de le tester, ni même de l'installer, mais je voulais tout
de même vous en parler au cas où, comme moi, vous seriez passé à coté.</p>

<!-- more -->


<p>Ne l'ayant pas tester, je me contente de paraphraser la page d'acceuil
pour vous donner l'eau à la bouche ;)</p>

<p>Pour cloner un de vos propre projet, il suffit de:</p>

<pre><code>git clone projet
</code></pre>

<p>Si le projet ne vous appartient pas, il faut faire:</p>

<pre><code>git clone github/projet
</code></pre>

<p>Rien que ça, c'est déjà sympathique. Mais je suis impatient d'essayer la
commande suivante:</p>

<pre><code>git pull-request
</code></pre>

<p>Il y plusieurs autres commandes avec lesquelles j'ai hâte de m'amuser.
Si vous avez déjà utiliser Hub, dites moi donc ce que vous en pensez.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le thème Gruvbox pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim/"/>
    <updated>2014-05-19T20:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/19/le-theme-gruvbox-pour-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça fait quelques semaines maintenant que j'utilise le thème
<a href="https://github.com/morhetz/gruvbox">Gruvbox</a> pour Vim. Je le trouve
excellent.</p>

<!-- more -->


<p>Il propose deux modes, un sombre et un clair, comme le fameux thème
Solarized, qu'on active ainsi:</p>

<p><code>vim
:set bg=dark
:set bg=light
</code></p>

<p>C'est comfortable de pouvoir changer selon l'humeur, ou la lumière… Il y a
pas mal de langages supportés, regardez donc les
<a href="https://github.com/morhetz/gruvbox/wiki/Gallery">captures d'écrans</a>
pour voir si ça vous convient.</p>

<p>Mais ce que j'aime vraiment, c'est la très bonne intégration de base avec
plusieurs plugins que j'utilise : Easy Motion, Rainbow Parentheses, Airline,
Git Gutter, Syntastic, CtrlP, etc.</p>

<p>Je vous recommande chaudement de l'essayer.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des benchmarks en général et de Ruby en particulier]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier/"/>
    <updated>2014-05-08T18:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/08/des-benchmarks-en-general-et-de-ruby-en-particulier</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>En ce moment je fais quelques recherches sur la <em>lenteur</em> de Ruby.
J'aimerais faire un article sur pourquoi Ruby est lent et pourquoi ça
n'est pas un problême la plupart du temps.</p>

<p>Pendant ces recherches je suis tombé sur cet article:
<a href="http://blog.clifreeder.com/blog/2013/04/21/ruby-is-too-slow-for-programming-competitions/">Ruby Is Too Slow for Programming Competitions</a>.
Dans cet article, l'auteur utilise ce <a href="https://gist.github.com/clifff/5401367">script</a> de benchmark pour comparer deux manières différentes pour savoir
si un nombre est un <a href="http://fr.wikipedia.org/wiki/Nombre_palindrome">palindrome</a>.
La première manière utilise une méthode mathématique et la seconde manière
transforme le nombre en chaîne de caractères.</p>

<!-- more -->


<p>Alors je n'ai pas regardé le code en détail, j'ai juste voulu faire tourner
le benchmark sur quelques version de Ruby. On commence avec la version
1.9.3:</p>

<p><strong>ruby MRI 1.9.3</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method  18.800000   0.000000  18.800000 ( 18.814018)
String palindrome method    9.860000   0.010000   9.870000 (  9.885368)
--------------------------------------------------- total: 28.670000sec

                                user     system      total        real
Integer palindrome method  18.150000   0.000000  18.150000 ( 18.168135)
String palindrome method    9.830000   0.000000   9.830000 (  9.844366)
</code></pre>

<p>On voit que la méthode qui utilise les nombres est deux fois plus lente que
la méthode qui utilise les chaînes de caractères.</p>

<p>Passons à la version 2.0 de Ruby:</p>

<p><strong>ruby MRI 2.0</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method  19.250000   0.010000  19.260000 ( 19.273625)
String palindrome method    8.910000   0.000000   8.910000 (  8.922845)
--------------------------------------------------- total: 28.170000sec

                                user     system      total        real
Integer palindrome method  19.560000   0.000000  19.560000 ( 19.555138)
String palindrome method    8.760000   0.100000   8.860000 (  8.866579)
</code></pre>

<p>Je ne m'attendais pas du tout à ça ! La seconde méthode est bien légèrement
plus rapide mais la première méthode est au contraire légèrement plus lente
qu'avec Ruby 1.9.3. Utilisant Ruby au quotidien, j'avais noté une réelle
amélioration de la vitesse lors du passage à 2.0.</p>

<p>Maintenant voyons ce que donne la version 2.1:</p>

<p><strong>ruby MRI 2.1</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method  13.930000   0.010000  13.940000 ( 13.938652)
String palindrome method    8.160000   0.000000   8.160000 (  8.165836)
--------------------------------------------------- total: 22.100000sec

                                user     system      total        real
Integer palindrome method  14.000000   0.000000  14.000000 ( 13.992662)
String palindrome method    8.320000   0.000000   8.320000 (  8.323284)
</code></pre>

<p>C'est plus conforme à mes attentes, on voit une nette amélioration avec la
première méthode.</p>

<p>Comme j'ai un rubinius sous la main et que j'ai déjà pu constater que cette
implémentation de Ruby pouvait être rapide, j'essaye:</p>

<p><strong>rubinius 2.0</strong></p>

<pre><code>Rehearsal -------------------------------------------------------------
Integer palindrome method   3.768236   0.000000   3.768236 (  3.781376)
String palindrome method   10.240640   0.044002  10.284642 ( 10.293314)
--------------------------------------------------- total: 14.052878sec

                                user     system      total        real
Integer palindrome method   2.140134   0.000000   2.140134 (  2.141363)
String palindrome method    8.472530   0.048003   8.520533 (  8.533402)
</code></pre>

<p>Waow ! Si la seconde méthode (avec les chaînes de caractères) est
sensiblement équivalente à Ruby 2.1, la première méthode (avec les
nombres) est pratiquement <strong>7 fois plus rapide</strong>.</p>

<p>De là à dire que les benchmarks ne servent à rien, il n'y a qu'un pas que
je ne veux pas franchir. Je veux seulement dire qu'il faut faire très
attention avec les benchmarks et ne pas tirer de conclusions hatives.
L'auteur de ce benchmark concluait à tort que la seconde méthode est plus
rapide que la première. Alors que c'est plus une question de contexte,
d'algorithme utilisé, d'implémentation du langage, et peut-être encore
d'autres choses qui m'échappent.</p>

<p>La seule conclusion que je peux tirer de ça est: d'une manière générale,
pensez à tester votre application avec Rubinius, vous pourriez être
agréablement surpris ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
