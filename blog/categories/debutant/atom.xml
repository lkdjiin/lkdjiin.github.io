<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-06-04T14:09:31+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Le système binaire]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/04/le-systeme-binaire/"/>
    <updated>2015-06-04T13:55:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/04/le-systeme-binaire</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J’ai appris l’algèbre de Boole au lycée, j’ai programmé en assembleur très tôt,
j’ai donc de bonnes raisons de connaître le binaire ; ce truc fait en quelque
sorte partie de moi.  Par expérience, je sais que certains développeurs manque
de connaissances dans le domaine, mais pas pour autant de curiosité.  Alors si
vous n’êtes pas sûr de savoir ce qu’est vraiment le système binaire, continuez
la lecture…</p>

<p><img class="center" src="/images/one-plus-one.png"></p>

<!-- more -->

<p><strong>Le système binaire est une manière de compter</strong>, tout comme le système
décimal que vous connaissez bien. Sauf qu’au lieu de compter en se basant sur
le nombre 10 (on dit aussi «compter en base dix»), on compte avec une base
deux. Le système décimal et le système binaire ne sont pas les seuls systèmes
de «comptage» existants, loin de là. Vous connaissez (et utilisez) d’autres
systèmes, comme le système en base 60 pour compter les secondes et les minutes
et le système en base 24 pour compter les heures.  Tout ça pour dire et redire
qu’<strong>il n’y a absolument rien de bizarre à compter autrement qu’en base 10</strong>.</p>

<p>Pourquoi, alors, le système décimal nous semble être <em>LE</em> système de référence ?
Et pourquoi 10, d’ailleurs ? Certainement parce qu’<strong>on a dix doigts</strong>, il est
donc naturel de prendre 10 comme base. Mais si nous rencontrions des
extra-terrestres à 8 doigts, il y a fort à parier que leur système <em>naturel</em>
serait en base 8.</p>

<p>Le système décimal possède dix symboles, qui représentent chacun une valeur que
j’appellerai <em>unitaire</em> : 0, 1, 2, 3, 4, 5, 6, 7, 8 et 9. Ces symboles peuvent
se combiner à l’infini pour représenter d’autres valeurs. <strong>C’est pareil pour
les autres systèmes</strong>, ils représentent un certain nombre de valeurs en utilisant
des symboles :</p>

<pre><code>Système     | # de symboles | Symboles
-------------------------------------------------------------
hexadécimal | 16            | 0 1 2 3 4 5 6 7 8 9 A B C D E F
décimal     | 10            | 0 1 2 3 4 5 6 7 8 9
octal       |  8            | 0 1 2 3 4 5 6 7
binaire     |  2            | 0 1
</code></pre>

<p>Le système binaire doit représenter seulement deux valeurs.  On utilise
généralement des 1 et des 0, mais on pourrait exprimer/symboliser ces valeurs
par n’importe quoi d’autre : vrai et faux, 5 volts et 0 volts, oui et non,
rouge et vert, allumé et éteint, haut et bas, etc.</p>

<p>Pourquoi a-t-on besoin d’un système avec seulement deux valeurs ?
<strong>i)</strong> parce que ça représente bien <strong>la logique</strong> : ceci <em>OU</em> cela, ceci <em>ET</em> cela.
<strong>ii)</strong> parce que c’est le système de comptage <strong>le plus simple</strong> (du moins pour une machine) et que simplicité est généralement synonyme d’efficacité.</p>

<p>Pour illustrer ce dernier point, et terminer cet article d’introduction au
système binaire — <em>j’espère qu’il y en aura plein d’autres</em> —  voici le
résultat de l’opération logique 1 OU 1, et celui de l’addition de 1 + 1 :</p>

<pre><code>1 OU 1 = 1
1  + 1 = 10
</code></pre>

<p>Pour comprendre comment tout cela fonctionne, rendez-vous dans les prochains
articles.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker la classe Fixnum]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/23/hacker-la-classe-fixnum/"/>
    <updated>2015-05-23T08:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/23/hacker-la-classe-fixnum</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2 id="ou-les-classes-ouvertes-en-ruby">Ou les classes ouvertes en Ruby</h2>

<p>``` ruby
1.hour_in_minutes #=&gt; 60</p>

<p>37.celsius_in_farenheit #=&gt; 0</p>

<p>2.dozens #=&gt; 24
```</p>

<p>C’est un aspect du langage que tous les rubyistes confirmés connaissent, mais
il est toujours utile d’en reparler pour les plus novices : En Ruby, même les
classes dites <em>système</em> peuvent être redéfinies, modifiées, augmentées, pliées
à vos besoins.</p>

<p>En un mot, on dit que les classes restent <strong>ouvertes</strong>.</p>

<p><img class="center" src="/images/open-640.jpg"></p>

<!-- more -->

<p>Si je veux par exemple pouvoir transformer les nombres entiers en <em>bytes</em> et en
<em>words</em>, je peux écrire les méthodes <code>to_bytes</code> et <code>to_words</code>.</p>

<blockquote>
  <p>Un byte = un octet  <br />
Un word = deux octets</p>
</blockquote>

<p>Voici ces méthodes simples, définies dans une session irb :</p>

<p>``` irb
» def to_bytes(number)
»   number
» end</p>

<blockquote>
  <blockquote>
    <p>def to_words(number)
  number * 2
end</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>to_bytes(11)
11
to_words(11)
22
```</p>
  </blockquote>
</blockquote>

<p>Ça fonctionne très bien mais 1) ça n’est pas très <em>orienté objet</em>, et 2) ça
n’est pas très <em>ruby</em>. Plutôt que <code>to_words(11)</code>, on écrirait plus volontiers
<code>11.words</code>, c’est quand même plus classe (oh le jeu de mot à deux balles).</p>

<p>En parlant de classe justement, voyons quelle est la classe d’un nombre entier :</p>

<p><code>irb
&gt;&gt; 123.class
Fixnum &lt; Integer
</code></p>

<p>C’est tout ce qu’il nous faut savoir pour <em>augmenter</em> les nombres entiers avec
nos propres méthodes <code>byte</code>, <code>bytes</code>, <code>word</code> et <code>words</code> :</p>

<p>``` ruby
class Fixnum
  def byte
    self
  end
  alias_method :bytes, :byte</p>

<p>def word
    2 * self
  end
  alias_method :words, :word
end
```</p>

<p>Comme vous pouvez le constater, j’ai <em>ouvert</em> la classe Fixnum pour y ajouter
mes méthodes. Je rappelle que <code>self</code> est l’objet courant.</p>

<p>Si vous ne savez pas ce qu’est ce <code>alias_method</code>, dites vous que ceci :</p>

<p><code>ruby
  def word
    2 * self
  end
  alias_method :words, :word
</code></p>

<p>est équivalent à cela :</p>

<p>``` ruby
  def word
    2 * self
  end</p>

<p>def words
    word
  end
```</p>

<p>Et voilà :</p>

<p><code>ruby
1.byte  #=&gt; 1
2.bytes #=&gt; 2
1.word  #=&gt; 2
3.words #=&gt; 6
</code></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Créer plusieurs fichiers en Bash]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/15/creer-plusieurs-fichiers-en-bash/"/>
    <updated>2015-05-15T13:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/15/creer-plusieurs-fichiers-en-bash</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><em>Faire deux fois la même chose, c’est une coincidence ; faire
trois fois la même chose, c’est déjà deux de trop.</em></p>

<p>Mettons que j’ai besoin de créer 20 fichiers quelconques (ici en Ruby) nommés ainsi :</p>

<ul>
  <li><code>asm01.rb</code></li>
  <li><code>asm02.rb</code></li>
  <li><code>asm03.rb</code></li>
  <li>etcétéra jusqu’à <code>asm20.rb</code></li>
</ul>

<!-- more -->

<p>Je peux les créer les uns après les autres de cette manière :</p>

<p><code>bash
$ touch lib/c8dasm/assemblies/asm01.rb
$ touch lib/c8dasm/assemblies/asm02.rb
$ touch lib/c8dasm/assemblies/asm03.rb
$ # même chose jusqu'à :
$ touch lib/c8dasm/assemblies/asm20.rb
</code></p>

<p>Imaginez si vous deviez en faire 200 comme cela ! Et même s’il n’y en avait que
10, c’est juste ennuyeux au possible. En tant que développeurs, <strong>nous devrions
apprendre à automatiser ces tâches pour notre confort</strong>.</p>

<p>On peut utiliser une boucle pour résoudre ce problème :</p>

<p><code>bash
$ for i in {01..20}; do
… &gt; touch lib/c8dasm/assemblies/asm$i.rb
… &gt; done
</code></p>

<p>Ou bien la version sur une seule ligne :</p>

<p><code>bash
$ for i in {01..20}; do touch lib/c8dasm/assemblies/asm$i.rb; done
</code></p>

<p>À bientôt.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment convertir un nombre décimal en binaire en Bash ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash/"/>
    <updated>2015-05-02T12:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/05/02/comment-convertir-un-nombre-decimal-en-binaire-en-bash</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour convertir un nombre décimal en binaire, en Bash, suivez ce tweet :
<a href="https://twitter.com/climagic/status/593842202314420224">https://twitter.com/climagic/status/593842202314420224</a>.</p>

<p>Et voici la conversion du décimal 27 en son équivalent binaire :</p>

<p><code>bash
$ Dec2Bin=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1});echo ${Dec2Bin[27]} 
00011011
</code></p>

<p>Alors, comment ça marche ?</p>

<p><img class="center" src="/images/binary.jpg"></p>

<!-- more -->

<p>Pour commencer, voici comment faire un tableau en bash, qui va contenir les 3
chaînes <code>foo</code>, <code>bar</code>, et <code>baz</code>. Ne soyez pas surpris par le manque de guillemets
autour des chaînes, Bash est fait pour traiter du texte.</p>

<p><code>bash
$ myarray=(foo bar baz)
</code></p>

<p>Et voici comment afficher le contenu de ce tableau.</p>

<p><code>bash
$ echo ${myarray[@]}
foo bar baz
</code></p>

<p>On peut bien sûr accéder aux éléments du tableau séparément :</p>

<p><code>bash
$ echo ${myarray[0]}
foo
$ echo ${myarray[1]}
bar
$ echo ${myarray[2]}
baz
</code></p>

<p>Pour connaître la taille d’un tableau, voici la syntaxe :</p>

<p><code>bash
$ echo ${#myarray[@]}
3
</code></p>

<p>Appliquons ce nouveau savoir au tableau <code>Dec2Bin</code>, qui contient…</p>

<p>…</p>

<p>…des trucs :</p>

<p><code>bash
$ Dec2Bin=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})
</code></p>

<p>Combien a-t-il d’éléments ?</p>

<p><code>bash
$ echo ${#Dec2Bin[@]}
256
</code></p>

<p>256 ? Et ça ressemble à quoi ?</p>

<p><code>bash
$ echo ${Dec2Bin[@]}
00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000 
00001001 00001010 00001011 00001100 00001101 00001110 00001111 00010000 00010001
...
11101010 11101011 11101100 11101101 11101110 11101111 11110000 11110001 11110010 
11110011 11110100 11110101 11110110 11110111 11111000 11111001 11111010 11111011 
11111100 11111101 11111110 11111111
</code></p>

<p>Tranquille, <code>Dec2Bin</code> est un tableau qui contient 256 chaînes représentant les
nombres binaires de 0 à 255.</p>

<p>Les crochets <code>{}</code> créent un <em>range</em> :</p>

<p><code>bash
$ echo {0..1}
0 1
$ echo {a..f}
a b c d e f
</code></p>

<p>Plusieurs crochets <code>{}</code> les uns à la suite des autres produisent toutes les
permutations possibles :</p>

<p><code>bash
$ echo {0..1}{0..1}
00 01 10 11
</code></p>

<p>Et on peut mettre tout ça dans un tableau :</p>

<p><code>bash
$ a=({0..1})
$ echo ${a[@]}
0 1
$ a=({0..1}{0..1})
$ echo ${a[@]}
00 01 10 11
$ a=({0..1}{0..1}{0..1})
$ echo ${a[@]}
000 001 010 011 100 101 110 111
</code></p>

<p>Et voilà, il faut encore savoir qu’ici, le point-virgule sert à joindre 2 lignes de
code en une seule :</p>

<p><code>bash
$ Dec2Bin=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})
$ echo ${Dec2Bin[27]}
00011011
</code></p>

<h2 id="bonus-1---le-mme-en-hexadcimal">Bonus 1 - Le même en hexadécimal</h2>

<p>Et si on voulait convertir un nombre décimal en hexadécimal plutôt qu’en
binaire ? Il faudrait générer toutes les permutations entre deux suites
<code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code> :</p>

<p>
<code>bash
$ echo {{0..9},{A..F}}{{0..9},{A..F}}
00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 
1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 
36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 
51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B 
6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 
87 88 89 8A 8B 8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F A0 A1 
A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC 
BD BE BF C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 
D8 D9 DA DB DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF F0 F1 F2 
F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF
</code>
</p>

<p>
<code>bash
$ Dec2Hex=({{0..9},{A..F}}{{0..9},{A..F}});echo ${Dec2Hex[27]}
1B
</code>
</p>

<h2 id="bonus-2---le-mme-en-ruby">Bonus 2 - Le même en Ruby</h2>

<p>On peut faire la même chose en Ruby en utilisant <code>repeated_permutation</code> :</p>

<p><code>irb
&gt;&gt; [0,1].repeated_permutation(8).to_a.each{|e| puts e.join}
00000000
00000001
00000010
00000011
00000100
00000101
...
11111010
11111011
11111100
11111101
11111110
11111111
</code></p>

<p>Il peut-être intéressant de comparer les deux versions :</p>

<p><code>bash
$ ruby -e "puts [0,1].repeated_permutation(8).to_a[27].join"
00011011
</code></p>

<p><code>bash
$ Dec2Bin=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1});echo ${Dec2Bin[27]} 
00011011
</code></p>

<h2 id="bonus-3---encore-plus-court">Bonus 3 - Encore plus court</h2>

<p>Pour finir, on peut faire plus court avec Bash en utilisant <code>{0,1}</code> au lieu de
<code>{0..1}</code> puisqu’il y a seulement deux éléments :</p>

<p><code>bash
$ Dec2Bin=({0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1});echo ${Dec2Bin[27]} 
00011011
</code></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 réglages pour le langage R]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r/"/>
    <updated>2015-04-23T15:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/04/23/3-reglages-pour-le-langage-r</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Voici trois astuces pour régler/personnaliser le comportement de
l’environnement du langage R, en utilisant des fichiers de configuration.
<em>(Attention, je ne sais absolument pas si ça fonctionne sous Windows.)</em></p>

<h2 id="le-prompt">1) Le prompt</h2>

<p>Pour personnaliser votre prompt dans R, ajoutez les lignes suivantes dans un
fichier <code>~/.Rprofile</code> (créez le pour l’occasion s’il n’existe pas).</p>

<p><code>r ~/.Rprofile
options(prompt = "R&gt; ")
options(continue = "+  ")
</code></p>

<p>Exemple :</p>

<pre><code>R&gt; add2 &lt;- function(n) {
+    n + 2
+  }
R&gt; 
</code></pre>

<!-- more -->

<h2 id="la-largeur-de-la-sortie-console">2) La largeur de la sortie console</h2>

<p>La largeur de la sortie console de R est de 80 caractères. Point barre !
Si votre console est plus large (100, 120, etc) R n’utilisera quand même que
80 caractères. En mettant une petite fonction dans un fichier à part
<code>~/.Rutils</code> (par exemple) et en référençant ce fichier depuis le <code>~/.Rprofile</code>,
on peut avoir quelque chose de <em>presque</em> dynamique.</p>

<p><code>r ~/.Rprofile
if (file.exists("~/.Rutils")) {
  source("~/.Rutils")
}
</code></p>

<p><code>r ~/.Rutils
tryCatch({
  options(width = as.integer(system('tput cols', intern = TRUE)))
}, error = function(err) {
  write("Width set to 80.", stderr());
  options(width = 80)
})
</code></p>

<p>Si vous redimensionnez votre console, il faut sourcer le fichier
(<code>source('~/.Rutils')</code>) pour prendre en compte la nouvelle largeur.</p>

<h2 id="le-dossier-des-bibliothques">3) Le dossier des bibliothèques</h2>

<p>Pour éviter que R vous crée un dossier <code>R</code> dans votre home, définissez vous
même un dossier pour stocker les packages, par exemple <code>~/local/R_libs/</code>.
Ensuite spécifiez le dans votre <code>~/.bashrc</code> :</p>

<p><code>bash
# Custom repo of libraries for R.
export R_LIBS=~/local/R_libs/
</code></p>

<p>Vous connaissez d’autres trucs et astuces pour configurer R ? Dites moi ça dans
un commentaire. À bientôt.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
