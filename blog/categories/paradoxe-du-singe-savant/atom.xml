<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : paradoxe du singe savant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/paradoxe-du-singe-savant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-02-20T21:09:01+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 19]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/"/>
    <updated>2013-09-20T09:31:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Suite et fin de la transformation en code orienté objet de l'algorithme
génétique sur le paradoxe du singe savant.</p>

<!-- more -->


<p>Le rôle de la classe <code>MatingPool</code> est de sélectionner les individus pour
la reproduction, suivant la méthode de la roue de la fortune:</p>

<p>``` ruby
class MatingPool
  def initialize(population)</p>

<pre><code>@mating_pool = []
population.each do |individual|
  integer_part = individual.fitness.to_i
  real_part = individual.fitness - integer_part
  integer_part.times { @mating_pool &lt;&lt; individual.dup }
  @mating_pool &lt;&lt; individual.dup if rand &lt; real_part
end
@size = @mating_pool.size
</code></pre>

<p>  end</p>

<p>  def random</p>

<pre><code>@mating_pool[rand(@size)]
</code></pre>

<p>  end
end
```</p>

<p>Au passage, la méthode <code>random</code> permettra de choisir un parent au hasard.</p>

<p>Les classes <code>Crossover</code> et <code>Mutator</code> s'occupent bien sûr de la partie
reproduction:</p>

<p>``` ruby
class Crossover
  def initialize(chromosome_size, mutation_rate)</p>

<pre><code>@size = chromosome_size
@rate = mutation_rate
@mutator = Mutator.new(@size, @rate)
</code></pre>

<p>  end</p>

<p>  def two_point(parent1, parent2)</p>

<pre><code>child = assemble(parent1, parent2, two_cut_points)
child = @mutator.mutate(child)
Individual.from_chromosome(child)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def two_cut_points</p>

<pre><code>point1 = cut_point
point2 = cut_point
point1, point2 = point2, point1 if point1 &gt; point2
[point1, point2]
</code></pre>

<p>  end</p>

<p>  def cut_point</p>

<pre><code>rand(@size)
</code></pre>

<p>  end</p>

<p>  def assemble(parent1, parent2, points)</p>

<pre><code>point1, point2 = points
parent1.chromosome[0...point1] + parent2.chromosome[point1..point2] +
  parent1.chromosome[point2+1..-1]
</code></pre>

<p>  end
end</p>

<p>class Mutator
  def initialize(chromosome_size, mutation_rate)</p>

<pre><code>@size = chromosome_size
@rate = mutation_rate
</code></pre>

<p>  end</p>

<p>  def mutate(chromosome)</p>

<pre><code>@size.times {|index| chromosome[index] = Gene.random if rand &lt; @rate }
chromosome
</code></pre>

<p>  end
end
```</p>

<p>Le code de ces trois classes reprends plus ou moins le code développé en
style procédural dans les articles précédents et je ne vois pas tellement
ce que je pourrais en dire de plus. Il reste donc à lancer la machine:</p>

<p><code>ruby
generations = 500
search = "Mon royaume pour un cheval"
population = Population.new(search.size, 1000)
mutation = 0.001
GeneticAlgorithm.new(generations, population, search, mutation).run
</code></p>

<p>Voilà, c'est terminé pour le code objet. Quand j'aurais présenter 2 ou 3
algorithmes génétiques de plus, on verra quelles classes résistent et peuvent
être réutilisées et lesquelles doivent être repensées. Ça nous conduira
éventuellement vers la création d'un framework…</p>

<p>À demain</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 18]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/"/>
    <updated>2013-09-19T18:14:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>On continue la transformation en code orienté objet de l'algorithme génétique
sur le paradoxe du singe savant.</p>

<!-- more -->


<p>D'abord la classe <code>Evaluator</code>, dont le rôle est d'évaluer la population:</p>

<p>``` ruby
class Evaluator
  def initialize(search_value, population)</p>

<pre><code>@search_value = search_value
@population = population
</code></pre>

<p>  end</p>

<p>  def evaluate</p>

<pre><code>@population.each {|individual| score(individual) }
fitness
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def score(individual)</p>

<pre><code>score = 0
individual.chromosome.split('').each_with_index do |character, index|
  score += 1 if @search_value[index] == character
end
individual.score = score
</code></pre>

<p>  end</p>

<p>  def fitness</p>

<pre><code>total = @population.inject(0) {|sum, individual| sum + individual.score }
size = @population.size
@population.each do |individual|
  individual.fitness = individual.score.to_f / total * size
end
</code></pre>

<p>  end
end
```</p>

<p>On voit le découpage entre <em>score</em> et <em>fitness</em>, dont on a parlé hier.</p>

<p>Ensuite, voici la classe <code>GeneticAlgorithm</code>:</p>

<p>``` ruby
class GeneticAlgorithm
  def initialize(generations, population, search_value, mutation_rate)</p>

<pre><code>@generations = generations
@population = population
@search_value = search_value
@mutation_rate = mutation_rate
@crossover = Crossover.new(search_value.size, mutation_rate)
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code>@generations.times do |generation|
  Evaluator.new(@search_value, @population).evaluate
  best = @population.best
  display(generation, best)
  exit if best.score == @search_value.size
  next_generation
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def display(generation, best)</p>

<pre><code>puts "----------------------"
puts "Gen: #{generation}"
puts "Best: #{best.chromosome}"
</code></pre>

<p>  end</p>

<p>  def next_generation</p>

<pre><code>pool = MatingPool.new(@population)
population_size = @population.size
@population.clear
population_size.times do
  @population &lt;&lt; @crossover.two_point(pool.random, pool.random)
end
</code></pre>

<p>  end
end
```</p>

<p>La méthode <code>run</code> remplace la fonction principale qu'on avait dans nos
scripts jusqu'ici. En écrivant l'article, je vois que la méthode <code>display</code>
me dérange : elle ne repose sur aucun membre, elle serait donc mieux dans
une classe à part entière.</p>

<p>Voilà, c'est un peu court en explication comme article et je m'en excuse
mais aujourd'hui je suis très préssé. La prochaine fois on parle des classes
<code>MatingPool</code>, <code>Crossover</code> et <code>Mutator</code>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 17: Orienté Objet]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/"/>
    <updated>2013-09-18T10:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Il est temps de donner du code orienté objet, non ? C'est ce à quoi je vais
m'attacher dans cet article et les quelques qui suivront. Après ça, je
pense qu'on pourra en finir avec le paradoxe du singe savant et passer à
quelque chose de plus intéressant.</p>

<!-- more -->


<p>Aujourd'hui on voit la création de la population selon le paradigme OO.
Il nous faut d'abord pouvoir créer un individu:</p>

<p>``` ruby
class Individual
  def self.random(chromosome_size)</p>

<pre><code>new(nil, chromosome_size)
</code></pre>

<p>  end</p>

<p>  def self.from_chromosome(chromosome)</p>

<pre><code>new(chromosome)
</code></pre>

<p>  end</p>

<p>  attr_accessor :score, :fitness
  attr_reader :chromosome</p>

<p>  def initialize(chromosome = nil, chromosome_size = nil)</p>

<pre><code>if chromosome
  @chromosome = chromosome
else
  @chromosome = ""
  chromosome_size.times { @chromosome += Gene.random }
end
</code></pre>

<p>  end
  private_class_method :new
end
```</p>

<p>Il y a deux manières de créer un individu. Lors de l'initialisation de
la population, on utilisera <code>Individual.random</code> avec la taille du chromosome.
Lors d'un accouplement, on utilisera <code>Individual.from_chromosome</code> avec le
chromosome résultant des parents. On note aussi les deux attributs <code>score</code>
et <code>fitness</code>. Je ne vais pas m'étaler sur le <code>score</code>, 1 point par lettre
bien placée, voilà, vous avez compris. Par contre <code>fitness</code> demande
quelques explications puisque c'est la première fois que j'emploie ce terme,
pourtant courant en algorithme génétique.</p>

<p><em>Fitness</em> signifie aptitude. Quand le score mesure la performance d'un
individu face à un problème, le <em>fitness</em> mesure un individu par rapport
à son environnement, c'est à dire ici par rapport à la population. Il n'y
a rien de nouveau, on a déjà fait ça quand on normalisait les scores et
qu'on les transformaient en pourcentage (ou en fraction). Jusqu'ici
j'étais resté vague en parlant seulement d'évaluation et je profite du
code d'aujourd'hui pour introduire cette notion de <em>fitness</em>.</p>

<p>La production d'un gène est assurée par la classe <code>Gene</code>, qui ne demande
pas d'explications:</p>

<p>``` ruby
class Gene
  @@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;</p>

<p>  def self.random</p>

<pre><code>@@genes[rand(@@genes.size)]
</code></pre>

<p>  end
end
```</p>

<p>Il reste à concevoir la population:</p>

<p>``` ruby
class Population &lt; Array
  def initialize(chromosome_size, population_size)</p>

<pre><code>population_size.times { self &lt;&lt; Individual.random(chromosome_size) }
</code></pre>

<p>  end</p>

<p>  def best</p>

<pre><code>self.sort_by{|individual| individual.score}.last
</code></pre>

<p>  end
end
```</p>

<p>La population étant basiquement une liste d'objets <code>Individual</code>, il me
semble logique d'hériter de <code>Array</code>. J'ai prévu une méthode <code>best</code> qui
permettra d'afficher la progression de l'algorithme et qui pourra aussi
servir pour la condition d'arrêt du programme quand <code>individual.score</code>
sera égal à la taille de la chaîne recherchée.</p>

<p>Demain ce sera au tour de l'évaluation d'être transformée en code objet.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 16: Le Hill-Climbing]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing/"/>
    <updated>2013-09-17T10:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>J'aime les algorithmes génétiques. Je les trouvent fascinants. Mais je ne
voudrais pas laisser croire qu'ils sont toujours <em>la</em> solution.
Aujourd'hui je parle de l'algorithme <em>Hill-Climbing</em>, qu'on peut considérer
comme un algorithme génétique dégénéré.</p>

<!-- more -->


<h2>Hill-Climbing</h2>

<p>Pourquoi dégénéré ? Parce que le <em>Hill-Climbing</em> est essentiellement un
algorithme génétique sans population et sans croisement… Le principe est
très simple: on produit une solution au hasard, puis on mute cette solution
en espérant qu'elle soit meilleure que la précédente. Dit comme ça, cela
semble un peu aventureux. Mais parfois, suivant le problème posé, ça
fonctionne vraiment bien. Gardons le thème des articles précédents,
c'est à dire le paradoxe du singe savant. On cherche toujours la même phrase,
à savoir «Mon royaume pour un cheval». C'est parti pour le code.</p>

<h3>Le code</h3>

<p>``` ruby
def make_chromosome
  value = &ldquo;&rdquo;
  length = @search_value.size
  length.times { value += random_gene }
  value
end</p>

<p>def random_gene
  @genes[rand(@genes.size)]
end</p>

<p>def mutate(phrase)
  index = rand(@search_value.size)
  phrase[index] = random_gene
  phrase
end</p>

<p>def quality(phrase)
  score = 0
  phrase.split(&lsquo;&rsquo;).each_with_index do |character, index|</p>

<pre><code>score += 1 if @search_value[index] == character
</code></pre>

<p>  end
  score
end</p>

<p>@search_value = &ldquo;Mon royaume pour un cheval&rdquo;
@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;
@solution = make_chromosome
@generation = 0
```</p>

<p>On a besoin de produire une phrase au hasard, que je continue à appeler
<em>chromosome</em>, et c'est la méthode <code>make_chromosome</code> qui s'en charge.
On a besoin de modifier une phrase, je continue à dire <em>muter</em>, et c'est
bien sûre le rôle de <code>mutate</code>. Enfin, on doit pouvoir évaluer la qualité
d'une phrase, avec <code>quality</code>. Rien de vraiment nouveau sous le soleil, ça
ressemble furieusement au code développé pour l'algorithme génétique
précédent.
On peut noter avec intérêt la ligne <code>@solution = make_chromosome</code>. Ici, on
ne parle pas d'individus puisqu'il n'y a pas de population.</p>

<p>Et maintenant le <em>Hill-Climbing</em> proprement dit. Attention les yeux, ça va
être rapide:</p>

<p>``` ruby</p>

<h1>Hill-Climbing</h1>

<p>until @solution == @search_value do
  opponent = mutate(@solution.dup)
  @solution = opponent if quality(opponent) > quality(@solution)
  puts &ldquo;Gen: #{@generation} #{@solution}&rdquo;
  @generation += 1
end
```</p>

<p>Et voilà. Pas de population, pas de reproduction, pas de <em>mating pool</em>. Juste
une mutation et une comparaison de qualité. Mais est-ce que ça fonctionne ?</p>

<pre><code>[~/genetic]⇒ time ruby monkey_hill.rb
Gen: 0    CwAEKaVBHW nTVWIsvhnwODtaL
...
Gen: 449  CwAEKoVaHW  TouI vh wODtal
...
Gen: 1446 Mnn royaiueUpoustun chFvml
...
Gen: 4652 Mon royaume popr un cheval
Gen: 4653 Mon royaume pour un cheval

real  0m0.598s
user  0m0.572s
sys   0m0.024s
</code></pre>

<p>Un grand nombre de générations par rapport à l'algorithme génétique mais
un temps de calcul bien plus court (pour ce problème particulier).</p>

<h3>Moralité</h3>

<p>Avant de se jeter dans l'écriture d'un algorithme génétique, il est
intéressant d'écrire d'abord un <em>Hill-Climbing</em>. Parfois on n'a pas
besoin de plus, parfois ça permet de valider la fonction d'évaluation.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 15: croisement uniforme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/16/les-algorithmes-genetiques-demystifies-15-croisement-uniforme/"/>
    <updated>2013-09-16T13:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/16/les-algorithmes-genetiques-demystifies-15-croisement-uniforme</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après le croisement en un point et le croisement en deux points, on
discute aujourd'hui d'une troisième méthode: le croisement uniforme.</p>

<!-- more -->


<h2>Croisement uniforme (uniform crossover)</h2>

<p>Pourquoi s'arrêter au croisement en deux points ? Pourquoi pas trois points ?
Ou encore quatre ? Si on pousse cette démarche, on arrive au croisement
uniforme. Le principe est le suivant: on prend deux parents, A et B ; pour
chaque gènes on lance une pièce de monnaie ; si c'est face l'enfant prend
le gène du parent A ; si c'est pile l'enfant prend le gène du parent B.</p>

<p>`&ldquo; ruby
def uniform_crossover(parent1, parent2)
  child = &ldquo;&rdquo;
  parent1.last.split(&rdquo;).each_with_index do |bit, index|</p>

<pre><code>if 0.5 &gt;= rand
  child += parent2.last[index]
else
  child += parent1.last[index]
end
</code></pre>

<p>  end
  [nil, mutate(child)]
end
```</p>

<p>Alors voyons les performances pour un nombre d'individus égal et un taux de
mutation égal:</p>

<pre><code>=================================================
| méthode de croisement | génération | secondes |
=================================================
| un point              |         81 |        5 |
|-----------------------------------------------|
| deux points           |         54 |        3 |
|-----------------------------------------------|
| uniforme              |         47 |        6 |
|-----------------------------------------------|
</code></pre>

<p>Le nombre de générations nécéssaires pour trouver la solution diminue
significativement mais en même temps le nombre de secondes a doublé
par rapport au croisement en deux points. Est-ce qu'il faut jetter la
méthode du croisement uniforme aux oubliettes ? Je ne pense pas. On peut
imaginer que si le croisement uniforme prends 2 fois plus de temps que
le croisement en deux points, c'est parce que celle-ci (croisement uniforme)
génère un nombre aléatoire pour chaque gènes. Si la méthode d'évaluation
était plus gourmande en temps de calcul, les quelques générations gagnées
par le croisement uniforme s'avéreraient payantes.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
