<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : github | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-02-26T12:21:58+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hub - Git plus facile avec Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github/"/>
    <updated>2014-05-20T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd’hui j’ai découvert <a href="http://hub.github.com/">Hub</a>.
Un programme (en Ruby) qui étend les fonctionnalités de Git en ligne de
commande quand on travaille avec un dépot Github. Je n’est pas encore
eu le temps de le tester, ni même de l’installer, mais je voulais tout
de même vous en parler au cas où, comme moi, vous seriez passé à coté.</p>

<!-- more -->

<p>Ne l’ayant pas tester, je me contente de paraphraser la page d’acceuil
pour vous donner l’eau à la bouche ;)</p>

<p>Pour cloner un de vos propre projet, il suffit de:</p>

<pre><code>git clone projet
</code></pre>

<p>Si le projet ne vous appartient pas, il faut faire:</p>

<pre><code>git clone github/projet
</code></pre>

<p>Rien que ça, c’est déjà sympathique. Mais je suis impatient d’essayer la
commande suivante:</p>

<pre><code>git pull-request
</code></pre>

<p>Il y plusieurs autres commandes avec lesquelles j’ai hâte de m’amuser.
Si vous avez déjà utiliser Hub, dites moi donc ce que vous en pensez.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourcentage des issues par langages sur Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github/"/>
    <updated>2013-11-23T20:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/23/pourcentage-des-issues-par-langages-sur-github</id>
    <content type="html"><![CDATA[<p>Sur hubReports, on peut avoir plusieurs statistiques concernants les dépots de
code et les utilisateurs de GitHub.
<a href="http://hubreports.yougeezer.co.uk/languages">Cette page</a> montre par exemple
le nombre de dépots et d’issues actives par langages.</p>

<p>Voici les 21 premiers langages (ceux qui ont plus de 10 000 dépots),
triés par nombre de dépots:</p>

<!-- more -->

<pre><code>Rank  Language      Repos    Issues
1     JavaScript    559,445  342,695
2     Ruby          465,960  147,376
3     Java          387,956  161,071
4     Python        281,468  184,744
5     PHP           275,014  149,927
6     C             147,403  64,353 
7     C++           142,090  71,020 
8     C#            94,122   42,112 
9     Objective-C   89,588   36,593 
10    Shell         82,228   21,300 
11    Perl          69,301   20,146 
12    VimL          40,771   6,281  
13    Scala         21,889   11,542 
14    CoffeeScript  20,668   13,930 
15    Haskell       18,171   7,825  
16    Go            17,890   7,378  
17    EmacsLisp     15,671   4,553  
18    Clojure       14,729   5,933  
19    Lua           13,667   5,896  
20    ActionScript  12,221   5,533  
21    R             10,117   4,504  
</code></pre>

<p>En voyant ça, je me suis demandé quel était le pourcentage d’issues par
rapport au nombre de dépots. Le voici dans la liste qui suit. Cette fois
la liste est triée sur le dernier champ:</p>

<pre><code>Rank  Language      Repos    Issues   % Issues/Repos
12    VimL          40,771   6,281    15
10    Shell         82,228   21,300   25
17    EmacsLisp     15,671   4,553    26
11    Perl          69,301   20,146   28
2     Ruby          465,960  147,376  31
18    Clojure       14,729   5,933    35
15    Haskell       18,171   7,825    38
19    Lua           13,667   5,896    38
21    R             10,117   4,504    40
9     Objective-C   89,588   36,593   40
16    Go            17,890   7,378    41
20    ActionScript  12,221   5,533    41
3     Java          387,956  161,071  41
6     C             147,403  64,353   43
8     C#            94,122   42,112   44
7     C++           142,090  71,020   50
13    Scala         21,889   11,542   52
5     PHP           275,014  149,927  54
1     JavaScript    559,445  342,695  61
14    CoffeeScript  20,668   13,930   65
4     Python        281,468  184,744  65
</code></pre>

<p>Alors je n’en tire aucunes conclusions puisque ce rapport n’est pas
très <em>scientifique</em>. Mais c’est toutefois marrant de voir VimL et Perl
parmi les bons élèves (selon ce critère bien sûr) et de voir CoffeeScript
et Python en queue de peloton (toujours selon ce critère évidement).</p>

<p>Est-ce que ça vous interpèle ?</p>

<p>Demain je montrerais comment je suis passé d’une liste à l’autre à l’aide
de Vim.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
