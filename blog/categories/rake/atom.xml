<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : rake | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/rake/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-03-29T15:51:05+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Affichage de toutes les tâches rake]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake/"/>
    <updated>2014-06-25T20:54:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/25/affichage-de-toutes-les-taches-rake</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Hier je parlais des switchs <code>-T</code> et <code>-D</code> de l’executable <code>rake</code> pour
obtenir la liste des tâches, respectivement tronquées ou détaillées.</p>

<p>Aujourd’hui, pour ceux qui aurait la flemme de lire la sortie de
<code>rake --help</code>, c’est comment les obtenir <strong>toutes</strong>, car il y en a souvent
plus que l’on croit ;)</p>

<!-- more -->

<p>En effet, les switchs <code>-T</code> et <code>-D</code> n’affichent que les tâches possédant
une description. Et quand on débarque sur un projet Rails, ou Ruby, il
n’est pas rare qu’une petite armée de développeurs soient passés avant
vous en ajoutant plusieurs tâches bien utiles, mais sans description.</p>

<p>Pour en avoir la liste sans avoir à lire les nombreux fichiers <code>*.rake</code>,
il vous suffit d’utiliser le switch <code>--all</code>:</p>

<pre><code>$ rake --all -T
</code></pre>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Description détaillée des tâches rake]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake/"/>
    <updated>2014-06-24T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/24/description-detaillee-des-taches-rake</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vous savez certainement comment obtenir la liste des tâches <code>rake</code> disponibles
dans votre projet Rails ou dans votre gem Ruby. Il faut utiliser le switch
<code>-T</code>. Par exemple, à partir d’un projet Rails bidon:</p>

<pre><code>$ rake -T
rake about                              # List versions of all Rails framew...
rake assets:clean[keep]                 # Remove old compiled assets
rake assets:clobber                     # Remove compiled assets
rake assets:environment                 # Load asset compile environment
rake assets:precompile                  # Compile all the assets named in c...
rake cache_digests:dependencies         # Lookup first-level dependencies f...
rake cache_digests:nested_dependencies  # Lookup nested dependencies for TE...
rake db:create                          # Creates the database from DATABAS...
rake db:drop                            # Drops the database from DATABASE_...
</code></pre>

<!-- more -->

<p>Et il y en a quelques dizaines d’autres. Vous remarquez que certaines descriptions sont
tronquées, comme <code># Compile all the assets named in c...</code>. Lorsqu’il s’agit d’une
tâche qu’on ne connait pas très bien, on aimerait pouvoir lire la description
complête. Pour cela, il faut utiliser le switch <code>-D</code>:</p>

<pre><code>$ rake -D
rake about
    List versions of all Rails frameworks and the environment

rake assets:clean[keep]
    Remove old compiled assets

rake assets:clobber
    Remove compiled assets

rake assets:environment
    Load asset compile environment

rake assets:precompile
    Compile all the assets named in config.assets.precompile

rake cache_digests:dependencies
    Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)
</code></pre>

<p>Pour en savoir plus sur les switchs de rake, tapez <code>rake --help</code>.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trois-centième article aujourd'hui !]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/03/trois-centieme-article-aujourdhui-slash/"/>
    <updated>2014-05-03T21:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/03/trois-centieme-article-aujourdhui-slash</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd’hui c’est le 300ème article de ce blog ! Voilà 300 jours que je
pond un article au quotidien. J’en reviens pas !</p>

<!-- more -->

<p>Encore 65 et j’aurais réussi le défi que je m’étais fixé il y a 300 jours:
écrire un article par jour pendant un an.</p>

<p>Bref, le contenu du jour sera : le fichier <code>.yardopts</code>. Qu’est-ce que c’est
encore que ça ?</p>

<p>Pour générer une documentation de vos gems Ruby avec
<a href="http://yardoc.org/">Yard</a> vous écrivez peut-être comme moi une tâche Rake dans ce genre:</p>

<p><code>ruby
desc 'Create documentation'
task :doc do
  exec 'yardoc --title "Titre de la doc"'
end
</code></p>

<p>Là j’ai mis une seule option, mais on en a souvent d’autres, plus des fichiers
à inclure (comme la licence, le changelog, etc).</p>

<p>Et bien j’ai appris aujourd’hui que ces options pouvaient être mises dans
un fichier <code>.yardopts</code>. En reprenant l’exemple précédant, cela deviendrait:</p>

<p><code>raw .yardopts
--title "Titre de la doc"
</code></p>

<p><code>ruby
desc 'Create documentation'
task :doc do
  exec 'yardoc'
end
</code></p>

<p>Non seulement ça évite de surcharger la tâche rake avec des informations
inutiles, mais surtout, ça permet à des service externes comme
<a href="http://www.rubydoc.info/">RubyDoc</a> de savoir exactement ce que vous voulez.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
