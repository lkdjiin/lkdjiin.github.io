<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : rspec | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2017-01-25T11:43:21+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Comportement inattendu de Rspec]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec/"/>
    <updated>2015-06-30T15:37:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/06/30/comportement-inattendu-de-rspec</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je suis tombé aujourd’hui sur un comportement inattendu de Rspec.
Je ne dis pas que le comportement est mauvais, seulement je m’attendais à
autre chose qui me semble plus logique. Quoiqu’il en soit, je partage mes
réflexions avec vous.</p>

<!-- more -->

<p>J’utilise beaucoup Rspec que j’aime bien. Pourtant je connais assez mal sa
mécanique interne. Un pattern dont je me sers de temps
en temps est de définir des méthodes helper dans le fichier de test :</p>

<p>``` ruby spec/thing1_spec.rb
require ‘spec_helper’</p>

<p>describe Thing1 do</p>

<p>it “returns ‘foo’” do
    expect(Thing1.new.get).to eq result
  end</p>

<p>end</p>

<p>def result
  ‘foo’
end
```</p>

<p>Avec <code>Thing1</code> défini ainsi :</p>

<p><code>ruby thing1.rb
class Thing1
  def get
    'foo'
  end
end
</code></p>

<p>Ça marche très bien :</p>

<pre><code>$ rspec -I. spec/thing1_spec.rb 
.

Finished in 0.00184 seconds (files took 0.23569 seconds to load)
1 example, 0 failures
</code></pre>

<p>Là où ça devient problématique, c’est si j’utilise le même nom de méthode helper
dans un autre fichier de test :</p>

<p>``` ruby spec/thing2_spec.rb
require ‘spec_helper’</p>

<p>describe Thing2 do</p>

<p>it “returns ‘bar’” do
    expect(Thing2.new.get).to eq result
  end</p>

<p>end</p>

<p>def result
  ‘bar’
end
```</p>

<p>Avec <code>Thing2</code> comme ceci :</p>

<p><code>ruby thing2.rb
class Thing2
  def get
    'bar'
  end
end
</code></p>

<p>Dans ce cas un test échoue :</p>

<pre><code>$ rspec -I.
F.

Failures:

  1) Thing1 returns 'foo'
     Failure/Error: expect(Thing1.new.get).to eq result
       
       expected: "bar"
            got: "foo"
       
       (compared using ==)
     # ./spec/thing1_spec.rb:6:in `block (2 levels) in &lt;top (required)&gt;'

Finished in 0.00232 seconds (files took 0.21784 seconds to load)
2 examples, 1 failure

Failed examples:

rspec ./spec/thing1_spec.rb:5 # Thing1 returns 'foo'
</code></pre>

<p>J’ai tenté de les jouer de différentes manières : seulement l’un, puis
seulement l’autre, Thing1 puis Thing2, Thing2 puis Thing1, pour voir…</p>

<p>J’en arrive à la conclusion que Rspec charge tous les fichiers de test avant de
démarrer un test. Comme Ruby est dynamique, c’est la dernière méthode <code>result</code> chargée qui, en quelque sorte, à raison.</p>

<p>La solution est donc simple, il faut <em>rentrer</em> les méthodes helper dans le
bloc <code>describe</code> :</p>

<p>``` ruby
require ‘spec_helper’</p>

<p>describe Thing1 do</p>

<p>it “returns ‘foo’” do
    expect(Thing1.new.get).to eq result
  end</p>

<p>def result
    ‘foo’
  end</p>

<p>end
```</p>

<p>Maintenant les deux tests fonctionnent comme attendu :</p>

<pre><code>$ rspec -I.
..

Finished in 0.00283 seconds (files took 0.21533 seconds to load)
2 examples, 0 failures
</code></pre>

<p><strong>Je m’attendais à ce que les différents fichiers de test soient joués en
isolation totale</strong>, sans connexion si mince soit elle avec d’autres fichiers.
Manifestement c’est pas le cas.</p>

<p>Pour être exhaustif voici le contenu du <em>spec helper</em> :</p>

<p><code>ruby spec/spec_helper.rb
require 'thing1'
require 'thing2'
</code></p>

<p>Et voici les fichiers :</p>

<pre><code>$ \tree
.
|-- spec
|   |-- spec_helper.rb
|   |-- thing1_spec.rb
|   `-- thing2_spec.rb
|-- thing1.rb
`-- thing2.rb
</code></pre>

<p>Si vous avez un avis sur la question il m’intéresse beaucoup, n’hésitez donc pas à laisser un
commentaire.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 avec Spring, Rspec ou Minitest et Coco]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/21/rails-4-dot-1-avec-spring-rspec-ou-minitest-et-coco/"/>
    <updated>2014-04-21T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/21/rails-4-dot-1-avec-spring-rspec-ou-minitest-et-coco</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Rails 4.1 est sorti récemment. Une des nouveautés est qu’il est livré avec
<a href="https://github.com/rails/spring">Spring</a>, qui permet d’accélerer le
développement en gardant, en quelque sorte, l’application rails en mémoire.
Voici, très rapidement, comment configurer Rails 4.1 avec soit Rspec, soit
Minitest comme framework de test, et <a href="https://github.com/lkdjiin/coco">Coco</a> comme outil de <em>code coverage</em>.</p>

<!-- more -->

<p>Tout d’abord, l’installation de la dernière version de rails:</p>

<pre><code>gem install rails
</code></pre>

<p>Puis la création d’une application de test:</p>

<pre><code>rails new testappli -T
</code></pre>

<p>Ensuite, si vous utiliser <strong>Rspec</strong>, le Gemfile:</p>

<p>``` ruby Gemfile
group :development, :test do
  gem ‘spring-commands-rspec’
  gem ‘rspec-rails’
end</p>

<p>group :test do
  gem ‘coco’
end
```</p>

<p>L’installation des gems:</p>

<pre><code>bundle install
</code></pre>

<p>L’installation de rspec:</p>

<pre><code>rails g rspec:install
</code></pre>

<p>La création de <code>bin/rspec</code>:</p>

<pre><code>spring binstub --all
</code></pre>

<p>La mise en place de Coco dans le fichier <code>spec/spec_helper.rb</code>:</p>

<p><code>ruby spec/spec_helper.rb
# Toute dernière ligne (ou bien toute première, au choix)
require 'coco'
</code></p>

<p>Finalement vous pouvez lancer les tests ainsi:</p>

<pre><code>bin/rspec
</code></pre>

<p>Si, au contraire, vous avez choisi <strong>Minitest</strong>, vous ajouterez ceci dans votre Gemfile:</p>

<p>``` ruby Gemfile
group :development, :test do
  gem ‘minitest-rails’, ‘2.0.0.beta1’
end</p>

<p>group :test do
  gem ‘coco’
end
```</p>

<p>Ensuite, l’installation:</p>

<pre><code>bundle install
rails g minitest:install 
</code></pre>

<p>La mise en place de Coco dans le fichier <code>test/test_helper.rb</code>:</p>

<p><code>ruby spec/spec_helper.rb
# Toute dernière ligne (ou bien toute première, au choix)
require 'coco'
</code></p>

<p>Finalement vous pouvez lancer les tests ainsi:</p>

<pre><code>bin/rake
</code></pre>

<p>Ou bien:</p>

<pre><code>bin/rake test
</code></pre>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques trucs pour lancer Rspec]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec/"/>
    <updated>2014-03-20T21:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/20/quelques-trucs-pour-lancer-rspec</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><a href="http://rspec.info/">Rspec</a> est un framework de test très utilisé dans le monde Ruby.
Il y a bien des manières différentes de le lancer et aujourd’hui on
voit quelques options basiques qu’on peut utiliser tous les jours.</p>

<!-- more -->

<p>Tout d’abord, on peut lancer Rspec avec ses options par défaut:</p>

<pre><code>$ rspec spec/
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>À noter que le programme repose, comme souvent dans l’éco-système Ruby,
sur certaines conventions. Si le répertoire qui comporte vos tests est
nommé <code>spec</code>, vous pouvez vous contentez de:</p>

<pre><code>$ rspec
.................................................................
Finished in 0.25958 seconds
65 examples, 0 failures
</code></pre>

<p>Parfois, on a envie de voir le nom des tests, plutôt que des petits points:</p>

<pre><code>$ rspec --format=documentation spec/
Coco::Configuration
  should respond to #user_wants_to_run?
  with no config file
    should give a default threshold of 100%
    should give a default list of directories
    should give an empty default list of files to excludes
    should give false for 'single_line_report'
    #user_wants_to_run? returns true
    give false for 'show_link_in_terminal'
[...]
Finished in 0.08854 seconds
65 examples, 0 failures
</code></pre>

<p>Nos tests doivent fonctionner en isolation, le résultat doit être le même
quel que soit l’ordre:</p>

<pre><code>$ rspec --order=random spec/
.................................................................
Finished in 0.08785 seconds
65 examples, 0 failures
Randomized with seed 8689
</code></pre>

<p>Vous pouvez mettre ses options, et d’autres, dans un fichier <code>.rspec</code> à la
racine de votre projet pour qu’elles deviennent les options par défaut.
Par exemple, le fichier suivant vous donnera une sortie en couleur et des
tests joués aléatoirement à chaque lancement de <code>rspec</code>:</p>

<p><code>raw .rspec
--color
--order=random
</code></p>

<p>Pour lancer les tests d’un seul fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb 
.......................
Finished in 0.03708 seconds
23 examples, 0 failures
</code></pre>

<p>Pour lancer un seul test, ajouter le numéro de la ligne derrière le nom du
fichier:</p>

<pre><code>$ rspec spec/configuration_spec.rb:41
Run options: include {:locations=&gt;{"./spec/configuration_spec.rb"=&gt;[41]}}
Coco::Configuration
  with no config file
    #user_wants_to_run? returns true
Finished in 0.00333 seconds
1 example, 0 failures
</code></pre>

<p>Pour terminer ce <em>Rspec basics</em>, on peut désactiver un test en écrivant <code>xit</code>
à la place de <code>it</code>:</p>

<p><code>ruby
    xit "should give a default threshold of 100%" do
      @config[:threshold].should == 100
    end
</code></p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
