<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : minitest | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/minitest/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-02-13T18:15:09+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 avec Spring, Rspec ou Minitest et Coco]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/21/rails-4-dot-1-avec-spring-rspec-ou-minitest-et-coco/"/>
    <updated>2014-04-21T21:15:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/21/rails-4-dot-1-avec-spring-rspec-ou-minitest-et-coco</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Rails 4.1 est sorti récemment. Une des nouveautés est qu’il est livré avec
<a href="https://github.com/rails/spring">Spring</a>, qui permet d’accélerer le
développement en gardant, en quelque sorte, l’application rails en mémoire.
Voici, très rapidement, comment configurer Rails 4.1 avec soit Rspec, soit
Minitest comme framework de test, et <a href="https://github.com/lkdjiin/coco">Coco</a> comme outil de <em>code coverage</em>.</p>

<!-- more -->

<p>Tout d’abord, l’installation de la dernière version de rails:</p>

<pre><code>gem install rails
</code></pre>

<p>Puis la création d’une application de test:</p>

<pre><code>rails new testappli -T
</code></pre>

<p>Ensuite, si vous utiliser <strong>Rspec</strong>, le Gemfile:</p>

<p>``` ruby Gemfile
group :development, :test do
  gem ‘spring-commands-rspec’
  gem ‘rspec-rails’
end</p>

<p>group :test do
  gem ‘coco’
end
```</p>

<p>L’installation des gems:</p>

<pre><code>bundle install
</code></pre>

<p>L’installation de rspec:</p>

<pre><code>rails g rspec:install
</code></pre>

<p>La création de <code>bin/rspec</code>:</p>

<pre><code>spring binstub --all
</code></pre>

<p>La mise en place de Coco dans le fichier <code>spec/spec_helper.rb</code>:</p>

<p><code>ruby spec/spec_helper.rb
# Toute dernière ligne (ou bien toute première, au choix)
require 'coco'
</code></p>

<p>Finalement vous pouvez lancer les tests ainsi:</p>

<pre><code>bin/rspec
</code></pre>

<p>Si, au contraire, vous avez choisi <strong>Minitest</strong>, vous ajouterez ceci dans votre Gemfile:</p>

<p>``` ruby Gemfile
group :development, :test do
  gem ‘minitest-rails’, ‘2.0.0.beta1’
end</p>

<p>group :test do
  gem ‘coco’
end
```</p>

<p>Ensuite, l’installation:</p>

<pre><code>bundle install
rails g minitest:install 
</code></pre>

<p>La mise en place de Coco dans le fichier <code>test/test_helper.rb</code>:</p>

<p><code>ruby spec/spec_helper.rb
# Toute dernière ligne (ou bien toute première, au choix)
require 'coco'
</code></p>

<p>Finalement vous pouvez lancer les tests ainsi:</p>

<pre><code>bin/rake
</code></pre>

<p>Ou bien:</p>

<pre><code>bin/rake test
</code></pre>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
