<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : annonce | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/annonce/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-28T16:19:55+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Couverture de code pour Ruby avec coco]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/"/>
    <updated>2013-10-26T18:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco</id>
    <content type="html"><![CDATA[<p>Il y a 3 ans, j'ai écrit une gem Ruby pour faire de la couverture de
code (<em>code coverage</em>). <a href="https://github.com/colszowka/simplecov">SimpleCov</a>,
la gem la plus utilisée pour cette tâche venait tout juste de voir le
jour et ne me convenait pas entièrement. À l'époque je trouvais SimpleCov
trop ennuyeuse à configurer et à faire fonctionner.</p>

<!-- more -->


<p>Qu'on ne me fasse pas dire ce que je n'ai pas écrit : SimpleCov remplie
<em>parfaitement</em> sa tâche. C'est juste que je voulais un truc plus simple.
Je voulais quelque chose qui fonctionne en une ligne, avec configuration
optionnelle et surtout, avec un rapport de couverture
super simple et dépouillé. C'est comme ça qu'est née la gem
<a href="https://github.com/lkdjiin/coco">coco</a>. Bon ok, il m'est arrivé de me
demander si je ne l'avais pas écrit juste pour le jeu de mot…</p>

<p>Pour utiliser coco, il suffit de charger la gem au tout début des tests
comme ceci:</p>

<p><code>ruby
require 'coco'
</code></p>

<p>Et… c'est tout ! Chaque fois que vous lancerez les tests, coco produira un
rapport si (et seulement si) au moins un fichier n'est pas couvert à 100%.</p>

<p>La configuration, au besoin, se fait dans un fichier caché au format yaml,
à la racine du projet. Par exemple si vous trouvez qu'un taux de couverture
de 90% est acceptable, vous pouvez le changer comme ça:</p>

<pre><code>:threshold: 90
</code></pre>

<p>Si vous voulez exclure un fichier et un dossier complet du rapport vous
pouvez écrire:</p>

<pre><code>:excludes:
- lib/project/file1.rb
- config/initializers
</code></pre>

<p>Il y a plusieurs autres exemples de configuration sur le
<a href="https://github.com/lkdjiin/coco/wiki">wiki du projet</a>. Enfin, pour une
présentation rapide de coco, en anglais, il y a le
<a href="http://lkdjiin.github.io/coco/">site web</a>.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une tonne de livres sur la programmation]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/24/une-tonne-de-livres-sur-la-programmation/"/>
    <updated>2013-10-24T10:22:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/24/une-tonne-de-livres-sur-la-programmation</id>
    <content type="html"><![CDATA[<p>Une super initiative de <a href="https://github.com/vhf">vhf</a> sur Github: une
longue, longue, très longue liste de livres sur le développement,
certains libres, tous gratuits.</p>

<!-- more -->


<p>Ils y a plusieurs listes de livres, selon les langues.
Vous trouverez la liste en anglais ici: <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md">free-programming-books</a>.
Et la liste en français ici: <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-fr.md">free-programming-books-fr</a>.</p>

<p>Comme les listes sont sur Github, vous pouvez très facilement ajouter un
nouveau livre, rectifier un lien, etc.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un article par jour pendant un an: Bilan des 100 jours]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/15/un-article-par-jour-pendant-un-an-bilan-des-100-jours/"/>
    <updated>2013-10-15T11:37:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/15/un-article-par-jour-pendant-un-an-bilan-des-100-jours</id>
    <content type="html"><![CDATA[<p>Comme certains d'entre vous le savent, j'écris un article par jour pendant
un an. Et aujourd'hui c'est le 100ème jour !
Déjà 100 articles, ou bien seulement 100 articles, ça dépend du moment.
Quoiqu'il en soit, c'est un jour parfait pour un petit bilan.</p>

<!-- more -->


<p>Pendant cette période de 100 jours, 3780 visiteurs uniques
ont vus plus de 20.000 pages. Ce sont des chiffres extraordinaires pour
moi: en débutant cette aventure je ne comptais absolument pas être lu,
j'osais à peine envisager 3 ou 4 visites par jour. Bref, je suis
un bloggeur heureux !</p>

<p>Pour ce qui est des statistiques navigateur/OS, voici le top 3 dans
chaque catégorie, au cas ou quelqu'un serait intéressé:</p>

<pre><code>Chrome    52%
Firefox   36%
Safari     8%

Windows   39%
Linux     26%
Macintosh 23%
</code></pre>

<p>Et maintenant le top/flop. L'article le plus lu est
<a href="/blog/2013/08/28/les-algorithmes-genetiques-demystifies/">les algorithmes génétiques démystifiés</a>,
avec 984 vues. Je ne pensais vraiment pas intéresser beaucoup de monde avec
ça. Ce fut une très agréable surprise, étant donné que ce sujet me tient
particulièrement à coeur.</p>

<p>Quand à l'article le moins lu c'est <a href="/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/">Implémenter un langage sur Parrot: la grammaire</a>
avec 22 petites vues. C'est d'ailleurs toute la série sur Parrot qui a fait
flop. En relisant ces articles, je m'aperçois qu'ils sont mal conçus et mal
écrits. J'essaierais donc de faire mieux pour les 260 et quelques jours qui
viennent ;&ndash;)</p>

<p>Merci de me lire,<br/>
À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nouveau défi: un article par jour pendant un an]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/08/nouveau-defi-un-article-par-jour-pendant-un-an/"/>
    <updated>2013-07-08T17:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/08/nouveau-defi-un-article-par-jour-pendant-un-an</id>
    <content type="html"><![CDATA[<p>À partir d'aujourd'hui, et ce pendant une année, je vais écrire un article
par jour. J'écrirais sur le développement informatique en général, et
certainement plutôt sur les sujets qui me touchent particulièrement, à savoir :
<strong>Ruby, Rails, Vim</strong>, le TDD, etc.
Mais j'espère bien développer un tas d'autres sujets,
dont je n'ai encore pas la moindre idée et que peut-être, je découvrirais
en même temps que vous.</p>

<!-- more -->


<h2>Pourquoi faire un truc pareil ?</h2>

<p>D'abord parce que je trouve ça intéressant en soi. Ensuite parce que
j'ai plusieurs projets en démarrage dans ma vie professionnelle,
et je pense que le plus compliqué pour moi va être la constance. Tenir bon
coûte que coûte. Aller au bout même quand on commence à douter.<br/>
Et je crois qu'écrire un article par jour sur ce blog peut m'aider de
plusieurs manières :</p>

<ol>
<li>L'exercice va me demander de la constance, exactement la qualité dont j'ai
peur de manquer. C'est un peu de la méthode Coué, si j'arrive à le faire,
alors je dois pouvoir y arriver aussi dans mon projet professionnel.</li>
<li>Je devrais apprendre à écrire et penser plus rapidement. En effet, il n'est
pas question que j'y passe plusieurs heures chaque jour.</li>
<li>Trouver un sujet intéressant tout les jours seras peut-être (sûrement)
difficile. Je
vais donc devoir m'intéresser à des domaines que je ne maitrise pas, ce
qui seras bon pour ma culture informatique. Qui sait, je trouverais
peut-être de meilleurs moyens de résoudre les problèmes qu'avec les
outils que je connais déjà.</li>
</ol>


<p>Voilà, ça commence aujourd'hui. Je tente le coup.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
