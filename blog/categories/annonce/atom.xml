<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : annonce | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/annonce/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-12-21T18:56:48+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Le ventilo de mon alimentation fait un bruit d'enfer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer/"/>
    <updated>2013-12-03T20:20:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer</id>
    <content type="html"><![CDATA[<p>Juste avant d'écrire cet article, le ventilo de l'alimentation de mon pc
c'est mis a faire un bruit d'enfer. Le pc tremble de partout.</p>

<!-- more -->


<p>Je vais tenter un truc pour prolonger un peu sa vie. Si ça rate, je ne
pourrais peut-être pas publié d'article demain :(</p>

<p>Quand ce genre de chose arrive, on peut tenter de démonter le ventilo, puis
de mettre une goutte d'huile sur le palier, le truc qui se trouve sous
une pastille autocollante. Voilà, j'espère que ça va fonctionner…</p>

<p>À demain ?</p>

<p><strong>Edit du jour même</strong> <em>Je ne l'ai jamais trouvé ce foutu palier ! Sous la
pastille autocollante il y avait… du plastique moulé ! Quoiqu'il en soit,
il semblerait qu'un bon coup d'aspirateur ai suffit à rendre le sourire
au ventilo ;) Je touche du bois…</em></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un plugin Vim pour replier/folder les commentaires]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires/"/>
    <updated>2013-12-02T18:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires</id>
    <content type="html"><![CDATA[<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédent</a>, je montrai comment écrire une fonction pour
folder les commentaires de style Unix dans un fichier. Cette solution avait
plusieurs limites alors j'ai eu envie d'en faire un plugin plus
intéressant. Je vous présente donc vim-foldcomments, mon premier plugin
pour Vim.</p>

<!-- more -->


<p>Pouvoir folder/replier tous les commentaires d'un fichier peut être
utile quand vous étudiez un tout nouveau code, ou au contraire, quand vous
travaillez sur un code bien connu.
Vous pouvez trouver le plugin sur Github: <a href="https://github.com/lkdjiin/vim-foldcomments">vim-foldcomments</a>.
Une fois installé, avec <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> par exemple,
vous pouvez taper la commande:</p>

<pre><code>:FoldComments
</code></pre>

<p>pour replier les commentaires du fichier. Personnelement j'ai mappé cette
commande sur la touche F5 en mettant ceci dans mon .vimrc:</p>

<p><code>vim
map&lt;F5&gt; FoldComments&lt;Enter&gt;
</code></p>

<p>Le plugin est en version béta et ne gère pour l'instant que quelques
langages: Ruby, Haskell, Java, C, Javascript, Logo, Racket, Scheme, Vim,
ainsi que tous commentaires de style Unix (<code>#</code>). Les commentaires
multilignes (<code>/* … */</code> en C ou encore <code>=begin … =end</code> en Ruby) sont aussi
pris en compte.</p>

<p>N'hésitez pas à le tester et à me donner votre opinion. Vous pouvez aussi
bien sûr participer au code sur Github.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je vais apprendre Scheme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme/"/>
    <updated>2013-10-29T22:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/29/je-vais-apprendre-scheme</id>
    <content type="html"><![CDATA[<p>C'est décidé, je me mets à <a href="http://en.wikipedia.org/wiki/Scheme_%28programming_language%29">Scheme</a>.
En voici les raisons principales:</p>

<ul>
<li>Je veux apprendre <a href="http://racket-lang.org/">Racket</a>, qui est me semble-t-il un surensemble de Scheme.</li>
<li>J'ai essayé Emacs Lisp il y a longtemps (au siècle dernier !),
j'avais trouvé ça intéressant.</li>
<li>J'ai fait du Logo il y a encore plus longtemps et j'en garde un très
bon souvenir.</li>
<li>Je cherche un langage qui ne soit pas orienté objet pour écrire des
algorithmes génétiques, parce que je ne suis pas persuadé que ce soit
le meilleur paradigme pour ce type de programmes.</li>
<li>Je cherche un langage qui ait un coté fonctionnel mais je ne suis pas
encore prêt à abandonner le confort des variables mutables.</li>
</ul>


<!-- more -->


<p>Bref, je crois que Scheme (Racket en fait) est le langage que je cherche.
Vous pouvez donc vous attendre à quelques articles sur le sujet dans les
semaines qui viennent ;) Et pour commencer je parlerais un peu de la
<strong>véritable jungle</strong> des interpreteurs/compilateurs pour Scheme.
J'en ai sélectionné deux pour l'instant: Guile et Racket.</p>

<p>Est-ce-que certains d'entre vous ont de l'expérience avec Scheme et/ou
Racket ? Des conseils à me donner ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Couverture de code pour Ruby avec coco]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/"/>
    <updated>2013-10-26T18:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco</id>
    <content type="html"><![CDATA[<p>Il y a 3 ans, j'ai écrit une gem Ruby pour faire de la couverture de
code (<em>code coverage</em>). <a href="https://github.com/colszowka/simplecov">SimpleCov</a>,
la gem la plus utilisée pour cette tâche venait tout juste de voir le
jour et ne me convenait pas entièrement. À l'époque je trouvais SimpleCov
trop ennuyeuse à configurer et à faire fonctionner.</p>

<!-- more -->


<p>Qu'on ne me fasse pas dire ce que je n'ai pas écrit : SimpleCov remplie
<em>parfaitement</em> sa tâche. C'est juste que je voulais un truc plus simple.
Je voulais quelque chose qui fonctionne en une ligne, avec configuration
optionnelle et surtout, avec un rapport de couverture
super simple et dépouillé. C'est comme ça qu'est née la gem
<a href="https://github.com/lkdjiin/coco">coco</a>. Bon ok, il m'est arrivé de me
demander si je ne l'avais pas écrit juste pour le jeu de mot…</p>

<p>Pour utiliser coco, il suffit de charger la gem au tout début des tests
comme ceci:</p>

<p><code>ruby
require 'coco'
</code></p>

<p>Et… c'est tout ! Chaque fois que vous lancerez les tests, coco produira un
rapport si (et seulement si) au moins un fichier n'est pas couvert à 100%.</p>

<p>La configuration, au besoin, se fait dans un fichier caché au format yaml,
à la racine du projet. Par exemple si vous trouvez qu'un taux de couverture
de 90% est acceptable, vous pouvez le changer comme ça:</p>

<pre><code>:threshold: 90
</code></pre>

<p>Si vous voulez exclure un fichier et un dossier complet du rapport vous
pouvez écrire:</p>

<pre><code>:excludes:
- lib/project/file1.rb
- config/initializers
</code></pre>

<p>Il y a plusieurs autres exemples de configuration sur le
<a href="https://github.com/lkdjiin/coco/wiki">wiki du projet</a>. Enfin, pour une
présentation rapide de coco, en anglais, il y a le
<a href="http://lkdjiin.github.io/coco/">site web</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une tonne de livres sur la programmation]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/24/une-tonne-de-livres-sur-la-programmation/"/>
    <updated>2013-10-24T10:22:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/24/une-tonne-de-livres-sur-la-programmation</id>
    <content type="html"><![CDATA[<p>Une super initiative de <a href="https://github.com/vhf">vhf</a> sur Github: une
longue, longue, très longue liste de livres sur le développement,
certains libres, tous gratuits.</p>

<!-- more -->


<p>Ils y a plusieurs listes de livres, selon les langues.
Vous trouverez la liste en anglais ici: <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md">free-programming-books</a>.
Et la liste en français ici: <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-fr.md">free-programming-books-fr</a>.</p>

<p>Comme les listes sont sur Github, vous pouvez très facilement ajouter un
nouveau livre, rectifier un lien, etc.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
