<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : tutoriel | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/tutoriel/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-22T12:06:38+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths/"/>
    <updated>2013-10-21T21:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/21/apprendre-ruby-en-faisant-des-maths</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J'ai eu récemment à aider quelqu'un en mathématique (niveau 3ème), et ce
quelqu'un connaissait un peu Ruby. On a joué avec le langage pour faire
des maths. C'était drôle et intéressant. Ça m'a donné l'idée de
continuer cette affaire sur mon blog. Cette nouvelle série d'articles
s'adresse à celles et ceux qui débute Ruby et qui ont un niveau de math de
3ème.</p>

<!-- more -->


<p>Le premier problème auquel on va essayer de répondre en utilisant Ruby est
le suivant:</p>

<p><blockquote><p>Afficher toutes les paires de nombres amiables jusqu'à 10.000.</p></blockquote></p>

<p>Si vous avez besoin de vous rafraichir la mémoire sur les nombres
amiables, voici <a href="http://fr.wikipedia.org/wiki/Nombre_amical">l'article de wikipédia</a>.
Et en voici une définition rapide:</p>

<p>si <em>f</em>(n) est une fonction qui calcule la
somme des diviseurs stricts de n, alors n et m sont amiables si
<em>f</em>(n) = m et <em>f</em>(m) = n.</p>

<h2>Obtenir les diviseurs d'un nombre</h2>

<p>La première chose à faire est de calculer les diviseurs d'un nombre n.
Pour mémoire, les diviseurs de 8, par exemple, sont 1 ; 2 ; 4 et 8.
Pour les trouver, une méthode consiste à diviser 8 par chaque nombre de 1 à 8
et à regarder le reste de la division. Si il reste 0, c'est un diviseur, sinon
ce n'est pas un diviseur. En Ruby, calculer le reste d'une division se fait
avec l'opérateur <code>%</code> (le modulo):</p>

<p>``` irb
[~]⇒ irb</p>

<blockquote><blockquote><p>8 % 1
0
8 % 2
0
8 % 3
2
8 % 4
0
8 % 5
3
8 % 6
2
8 % 7
1
8 % 8
0
```</p></blockquote></blockquote>

<p>On voit bien que les diviseurs de 8, soit 1, 2, 4 et 8 renvoient bien 0.
Évidemment, il n'est pas question de se taper tout ces chiffres <em>à la main</em>,
imaginez un peu que vous vouliez connaitre les diviseurs de 123456789 !
Il nous faut quelque chose pour produire automatiquement les nombres de 1 à
n. En Ruby, on appelle ça un <code>Range</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>1..8
1..8
```</p></blockquote></blockquote>

<p>Pour y voir plus clair, on va appeler la méthode <code>to_a</code> sur ce <code>Range</code>, qui
va nous le transformer en un tableau (<code>Array</code>). Vous pouvez pensez à un
tableau comme à une simple liste:</p>

<p>``` irb</p>

<blockquote><blockquote><p>(1..8).to_a
[1, 2, 3, 4, 5, 6, 7, 8]
```</p></blockquote></blockquote>

<p>On a bien une liste des nombres de 1 à 8. Notez que les parenthèses sont ici
nécessaires, sinon la méthode <code>to_a</code> serait appelée sur le chiffre 8, et
c'est pas bon:</p>

<p>``` irb</p>

<blockquote><blockquote><p>1..8.to_a
NoMethodError: undefined method `to_a' for 8:Fixnum
```</p></blockquote></blockquote>

<p>La prochaine fois on verra comment sélectionner dans cette liste seulement
les nombres qui nous intéressent, c'est à dire les diviseurs.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le problème des 100 portes en Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/25/le-probleme-des-100-portes-en-elixir/"/>
    <updated>2013-07-25T07:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/25/le-probleme-des-100-portes-en-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je continue mon périple parmi le <a href="http://rosettacode.org/wiki/">rosetta code</a>
en m'attaquant au problème des «100 doors».</p>

<p><blockquote><p>Problem: You have 100 doors in a row that are all initially closed. You make 100 passes by the doors. The first time through, you visit every door and toggle the door (if the door is closed, you open it; if it is open, you close it). The second time you only visit every 2nd door (door #2, #4, #6, &hellip;). The third time, every 3rd door (door #3, #6, #9, &hellip;), etc, until you only visit the 100th door.</p></p><p><p>Question: What state are the doors in after the last pass? Which are open, which are closed?</p><footer><strong>Rosetta Code <a href="http://rosettacode.org/wiki/100_doors">http://rosettacode.org/wiki/100_doors</a> 100 doors</strong></footer></blockquote></p>

<!-- more -->


<p>Je me dis que je vais d'abord le faire dans un langage que je connais bien
pour voir de quoi il retourne, et si il n'y a pas de pièges cachés. En
quelques lignes de Ruby, le tour est joué:</p>

<p>``` ruby 100 doors en Ruby
doors = Array.new(100)</p>

<p>(1..100).each do |interval|
  doors.map!.with_index do |elem, idx|</p>

<pre><code>(idx+1) % interval == 0 ? !elem : elem
</code></pre>

<p>  end
end</p>

<h1>Écrire le numéro des portes ouvertes.</h1>

<p>doors.each_with_index {|e, i| puts i+1 if e }
```</p>

<p>Voyant cela j'ai pensé que ça allait être assez simple à implémenter en
Elixir. Pas du tout. J'ai galéré longtemps avant de trouver la solution qui
va suivre. Mon plus gros problème avec Elixir est que les variables sont
non-mutables. Une fois définie, une variable ne change pas. Il faut donc
faire appel constament à la récursivité. Je ne nie pas les avantages d'un
tel système (pas d'effets de bords) mais ce n'est pas évident de s'y faire quand
on vient comme moi du monde procédural ou objet. Trêve de baratin, voici
ma solution avec Elixir:</p>

<p>``` elixir 100 doors en Elixir
defmodule Doors do</p>

<p>  def soluce do</p>

<pre><code>doors = Enum.map 1..100, fn _ -&gt; false end
run(doors, 1)
</code></pre>

<p>  end</p>

<p>  defp run(doors, interval) when interval > 100 do</p>

<pre><code>doors
</code></pre>

<p>  end</p>

<p>  defp run doors, interval do</p>

<pre><code>run(switch_doors(doors,interval), interval + 1)
</code></pre>

<p>  end</p>

<p>  defp switch_doors(doors, interval) do</p>

<pre><code>stream = Stream.with_index(doors)
list = Enum.to_list(stream)
Enum.map list, fn e -&gt;
  door = elem e, 0
  index = elem(e, 1) + 1
  switch_door rem(index, interval), door
end
</code></pre>

<p>  end</p>

<p>  defp switch_door(0, door), do: not door
  defp switch_door(_, door), do: door
end</p>

<p>soluce = Doors.soluce
Enum.each Enum.to_list(Stream.with_index(soluce)), fn e &ndash;>
  if elem(e, 0) == true, do: IO.puts elem(e, 1) + 1
end
```</p>

<p>Plutôt long comparé à la version Ruby, hein ? Quoiqu'il en soit, j'en suis
fier, j'ai mis du temps à la pondre, cette version. Je pense que quelqu'un
connaissant bien Elixir doit pouvoir nettement améliorer mon code. Je
vais le poster sur la mailing-list et demander ce qu'il en
pense. Si j'ai des retours (ce dont je ne doute pas) je mettrais la
version améliorée dans un prochain article. En attendant je vais
commenter un peu mon code pour l'expliquer.</p>

<p><code>elixir
def soluce do
  doors = Enum.map 1..100, fn _ -&gt; false end
  run(doors, 1)
end
</code></p>

<p><code>soluce</code> est la seule fonction publique du module. Elle initialise une liste
de 100 éléments avec la valeur <code>false</code>. Puis elle commence le travail avec
<code>run(doors, 1)</code>, <code>1</code> étant le premier intervalle de la série, c'est à dire
qu'on passe par toutes les portes. Une fois la solution découverte, elle est
renvoyée explicitement. Si vous connaissez Ruby, vous savez à quoi je fais
référence, sinon, sachez qu'en Elixir toutes les fonctions renvoie une valeur,
et qu'on a pas besoin de l'indiquer. C'est implicite, la dernière évaluation
est renvoyée. Notez aussi l'usage de <code>_</code> qui indique qu'on se fiche du contenu
de la variable.</p>

<p>``` elixir
defp run(doors, interval) when interval > 100 do
  doors
end</p>

<p>defp run doors, interval do
  run(switch_doors(doors,interval), interval + 1)
end
```</p>

<p>La première version de <code>run</code> comporte un <em>guard</em>. Elle n'est utilisée que
lorsque <code>interval</code> est supérieur à 100. C'est notre clause de sortie de la
fonction récursive.</p>

<p>La seconde version de <code>run</code> est utilisée dans tout les autres cas. Elle se
contente de s'appeller elle-même (récursivité) avec une liste des portes
mise à jour et un intervalle incrémenté.</p>

<p>``` elixir
defp switch_doors(doors, interval) do
  stream = Stream.with_index(doors)
  list = Enum.to_list(stream)
  Enum.map list, fn e &ndash;></p>

<pre><code>door = elem e, 0
index = elem(e, 1) + 1
switch_door rem(index, interval), door
</code></pre>

<p>  end
end
```</p>

<p><code>switch_doors</code> est responsable de fabriquer une nouvelle liste de portes.
C'est la fonction qui m'a tenu en échec pendant des heures, jusqu'à ce que
je découvre le module <code>Stream</code>. Voyons <code>switch_doors</code> en détails:</p>

<p><code>elixir
stream = Stream.with_index(doors)
list = Enum.to_list(stream)
</code></p>

<p>Je crée une nouvelle liste qui va embarquer les valeurs de <code>doors</code>
en les associant aux indexs. <code>list</code> va ressembler à ça:</p>

<pre><code>[{false, 0}, {false, 1}, {false, 2}, ... {false, 99}]
</code></pre>

<p>Qui en Elixir peut aussi être représenté ainsi:</p>

<pre><code>[false: 0, false: 1 ...
</code></pre>

<p><code>elixir
Enum.map list, fn e -&gt;
  door = elem e, 0
  index = elem(e, 1) + 1
  switch_door rem(index, interval), door
end
</code></p>

<p><code>Enum.map</code> fabrique et renvoie une nouvelle version de la liste des portes.
Chaque élément de <code>list</code> (chaque <code>{false, 0}</code>) passe à travers une fonction
anonyme qui renvoie false ou true, selon le résultat de index modulo interval.</p>

<p><code>elixir
defp switch_door(0, door), do: not door
defp switch_door(_, door), do: door
</code></p>

<p>Si le modulo égal zéro, on inverse l'état de la porte. Sinon la porte doit
rester dans le même état.</p>

<p><code>elixir
Enum.each Enum.to_list(Stream.with_index(soluce)), fn e -&gt;
  if elem(e, 0) == true, do: IO.puts elem(e, 1) + 1
end
</code></p>

<p>J'écris les numéros des portes ouvertes. Avec mes explications qui précèdent,
j'espère que vous pourrez comprendre comment ça marche.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers - suite et fin]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/"/>
    <updated>2013-07-24T07:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><a href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/">Hier</a>,
je me suis arrêté sur cette version:</p>

<p>``` elixir somme.exs version 1
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Aujourd'hui je vais raffiner ce programme petit à petit pour montrer
quelques possibilités intéressantes du langage Elixir.</p>

<!-- more -->


<p>Pour commencer, je vais reécrire le if/else sur une seule ligne:</p>

<p>``` elixir somme.exs version 2
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0, do: somme, else: run(suivant, somme)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Ça ne change rien à la logique du programme. Je voulais seulement vous montrer
une alternative. Il semblerait qu'Elixir n'aime pas trop les if, moi non plus
ça tombe bien. Dans la version suivante, qui pourra vous paraitre très étrange
de prime abord, je me débarasse de ce if/else qui pollue mon joli code:</p>

<p>``` elixir somme.exs version 3
defmodule Somme do
  def run(n, acc) when n == 0 do</p>

<pre><code>acc
</code></pre>

<p>  end</p>

<p>  def run(n, acc) do</p>

<pre><code>run(n - 1, n + acc)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Ça peut surprendre, hein ? La condition qui était précédement dans le <code>if</code> se
retrouve dans la définition de la fonction:</p>

<p><code>elixir
def run(n, acc) when n == 0 do
</code></p>

<p>C'est ce qu'Elixir appelle un <em>guard</em>. Cette version de la fonction <code>run</code> sera
exécutée uniquement quand n vaut zéro. Dans les autres cas, c'est la seconde
version, généraliste, <code>run(n, acc) do</code> qui sera exécutée. Je ne sais pas si ce
truc existe dans d'autres langages, en tout cas je trouve ce comportement tout
simplement génial. Mais Elixir ne s'arrête pas là. Voici une nouvelle version:</p>

<p>``` elixir somme.exs version 4
defmodule Somme do
  def run(0, acc) do</p>

<pre><code>acc
</code></pre>

<p>  end</p>

<p>  def run(n, acc) do</p>

<pre><code>run(n - 1, n + acc)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Cette fois le <em>guard</em> est passé directement dans un argument de la fonction:</p>

<p><code>elixir
def run(0, acc) do
</code></p>

<p><code>def run(0, …</code> ne sera exécutée que quand le premier argument sera égal à zéro.
Et si on écrit les fonctions sur une seule ligne, on obtient un résultat très
compact:</p>

<p>``` elixir somme.exs version 5
defmodule Somme do
  def run(0, acc), do: acc
  def run(n, acc), do: run(n &ndash; 1, n + acc)
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Il reste encore une chose à prendre en compte: l'API. Devoir passer deux
arguments à la méthode <code>run</code> n'est pas très intuitif. Comme la valeur initiale
de l'accumulateur est toujours zéro, on s'arrange pour la cacher à
l'utilisateur:</p>

<p>``` elixir somme.exs version 6
defmodule Somme do
  def run(n), do: run_body(n, 0)
  defp run_body(0, acc), do: acc
  defp run_body(n, acc), do: run_body(n &ndash; 1, n + acc)
end</p>

<p>IO.puts Somme.run(5)
```</p>

<p><code>run</code> est maintenant une fonction <em>bootstrap</em> qui sert à amorcer le vrai
travail. Mes deux anciennes fonctions <code>run</code> sont renommées <code>run_body</code> et
passe dans l'espace privé du module grâce à <code>defp</code>.
Pour finir, il faut noter qu'Elixir connait bien évidemment une
fonction <code>reduce</code>, et que le programme pourrait donc s'écrire comme ça:</p>

<p><code>elixir somme.exs version 7
defmodule Somme do
  def run(n), do: Enum.reduce(1..n, 0, fn(x, acc) -&gt; x + acc end)
end
IO.puts Somme.run(5)
</code></p>

<p>Mais avouez que ça aurait été moins drôle si j'avais commencé directement
par là.</p>

<p>Voilà, c'était un petit exemple de fonction récursive qui m'a permit de vous
montrer certaines particularités d'Elixir.</p>

<p>À demain.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/"/>
    <updated>2013-07-23T07:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour illustrer la programmation récursive avec Elixir et montrer quelques
aspects sympathiques du langage, j'ai choisi un classique et très simple
problème mathématique: calculer la somme des n premiers entiers.
Par exemple:</p>

<pre><code>Somme des n premiers entiers si n vaut 5

5 + 4 + 3 + 2 + 1 = 15
</code></pre>

<p>Super simple. C'est comme la factorielle mais avec des additions. Pas de quoi
choper des boutons, même si on déteste les maths. C'est un bon problème pour
illustrer les fonctions récursives. En programmation procédurale on ferait
quelque chose dans ce genre là:</p>

<pre><code>somme = 0
for(i = n; i &gt; 0; i--) {
  somme += n
}
</code></pre>

<p>Ma première tentative avec Elixir donne le programme suivant:</p>

<!-- more -->


<p>``` elixir somme.exs version 1
defmodule Somme do</p>

<p>  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Vous le lancez comme ça:</p>

<pre><code>$ elixir somme.exs 
15
</code></pre>

<p><strong>Sachez dès maintenant que ce bout de code n'est pas dans l'esprit
Elixir.</strong>  J'ai cherché à décomposer toutes les étapes, pas à faire quelque chose
de beau, ou d'optimisé, ou de compact. Alors, que fais ce programme ?</p>

<p><code>elixir
def run(n, acc) do
</code></p>

<p>C'est la définition d'une méthode <code>run</code>. Le paramètre <code>acc</code> est le diminutif de
accumulator. Avoir un accumulateur est un truc très utilisé dans ce type de
fonction. On enregistre le résultat provisioire dans cet accumulateur, qui
est propagé tout au long de la pile d'appels.</p>

<p><code>elixir
somme = n + acc
suivant = n - 1
</code></p>

<p>Ici je calcule deux résultats temporaires. Dans <code>somme</code> je place la somme du
nombre n actuel et de l'accumulateur. Quant à <code>suivant</code>, il contient la
prochaine valeur du nombre n.</p>

<p><code>elixir
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></p>

<p>Dans une fonction récursive il faut évidemment un appel à cette même fonction.
Mais surtout il faut une
condition de sortie. Sans ce garde-fou, c'est la boucle infinie à tout les
coups. Ici la condition de sortie est <code>suivant == 0</code>. Quand le prochain nombre
à traiter atteint zéro, c'est le signe que la fonction a terminé son travail donc
je renvois le résultat actuel, qui est la somme de tous les nombres traités
jusqu'ici. Dans l'autre cas, c'est l'appel récursif: <code>run(suivant, somme)</code>.</p>

<p>Si vous avez du mal à comprendre la logique de ce programme, vous pouvez
ajouter un traçage:</p>

<p>``` elixir
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>IO.puts "n: #{n} --- acc: #{acc}"
# ...
</code></pre>

<p>```</p>

<p>Ce qui donnera le résultat suivant:</p>

<pre><code>$ elixir somme.exs 
n: 5 --- acc: 0
n: 4 --- acc: 5
n: 3 --- acc: 9
n: 2 --- acc: 12
n: 1 --- acc: 14
15
</code></pre>

<p>La prochaine fois je transformerais ce programme afin qu'il soit dans
l'esprit Elixir.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installer le langage Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir/"/>
    <updated>2013-07-21T08:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça fait quelques jours que j'essaie de faire des petits programmes avec
Elixir. J'entends parler de ce nouveau langage depuis plusieurs mois déjà, et
je n'avais pas encore eu le temps de m'amuser un peu avec. C'est chose
faite. Elixir est un langage dynamique, fonctionnel, concurrent, immuable
et on dit qu'il ressemble beaucoup à Ruby. C'est l'occasion pour moi de
débuter une série d'articles consacrés à Elixir. Ça commence aujourd'hui
avec l'installation.</p>

<!-- more -->


<p><em>Je vais décrire l'installation pour Debian, mais ça ne semble pas être
bien différent sur d'autres OS.</em></p>

<h2>Installer d'abord Erlang</h2>

<p>Elixir est bati au-dessus du langage Erlang, il faut donc tout d'abord
installer le compilateur Erlang avant d'installer Elixir à proprement parler.
La version R16B minimum est requise.
La marche à suivre est indiqué sur la page
<a href="https://www.erlang-solutions.com/downloads/download-erlang-otp">download-erlang-otp</a>.
Pour résumer, on ajoute la ligne suivante au fichier <code>/etc/apt/sources.list</code>:</p>

<pre><code>deb http://binaries.erlang-solutions.com/debian squeeze contrib
</code></pre>

<p>Puis on installe la clé:</p>

<pre><code>wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc \ 
| sudo apt-key add -
</code></pre>

<p>Après y-a-pu-ka:</p>

<pre><code>apt-get update
apt-get install esl-erlang
</code></pre>

<p>On s'assure que l'installation est bien réalisée:</p>

<p>``` bash
xavier:~$ erl
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Eshell V5.10.2  (abort with ^G)
1>
```</p>

<h2>Installer Elixir</h2>

<p>Voilà Erlang est installé, c'est maintenant au tour d'Elixir proprement dit.
Pas de chance, il n'y a pas de package pour Debian, je dois donc installer
à partir des <a href="https://github.com/elixir-lang/elixir/tags">sources</a>. C'est
aussi simple que de décompresser l'archive et de taper <code>make</code>. À ce moment
là j'ai quand même un petit doute: pas de dépendances, de lib à installer ?
Mais je comprends vite que c'est Erlang qui est en train de compiler Elixir.
Donc non, tout va bien et ça marche du premier coup. Un petit truc quand
même, Elixir étant installé en local, il faut modifier la variable <code>PATH</code>
du shell pour pas galérer:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.9.3/bin/
</code></p>

<p>Reste à voir si ça fonctionne vraiment:</p>

<p>``` bash
xavier:~$ iex
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Interactive Elixir (0.9.3) &ndash; press Ctrl+C to exit (type h() ENTER for help)
iex(1)> 1+1
2
iex(2)>
```</p>

<p>Cool ! L'installation s'est déroulée à merveille, tout marche du premier
coup. C'est bon signe ou pas ?</p>

<h2>Mise à jour d'Elixir</h2>

<p>Il sort pratiquement une nouvelle version d'Elixir par mois ; je sens
que les mises à jour vont faire partie de ma vie d'elixiriste (oui je
l'ai inventé celui-là, comment vous diriez ? Elixirien ?)
En fait, en
écrivant cet article, je m'aperçois que la version 0.10.0 est sortie.
C'est donc ma première mise à jour. Après le téléchargement,
la décompression et le <code>make</code>, il suffit d'accommoder le <code>PATH</code>:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.10.0/bin/
</code></p>

<p>Et la nouvelle version est prête à l'emploi. Si Elixir est aussi sympa que son
installation, ça promet. Affaire à suivre.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
