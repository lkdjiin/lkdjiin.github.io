<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : javascript | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-11T14:28:53+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/11/un-space-invaders-avec-opal-dot-rb-partie-2/"/>
    <updated>2014-06-11T12:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/11/un-space-invaders-avec-opal-dot-rb-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Hier j'ai commencé l'écriture d'un Space Invaders avec Opal.rb, et on a pu
afficher un beau canvas tout noir ;) Il manquait l'explication de la classe
<code>SpaceCanvas</code>, la voici.</p>

<!-- more -->


<p>``` ruby
class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>  end
end
```</p>

<p>Toute cette classe utilise un <em>truc</em> de Opal : ce qui se trouve entre
<em>backticks</em> est du javascript et on a accès à l'interpolation Ruby des
chaînes de caractères. En Ruby, les backticks permettent d'appeller une
commande externe, avec Opal c'est pareil, sauf que l'extérieur c'est
javascript.</p>

<p>Tout d'abord dans la méthode <code>initialize</code>, la première ligne:</p>

<p>``` ruby</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
</code></pre>

<p>```</p>

<p>C'est du javascript pur et dur ;) On récupère un référence au canvas par
son ID et on stocke cette référence dans <code>@canvas</code>.</p>

<p>Les trois lignes suivantes utilisent le même truc avec en plus de l'interpolation:</p>

<p>``` ruby</p>

<pre><code>@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>```</p>

<p>On obtient une référence au <em>contexte</em> du canvas, ce qui sera utile pour
dessiner dedans et on récupère sa hauteur et sa largeur.</p>

<p>La méthode <code>clear_background</code> maintenant:</p>

<p>``` ruby
  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>  end
```</p>

<p>On selectionne d'abord une couleur de remplissage avec:</p>

<pre><code>`#@context.fillStyle = 'black'`
</code></pre>

<p>Puis on remplit le canvas avec cette couleur:</p>

<pre><code>`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>Notez que j'ai utilisé ici une autre écriture pour l'interpolation. La ligne
précédente est equivalente à:</p>

<pre><code>`#@context.fillRect(0, 0, #@width, #@height)`
</code></pre>

<p>J'aurais d'ailleurs du écrire comme ça pour être homogène ;)</p>

<p>La prochaine on affiche un joueur ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/10/un-space-invaders-avec-opal-dot-rb-partie-1/"/>
    <updated>2014-06-10T21:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/10/un-space-invaders-avec-opal-dot-rb-partie-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après une courte <a href="blog/2014/06/06/introduction-a-opal-dot-rb/">introduction à Opal.rb</a>,
on va essayer de faire un truc plus ambitieux avec Opal: un jeu du genre
Space Invaders.</p>

<!-- more -->


<p>Pour ce jeu, je vais utiliser jQuery pour manipuler le DOM, parce que c'est
plus simple ;) On va aussi utiliser une structure de dossier un peu plus
<em>pro</em> que dans l'introduction et un Gemfile que voici:</p>

<p>``` ruby Gemfile
source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>&rsquo;</p>

<p>gem &lsquo;opal&rsquo;, &lsquo;~>0.6&rsquo;
gem &lsquo;opal-jquery&rsquo;
```</p>

<p>Au fait, Opal.rb supporte Ruby à partir de la version 2.0.</p>

<p>Il nous faut à présent un fichier HTML:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;
&lt;script src="http://code.jquery.com/jquery-1.11.0.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;canvas width="700" height="600" id="canvas"&gt;&lt;/canvas&gt;
&lt;script src="build.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Vous remarquerez l'inclusion de jQuery, d'un canvas pour notre jeu et d'un
script <code>build.js</code> qui est notre objectif.</p>

<p>Maintenant, voici un Rakefile qui va justement construire ce fameux
<code>build.js</code>:</p>

<p>``` ruby Rakefile
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>desc &ldquo;Build our app to build.js&rdquo;
task :build do
  env = Opal::Environment.new
  env.append_path &ldquo;app&rdquo;</p>

<p>  File.open(&ldquo;build.js&rdquo;, &ldquo;w+&rdquo;) do |out|</p>

<pre><code>out &lt;&lt; env["application"].to_s
</code></pre>

<p>  end
end
```</p>

<p>Si vous vous posez des questions sur ce fichier, les réponses sont sur
la <a href="http://opalrb.org/docs/static_applications/">documentation d'Opal</a>.</p>

<p>On s'occupe maintenant de notre canvas avec une classe Ruby qui va afficher
un arrière-plan noir:</p>

<p>``` ruby app/application.rb
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>  end
end</p>

<p>canvas = SpaceCanvas.new
canvas.clear_background
```</p>

<p>Les explications ligne par ligne de cette classe seront demain dans le prochain
car je suis préssé par le temps…</p>

<p>Pour construire le fichier <code>build.js</code>, on se sert de rake:</p>

<pre><code>rake build
</code></pre>

<p>Il suffit maintenant d'ouvrir le fichier HTML pour voir apparaitre un beau
rectangle tout noir ;)</p>

<p>Pour infos, voici la structure de notre jeu:</p>

<pre><code>● tree
.
├── app
│   └── application.rb
├── build.js
├── Gemfile
├── Gemfile.lock
├── index.html
└── Rakefile
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction à Opal.rb]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb/"/>
    <updated>2014-06-06T19:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/06/introduction-a-opal-dot-rb</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça faisait un certain temps que je voulais essayer
<a href="http://opalrb.org/">Opal.rb</a>, un compilateur Ruby vers Javascript.</p>

<p>C'est fait ! Voici donc un <em>Hello world!</em> avec Opal.rb.</p>

<!-- more -->


<p>Tout d'abord, on installe la gem:</p>

<pre><code>gem install opal
</code></pre>

<p>Ensuite, on se fait un fichier <code>hello.rb</code> avec le contenu suivant:</p>

<p><code>ruby hello.rb
puts 'Hello world!'
</code></p>

<p>Bon jusque là, c'est simple ;) Maintenant on arrive au passage que j'aime le
moins. Je n'ai pas trouvé de commande pour compiler un fichier Ruby. Il
faut se l'écrire soi-même, bizarre. En voici un possible:</p>

<p>``` ruby rb2js.rb
require &lsquo;opal&rsquo;</p>

<p>puts Opal.compile(IO.read(ARGV[0]))
```</p>

<p>Voici ce que ça donne:</p>

<pre><code>$ ruby rb2js.rb hello.rb
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs(['$puts']);
  return self.$puts("Hello world!")
})(Opal);
</code></pre>

<p>On va s'enregistrer ça dans un fichier <code>hello.js</code>:</p>

<pre><code>$ ruby rb2js.rb hello.rb &gt; hello.js
</code></pre>

<p>Reste à se faire un fichier HTML pour voir ce que ça donne:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;
&lt;script src="lib/opal.min.js"&gt;&lt;/script&gt;
&lt;script src="lib/opal-parser.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;script src="hello.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>On peut ouvrir <code>index.html</code> avec <code>see index.html</code> si on est sous Linux, ou
bien <code>open index.html</code> si on est sous OS X. Et enfin, <strong>dans la console</strong>, on
peut voir notre <em>Hello world!</em>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 36]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/22/les-algorithmes-genetiques-demystifies-36/"/>
    <updated>2013-10-22T08:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/22/les-algorithmes-genetiques-demystifies-36</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Il reste à voir deux fonctions <em>techniques</em> pour faire tourner notre
programme: la copie d'un individu et le rendu d'une image. Je les appelle
<em>techniques</em> car elles n'ont rien à voir avec l'algorithme lui-même. La
copie d'un individu est rendue nécessaire par le langage utilisé, Javascript,
et le rendu d'une image est nécessaire puisqu'on veut …et bien… afficher
des images, quoi…</p>

<!-- more -->


<p>Voyons d'abord la copie d'un individu:</p>

<p>``` javascript
function copy(individual) {
  var indiCopy = [];
  for(var i = 0; i &lt; TOTAL_SQUARES; i++) {</p>

<pre><code>var objectCopy = {},
    prop;
for(prop in individual[i]) {
  objectCopy[prop] = individual[i][prop];
}
indiCopy.push(objectCopy);
</code></pre>

<p>  }
  return indiCopy;
}
```</p>

<p>Un individu est un tableau, contenant des objets, chaque objets contenants
des propriétés… <em>Là, je m'interroge et je demande l'avis de spécialistes:
est-ce-qu'il ne vaudrait pas mieux utiliser une librairie pour faire ça,
comme jQuery ou Underscore.js ?</em></p>

<p>Maintenant le rendu d'une image:</p>

<p>``` javascript
function renderIndividual(individual, ctx) {
  ctx.fillStyle = &ldquo;white&rdquo;;
  ctx.fillRect(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
  for (var i = 0; i &lt; TOTAL_SQUARES; i++) {</p>

<pre><code>ctx.globalAlpha = individual[i].alpha;
ctx.fillStyle = 'rgb(' + individual[i].red + ',' +
  individual[i].green + ',' + individual[i].blue + ')';
ctx.fillRect(individual[i].x, individual[i].y,
  individual[i].size, individual[i].size);
</code></pre>

<p>  }
}
```</p>

<p><code>ctx</code> est un contexte de Canvas. Je vois ça tout simplement comme un objet
dans lequel on peut dessiner. Tout d'abord on <em>efface</em> l'image en la
remplissant de blanc:</p>

<pre><code>ctx.fillStyle = "white";
ctx.fillRect(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
</code></pre>

<p>Puis on dessine chacuns des carrés:</p>

<pre><code>for (var i = 0; i &lt; TOTAL_SQUARES; i++) {
</code></pre>

<p>Pour chaque carré il faut sélectionner sa transparence:</p>

<pre><code>ctx.globalAlpha = individual[i].alpha;
</code></pre>

<p>Puis sa couleur:</p>

<pre><code>ctx.fillStyle = 'rgb(' + individual[i].red + ',' +
  individual[i].green + ',' + individual[i].blue + ')';
</code></pre>

<p>On peut alors dessiner un carré:</p>

<pre><code>ctx.fillRect(individual[i].x, individual[i].y,
  individual[i].size, individual[i].size);
</code></pre>

<p>Voilà. Reste à voir maintenant le programme dans son ensemble. Voici les
fichiers HTML et CSS:</p>

<p>``` html
&lt;!DOCTYPE html>
<html lang="fr">
  <head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;
&lt;link rel="stylesheet" type="text/css" href="picture.css" /&gt; 
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;canvas width="400" height="400" id="canvas1"&gt;&lt;/canvas&gt;
&lt;canvas width="400" height="400" id="canvas2"&gt;&lt;/canvas&gt;
&lt;p id="generation"&gt;0&lt;/p&gt;
&lt;p id="quality"&gt;0&lt;/p&gt;
&lt;script src="picture.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>``` css
body {
  background-color: #222;
}</p>

<p>p {
  color: #ccc;
}
```</p>

<p>Et voici le programme Javascript complet:</p>

<p>``` javascript
var canvasImgOrigin = document.getElementById(&lsquo;canvas1&rsquo;);
var canvasGenetic = document.getElementById(&lsquo;canvas2&rsquo;);
var ctxOrigin = canvas1.getContext(&lsquo;2d&rsquo;);
var ctx = canvas2.getContext(&lsquo;2d&rsquo;);
var TOTAL_SQUARES = 400;
var IMAGE_WIDTH = 400;
var IMAGE_HEIGHT = 400;
var SQUARE_MAX_SIZE = 40;
var img = new Image();
var generation = 0;
var htmlGeneration = document.getElementById(&ldquo;generation&rdquo;);
var htmlQuality = document.getElementById(&ldquo;quality&rdquo;);
var solution = [];
var canvasBuffer = document.createElement(&lsquo;canvas&rsquo;);
canvasBuffer.width = IMAGE_WIDTH;
canvasBuffer.height = IMAGE_HEIGHT;
var ctxBuffer = canvasBuffer.getContext(&lsquo;2d&rsquo;);</p>

<p>img.onload = function() { ctxOrigin.drawImage(img, 0, 0); };
img.src = &lsquo;photo.jpg&rsquo;;
solution = makeIndividual();</p>

<p>var interval = setInterval(hillClimb, 150);</p>

<p>function makeIndividual() {
  var individual = [];
  for (var i = 0; i &lt; TOTAL_SQUARES; i++) {</p>

<pre><code>individual.push({
  x: Math.floor(Math.random() * IMAGE_WIDTH),
  y: Math.floor(Math.random() * IMAGE_HEIGHT),
  size: Math.floor(Math.random() * SQUARE_MAX_SIZE),
  red: Math.floor(Math.random() * 256),
  green: Math.floor(Math.random() * 256),
  blue: Math.floor(Math.random() * 256),
  alpha: Math.random()
});
</code></pre>

<p>  }
  return individual;
}</p>

<p>function renderIndividual(individual, ctx) {
  ctx.fillStyle = &ldquo;white&rdquo;;
  ctx.fillRect(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
  for (var i = 0; i &lt; TOTAL_SQUARES; i++) {</p>

<pre><code>ctx.globalAlpha = individual[i].alpha;
ctx.fillStyle = 'rgb(' + individual[i].red + ',' +
  individual[i].green + ',' + individual[i].blue + ')';
ctx.fillRect(individual[i].x, individual[i].y,
  individual[i].size, individual[i].size);
</code></pre>

<p>  }
}</p>

<p>function quality(individual) {
  var imgOrigin = ctxOrigin.getImageData(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
  var pixelArrayOrigin = imgOrigin.data;
  var score = 0;
  renderIndividual(individual, ctxBuffer);
  var imgBuffer = ctxBuffer.getImageData(0, 0, 400, 400);
  var pixelArrayCandidate = imgBuffer.data;
  for (var i = 0, n = pixelArrayOrigin.length; i &lt; n; i += 4) {</p>

<pre><code>score += Math.abs(pixelArrayOrigin[i] - pixelArrayCandidate[i]);
score += Math.abs(pixelArrayOrigin[i+1] - pixelArrayCandidate[i+1]);
score += Math.abs(pixelArrayOrigin[i+2] - pixelArrayCandidate[i+2]);
</code></pre>

<p>  }
  return 1 / score;
}</p>

<p>function hillClimb() {
  var opponent = mutate(copy(solution));
  var score_opponent = quality(opponent);
  var score_solution = quality(solution);
  if (score_opponent > score_solution) {</p>

<pre><code>solution = opponent;
</code></pre>

<p>  }
  generation++;
  if (generation % 100 == 0) renderIndividual(solution, ctx);
  htmlGeneration.innerHTML = generation;
  htmlQuality.innerHTML = score_solution;
  if (generation >= 100000) {</p>

<pre><code>clearInterval(interval);
</code></pre>

<p>  }
}</p>

<p>function copy(individual) {
  var indiCopy = [];
  for(var i = 0; i &lt; TOTAL_SQUARES; i++) {</p>

<pre><code>var objectCopy = {},
    prop;
for(prop in individual[i]) {
  objectCopy[prop] = individual[i][prop];
}
indiCopy.push(objectCopy);
</code></pre>

<p>  }
  return indiCopy;
}</p>

<p>function mutate(individual) {
  var gene = Math.floor(Math.random() * TOTAL_SQUARES),</p>

<pre><code>  squareProperty = Math.floor(Math.random() * 7);
</code></pre>

<p>  switch (squareProperty) {</p>

<pre><code>case 0:
  individual[gene].x = Math.floor(Math.random() * IMAGE_WIDTH);
  break;
case 1:
  individual[gene].y = Math.floor(Math.random() * IMAGE_HEIGHT);
  break;
case 2:
  individual[gene].size = Math.floor(Math.random() * SQUARE_MAX_SIZE);
  break;
case 3:
  individual[gene].red = Math.floor(Math.random() * 256);
  break;
case 4:
  individual[gene].green = Math.floor(Math.random() * 256);
  break;
case 5:
  individual[gene].blue = Math.floor(Math.random() * 256);
  break;
case 6:
  individual[gene].alpha = Math.random();
  break;
</code></pre>

<p>  }
  return individual;
}
```</p>

<p>Pour le faire tourner vous aurez besoin d'une photo de 400x400 pixels et
de beaucoup de patience… Avec Firefox, ça marche tout seul mais avec
Chrome il faudra passer par un serveur Web. Si Ruby est installé sur
votre machine, vous pouvez démarrer un serveur en entrant ceci dans un
terminal (même répertoire que votre fichier HTML):</p>

<pre><code>ruby -rwebrick -e'WEBrick::HTTPServer.new(:Port =&gt; 3000, :DocumentRoot =&gt; Dir.pwd).start'
</code></pre>

<p>Le code se trouve aussi sur Github: <a href="https://github.com/lkdjiin/picture_genetic_algorithm">github.com/lkdjiin/picture_genetic_algorithm</a>.
Je suis sûr que certains d'entre-vous connaissent Javascript bien mieux que
moi et peuvent l'améliorer, alors n'hésitez pas.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 35]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/20/les-algorithmes-genetiques-demystifies-35/"/>
    <updated>2013-10-20T21:21:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/20/les-algorithmes-genetiques-demystifies-35</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>On continue aujourd'hui avec la mise en place de l'algorithme de <em>Hill-climbing</em>
pour s'assurer que la fonction d'évaluation de nos images est pertinente.</p>

<!-- more -->


<p>J'ai déjà parlé du <em>Hill-climbing</em> dans
<a href="http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing/">cet article</a>.
On peut le considérer comme une version très basique d'un algorithme
génétique, sans population et sans reproduction. Utile donc, pour
tester rapidement et facilement l'évaluation:</p>

<p>``` javascript
var solution = makeIndividual();
var generation = 0;
var htmlGeneration = document.getElementById(&ldquo;generation&rdquo;);
var htmlQuality = document.getElementById(&ldquo;quality&rdquo;);
var interval = setInterval(hillClimb, 150);</p>

<p>function hillClimb() {
  var opponent = mutate(copy(solution));
  var score_opponent = quality(opponent);
  var score_solution = quality(solution);
  if (score_opponent > score_solution) {</p>

<pre><code>solution = opponent;
</code></pre>

<p>  }
  generation++;
  if (generation % 100 == 0) renderIndividual(solution, ctx);
  htmlGeneration.innerHTML = generation;
  htmlQuality.innerHTML = score_solution;
  if (generation >= 100000) {</p>

<pre><code>clearInterval(interval);
</code></pre>

<p>  }
}
```</p>

<p>Les explications maintenant. À chaque tour on compare les scores obtenus
par la solution courante (la meilleure jusqu'ici) avec une version mutée
de lui-même (<code>opponent</code>). Si l'opposant est meilleur, il prend la place
de la solution:</p>

<pre><code>var opponent = mutate(copy(solution));
var score_opponent = quality(opponent);
var score_solution = quality(solution);
if (score_opponent &gt; score_solution) {
  solution = opponent;
}
</code></pre>

<p>J'affiche ensuite la solution courante, toutes les 100 générations:</p>

<pre><code>generation++;
if (generation % 100 == 0) renderIndividual(solution, ctx);
</code></pre>

<p>À chaque tour, j'affiche la génération courante et son score:</p>

<pre><code>htmlGeneration.innerHTML = generation;
htmlQuality.innerHTML = score_solution;
</code></pre>

<p>Enfin, on stoppe tout au bout de 100.000 essais:</p>

<pre><code>if (generation &gt;= 100000) {
  clearInterval(interval);
}
</code></pre>

<p>La fonction de mutation est longue, mais simple. On sélectionne au hasard
un carré et une de ses propriétés puis on la modifie:</p>

<p>``` javascript
function mutate(individual) {
  var gene = Math.floor(Math.random() * TOTAL_SQUARES),</p>

<pre><code>  squareProperty = Math.floor(Math.random() * 7);
</code></pre>

<p>  switch (squareProperty) {</p>

<pre><code>case 0:
  individual[gene].x = Math.floor(Math.random() * IMAGE_WIDTH);
  break;
case 1:
  individual[gene].y = Math.floor(Math.random() * IMAGE_HEIGHT);
  break;
case 2:
  individual[gene].size = Math.floor(Math.random() * SQUARE_MAX_SIZE);
  break;
case 3:
  individual[gene].red = Math.floor(Math.random() * 256);
  break;
case 4:
  individual[gene].green = Math.floor(Math.random() * 256);
  break;
case 5:
  individual[gene].blue = Math.floor(Math.random() * 256);
  break;
case 6:
  individual[gene].alpha = Math.random();
  break;
</code></pre>

<p>  }
  return individual;
}
```</p>

<p>La prochaine fois on verra deux dernières fonctions <em>techniques</em>:
<code>copy</code> et <code>renderIndividual</code> et on sera près à faire tourner
notre algorithme.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
