<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : turing | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/turing/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-07-20T17:10:55+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - Une bande de données infinie]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie/"/>
    <updated>2015-02-05T18:13:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/05/une-machine-de-turing-en-ruby-une-bande-de-donnees-infinie</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans la définition d’une machine de Turing on trouve:</p>

<blockquote>
  <p>Le ruban est supposé être de longueur infinie vers la gauche ou vers la droite, en d’autres termes la machine doit toujours avoir assez de longueur de ruban pour son exécution.
— Wikipédia</p>
</blockquote>

<p>C’était une grande limitation de l’implémentation de <a href="https://github.com/lkdjiin/turing_machine">ma machine de Turing</a>
que d’avoir une bande de taille fixe. Avec la nouvelle version, cette limitation
est désormais levée.</p>

<p><img class="center" src="/images/infinity.jpg"></p>

<!-- more -->

<p>Permettre à la bande de grandir à l’infini (en théorie, hein, parce que en
pratique on est toujours limité par la mémoire de l’ordinateur) est finalement
très simple:</p>

<p>``` ruby lib/turing_machine/tape.rb
module TuringMachine</p>

<p>class Tape</p>

<pre><code>BLANK_SYMBOL = '0'

def initialize(data = BLANK_SYMBOL)
  @symbols = data.scan(/./)
  @index = 0
end

[...]

def shift_left
  if @index == 0
    @symbols.unshift(BLANK_SYMBOL)
  else
    @index -= 1
  end
end

def shift_right
  @symbols.push(BLANK_SYMBOL) if @index == @symbols.size - 1
  @index += 1
end

[...] ```
</code></pre>

<p>Voici quelques explications.</p>

<pre><code>@symbols = data.scan(/./)
</code></pre>

<p>Dans le constructeur, on se sert de <code>String#scan</code> pour construire un tableau
avec les données initiales de la bande. Par exemple:</p>

<p><code>irb
&gt;&gt; "110".scan(/./)
#=&gt;["1", "1", "0"]
</code></p>

<pre><code>@index = 0
</code></pre>

<p>Dans le constructeur toujours, la position de la tête de lecture est
initialement à zéro.</p>

<pre><code>def shift_left
  if @index == 0
    @symbols.unshift(BLANK_SYMBOL)
  else
    @index -= 1
  end
end
</code></pre>

<p>Lorsqu’on bouge la tête de lecture à gauche, nous avons deux cas possibles.
Soit la tête de lecture est déjà dans la position la plus à gauche
(<code>if @index == 0</code>) et dans ce cas il faut créer une nouvelle cellule en tête
du tableau:</p>

<p><code>irb
&gt;&gt; ["1", "2"].unshift("0")
#=&gt;["0", "1", "2"]
</code></p>

<p>Soit la tête de lecture est dans une autre position, et il suffit de la décaler
d’un cran vers la gauche (<code>@index -= 1</code>).</p>

<pre><code>def shift_right
  @symbols.push(BLANK_SYMBOL) if @index == @symbols.size - 1
  @index += 1
end
</code></pre>

<p>Lorsqu’on bouge la tête de lecture à droite, il faut ajouter une cellule à la
fin du tableau (<code>@symbols.push</code>) seulement si la tête de lecture est placée
toute à droite du tableau (<code>@index == @symbols.size - 1</code>).</p>

<p>Dans tous les cas, il faut déplacer la tête de lecture d’un cran à droite
(<code>@index += 1</code>).</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - La routine de copie]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie/"/>
    <updated>2015-02-04T10:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/04/une-machine-de-turing-en-ruby-la-routine-de-copie</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>La routine de copie est une brique élémentaire d’un programme pour une machine
de Turing. Par exemple, si les données de la bande sont <code>111</code>, la routine de
copie va doubler ces trois symboles en insérant un zéro au milieu: <code>1110111</code>.</p>

<p><img class="center" src="/images/copie-clone.jpg"></p>

<!-- more -->

<p>Je ne vais pas expliquer la routine de copie
— <a href="http://en.wikipedia.org/wiki/Turing_machine_examples#A_copy_subroutine">cet article de Wikipédia</a>
le fait très bien — mais plutôt montrer comment j’ai du adapter
<a href="https://github.com/lkdjiin/turing_machine">ma machine de Turing</a>
pour pouvoir faire tourner cette routine.</p>

<p>Voici le jeu d’instructions de la routine de copie:</p>

<p><code>raw copy_with_data
0 A  =&gt; 1 L B
0 B  =&gt; 1 N s1
0 s1 =&gt; N N HALT
1 s1 =&gt; 0 R s2
0 s2 =&gt; 0 R s3
1 s2 =&gt; 1 R s2
0 s3 =&gt; 1 L s4
1 s3 =&gt; 1 R s3
0 s4 =&gt; 0 L s5
1 s4 =&gt; 1 L s4
0 s5 =&gt; 1 R s1
1 s5 =&gt; 1 L s5
</code></p>

<p>C’est en deux parties, les deux premières lignes écrivent des données sur la
bande (le nombre <code>11</code>) et les neuf dernières lignes sont effectivement la
routine de copie. Une des limitations actuelles de ma machine de Turing est de
ne pas pouvoir initialiser la bande avec des données spécifiques, il faut donc
le faire depuis le programme, comme ici les deux premières lignes.</p>

<p>Les nouveautés dans ce jeu d’instructions sont les caractères <code>N</code>, qu’on peut
trouver dans les symboles à écrire et dans le mouvement de la tête de lecture,
par exemple dans la 3ème ligne:</p>

<pre><code>0 s1 =&gt; N N HALT
</code></pre>

<p>Cela signifie pas d’écriture et pas de mouvement (<strong>N</strong>o write, <strong>N</strong>o move).</p>

<p>Le parser étant déjà capable d’attraper n’importe quel mot/symbole, il suffit de
faire évoluer la méthode de mise à jour de la bande ainsi (c’est un peu lourd
comme écriture mais ça reste clair et pragmatique):</p>

<p>``` ruby lib/turing_machine/instance.rb
module TuringMachine</p>

<p>class Instance</p>

<p>[…]</p>

<pre><code>def update_tape(current_action)
  @tape.head = current_action[:write] unless current_action[:write] == 'N'
  @tape.shift_left if current_action[:move] == 'L'
  @tape.shift_right if current_action[:move] == 'R'
end
</code></pre>

<p>[…]
```</p>

<p>Et maintenant la routine de copie fonctionne !</p>

<pre><code>$ turing_machine instruction_sets/copy_with_data
  1 0000000000000000000000000000000000000000 A -&gt; 1LB
                       ^
  2 0000000000000000000100000000000000000000 B -&gt; 1Ns1
                      ^
  3 0000000000000000001100000000000000000000 s1 -&gt; 0Rs2
                      ^
  4 0000000000000000000100000000000000000000 s2 -&gt; 1Rs2
                       ^
  5 0000000000000000000100000000000000000000 s2 -&gt; 0Rs3
                        ^
  6 0000000000000000000100000000000000000000 s3 -&gt; 1Ls4
                         ^
  7 0000000000000000000101000000000000000000 s4 -&gt; 0Ls5
                        ^
  8 0000000000000000000101000000000000000000 s5 -&gt; 1Ls5
                       ^
  9 0000000000000000000101000000000000000000 s5 -&gt; 1Rs1
                      ^
 10 0000000000000000001101000000000000000000 s1 -&gt; 0Rs2
                       ^
 11 0000000000000000001001000000000000000000 s2 -&gt; 0Rs3
                        ^
 12 0000000000000000001001000000000000000000 s3 -&gt; 1Rs3
                         ^
 13 0000000000000000001001000000000000000000 s3 -&gt; 1Ls4
                          ^
 14 0000000000000000001001100000000000000000 s4 -&gt; 1Ls4
                         ^
 15 0000000000000000001001100000000000000000 s4 -&gt; 0Ls5
                        ^
 16 0000000000000000001001100000000000000000 s5 -&gt; 1Rs1
                       ^
 17 0000000000000000001101100000000000000000 s1 -&gt; NNHALT
                        ^
 18 0000000000000000001101100000000000000000 HALT
</code></pre>

<p>Le code est <a href="https://github.com/lkdjiin/turing_machine">sur Github</a>, à plus tard.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby - Le parser]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser/"/>
    <updated>2015-02-02T18:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/02/une-machine-de-turing-en-ruby-le-parser</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>La machine de Turing réalisée dans le <a href="/blog/2015/02/01/une-machine-de-turing-en-ruby/">dernier article</a>
était seulement un brouillon, et elle souffre de plusieurs limitations.
J’aimerais maintenant faire évoluer le programme en permettant à l’utilisateur
de charger un jeu d’instructions quelconque. Pour cela j’aurai besoin
d’un <em>parser</em>, qui sera vite écrit grâce à Ruby.</p>

<p><img class="center" src="/images/gears4.jpg"></p>

<!-- more -->

<p>Un jeu d’instruction pour la machine de Turing ressemblera à ceci (si vous avez
besoin du code, <a href="https://github.com/lkdjiin/turing_machine">il est ici</a>):</p>

<p><code>raw instruction_sets/busy_beaver_3
0 A =&gt; 1 R B
1 A =&gt; 1 L C
0 B =&gt; 1 L A
1 B =&gt; 1 R B
0 C =&gt; 1 L B
1 C =&gt; 1 R HALT
</code></p>

<p>C’est l’algorithme <em>busy beaver à 3 états</em> que j’ai utilisé pour coder la
première version de la machine. Il faut écrire un <em>parser</em> qui va transformer
ce <em>code source</em> en ce hash Ruby, utilisé en interne par la machine:</p>

<p><code>
{
  ['0', 'A'] =&gt; {write: '1', move: 'R', next_state: 'B'},
  ['1', 'A'] =&gt; {write: '1', move: 'L', next_state: 'C'},
  ['0', 'B'] =&gt; {write: '1', move: 'L', next_state: 'A'},
  ['1', 'B'] =&gt; {write: '1', move: 'R', next_state: 'B'},
  ['0', 'C'] =&gt; {write: '1', move: 'L', next_state: 'B'},
  ['1', 'C'] =&gt; {write: '1', move: 'R', next_state: 'HALT'},
}
</code></p>

<p>Voici le parser, qui est construit autour de la méthode <code>String#split</code>.</p>

<p>``` ruby lib/turing_machine/instructions_parser.rb
module TuringMachine</p>

<p>class InstructionsParser</p>

<pre><code>def initialize(raw_instructions)
  @lines = raw_instructions.split("\n")
  @instructions = {}
end

def parse
  build_instructions
  @instructions
end

private

def build_instructions
  @lines.each do |instruction|
    keys, value = instruction.split('=&gt;')
    key_symbol, key_state = keys.split
    write, move, next_state = value.split
    @instructions[[key_symbol, key_state]] = {
      write: write, move: move, next_state: next_state
    }
  end
end
</code></pre>

<p>end</p>

<p>end
```</p>

<p>On va l’utiliser comme ça:</p>

<p><code>ruby
raw_instructions = IO.read(ARGV[0])
parser = InstructionsParser.new(raw_instructions)
instructions = parser.parse
</code></p>

<p>Je vais expliquer plus en détail. Tout d’abord dans le constructeur, on divise
la grande chaîne de caractères en entrée en autant de lignes indépendantes:</p>

<pre><code>@lines = raw_instructions.split("\n")
</code></pre>

<p>Puis dans la méthode privée <code>build_instructions</code>, on itère sur chacune des
lignes pour construire le hash:</p>

<pre><code>@lines.each do |instruction|
</code></pre>

<p>Chaque ligne est d’abord divisé en deux parties, de chaque coté de <code>=&gt;</code>:</p>

<pre><code>keys, value = instruction.split('=&gt;')
</code></pre>

<p>La partie des clés (celle de gauche) est à son tour divisé en deux, le symbole
sous la tête de lecture et l’état de la machine:</p>

<pre><code>key_symbol, key_state = keys.split
</code></pre>

<p>Ensuite c’est au tour de la partie de droite, celle qui représente la prochaine
instruction:</p>

<pre><code>write, move, next_state = value.split
</code></pre>

<p>Enfin, on ajoute clé et valeur dans le hash:</p>

<pre><code>@instructions[[key_symbol, key_state]] = {
  write: write, move: move, next_state: next_state
}
</code></pre>

<p>Pour finir, voici mon premier jeu d’instructions pour une machine de Turing:</p>

<p><code>raw instruction_sets/write101
0 A =&gt; 1 R B
0 B =&gt; 0 R C
0 C =&gt; 1 R HALT
</code></p>

<p>Ça fait quoi ? Ça écrit 101, tout simplement :</p>

<pre><code> turing_machine instruction_sets/write101 
  1 0000000000000000000000000000000000000000 A -&gt; 1RB
                       ^
  2 0000000000000000000100000000000000000000 B -&gt; 0RC
                        ^
  3 0000000000000000000100000000000000000000 C -&gt; 1RHALT
                         ^
  4 0000000000000000000101000000000000000000 HALT
</code></pre>

<p>Je vous rappelle que vous pouvez consulter le code de la
<a href="https://github.com/lkdjiin/turing_machine">machine de Turing</a>.</p>

<p>Voilà, avec l’aide de <code>String#split</code> il est facile d’écrire un parser simple.
Alors bien sûr, ce parser n’est pas vraiment complet, il manque par exemple la
gestion des erreurs. Mais il y a des choses plus urgentes à implémenter, comme
le mouvement nul, le ruban infini, ou la possibilité de commencer le programme
avec un ruban qui contient des données…</p>

<p>À plus tard.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une machine de Turing en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby/"/>
    <updated>2015-02-01T10:11:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/02/01/une-machine-de-turing-en-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Avec le film <em>Imitation Game</em> sorti récemment, Alan Turing, qu’on peut considérer
comme un père fondateur de l’informatique, fait l’actualité.
Je vous propose, dans cet article, de réaliser une machine de Turing en Ruby.</p>

<p><img class="center" src="/images/alan-turing2.jpg"></p>

<!-- more -->

<h2 id="dfinition-de-la-machine-de-turing">Définition de la machine de Turing</h2>

<p>Ma définition personnelle sera la suivante:</p>

<p><strong>Une machine de Turing est une machine imaginaire et hyper-minimale, pouvant
faire tourner un algorithme.</strong></p>

<p>Si vous ressentez le besoin d’une définition plus formelle, les articles de
Wikipédia, en <a href="http://en.wikipedia.org/wiki/Turing_machine">anglais</a>
et en <a href="http://fr.wikipedia.org/wiki/Machine_de_Turing">français</a>
sont très bien fourni. Il y a aussi une présentation sympathique de la machine de
Turing dans une petite <a href="http://videotheque.cnrs.fr/doc=3001">vidéo en français</a>
de 7 minutes, par le CNRS.</p>

<p>Dans la suite de l’article, je prends comme hypothèse que vous savez ce qu’est
une machine de Turing. Si ça n’est pas le cas, ou si vous avez besoin de vous
rafraichir la mémoire, n’hésitez pas à visiter les liens précédents.</p>

<h2 id="on-fait-une-gem-">On fait une gem ?</h2>

<p>À terme, j’aimerais un programme qui puisse faire tourner n’importe quel jeu
d’instructions. Mais pour un premier jet, concret, rapidement réalisable, et
malgré tout intéressant,
on va faire tourner un <a href="http://en.wikipedia.org/wiki/Busy_beaver">busy beaver</a>
à 3 états.</p>

<p>Deux trucs à noter:</p>

<ol>
  <li><em>Busy beaver à 3 états</em> ça peut faire peur. Je vous assure qu’il n’y a pas
de quoi. C’est un algorithme relativement simple.</li>
  <li><em>Busy beaver</em> se traduit par <em>castor affairé</em>, c’est bien la preuve qu’il n’y
a pas de quoi avoir peur.</li>
</ol>

<p>Comme je veux une structure bien claire dès le départ, et pas un script vite
fait qu’on aura toutes les peines du monde à étendre, je vais faire une gem:</p>

<pre><code>$ bundle gem turing_machine -btV
      create  turing_machine/Gemfile
      create  turing_machine/Rakefile
      create  turing_machine/LICENSE.txt
      create  turing_machine/README.md
      create  turing_machine/.gitignore
      create  turing_machine/turing_machine.gemspec
      create  turing_machine/lib/turing_machine.rb
      create  turing_machine/lib/turing_machine/version.rb
      create  turing_machine/bin/turing_machine
      create  turing_machine/.rspec
      create  turing_machine/spec/spec_helper.rb
      create  turing_machine/spec/turing_machine_spec.rb
      create  turing_machine/.travis.yml
Initializing git repo in /home/xavier/devel/ruby/turing_machine
</code></pre>

<p>Vous pouvez trouver le code sur Github : <a href="https://github.com/lkdjiin/turing_machine">lkdjiin/turing_machine</a>.</p>

<h2 id="objectif-de-la-premire-version">Objectif de la première version</h2>

<p>Mon objectif est d’obtenir cette sortie quand je lance le programme
<code>turing_machine</code>:</p>

<pre><code>$ turing_machine 
  1 0000000000 A -&gt; 1RB
        ^
  2 0000100000 B -&gt; 1LA
         ^
  3 0000110000 A -&gt; 1LC
        ^
  4 0000110000 C -&gt; 1LB
       ^
  5 0001110000 B -&gt; 1LA
      ^
  6 0011110000 A -&gt; 1RB
     ^
  7 0111110000 B -&gt; 1RB
      ^
  8 0111110000 B -&gt; 1RB
       ^
  9 0111110000 B -&gt; 1RB
        ^
 10 0111110000 B -&gt; 1RB
         ^
 11 0111110000 B -&gt; 1LA
          ^
 12 0111111000 A -&gt; 1LC
         ^
 13 0111111000 C -&gt; 1RHALT
        ^
 14 0111111000 HALT
         ^
</code></pre>

<p>Explication d’une ligne de la sortie:</p>

<pre><code>  5 0001110000 B -&gt; 1LA
      ^ - Le `5` est le numéro de la séquence. - La suite de `0` et de `1` est le ruban. - Le `^` est la position de la tête de lecture. - Le `B` est l'état courant. - La fin, ici `1LA`, est la prochaine instruction à exécuter.
</code></pre>

<p>Une instruction est composé a) du symbole à écrire, b) du mouvement de la
tête de lecture et, c) du nouvel état. Par exemple <code>1LA</code> signifie: écrire <code>1</code>,
bouger la tête de lecture à gauche (<code>L</code>) et passer dans l’état <code>A</code>.</p>

<h2 id="une-classe-pour-le-ruban-et-la-tte-de-lecture">Une classe pour le ruban et la tête de lecture</h2>

<p>On commence par une classe <code>Tape</code> (ruban), que je combine avec <code>head</code> (tête de
lecture) pour aller plus vite.</p>

<p>``` ruby
class Tape</p>

<p>def initialize
    @symbols = Array.new(10) { ‘0’ }
    @index = 4
  end</p>

<p>attr_reader :index</p>

<p>def head
    @symbols[@index]
  end</p>

<p>def head=(symbol)
    @symbols[@index] = symbol
  end</p>

<p>def shift_left
    @index -= 1
  end</p>

<p>def shift_right
    @index += 1
  end</p>

<p>def to_s
    @symbols.join
  end
end
```</p>

<p>Il faut noter qu’une machine de Turing possède un ruban avec un nombre infini
de cellules. Ici ça n’est pas le cas puisqu’il n’y en a que 10. C’est un
raccourci qui permet d’aller plus vite, de garder le code simple, et 10 cellules
sont largement suffisantes pour le <em>busy beaver à 3 états</em>.</p>

<p><img class="center" src="/images/castor2.png"></p>

<h2 id="une-classe-pour-le-registre-dtat">Une classe pour le registre d’état</h2>

<p>Avoir une classe dédiée à conserver l’état peut sembler
<a href="http://fr.wikipedia.org/wiki/Overkill">overkill</a>. Et pour être honnête, je dois
dire que ça l’est certainement. Une simple variable aurait été suffisante pour
cette première version. Mais bon, je suis sûr que cette classe sera bientôt
utile ;)</p>

<p>``` ruby
class StateRegister</p>

<p>def initialize(state)
    @state = state
  end</p>

<p>def current
    @state
  end</p>

<p>def change(new_state)
    @state = new_state
  end</p>

<p>def to_s
    @state.to_s
  end
end
```</p>

<h2 id="une-classe-pour-la-table-dinstructions">Une classe pour la table d’instructions</h2>

<p>Ici aussi, j’aurais pu (du ?) faire appel au
<a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a>.
Un simple hash pourrait faire l’affaire pour l’instant.</p>

<p>``` ruby
class Instruction</p>

<p>def initialize(table)
    @table = table
  end</p>

<p>def for(symbol, state)
    @table[[symbol, state]]
  end</p>

<p>end
```</p>

<h2 id="une-instance-dune-machine-de-turing">Une instance d’une machine de Turing</h2>

<p>Les trois petites classes ci-dessus vont se combiner à l’intérieur de la
classe <code>Instance</code> suivante, pour simuler une machine de Turing. Même si elle
est un peu plus complexe que les précédentes, cette classe reste malgré tout
très simple.</p>

<p>``` ruby
class Instance</p>

<p>def initialize(instructions, initial_state)
    @instruction = Instruction.new(instructions)
    @state = StateRegister.new(initial_state)
    @tape = Tape.new
    @sequence = 1
  end</p>

<p>def to_s
    “#{‘%3d’ % @sequence} #{@tape} #{@state}#{instr_to_s}\n    “ +
    ‘ ‘ * @tape.index + ‘^’
  end</p>

<p>def proceed
    current = action
    update_sequence
    update_tape(current)
    update_state(current)
  end</p>

<p>def halted?
    @state.current == ‘HALT’
  end</p>

<p>private</p>

<p>def update_sequence
    @sequence += 1
  end</p>

<p>def update_tape(current_action)
    @tape.head = current_action[:write]
    current_action[:move] == ‘L’ ? @tape.shift_left : @tape.shift_right
  end</p>

<p>def update_state(current_action)
    @state.change(current_action[:next_state])
  end</p>

<p>def action
    @instruction.for(@tape.head, @state.current)
  end</p>

<p>def instr_to_s
    if halted?
      ‘’
    else
      “ -&gt; “ + action[:write] + action[:move] + action[:next_state]
    end
  end
end
```</p>

<h2 id="le-binaire">Le binaire</h2>

<p>Enfin quand je dis le binaire c’est un abus de langage puisque ça reste un
fichier texte ;) Quoiqu’il en soit voici le programme <code>turing_machine</code> qui
implémente le <em>busy beaver à 3 états</em>.</p>

<p>``` ruby bin/turing_machine
#!/usr/bin/env ruby</p>

<p>require ‘turing_machine’</p>

<p>include TuringMachine</p>

<p>instructions = {
  [‘0’, ‘A’] =&gt; {write: ‘1’, move: ‘R’, next_state: ‘B’},
  [‘1’, ‘A’] =&gt; {write: ‘1’, move: ‘L’, next_state: ‘C’},
  [‘0’, ‘B’] =&gt; {write: ‘1’, move: ‘L’, next_state: ‘A’},
  [‘1’, ‘B’] =&gt; {write: ‘1’, move: ‘R’, next_state: ‘B’},
  [‘0’, ‘C’] =&gt; {write: ‘1’, move: ‘L’, next_state: ‘B’},
  [‘1’, ‘C’] =&gt; {write: ‘1’, move: ‘R’, next_state: ‘HALT’},
}</p>

<p>initial_state = ‘A’</p>

<p>instance = Instance.new(instructions, initial_state)</p>

<p>loop do
  puts instance.to_s
  break if instance.halted?
  instance.proceed
end
```</p>

<p>Cette version (<a href="https://github.com/lkdjiin/turing_machine">voir le code complet</a>) est juste une mise en train. Il faudrait maintenant disposer
d’un ruban infini et pouvoir entrer n’importe quel jeu d’instructions.</p>

<p>À plus tard.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
