<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : compilateur | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/compilateur/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-22T21:29:03+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 10: émettre le code assembleur]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/20/implementer-un-langage-sur-parrot-partie-10-emettre-le-code-assembleur/"/>
    <updated>2013-08-20T10:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/20/implementer-un-langage-sur-parrot-partie-10-emettre-le-code-assembleur</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Maintenant qu'on a
<a href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/">vérifié la syntaxe</a>
de notre petit programme, on peut sortir le code assembleur PIR:</p>

<p><code>ruby lib/naam/main.rb
def self.run(filename)
  # ...
  comp = Compiler.new
  comp.compile(units.dup)
end
</code></p>

<!-- more -->


<p>Voici le module Emitter:</p>

<p>``` ruby lib/naam/emitter.rb
module Naam
  module Emitter</p>

<pre><code># Output the main procedure.
#
# series - An Array of String.
#
# Examples
#
#   Emitter.main(["foo(4)", "bar(-1)"]
#   # =&gt; .sub main :main
#   # =&gt;     .local int f
#   # =&gt;     f = foo(4)
#   # =&gt;     say f
#   # =&gt;     f = bar(-1)
#   # =&gt;     say f
#   # =&gt; .end
#
# Returns nothing.
def self.main(series)
  unless series.empty?
    puts
    puts ".sub main :main"
    puts "    .local int f"
    series.each do |str|
      puts "    f = #{str}"
      puts "    say f"
    end
    puts ".end"
  end
end

# Dispatch different kind of emit message.
#
# type   - A Symbol in :function_header, :function_footer,
#          :if_clause, :else_clause and :label.
# series - An Array of LexicalUnit.
# label  - Hash like { label: "NAME", value: "123" }. Could be nil.
#
# Returns nothing.
def self.emit(type, series, label)
  case type
  when :function_header then function_header(series)
  when :function_footer then function_footer
  when :if_clause then if_clause(series, label)
  when :else_clause then else_clause(series)
  when :label then label(series, label)
  else
    raise Error
  end
end

def self.function_header(series)
  puts ".sub " + series[0].value
  puts "    .param int " + series[2].value
  puts "    .local int result"
  puts
end

def self.function_footer
  puts "RETURN:"
  puts "    .return(result)"
  puts ".end"
end

def self.if_clause(series, label)
  puts "    if #{series[2].value} #{series[3].value} #{series[4].value} " +
       "goto #{label[:label]}"
end

def self.else_clause(series)
  puts "    result = #{series[0].value}"
  puts "    goto RETURN"
end

def self.label(series, label)
  puts label[:label] + ":"
  puts "    result = #{label[:value]}"
  puts "    goto RETURN"
end
</code></pre>

<p>  end
end
```</p>

<p>Et voilà quelques morceaux choisis dans la class Compiler pour montrer
son utilisation:</p>

<p>``` ruby lib/naam/compiler.rb
module Naam</p>

<p>  # Public: Here we transform a list of lexical units in a PIR source
  # code. At least this is the goal.
  #
  # The logic of this class try follow the grammar of Naam (see the file
  # grammar.md).
  class Compiler</p>

<pre><code>def initialize
  @series = []
  @current_label = "LABEL0000"
  @labels = []
  @main = []
end

# Public: Compile lexical units from a Naam program in a PIR
# program.
#
# units - Array of LexicalUnits
#
# Returns nothing.
def compile units
  @units = units
  program
end

private

# This is the entry rule.
#
# Returns nothing.
def program
  while @units.size &gt; 0
    @series = []
    case @units.first.type
    when :eol then accept(:eol)
    else
      instruction
    end
  end
  @labels.each {|lbl| emit(:label, lbl) }
  emit(:function_footer)
  Emitter.main(@main)
end

# ...

# Returns nothing.
def function_def
  accept_series(:word, :paro, :word, :parc, :affect, :eol)
  emit(:function_header)
  if_clause while if_clause?
  else_clause
end

# ...

# Send a message to Emitter module.
#
# type  - A Symbol (see Emitter).
# label - A Hash composed of:
#         :label - The label name as a String.
#         :value - The String value that will be returned by
#                  PIR instructions for this label.
#         By default, label is nil and unused.
#
# Returns nothing.
def emit(type, label = nil)
  Emitter.emit(type, @series, label)
  @series = []
end

# Get a label.
#
# value - String value associated to the label.
#
# Examples
#
#   next_label("123")
#   # =&gt; { label: "LABEL0000", value: "123" }
#   next_label("-9")
#   # =&gt; { label: "LABEL0001", value: "-9" }
#
# Returns the Hash label.
def next_label(value)
  temp = { label: @current_label, value: value }
  @labels &lt;&lt; temp
  @current_label = @current_label.next
  temp
end
</code></pre>

<p>  end
end
```</p>

<p>Maintenant que je le montre, je me rends compte que ce code n'est pas
terrible. Bien que le fichier source à compiler soit extremement simple,
je suis déjà obligé de faire un tas de contorsions, notamment pour sortir
la procédure main. Je pensais que c'était une bonne idée de méler
vérification de la syntaxe et production du code assembleur pour montrer
les relations entre ces deux phases, mais visiblement ça n'aide pas
à la clarté du code. La meilleure solution pour m'en sortir est, je pense,
de me servir d'un AST (Arbre syntaxique abstrait). La prochaine fois je
parlerais donc de l'AST.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 9: la syntaxe]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/"/>
    <updated>2013-08-18T08:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe</id>
    <content type="html"><![CDATA[<p>Après avoir écrit un
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">tokenizer</a>,
avoir produit les <a href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/">unités lexicales</a>
et avoir défini
<a href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/">une grammaire</a>
pour le langage Naam, je passe maintenant à la vérification de la syntaxe.</p>

<!-- more -->


<p>La vérification de la syntaxe se passe dans la classe <code>Compiler</code>. <em>&ndash; C'est pas
le meilleur choix de nom et ça changera par la suite &ndash;</em>. Basiquement, cette
classe ne fait que suivre la logique de la grammaire.</p>

<p>``` ruby lib/naam/compiler.rb
class Compiler</p>

<p>  # units &ndash; Array of LexicalUnits
  def compile units</p>

<pre><code>@units = units
program
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def program</p>

<pre><code>while @units.size &gt; 0
  case @units.first.type
  when :eol then accept(:eol)
  else
    instruction
  end
end
</code></pre>

<p>  end</p>

<p>  def instruction</p>

<pre><code>case @units.first.type
when :keyword then print_statement
when :word then function_def
else
  raise Error
end
</code></pre>

<p>  end</p>

<p>  def print_statement</p>

<pre><code>accept(:keyword, 'print')
accept_series(:word, :paro, :int, :parc, :eol)
</code></pre>

<p>  end</p>

<p>  def function_def</p>

<pre><code>accept_series(:word, :paro, :word, :parc, :affect, :eol)
if_clause while if_clause?
else_clause
</code></pre>

<p>  end</p>

<p>  def if_clause</p>

<pre><code>accept(:int)
accept(:keyword, 'if')
test
accept(:eol)
</code></pre>

<p>  end</p>

<p>  def else_clause</p>

<pre><code>accept(:int)
accept(:keyword, 'else')
accept(:eol)
</code></pre>

<p>  end</p>

<p>  def test</p>

<pre><code>accept_series(:word, :op, :int)
</code></pre>

<p>  end</p>

<p>  def accept(type, value = &lsquo;&rsquo;)</p>

<pre><code>unit = @units.slice!(0)
raise Error unless unit.type == type
if value != ''
  raise Error unless unit.value == value
end
</code></pre>

<p>  end</p>

<p>  def accept_series(*args)</p>

<pre><code>args.each {|arg| accept(arg) }
</code></pre>

<p>  end</p>

<p>  def if_clause?</p>

<pre><code>@units[1].type == :keyword &amp;&amp; @units[1].value == 'if'
</code></pre>

<p>  end
end
```</p>

<p>Quelques commentaires sur ce code:</p>

<p>``` ruby
def instruction
  # &hellip;
  else</p>

<pre><code>raise Error
</code></pre>

<p>  end
end
```</p>

<p>Plusieurs fois j'utilise la classe <code>Error</code>, qui n'existe pas. C'est parce que
je ne veux pas encore réfléchir à la gestion des erreurs. Les seuls cas qui
m'intéressent pour l'instant sont ceux où ça fonctionne.</p>

<p>`&ldquo; ruby
def accept(type, value = &rdquo;)
  unit = @units.slice!(0)
  raise Error unless unit.type == type
  if value != &lsquo;&rsquo;</p>

<pre><code>raise Error unless unit.value == value
</code></pre>

<p>  end
end
```</p>

<p>C'est la méthode <code>accept</code>, toute simple, qui effectue la vérification
de la syntaxe en comparant l'unité lexicale attendue avec celle réellement
disponible. On constate que les unités lexicales (représentées par <code>@units</code>)
sont détruites au fur et à mesure de leur consommation.</p>

<p>La prochaine, il sera enfin temps d'émettre le code PIR.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 8: la grammaire]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/"/>
    <updated>2013-08-17T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Écrire un langage sans en spécificier la grammaire c'est un peu comme se
tirer une balle dans le pied. Même quand le langage est aussi simple et
petit que
Naam (voir l'<a href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/">article originel</a>),
c'est un gain de temps pour la suite.</p>

<!-- more -->


<p>Pour spécificier la grammaire d'un langage informatique, on utilise
généralement la
<a href="http://fr.wikipedia.org/wiki/Forme_de_Backus-Naur">BNF</a>,
(Backus Naur Form) ou l'une de ses extensions. Il n'est pas rare qu'un auteur
utilise une version personnalisée de la BNF, et c'est ce que je vais faire
pour Naam.</p>

<p>Voici les quelques règles de la méta-syntaxe:</p>

<pre><code>{foo}         zero or more foo
foo | bar     foo or bar
foo           a non-terminal foo
'foo'         keyword foo
[foo]         zero or one foo
---           free speech
</code></pre>

<p>Et voici la grammaire de Naam:</p>

<pre><code>program           ::= {instruction | eol}

instruction       ::= function_def | print_statement

print_statement   ::= 'print' word ( int ) eol

function_def      ::= word ( word ) = eol {if_clause} else_clause

if_clause         ::= int 'if' test eol

test              ::= word op int

else_clause       ::= int 'else' eol

op                ::= &lt; | &gt;

eol               ::= --- End of line
int               ::= --- Integer
word              ::= --- Anything else
</code></pre>

<p>Cette grammaire est vraiment toute petite, mais suffisante pour spécifier
le programme suivant, qui est ce que j'ai choisi pour commencer à écrire
le compilateur Naam:</p>

<pre><code>sign(n)=
1 if n &gt; 0
-1 if n &lt; 0
0 else
</code></pre>

<p>Alors pourquoi écrire une grammaire ? Pourquoi ne pas commencer à coder
directement le compilateur ? Parce qu'il faut bien avouer qu'écrire une
telle grammaire n'a rien d'amusant. Tout d'abord une grammaire, même petite,
possède toujours un certain niveau de complexité qu'il est difficile de
faire tenir entièrement dans sa tête. En l'écrivant on met à jour certains
problèmes qui sinon resteraient cachés longtemps. Autre intéret d'écrire la
grammaire: chaque règle va devenir un morceau de code ; écrire la grammaire
c'est un peu comme avoir déjà écrit une partie du compilateur.
Dans un prochain article je suivrais cette grammaire pour effectuer la
vérification de la syntaxe.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 7: le lexer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/"/>
    <updated>2013-08-13T10:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir vu
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">la tokenisation</a>,
on continue aujourd'hui l'analyse
lexicale avec la production des lexèmes.</p>

<!-- more -->


<h2>Qu'est-ce qu'un lexème ?</h2>

<p>Si vous avez le temps, lisez <a href="http://fr.wikipedia.org/wiki/Lex%C3%A8me">l'article de wikipédia</a>.
Sinon voici ma définition pour le domaine qui nous intéresse:</p>

<p><blockquote><p>Un lexème (unité lexicale) est un token auquel on attache un type<br/>très basique.</p></blockquote></p>

<p>Par exemple, la phrase «Je mange.» donnerait:</p>

<pre><code>mot:         Je
mot:         mange
ponctuation: .
</code></pre>

<p>On pourrait produire un <em>lexer</em> plus intelligent qui donnerait:</p>

<pre><code>mot:         Je
verbe:       mange
ponctuation: .
</code></pre>

<p>Les langages informatiques étant beaucoup moins complexe que les
langages humains, écrire un <em>lexer</em> est souvent une formalité.</p>

<h2>Objectif</h2>

<p>L'objectif d'aujourd'hui est d'obtenir quelque chose comme ça:</p>

<p>``` console
[~/devel/ruby/naam]$ bin/naam spec/fixtures/sign.naam</p>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca2f8 @type=:word, @value=&ldquo;sign&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca258 @type=:paro, @value=&ldquo;(&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca0b4 @type=:word, @value=&ldquo;n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9fec @type=:parc, @value=&ldquo;)&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9ee8 @type=:affect, @value=&ldquo;=&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9de4 @type=:eol, @value=&ldquo;\n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9b8c @type=:int, @value=&ldquo;1&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc99d4 @type=:keyword, @value=&ldquo;if&rdquo;></h1>

<p>&hellip;
```</p>

<h2>Le code</h2>

<p>Le code source du projet est sur Github, à la
<a href="https://github.com/lkdjiin/naam/tree/v0.0.2">version 0.0.2</a>.</p>

<p>Bien souvent l'étape de tokenisation et de lexification peuvent être
regroupées en une seule et même étape. Là, j'ai choisi de les séparer pour
avoir un code plus simple à montrer. Tout d'abord, voici la classe
<code>lexical_unit</code>:</p>

<p>``` ruby lib/naam/parser/lexical_unit.rb
module Naam::Parser</p>

<p>  # A container for lexical units.
  class LexicalUnit</p>

<pre><code>private_class_method :new

attr_reader :type, :value

# type  - Symbol
# value - String
def initialize type, value
  @type = type
  @value = value
end

def self.int value ; new(:int, value) ; end
def self.word value ; new(:word, value) ; end
def self.keyword value ; new(:keyword, value) ; end
def self.op value ; new(:op, value) ; end
def self.paro ; new(:paro, "(") ; end
def self.parc ; new(:parc, ")") ; end
def self.eol ; new(:eol, "\n") ; end
def self.affect ; new(:affect, "=") ; end
</code></pre>

<p>  end
end
```</p>

<p>J'ai beau chercher, je ne trouve rien à dire d'intelligent sur cette classe.
J'avais prévenu: c'est très simple. Et ça continue, on passe maintenant au
<em>lexer</em> proprement dit, qui est tout aussi simple:</p>

<p>``` ruby lib/naam/parser/lexer.rb
module Naam::Parser
  class Lexer</p>

<pre><code>def from_token(token)
  if token == '('
    LexicalUnit.paro()
  elsif token == ')'
    LexicalUnit.parc()
  elsif token == "\n"
    LexicalUnit.eol()
  elsif token == '='
    LexicalUnit.affect()
  elsif token == '&lt;'
    LexicalUnit.op(token)
  elsif token == '&gt;'
    LexicalUnit.op(token)
  elsif token == 'if'
    LexicalUnit.keyword(token)
  elsif token == 'else'
    LexicalUnit.keyword(token)
  elsif token =~ /[+|-]?\d+/
    LexicalUnit.int(token)
  else
    LexicalUnit.word(token)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Voilà, on a fini l'analyse lexicale, c'est à dire la première phase
de l'écriture d'un compilateur. La prochaine fois je parlerais de la
grammaire de Naam, ce qui enclenchera la phase d'analyse syntaxique.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parrot 6: Écrire le tokenizer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/"/>
    <updated>2013-08-12T09:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir défini un semblant de
<a href="http://lkdjiin.github.io/blog/2013/08/11/parrot-5-un-plan-pour-ecrire-un-compilateur/">méthode de travail</a>
on s'attaque aujourd'hui à l'écriture d'un
<a href="http://en.wikipedia.org/wiki/Tokenization">tokenizer</a>
pour Naam.</p>

<!-- more -->


<h2>Le tokenizer</h2>

<p>Le code du projet est en ligne sur Github à l'adresse suivante:
<a href="https://github.com/lkdjiin/naam">naam</a>.
N'hésitez pas à le consulter. Les extraits qui suivront sont tirés de la
version 0.0.1.</p>

<p>La <em>tokenization</em> est le processus de séparation des éléments
basiques d'un langage.
C'est la première étape de l'analyse lexicale.
Par exemple, à partir du programme suivant:</p>

<pre><code>sign(n)=
1  if n &gt; 0
-1 if n &lt; 0
0  else

print sign(4)
</code></pre>

<p>Je veut obtenir la suite de tokens suivante:</p>

<pre><code>sign
(
n
)
=

1
if
n
&gt;
0

-1
if
n
&lt;
0

0
else


print
sign
(
4
)
</code></pre>

<p>Je vais d'abord introduire la classe <code>Main</code>, qui est certainement
temporaire et aussi (exceptionnellement) la seule à ne pas être
testée. Elle est juste là pour me permettre de visualiser les
résultats.
Le principe est très simple:</p>

<p>``` ruby lib/naam/main.rb
class Main
  def self.run(filename)</p>

<pre><code>source_lines = Reader.read filename
source_lines.each do |line|
  tkr = Parser::Tokenizer.new(line)
  while tkr.has_more_token?
    puts tkr.next_token
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Maintenant, on passe au truc intéressant, le tokenizer
proprement dit:</p>

<p>``` ruby lib/naam/parser/tokenizer.rb
module Naam::Parser</p>

<p>  # Internal: Tokenize a string of naam code.
  class Tokenizer</p>

<pre><code># Public: Initialize a new Tokenizer object, ready to
# tokenize a string of naam code.
#
# code - A String of naam code.
def initialize code
  @index = 0
  @token = ''
  @look_ahead = ''
  @codeline = code
  forward_look_ahead
end

# Public: Get the next token from the code.
#
# Returns The String token.
def next_token
  token = produce_next_token
  skip_white
  @token = ''
  token
end

# Public: Tells if a token is available.
#
# Returns Boolean.
def has_more_token?
  @index &lt;= @codeline.size
end

private

# Look to the next character in the code.
#
# Returns nothing.
def forward_look_ahead
  @look_ahead = @codeline[@index, 1]
  @index += 1
end

# Returns the String next available token.
def produce_next_token
  if @look_ahead =~ /[0-9]/
    get_integer
  elsif @look_ahead == '('
    get_paro
  elsif @look_ahead == ')'
    get_parc
  elsif @look_ahead == '='
    get_eq
  elsif @look_ahead == "\n"
    get_eol
  else
    get_word
  end
end

# Skip all «white» characters until next non-white one.
# Currently only spaces are considered as white.
#
# Returns nothing.
def skip_white
  forward_look_ahead while @look_ahead == ' '
end

# Returns a String of what naam considered an integer.
def get_integer
  add_look_ahead while @look_ahead =~ /[0-9]/
  @token
end

# Returns String opened parenthesis.
def get_paro; add_this_char; end

# Returns String closed parenthesis.
def get_parc; add_this_char; end

# Returns String equal symbol "=".
def get_eq; add_this_char; end

# Returns String end of line "\n".
def get_eol; add_this_char; end

# Add current character to the current token and return it.
# Usefull shorthand for single character's tokens.
#
# Returns the String current token.
def add_this_char
  add_look_ahead
  @token
end

# If it's not anything else, it's what naam language call a word.
#
# Returns String.
def get_word
  add_look_ahead while not @look_ahead =~ /[\(\)=\n ]/
  @token
end

# Add current character to current token, then look for the
# next char, ready for another cycle.
#
# Returns nothing.
def add_look_ahead
  @token &lt;&lt; @look_ahead
  forward_look_ahead
end
</code></pre>

<p>  end
end
```</p>

<p>Chaque méthode est suffisament documentée pour que vous puissiez
comprendre la logique de la bestiole. La prochaine fois on s'attaque
au <em>lexer</em>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
