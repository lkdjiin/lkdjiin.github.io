<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : astuce | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/astuce/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-13T20:09:40+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rechercher avec grep dans un fichier compressé]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse/"/>
    <updated>2014-05-22T21:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/22/recherchez-avec-grep-dans-un-fichier-compresse</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Il vous arrive peut-être parfois d'avoir à fouiller des fichiers de log ?
Vous utiliser <code>grep</code> pour ça ? Et comment faire quand les logs sont
compressés ?</p>

<!-- more -->


<p>Lorsque le log est normal, c'est à dire non-compressé, on peut utiliser la
commande <code>grep</code> suivante:</p>

<p><code>bash
$ grep --color 'LOWER' test.log
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Elle va afficher toutes les lignes du fichier <code>test.log</code> qui contiennent le
mot <code>LOWER</code>.</p>

<p>Mais si on fait la même chose sur un log compressé:</p>

<p><code>bash
$ grep --color 'LOWER' test.log.1.gz
$ 1
</code></p>

<p>Ça ne fonctionne pas. Ci-dessus, le <code>$ 1</code>, c'est mon shell qui m'affiche
une erreur sous la forme du code de retour (une idée pour un futur article).</p>

<p>Pour chercher dans un fichier compressé avec <code>grep</code>, on peut utiliser très
simplement la commande <code>zgrep</code>:</p>

<p><code>bash
$ zgrep --color 'LOWER' test.log.1.gz
  User Exists (0.8ms)  SELECT 1 AS one FROM "users" WHERE LOWER("users"."email")   = LOWER('foo@example.com') LIMIT 1
</code></p>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insérer le contenu d'un fichier ou d'une commande shell dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/"/>
    <updated>2014-04-29T21:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour insérer le contenu d'un fichier quelconque dans le buffer courant de
Vim, utilisez la commande <code>:r</code>:</p>

<!-- more -->


<p>Comme dans: <code>:r /mon/fichier/quelconque</code>.</p>

<p>C'est vraiment utile parfois, le problème est que le nom du fichier doit
être
absolu, ou doit commencer par le tilde (<code>~</code>). Ce qui dans certains cas
limite pas mal l'usage de cette commande.</p>

<p>Au fait, <code>r</code> est le petit nom de <code>read</code> :)</p>

<p>La version avec un point d'exclamation <code>:r!</code> est aussi très intéressante
puisqu'elle insère la sortie d'une commande shell. Par exemple, si je tape:</p>

<pre><code>:r! cal
</code></pre>

<p>Cela va insèrer le calendrier du mois dans cet article, comme ceci:</p>

<pre><code>     Avril 2014
di lu ma me je ve sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30
</code></pre>

<p>Mais là encore j'ai un souci. Ça ne fonctionne qu'avec des commandes shell
et automatiquement dans mon <em>home</em>. Je m'explique:</p>

<ol>
<li>Si j'édite un fichier <code>~/dossier/fichier</code> et que je veuille insérer le
contenu de <code>dossier</code>, je dois écrire <code>:r! ls ~/dossier</code>. Alors que
j'aimerais écrire juste <code>:r! ls</code>.</li>
<li>J'aimerais bien pouvoir insérer avec <code>r</code> la sortie de mes tests Rspec,
par exemple. Mais <code>:r! rspec ~/mon/fichier</code> ne fonctionne pas, <code>rspec</code>
n'étant pas reconnu par Vim comme étant une commande.</li>
</ol>


<p>Enfin, bref, si tu sais comment venir à bout de ses limitations, ton
commentaire m'intéresse. Sinon, il m'intéresse aussi ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Comment ouvrir la fenêtre courante dans un nouvel onglet]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/"/>
    <updated>2014-03-26T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vous avez un écran bien large ? Vous travaillez régulierement avec 4 ou 5
fenêtres dans le même onglet, voir plus ?
Parfois vous aimeriez bien ouvrir rapidement une de ces fenêtres dans un
nouvel onglet ?</p>

<!-- more -->


<p>Alors ça va peut-être bien être l'article le plus court de l'histoire de ce
blog:</p>

<p><code>vim
:tab sp
</code></p>

<p>Et la fenêtre courante s'ouvre dans un nouvel onglet (<code>sp</code> est l'abréviation
de <code>split</code>).</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Bash - Améliorer l'historique]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/"/>
    <updated>2014-02-20T21:02:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans Bash, chaque appui sur la touche «flêche vers le haut» fait défiler
l'historique des commandes. Si la commande recherchée se situe à quelques
dizaines d'appuis, ça n'est pas très pratique. Voici une astuce pour
aller plus vite.</p>

<!-- more -->


<p>Ajoutez les lignes suivantes dans votre fichier <code>~/.inputrc</code>. Si ce dernier
n'existe pas, créez le.</p>

<p><code>bash ~/.input
"\e[A": history-search-backward
"\e[B": history-search-forward
set show-all-if-ambiguous on
set completion-ignore-case on
</code></p>

<p>Maintenant il suffit de saisir les premières lettres de la commande
recherchée et la flêche vers le haut ne fera défilée que les commandes
de votre historique qui commencent par ces caractères.</p>

<p>Quand j'aurais plus de temps, j'aimerais revenir sur ces lignes pour
fournir une explication, en attendant je vous souhaite une bonne
utilisation de votre historique boosté ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce pour Git - merge et checkout en une commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande/"/>
    <updated>2014-02-19T20:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui, je vous présente un petit script pour Git. Il vous permettra,
en une commande, de merger la branche courante dans <code>master</code> et de vous
retrouver sur <code>master</code>.</p>

<!-- more -->


<p>Ce script, <code>merge-me</code>, est a placer quelquepart dans votre <code>$PATH</code>.
N'oubliez pas de lui fournir les droits d'exécution (<code>chmod +x</code>).</p>

<p>``` bash merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
git checkout master
git merge $BRANCH_TO_MERGE
```</p>

<p>Une fois installé, en partant d'une branche <code>ma-branche</code>, vous tapez:</p>

<pre><code>git merge-me
</code></pre>

<p>et la branche <code>ma-branche</code> sera mergée dans la branche <code>master</code>.</p>

<p>N'hésitez pas à vous en servir comme d'un point de départ et à le modifier,
à lui ajouter des fonctionnalités.</p>

<p>Tiens, d'ailleurs ! Vous y ajouteriez quoi ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
