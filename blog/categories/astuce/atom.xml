<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : astuce | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/astuce/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-25T21:00:12+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Astuce Bash - Améliorer l'historique]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique/"/>
    <updated>2014-02-20T21:02:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/20/astuce-bash-ameliorer-lhistorique</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans Bash, chaque appui sur la touche «flêche vers le haut» fait défiler
l'historique des commandes. Si la commande recherchée se situe à quelques
dizaines d'appuis, ça n'est pas très pratique. Voici une astuce pour
aller plus vite.</p>

<!-- more -->


<p>Ajoutez les lignes suivantes dans votre fichier <code>~/.inputrc</code>. Si ce dernier
n'existe pas, créez le.</p>

<p><code>bash ~/.input
"\e[A": history-search-backward
"\e[B": history-search-forward
set show-all-if-ambiguous on
set completion-ignore-case on
</code></p>

<p>Maintenant il suffit de saisir les premières lettres de la commande
recherchée et la flêche vers le haut ne fera défilée que les commandes
de votre historique qui commencent par ces caractères.</p>

<p>Quand j'aurais plus de temps, j'aimerais revenir sur ces lignes pour
fournir une explication, en attendant je vous souhaite une bonne
utilisation de votre historique boosté ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce pour Git - merge et checkout en une commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande/"/>
    <updated>2014-02-19T20:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui, je vous présente un petit script pour Git. Il vous permettra,
en une commande, de merger la branche courante dans <code>master</code> et de vous
retrouver sur <code>master</code>.</p>

<!-- more -->


<p>Ce script, <code>merge-me</code>, est a placer quelquepart dans votre <code>$PATH</code>.
N'oubliez pas de lui fournir les droits d'exécution (<code>chmod +x</code>).</p>

<p>``` bash merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
git checkout master
git merge $BRANCH_TO_MERGE
```</p>

<p>Une fois installé, en partant d'une branche <code>ma-branche</code>, vous tapez:</p>

<pre><code>git merge-me
</code></pre>

<p>et la branche <code>ma-branche</code> sera mergée dans la branche <code>master</code>.</p>

<p>N'hésitez pas à vous en servir comme d'un point de départ et à le modifier,
à lui ajouter des fonctionnalités.</p>

<p>Tiens, d'ailleurs ! Vous y ajouteriez quoi ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment mettre temporairement de coté ses modifications de code avec Git]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git/"/>
    <updated>2014-02-18T21:03:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><strong>Scénario</strong> : Vous êtes en train de travailler sur la branche
<code>ma-nouvelle-fonction</code> et on vous demande de réparer un bug de toute
urgence. Ce bug est sur la branche <code>master</code>.</p>

<p><strong>Problème</strong> : votre branche
<code>ma-nouvelle-fonction</code> est dans un état instable, vous n'êtes pas prêt
à commiter les changements. Il se peut que le code ne fonctionne pas,
qu'il vous faille 10 minutes pour faire des commits propres, etc.</p>

<!-- more -->


<p><strong>Solution</strong> : Utilisez <code>git stash</code>.</p>

<p>Il vous suffit d'entrer:</p>

<pre><code>git stash
</code></pre>

<p>et tous vos changements vont être mis dans la «zone de stashing». Une
espèce d'endroit à part. Votre branche <code>ma-nouvelle-fonction</code> se retrouve
dans l'état stable du dernier commit.</p>

<p>Vous pouvez maintenant créer une nouvelle branche <code>mon-fix</code> à partir de
<code>master</code>, travailler dessus, commiter, pusher, merger, enfin bref faire
ce que vous avez à faire.</p>

<p>Quand vous en avez fini, vous pouvez retourner sur la branche
<code>ma-nouvelle-fonction</code> et récupérer vos modifications:</p>

<pre><code>git checkout ma-nouvelle-fonction
git stash pop
</code></pre>

<p><code>git stash pop</code> va réintroduire vos modifications et effacer la zone de
stashing.</p>

<p>La commande <code>stash</code> peut faire bien d'autres choses que ce que je viens
de montrer, c'est tout juste le sommet de l'iceberg. Je vous recommande
donc un petit <code>git help stash</code> pour en savoir plus.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Ruby - Utiliser les variables d'environnement]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement/"/>
    <updated>2014-02-07T20:47:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/07/astuce-ruby-utiliser-les-variables-denvironnement</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour un projet en cours, je dois accéder à une variable d'environnement
passée par la ligne de commande. Voici comment faire, et pourquoi le
faire.</p>

<!-- more -->


<h2>Comment faire ?</h2>

<p>Dans Ruby, on accède aux variables d'environnement à l'aide
du hash <code>ENV</code>. Pour créer une variable d'environnement qui ne sera
connue que de votre programme, il faut
l'affecter avant la commande:</p>

<p>``` irb
$ MYVAR=1 irb</p>

<blockquote><blockquote><p>p ENV[&lsquo;MYVAR&rsquo;]
&ldquo;1&rdquo;
exit
```</p></blockquote></blockquote>

<p>La syntaxe suivante crée une variable d'environnement avec une chaîne
vide:</p>

<p>``` irb
$ MYVAR= irb</p>

<blockquote><blockquote><p>p ENV[&lsquo;MYVAR&rsquo;]
&ldquo;&rdquo;
```</p></blockquote></blockquote>

<p>Une variable d'environnement inexistante renverra <code>nil</code>:</p>

<p>``` irb
$ irb</p>

<blockquote><blockquote><p>ENV[&lsquo;MYVAR&rsquo;]
nil
```</p></blockquote></blockquote>

<h2>Pourquoi faire ?</h2>

<p>Pour prendre des décisions qui ne sont connues
qu'au lancement du programme, on se sert normalement des options en
ligne de commande, du genre:</p>

<pre><code>$ foo -a --bar
</code></pre>

<p>Mais quand un programme A est lancé par un autre programme B, ou
bien par le
déclenchement du programme B, on n'a pas forcement la possibilité
d'ajouter des options au programme A. Dans ce cas les variables
d'environnement sont une solution.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typematrix 2030: Problème avec le pavé numérique]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/20/typematrix-2030-probleme-avec-le-pave-numerique/"/>
    <updated>2013-12-20T16:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/20/typematrix-2030-probleme-avec-le-pave-numerique</id>
    <content type="html"><![CDATA[<p>Normalement, un simple appui sur la touche «num» bascule du clavier
normal vers le clavier numérique et vice-versa. Cela fonctionnait
très bien quand j'ai reçu le clavier et puis d'un jour à l'autre,
sans prévenir, plus rien…</p>

<!-- more -->


<p>Quand je dis «plus rien», je veux dire : l'appui sur la touche «num» met
bien en marche la petite led, mais quand tu appuis sur un chiffre, ça
marche pas.</p>

<p>Frustrant. Surtout quand tu met plus de 100€ dans un clavier et qu'en faisant
quelques recherches tu t'aperçois que c'est un problème récurrent et
que <a href="http://typematrix.com/support/user-guide.php">le site de Typematrix</a> n'est pas très loquace sur le sujet. En gros tu ne
trouves pas la solution à ton problème (récurrent hein) sur le site du
fabriquant. Il me semble pourtant que la FAQ serait un bon endroit pour
ça, non ?</p>

<p>Bref, le Typematrix 2030 gère la bascule pavé numérique/clavier normal en
interne, et pour cela, il s'attend à ce que l'ordinateur démarre en mode
«verrou numérique». Ce que font 99% des machines, dont la mienne. C'est donc
pas le problème.</p>

<p>La solution, <a href="http://brainstormy.wordpress.com/2011/11/29/typematrix-ez-2030-et-ubuntu-11-10/">trouvée ici</a> (au passage un grand merci !),
est de décocher l'option «permettre le contrôle du pointeur en utilisant le
pavé numérique» qui, sur Debian, se trouve dans <code>Système&gt;Préférences&gt;Clavier</code>.</p>

<p>Grâce à cela, ça fonctionne de nouveau. Mais il reste toujours un mystère.
Si cette fameuse option était précédement décochée, comment s'est-elle
retrouvée cochée ? Dans le cas contraire, pourquoi le Typematrix s'est
mis soudainement à la considérer ? En conclusion, ça marche, mais je ne
sais pas vraiment pourquoi.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
