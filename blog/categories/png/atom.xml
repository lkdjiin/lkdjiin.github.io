<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : png | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/png/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-01-02T19:01:37+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prise en main de la gem chunky_png]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png/"/>
    <updated>2013-11-07T17:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/07/prise-en-main-de-la-gem-chunky-png</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour un projet j'ai besoin de manipuler du format png et j'ai décidé
d'utiliser la gem <code>chunky_png</code> pour faire ça. Comme je ne la connais pas,
j'écris aujourd'hui une rapide prise en main de cette gem, histoire de me
familiariser avec.</p>

<p>Pour l'installer, c'est comme d'habitude:</p>

<pre><code>gem install chunky_png
</code></pre>

<!-- more -->


<p>Pour la documentation on pourra commencer par <a href="https://github.com/wvanbergen/chunky_png/wiki">le wiki</a> du projet.</p>

<p>La première chose que je veux faire c'est lire et écrire un fichier png.</p>

<p>``` ruby test.rb
require &ldquo;chunky_png&rdquo;</p>

<p>image = ChunkyPNG::Image.from_file(ARGV[0])
image.save(&ldquo;copy.png&rdquo;)
```</p>

<p>Après l'avoir lancé, ce programme crée une copie de l'image originale sous le
nom &ldquo;copy.png&rdquo;:</p>

<pre><code>[~]⇒ ruby test.rb test.png 
</code></pre>

<p>Super, bon début. Maintenant je voudrais accéder à la valeur RGB d'un pixel
quelconque de l'image. Voici le second programme:</p>

<p>``` ruby test2.rb
require &ldquo;chunky_png&rdquo;</p>

<p>image = ChunkyPNG::Image.from_file(ARGV[0])</p>

<p>p ChunkyPNG::Color.r(image[0, 0])
p ChunkyPNG::Color.g(image[20, 20])
p ChunkyPNG::Color.b(image[40, 40])
p ChunkyPNG::Color.to_hex(image[60, 60])
p ChunkyPNG::Color.to_truecolor_bytes(image[80, 80])
```</p>

<p>Et un exemple de sortie possible:</p>

<pre><code>[~]⇒ ruby test2.rb test.png 
255
255
255
"#000000ff"
[0, 0, 0]
</code></pre>

<p>L'image est vue comme un tableau à 2 dimensions: <code>image[x, y]</code>.
Les méthodes <code>r</code>, <code>g</code> et <code>b</code> renvoient respectivement la composante rouge,
verte ou bleue du pixel. La méthode <code>to_hex</code> formate <em>à la HTML</em> et la
méthode <code>to_truecolor_bytes</code> renvoie un tableau des trois composantes RGB.</p>

<p>J'aimerais maintenant dessiner un rectangle dans l'image:</p>

<p>``` ruby test3.rb
require &ldquo;chunky_png&rdquo;</p>

<p>image = ChunkyPNG::Image.from_file(ARGV[0])
image.rect(0, 0, 99, 99)
image.save(&ldquo;copy.png&rdquo;)
```</p>

<p>Si vous lancez ce programme (avec <code>ruby test3.rb test.png</code>), vous verrez
qu'il dessine bien un rectangle (x = 0, y = 0, largeur = 99, hauteur = 99).
Malheureusement, seul le <em>contour</em> du rectangle est dessiné.
Pour dessiner un rectangle rempli, il en faut un peu plus:</p>

<p>``` ruby test4.rb
require &ldquo;chunky_png&rdquo;</p>

<p>my_color = ChunkyPNG::Color.rgb(10, 100, 200)</p>

<p>image = ChunkyPNG::Image.from_file(ARGV[0])
image.rect(0, 0, 99, 99, my_color, my_color)
image.save(&ldquo;copy.png&rdquo;)
```</p>

<p>Cette fois on a bien un rectangle <em>rempli</em>. Et au passage on voit comment
définir une couleur au format RGB.</p>

<p>Pour finir, je voudrais créer une image:</p>

<p>``` ruby test5.png
require &ldquo;chunky_png&rdquo;</p>

<p>image = ChunkyPNG::Image.new(400,</p>

<pre><code>                         400,
                         ChunkyPNG::Color::WHITE)
</code></pre>

<p>my_color = ChunkyPNG::Color.rgb(10, 100, 200)
my_color2 = ChunkyPNG::Color.rgb(110, 10, 100)</p>

<p>image.rect(0, 0, 199, 199, my_color, my_color)
image.rect(200, 200, 399, 399, my_color2, my_color2)</p>

<p>image.save(&ldquo;new.png&rdquo;)
```</p>

<p>Le programme se lance avec <code>ruby test5.rb</code> et crée une nouvelle image <code>new.png</code>.
Le constructeur de <code>Image</code> prend tout simplement la largeur, la hauteur et
la couleur de fond de l'image.</p>

<p>En bref, <code>chunky_png</code> est une gem qui a l'air simple a utiliser.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
