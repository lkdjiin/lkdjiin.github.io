<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : enumerable | lkdjiin]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/enumerable/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-01-22T17:34:20+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Utiliser Enumerable en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/09/utiliser-enumerable-en-ruby/"/>
    <updated>2014-06-09T16:47:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/09/utiliser-enumerable-en-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Il y a quelques jours, j'ai testé Opal.rb. Et pour ça, j'ai écris un jeu
du type Space Invaders ;) J'ai une classe <code>Enemy</code>, que je peux résumer ainsi:</p>

<p>``` ruby
class Enemy
  attr_reader :x, :y
  def initialize(x, y)</p>

<pre><code>@x = x
@y = y
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>"#&lt;Enemy x:#@x y:#@y&gt;"
</code></pre>

<p>  end
end
```</p>

<!-- more -->


<p>J'ai aussi une classe <code>Enemies</code>, pour gérer ce qui se passe au niveau de
tous les ennemies. Inclure le module <a href="http://ruby-doc.org/core-2.1.2/Enumerable.html">Enumerable</a>
et définir la méthode <code>each</code> me permet d'utiliser toutes les méthodes de ce
module.</p>

<p>``` ruby
class Enemies
  include Enumerable</p>

<p>  def initialize</p>

<pre><code>@enemies = []
</code></pre>

<p>  end</p>

<p>  def each(&amp;block)</p>

<pre><code>@enemies.each(&amp;block)
</code></pre>

<p>  end</p>

<p>  def &lt;&lt;(item)</p>

<pre><code>@enemies &lt;&lt; item
</code></pre>

<p>  end
end
```</p>

<p>Créons un groupe de trois ennemies :</p>

<p><code>ruby
enemies = Enemies.new
enemies &lt;&lt; Enemy.new(10, 15)
enemies &lt;&lt; Enemy.new(20, 15)
enemies &lt;&lt; Enemy.new(10, 40)
</code></p>

<p>Voyons si <code>each</code> fonctionne bien :</p>

<pre><code>&gt; enemies.each {|item| puts item }
#&lt;Enemy x:10 y:15&gt;
#&lt;Enemy x:20 y:15&gt;
#&lt;Enemy x:10 y:40&gt;
</code></pre>

<p>J'ai donc accès à toutes les autres méthodes de <code>Enumerable</code>, comme par
exemple <code>select</code>:</p>

<pre><code>&gt; puts enemies.select {|item| item.x == 10 }
#&lt;Enemy x:10 y:15&gt;
#&lt;Enemy x:10 y:40&gt;
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
