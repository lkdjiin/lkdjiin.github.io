<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : imagerie | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/imagerie/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-18T20:48:54+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 34]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/18/les-algorithmes-genetiques-demystifies-34/"/>
    <updated>2013-10-18T20:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/18/les-algorithmes-genetiques-demystifies-34</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir vu comment créer un individu qui représente une image,
on regarde aujourd'hui comment évaluer une image.</p>

<!-- more -->


<p>N'étant pas familier du traitement d'image et de tout ce qui s'y rapporte,
j'avoue avoir eu un petit instant de panique quand je me suis demandé:
«Comment savoir, entre deux images, laquelle est <em>la plus proche</em> d'une image
de référence ?».</p>

<p>Et puis j'ai respiré un bon coup: après tout une image n'est rien d'autre
qu'une liste de données, on a qu'à faire au plus simple, c'est à dire
comparer chaque pixel. Y'avait vraiment pas de quoi paniquer ! Voilà donc
la fonction <code>quality</code> qui mesure la similitude entre une image d'origine
et une image candidate:</p>

<p>``` javascript
function quality(individual) {
  var imgOrigin = ctxOrigin.getImageData(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
  var pixelArrayOrigin = imgOrigin.data;
  var score = 0;
  renderIndividual(individual, ctxBuffer);
  var imgBuffer = ctxBuffer.getImageData(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
  var pixelArrayCandidate = imgBuffer.data;
  for (var i = 0, n = pixelArrayOrigin.length; i &lt; n; i += 4) {</p>

<pre><code>score += Math.abs(pixelArrayOrigin[i] - pixelArrayCandidate[i]);
score += Math.abs(pixelArrayOrigin[i+1] - pixelArrayCandidate[i+1]);
score += Math.abs(pixelArrayOrigin[i+2] - pixelArrayCandidate[i+2]);
</code></pre>

<p>  }
  return 1 / score;
}
```</p>

<p>C'est parti pour quelques explications. On récupère les pixels de
l'image d'origine (qui se trouve dans un canvas) dans la variable
<code>pixelArrayOrigin</code>:</p>

<pre><code>var imgOrigin = ctxOrigin.getImageData(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
var pixelArrayOrigin = imgOrigin.data;
</code></pre>

<p>Ensuite, on construit l'image candidate dans un canvas non-affiché. La
fonction <code>renderIndividual</code> sera détaillée plus tard:</p>

<pre><code>renderIndividual(individual, ctxBuffer);
</code></pre>

<p>On récupère les pixels de cette image candidate dans <code>pixelArrayCandidate</code>:</p>

<pre><code>var imgBuffer = ctxBuffer.getImageData(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
var pixelArrayCandidate = imgBuffer.data;
</code></pre>

<p>Maintenant on vérifie les pixels un à un. Un pixel est représenté par quatre
nombres, respectivement rouge, vert, bleu et alpha. Le score augmente de la
différence entre les composantes rouges, vertes et bleues:</p>

<pre><code>for (var i = 0, n = pixelArrayOrigin.length; i &lt; n; i += 4) {
  score += Math.abs(pixelArrayOrigin[i] - pixelArrayCandidate[i]);
  score += Math.abs(pixelArrayOrigin[i+1] - pixelArrayCandidate[i+1]);
  score += Math.abs(pixelArrayOrigin[i+2] - pixelArrayCandidate[i+2]);
}
</code></pre>

<p>Finalement on retourne l'inverse pour avoir un score compris entre
0 et 1:</p>

<pre><code>return 1 / score;
</code></pre>

<p>La prochaine fois, on met l'algorithme de <em>Hill-Climbing</em> en place.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: Imagerie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie/"/>
    <updated>2013-10-16T16:31:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Bonjour, aujourd'hui on commence une nouvelle étude sur les algorithmes
génétiques avec un problème sympa : recréer une photo à partir de plusieurs
carrés de tailles et de couleurs différentes. Au début, l'image est
générée au hasard:</p>

<p><img src="/images/Capture-13.jpg"></p>

<p>Puis, petit à petit, elle converge vers la photo d'origine:</p>

<p><img src="/images/Capture-11.jpg"></p>

<!-- more -->


<p>Avant tout, il faut réfléchir à deux choses: la représentation des individus
et l'évaluation. De plus, comme je l'ai déjà mentionné, Javascript n'est pas
mon fort. Alors plutôt que d'écrire tout de suite un algorithme génétique, je
vais d'abord essayer de mettre en place un algorithme de <em>Hill Climbing</em>.</p>

<h2>Les individus</h2>

<p>Chaque <em>solution/individu</em> sera composé de quelques centaines de petits carrés.
Chaque carré pourra être personnalisé grâce à:</p>

<ul>
<li>sa position x</li>
<li>sa position y</li>
<li>sa taille</li>
<li>sa couleur (rouge, vert et bleu)</li>
<li>sa transparence</li>
</ul>


<p>Voici comment je traduis ça en Javascript:</p>

<p>``` javascript
function makeIndividual() {
  var individual = [];
  for (var i = 0; i &lt; TOTAL_SQUARES; i++) {</p>

<pre><code>individual.push({
  x: Math.floor(Math.random() * IMAGE_WIDTH),
  y: Math.floor(Math.random() * IMAGE_HEIGHT),
  size: Math.floor(Math.random() * IMAGE_WIDTH),
  red: Math.floor(Math.random() * 256),
  green: Math.floor(Math.random() * 256),
  blue: Math.floor(Math.random() * 256),
  alpha: Math.random()
});
</code></pre>

<p>  }
  return individual;
}
```</p>

<p>Techniquement, un individu est donc une liste de gènes, et un gène est un
objet avec les propriétés x, y, size, red, green, blue et alpha.</p>

<p>La prochaine fois on verra comment on peut évaluer nos images.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
