<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : imagerie | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/imagerie/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-17T10:59:23+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: Imagerie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie/"/>
    <updated>2013-10-16T16:31:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/16/les-algorithmes-genetiques-demystifies-imagerie</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Bonjour, aujourd'hui on commence une nouvelle étude sur les algorithmes
génétiques avec un problème sympa : recréer une photo à partir de plusieurs
carrés de tailles et de couleurs différentes. Au début, l'image est
générée au hasard:</p>

<p><img src="/images/Capture-13.jpg"></p>

<p>Puis, petit à petit, elle converge vers la photo d'origine:</p>

<p><img src="/images/Capture-11.jpg"></p>

<!-- more -->


<p>Avant tout, il faut réfléchir à deux choses: la représentation des individus
et l'évaluation. De plus, comme je l'ai déjà mentionné, Javascript n'est pas
mon fort. Alors plutôt que d'écrire tout de suite un algorithme génétique, je
vais d'abord essayer de mettre en place un algorithme de <em>Hill Climbing</em>.</p>

<h2>Les individus</h2>

<p>Chaque <em>solution/individu</em> sera composé de quelques centaines de petits carrés.
Chaque carré pourra être personnalisé grâce à:</p>

<ul>
<li>sa position x</li>
<li>sa position y</li>
<li>sa taille</li>
<li>sa couleur (rouge, vert et bleu)</li>
<li>sa transparence</li>
</ul>


<p>Voici comment je traduis ça en Javascript:</p>

<p>``` javascript
function makeIndividual() {
  var individual = [];
  for (var i = 0; i &lt; TOTAL_SQUARES; i++) {</p>

<pre><code>individual.push({
  x: Math.floor(Math.random() * IMAGE_WIDTH),
  y: Math.floor(Math.random() * IMAGE_HEIGHT),
  size: Math.floor(Math.random() * IMAGE_WIDTH),
  red: Math.floor(Math.random() * 256),
  green: Math.floor(Math.random() * 256),
  blue: Math.floor(Math.random() * 256),
  alpha: Math.random()
});
</code></pre>

<p>  }
  return individual;
}
```</p>

<p>Techniquement, un individu est donc une liste de gènes, et un gène est un
objet avec les propriétés x, y, size, red, green, blue et alpha.</p>

<p>La prochaine fois on verra comment on peut évaluer nos images.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
