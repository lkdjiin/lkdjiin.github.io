<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : crystal | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/crystal/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-01-19T09:40:50+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby vs Crystal]]></title>
    <link href="http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal/"/>
    <updated>2016-01-19T09:23:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2016/01/19/ruby-vs-crystal</id>
    <content type="html"><![CDATA[<p>Après avoir produit <a href="/blog/2016/01/18/les-arbres-browniens-2eme-partie/">quelques variations</a> sur le thème des 
<a href="/blog/2016/01/17/les-arbres-browniens/">arbres browniens</a> le
week end dernier, le moment semblait idéal pour tester le langage
<a href="http://crystal-lang.org/">Crystal</a>.</p>

<p>J’ai donc réécrit le programme de base que j’avais fait pour produire des
arbres browniens, en supprimant l’UI et en enregistrant (à la place d’une
image écran)
un fichier image
<em>— au format XPM, peut-être le sujet d’un prochain article —</em>.</p>

<p>Je calcule le temps que prends la construction de l’image, sans son
enregistrement:</p>

<p><img class="center" src="/images/bench-crystal.png"></p>

<!-- more -->

<p>Les deux programmes sont quasiment identiques, la version Crystal est
l’adaption au plus près de la version Ruby. Pour ce
programme particulier, Crystal est de 3 à 7 fois plus rapide que Ruby.</p>

<p>Je suis deçu car j’attendais mieux que ça. On m’avait vendu Crystal comme étant
plus rapide. En fait environ 20 fois plus rapide que Ruby.</p>

<p>Et c’est vrai qu’avec un petit truc comme ça:</p>

<p><code>ruby
def fibonacci(n)
  return n if n &lt;= 1
  fibonacci(n - 1) + fibonacci(n - 2)
end
puts fibonacci 40
</code></p>

<p>ou alors encore ça:</p>

<p><code>ruby
x = 0
50_000_000.times do
  x += rand(11) - 5
end
</code></p>

<p>j’obtiens bien un programme Crystal 20 à 35 fois plus rapide que sa version
Ruby. Mais avec un programme plus «réel», c’est 3 à 7. Alors je ne boude pas,
hein, même un gain de 3 est toujours bon à prendre. Par contre, passer de Ruby à
Crystal a un coût, et savoir si ce coût justifie un si petit gain est une autre
histoire.</p>

<p>La prochaine fois j’espère vous donner mes premières impressions sur Crystal.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
