<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : test | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-11-26T00:12:14+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apprendre Ruby en faisant des maths 7: Tests unitaires simples]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples/"/>
    <updated>2013-11-14T13:22:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/14/apprendre-ruby-en-faisant-des-maths-7-tests-unitaires-simples</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Si vous voulez vraiment apprendre Ruby, vous <em>devriez</em> aussi apprendre
à faire des tests automatisés: c'est le meilleur moyen d'avoir confiance
en son code. Et la question se pose de savoir quel framework utiliser ?
Il en existe plusieurs: unit/test, minitest, RSpec, Shoulda, Cucumber et
j'en oublie… Chaque développeur a ses préférences, et c'est bien normal.</p>

<p><code>&lt;opinion&gt;</code></p>

<p>Mais souvent les développeurs ont aussi des convictions, ce qui est parfois
problématique. Un framework de test est un outil, comme tant d'autres.
Un outil X peut être parfait pour telle application et bien moins bon pour
telle autre application. Autrement dit, <strong>LE</strong> framework de test n'existe
pas. Quand vous en aurez testé quelques uns, vous aurez une préférence,
d'accord, pas de soucis. Mais s'il vous plait, avant d'avoir une conviction,
attendez d'en avoir <em>utilisé</em> 3 ou 4, et chacun dans différents types de
projet.</p>

<p><code>&lt;/opinion&gt;</code></p>

<!-- more -->


<p>Aujourd'hui on va apprendre à tester le module créé <a href="http://lkdjiin.github.io/blog/2013/11/01/apprendre-ruby-en-faisant-des-maths-6-methodes-utilitaires-et-module/">la dernière fois</a>
à l'aide du framework test/unit. Pas parce que ce framework est le
meilleur, pas parce que j'ai une préférence pour ce framework mais parce qu'il
est livré avec Ruby et qu'il ne necessite donc pas d'installation.</p>

<h2>Le fichier de test</h2>

<p>Voici le code à mettre dans un fichier nommé <code>tc_number.rb</code>:</p>

<p>``` ruby tc_number.rb
require_relative &ldquo;number&rdquo;
require &ldquo;test/unit&rdquo;</p>

<p>class TestNumber &lt; Test::Unit::TestCase
  def test_divisors</p>

<pre><code>assert_equal [1, 2, 4, 8], Number.divisors(4)
</code></pre>

<p>  end
end
```</p>

<p>Le fichier <code>tc_number.rb</code> contient le code pour tester notre module <code>Number</code>,
qui est dans le fichier <code>number.rb</code>. Veillez à garder les deux fichiers dans
le même dossier.</p>

<h2>Explications</h2>

<p>Voici les explications, ligne par ligne:</p>

<pre><code>require_relative "number"
</code></pre>

<p>On charge notre module <code>Number</code>.</p>

<pre><code>require "test/unit"
</code></pre>

<p>On charge la bibliothèque <code>test/unit</code>, qui contient plusieurs classes/modules
et méthodes qui vont nous permettre d'écrire nos tests.</p>

<pre><code>class TestNumber &lt; Test::Unit::TestCase
</code></pre>

<p>On crée une classe <code>TestNumber</code>. Vous remarquez que c'est le nom de notre
module à tester, préfixé par Test. Cette classe hérite de
<code>Test::Unit::TestCase</code>. Si vous ne savez pas encore ce qu'est une classe,
dites vous que c'est un module un peu spécial. Si vous ne savez pas
encore ce qu'est l'héritage, ce n'est pas grave.</p>

<pre><code>def test_divisors
</code></pre>

<p>On définit un test de la méthode <code>divisors</code>, à travers la méthodes
<code>test_divisors</code>. Vous remarquez que c'est le nom de notre méthode à tester,
préfixé par <code>test_</code>.</p>

<pre><code>assert_equal [1, 2, 4, 8], Number.divisors(4)
</code></pre>

<p>Voici enfin le test proprement dit. La méthode <code>assert_equal</code> s'assure
que ses deux arguments sont égaux. On veut savoir si <code>Number.divisors(4)</code>
est bien égal à l'Array (la liste) <code>[1, 2, 3, 4]</code>, <em>ce qui est faux</em>.</p>

<h2>Utilisation</h2>

<p>Voici la sortie:</p>

<pre><code>[~]⇒ ruby tc_number.rb 
Run options: 

# Running tests:

F

Finished tests in 0.002405s, 415.8087 tests/s, 415.8087 assertions/s.

  1) Failure:
test_divisors(TestNumber) [tc_number.rb:6]:
&lt;[1, 2, 4, 8]&gt; expected but was
&lt;[1, 2, 4]&gt;.

1 tests, 1 assertions, 1 failures, 0 errors, 0 skips
</code></pre>

<p>La section <code>1) Failure:</code> est particulièrement intéressante et nous indique
que la liste <code>[1, 2, 3, 4]</code> était attendue, mais que c'est la liste
<code>[1, 2, 4]</code> qui a été reçue.</p>

<p>Si on corrige notre test:</p>

<p>``` ruby tc_number.rb
require_relative &ldquo;number&rdquo;
require &ldquo;test/unit&rdquo;</p>

<p>class TestNumber &lt; Test::Unit::TestCase
  def test_divisors</p>

<pre><code>assert_equal [1, 2, 4], Number.divisors(4)
</code></pre>

<p>  end
end
```</p>

<p>Cette fois-ci la sortie nous indique que tout va bien:</p>

<pre><code>[~]⇒ ruby tc_number.rb 
Run options: 

# Running tests:

.

Finished tests in 0.000644s, 1553.5887 tests/s, 1553.5887 assertions/s.

1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<h2>Plus de tests</h2>

<p>Nous pouvons ajouter un autre test pour la méthode <code>divisors</code>:</p>

<p>``` ruby
  def test_divisors</p>

<pre><code>assert_equal [1, 2, 4], Number.divisors(4)
assert_equal [1, 17], Number.divisors(17)
</code></pre>

<p>  end
```</p>

<p>Mais aussi tester les autres méthodes de notre module, selon le même
modèle:</p>

<p>``` ruby tc_number.rb
require_relative &ldquo;number&rdquo;
require &ldquo;test/unit&rdquo;</p>

<p>class TestNumber &lt; Test::Unit::TestCase
  def test_divisors</p>

<pre><code>assert_equal [1, 2, 4], Number.divisors(4)
assert_equal [1, 17], Number.divisors(17)
</code></pre>

<p>  end</p>

<p>  def test_proper_divisors</p>

<pre><code>assert_equal [1, 2], Number.proper_divisors(4)
assert_equal [1], Number.proper_divisors(17)
</code></pre>

<p>  end</p>

<p>  def test_sum_of_proper_divisors</p>

<pre><code>assert_equal 3, Number.sum_of_proper_divisors(4)
assert_equal 1, Number.sum_of_proper_divisors(17)
</code></pre>

<p>  end
end
```</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Couverture de code pour Ruby avec coco]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco/"/>
    <updated>2013-10-26T18:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/26/couverture-de-code-pour-ruby-avec-coco</id>
    <content type="html"><![CDATA[<p>Il y a 3 ans, j'ai écrit une gem Ruby pour faire de la couverture de
code (<em>code coverage</em>). <a href="https://github.com/colszowka/simplecov">SimpleCov</a>,
la gem la plus utilisée pour cette tâche venait tout juste de voir le
jour et ne me convenait pas entièrement. À l'époque je trouvais SimpleCov
trop ennuyeuse à configurer et à faire fonctionner.</p>

<!-- more -->


<p>Qu'on ne me fasse pas dire ce que je n'ai pas écrit : SimpleCov remplie
<em>parfaitement</em> sa tâche. C'est juste que je voulais un truc plus simple.
Je voulais quelque chose qui fonctionne en une ligne, avec configuration
optionnelle et surtout, avec un rapport de couverture
super simple et dépouillé. C'est comme ça qu'est née la gem
<a href="https://github.com/lkdjiin/coco">coco</a>. Bon ok, il m'est arrivé de me
demander si je ne l'avais pas écrit juste pour le jeu de mot…</p>

<p>Pour utiliser coco, il suffit de charger la gem au tout début des tests
comme ceci:</p>

<p><code>ruby
require 'coco'
</code></p>

<p>Et… c'est tout ! Chaque fois que vous lancerez les tests, coco produira un
rapport si (et seulement si) au moins un fichier n'est pas couvert à 100%.</p>

<p>La configuration, au besoin, se fait dans un fichier caché au format yaml,
à la racine du projet. Par exemple si vous trouvez qu'un taux de couverture
de 90% est acceptable, vous pouvez le changer comme ça:</p>

<pre><code>:threshold: 90
</code></pre>

<p>Si vous voulez exclure un fichier et un dossier complet du rapport vous
pouvez écrire:</p>

<pre><code>:excludes:
- lib/project/file1.rb
- config/initializers
</code></pre>

<p>Il y a plusieurs autres exemples de configuration sur le
<a href="https://github.com/lkdjiin/coco/wiki">wiki du projet</a>. Enfin, pour une
présentation rapide de coco, en anglais, il y a le
<a href="http://lkdjiin.github.io/coco/">site web</a>.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern IE pour Linux: foutage de gueule]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/20/modern-ie-pour-linux-foutage-de-gueule/"/>
    <updated>2013-07-20T08:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/20/modern-ie-pour-linux-foutage-de-gueule</id>
    <content type="html"><![CDATA[<p><strong>Question:</strong> «Que doit faire régulièrement un développeur du web ?»</p>

<p><strong>Réponse:</strong> «Tester le rendu de son site sur plusieurs navigateurs.»</p>

<p>Internet Explorer fait partie du lot. Qu'on le veuille ou non, il faut
tester nos sites dans IE, même quand on travaille sur Linux.
Au début de l'année, Microsoft a lancé
<a href="http://www.modern.ie/fr">Modern.IE</a>. L'ancien site tout moche où on
téléchargait les VMs qui ne fonctionnaient que sur Windows à fait place
à un site moderne, new look, qui te
promet (dixit le dit site):</p>

<p><blockquote><p>Facilitez vos tests pour Internet Explorer</p></blockquote></p>

<!-- more -->


<p>On te dis qu'on va bien s'occuper de toi. J'ai eu envie d'y croire alors
j'ai essayé. Ce qui m'intéresse ce sont les outils de virtualisation, alors
rendez vous sur la page <a href="http://www.modern.ie/fr/virtualization-tools.">http://www.modern.ie/fr/virtualization-tools.</a> Voici
ce qu'on peut y lire:</p>

<p><blockquote><p>Testez votre site. Dans tout navigateur sur un Mac ou un ordinateur Windows.</p></blockquote></p>

<p>Ça aurait du me mettre la puce à l'oreille mais je continue quand même.
Deux clics plus tard, j'obtiens la liste des VMs pour Linux/VirtualBox.
Premier constat: la taille des VMs, toujours aussi gargantuesque,
5 ou 6 gigas pour certaines.
Bon, c'est pas ça qui va m'arrêter, mais faut quand même savoir que leur
serveur ne supporte pas le resume…</p>

<p>Quelques heures plus tard, mission accomplie, IE 9 est téléchargé. Je
lance le script d'install qui tente de décompresser la bête.
Mais non. Comment ça, non ? Ben non, fichier corrompu (!?). J'ai un peu la nausée à l'idée de devoir
re-télécharger 5 Go. J'essaye de les décompresser avec
deux trois programmes classiques que j'ai sous la main. Rien à faire.
Corrompu…</p>

<p>Retour sur le site Modern.IE pour trouver ça: «Need more help downloading and installing the VMs?
<a href="http://blog.reybango.com/2013/02/04/making-internet-explorer-testing-easier-with-new-ie-vms/">Try Rey Bango’s blog</a>.»</p>

<p>Ok je fais ça. Qu'est-ce-que j'y apprends:</p>

<p><blockquote><p>A number of people have mentioned that they’ve had trouble unzipping the<br/>images and that they may be corrupt. They’re not corrupt. There’s an issue in<br/>both OSX &amp; Linux where using the OS’s default zip tool is failing to open the<br/>.zip file properly. We’re aware of this and are looking into it. The interim<br/>solution is to use a 3rd party unzip tool like “The Unarchiver” in the Apple<br/>app store or Peazip for Linux. These will correctly unzip the .zip files and<br/>give you working images.</p></blockquote></p>

<p>Traduction rapide (et sûrement un peu maladroite) pour les non-anglophones, accrochez vous, ça vaut son
pesant de cacahuètes:</p>

<p><blockquote><p>Plusieurs personnes ont rapporté avoir des problèmes à décompresser les images<br/>et que celles-ci pouvaient être corrompues. Elles ne sont pas corrompues. Il y<br/>a un problème dans OSX et Linux, qui empêche d'ouvrir proprement les fichiers<br/>zip avec les outils par défaut de l'OS. On est au courant de ça et on regarde<br/>ce qu'on peut faire. La solution provisoire est d'utiliser un outil de<br/>décompression tiers, comme &ldquo;The Unarchiver&rdquo; dans l'app store ou bien Peazip<br/>pour Linux. Ces outils décompresseront correctement les zip et produiront des<br/>images qui fonctionnent.</p></blockquote></p>

<p>Sans rire !? C'est tout ce que Microsoft a à dire la-dessus ? «C'est pas
nous, m'sieur, c'est encore la faute à OSX et Linux tout ça.»
Vous m'imaginez dire ça au boulot:</p>

<p>  <strong>Client:</strong> Il y a un problème avec le site, il fonctionne correctement dans
IE mais des utilisateurs nous ont rapporté qu'il s'affichait mal avec
Chrome et Firefox.</p>

<p>  <strong>Moi:</strong> Non, il ne s'affiche pas mal, il y a juste un problème avec Firefox et Chrome
qui empêche mon site de s'afficher correctement. En attendant que je corrige
ça, vos utilisateurs peuvent toujours regarder le site avec IE.</p>

<p>Le post date de février, c'est toujours pas corrigé. La suite de l'histoire
maintenant: Je n'ai jamais entendu
parler de ce <em>Peazip</em>, je cherche un peu et fini par l'installer. Après 10
minutes d'essais infructeux, pendant lesquelles j'ai du essuyer à peu près
40 bugs (sans rire), je le désinstalle et j'abandonne.
J'ai perdu
mon temps mais c'est de ma faute, qu'est ce qui m'a pris de croire
que Microsoft s'interessait aux utilisateurs de Linux ?</p>

<p>Pour ceux et celles qui se demande quelle est la solution, c'est la même que depuis
des années: <a href="https://github.com/xdissent/ievms">ievms</a> le script qui fonctionne.</p>

<p>À demain.</p>

<p><em>P.S. Ça fait des mois que je pense à écrire cet article. Ça fait du bien
quand ça sort.</em></p>

<p></p>
]]></content>
  </entry>
  
</feed>
