<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : awk | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/awk/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-04T22:15:32+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby: Récapitulatif]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif/"/>
    <updated>2013-12-24T15:16:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/24/remplacer-sed-et-awk-par-ruby-recapitulatif</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>C'est la fin de cette série. Durant une quinzaine d'articles, on a vu
qu'il était possible de remplacer Sed ou Awk par Ruby, pour faire de
l'édition, de l'analyse ou du filtrage de fichier texte.
Cet article récapitule tout ce qu'on a vu.</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">Remplacer Sed et Awk par Ruby</a>
j'explique l'utilité des langages Sed et Awk, et pourquoi il peut-être
intéressant de les remplacer par Ruby.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/11/30/remplacer-sed-et-awk-par-ruby-2-premiers-pas/">Premier pas</a>
on a appris à parcourir les lignes d'un fichier, à utiliser la variable
prédéfinie <code>$_</code> et on a approché les blocs BEGIN et END.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/01/remplacer-sed-et-awk-par-ruby-3-begin-et-end/">BEGIN et END</a>
je parle en détail des blocs BEGIN et END.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/">Les options -p et -l</a>
on voit comment Ruby peut s'occuper automatiquement de l'affichage des lignes
et des caractères de fin de ligne.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/05/remplacer-sed-et-awk-par-ruby-5-acceder-aux-champs-slash-colonnes/">Accéder aux champs/colonnes</a>
on voit que Ruby peut <em>splitter</em> automatiquement les différents champs d'une
ligne.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/07/remplacer-sed-et-awk-par-ruby-6-separateur-de-champ/">Séparateur de champs</a>
je montre comment spécifier les séparateurs de champs.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/">Modifier/sauvegarder les données</a>
on apprend à modifier un fichier <em>en place</em> et à faire automatiquement une
copie de sauvegarde.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/09/remplacer-sed-et-awk-par-ruby-8-script-sur-la-ligne-de-commande/">Scripts sur la ligne de commande</a>
je montre comment écrire un <em>one liner</em>.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/10/remplacer-sed-et-awk-par-ruby-9-utiliser-la-bibliotheque-standard/">Utiliser la bibliothèque standard</a>
on voit comment charger une gem sur la ligne de commande.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">La gem English</a>
on apprend à utiliser des noms qui ont du sens à la place des variables
prédéfinies.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/">Numéro de ligne</a>
on apprend que Ruby tient automatiquement le compte des numéros de ligne.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/">Séparateurs en sortie</a>
on voit comment modifier les valeurs du séparateur de champs et du séparateur
d'enregistrements/lignes.</p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/">Flip flop</a>
je montre une technique très utilisée dans Sed ou Awk pour traiter des
groupes de lignes.</p>

<p>Enfin, dans
<a href="http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/">Un exemple d'utilisation</a>
et <a href="http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/">Un dernier exemple</a>
je montre deux exemples réels.</p>

<p>Voilà, avec cette série je pense que vous avez tout ce qu'il faut pour
traiter vos logs, fichiers csv et autres joyeusetées en Ruby. Joyeux Noël !</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby: Un dernier exemple]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple/"/>
    <updated>2013-12-22T20:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/22/remplacer-sed-et-awk-par-ruby-un-dernier-exemple</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Avant de mettre un terme à cette série d'articles, j'aimerais donner
un dernier exemple concret de l'utilisation de Ruby en <em>mode</em> Sed/Awk.
Il y a quelques jours, j'ai ajouté un bouton «flattr» à la fin des
quelques 160 articles de ce blog. Voici comment j'ai fait…</p>

<!-- more -->


<p>Tout d'abord le script Ruby:</p>

<p>``` ruby script.rb
BEGIN{code= &ldquo;code à insérer&rdquo;}</p>

<p>if $<em>.start_with?(&ldquo;À demain.&rdquo;)
  $</em> = &ldquo;\n\n#{code}\n\n#{$_}&rdquo;
end
```</p>

<p>Je cherche à insérer le code avant la chaîne &ldquo;À demain.&rdquo;, qui termine
chacun de mes articles. Si vous avez suivi cette série d'articles depuis
le début, j'espère que ce script parle de lui-même…
Notez quand même que ce script demande une version de Ruby supérieure
ou égale à 2.0, ou alors il faudra ajouter un commentaire <em>magique</em> pour
spécifier l'encodage utf-8.</p>

<p>Maintenant, comment appliquer ce script à chacun des articles. J'ai choisi
d'utiliser une boucle en Bash:</p>

<p><code>bash
[~]⇒ for i in *.markdown; do ruby -p -i script.rb $i; done
</code></p>

<p>Si vous avez besoin d'explications sur cette ligne de commande, je vous
renvoie à ces articles:</p>

<ul>
<li><a href="http://lkdjiin.github.io/blog/2013/12/04/remplacer-sed-et-awk-par-ruby-4-les-options-p-et-l/">ruby -p</a></li>
<li><a href="http://lkdjiin.github.io/blog/2013/12/08/remplacer-sed-et-awk-par-ruby-7-modifier-slash-sauvegarder-les-donnees/">ruby -i</a></li>
<li><a href="http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/">Les boucles en Bash</a></li>
</ul>


<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby: Flip flop]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop/"/>
    <updated>2013-12-21T18:44:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/21/remplacer-sed-et-awk-par-ruby-flip-flop</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Comment faire pour travailler sur un groupe de lignes, quand ce groupe
de lignes commence avec un marqueur et fini avec un autre ?
Par exemple, avec le fichier de données suivant, on cherche à afficher
les lignes depuis «start» jusqu'à «end»:</p>

<p><code>raw data.txt
1
2
3
start
4
5
6
end
7
8
9
</code></p>

<!-- more -->


<p>C'est ce qu'on appelle un <em>flip flop</em> : On commence le traitement sur une
condition de départ, puis on traite toutes les lignes jusqu'à une
condition d'arrêt. C'est un principe très utilisé avec Sed ou Awk.
Pour faire la même chose en Ruby, on va se servir d'un <em>range</em>:</p>

<p><code>ruby flip_flop.rb
puts $_ if $_.start_with?("start")..$_.start_with?("end")
</code></p>

<p><code>bash
[~]⇒ ruby -n flip_flop.rb data.txt
start
4
5
6
end
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 13: Séparateurs en sortie]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie/"/>
    <updated>2013-12-18T18:58:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/18/remplacer-sed-et-awk-par-ruby-13-separateurs-en-sortie</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>La dernière fois on a vu <a href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/">les numéros de lignes</a>, aujourd'hui on voit comment
modifier les séparateurs de champ et d'enregistrement.</p>

<!-- more -->


<p>On continue donc avec un exemple trivial, on a ce fichier de données:</p>

<p><code>raw data.txt
1,a
2,b
3,c
</code></p>

<p>On va intervertir les champs et modifier le séparateur de champs pour qu'il
devienne un point-virgule (pour le nom des variables prédéfinie, je vous
renvoie à l'article sur <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">la gem English</a>):</p>

<p><code>ruby
BEGIN {
  require 'English'
  $FS = ','
  $OFS = ';'
}
$_ = $F.reverse.join
</code></p>

<p><code>join</code> va utiliser automatiquement le contenu de <code>$OFS</code>:</p>

<p><code>bash
[~]⇒ ruby -apl test1.rb data.txt
a;1
b;2
c;3
</code></p>

<p>Parfois on veut aussi modifier le séparateur d'enregistrements (les enregistrements
sont ici nos lignes du fichier). Par exemple, pour passer du caractère <em>newline</em> à
<code>:</code>:</p>

<p><code>ruby
BEGIN {
  require 'English'
  $FS = ','
  $OFS = ';'
  $ORS = ':'
}
$_ = $F.reverse.join
</code></p>

<p>Et le résultat:</p>

<p><code>bash
[~]⇒ ruby -apl test1.rb data.txt
a;1:b;2:c;3:
</code></p>

<p>Et bien sûr, si vous le voulez vraiment, vous pouvez toujours écrire ce
script en une ligne, directement dans la console:</p>

<p><code>bash
[~]⇒ ruby -aple 'BEGIN{$;=",";$,=";";$\=":"};$_=$F.reverse.join' data.txt
</code></p>

<p>Mais êtes-vous sûr de vouloir faire ça ?!</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 12: Numéro de ligne]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne/"/>
    <updated>2013-12-17T21:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/17/remplacer-sed-et-awk-par-ruby-12-numero-de-ligne</id>
    <content type="html"><![CDATA[<p>Après avoir vu l'utilité de <a href="http://lkdjiin.github.io/blog/2013/12/14/remplacer-sed-et-awk-par-ruby-11-la-gem-english/">la gem English</a>, on voit aujourd'hui une utilisation
des numéros de ligne pour créer un échantillon de données.</p>

<!-- more -->


<p>La variable prédéfinie <code>$.</code> contient le numéro de la ligne en cours de
traitement. Une utilisation de cette variable, que j'aime beaucoup, est
la création d'un petit échantillon (<em>sample</em>) de données, à partir d'un
long fichier.</p>

<p>Pour la démonstration, prenons un fichier de données de 33 lignes:</p>

<p><code>raw data.txt
1
2
3
.
.
.
33
</code></p>

<p>L'idée est de ne prendre qu'une ligne sur dix. Voilà le script:</p>

<p><code>ruby test.rb
puts $_ if $. % 10 == 0
</code></p>

<p>Ou, en utilisant la gem English:</p>

<p><code>ruby test1.rb
BEGIN { require 'English' }
puts $LAST_READ_LINE if $INPUT_LINE_NUMBER % 10 == 0
</code></p>

<p>La ligne en cours est affichée seulement quand le numéro de la ligne est
un multiple de 10:</p>

<p><code>bash
[~]⇒ ruby -n test.rb data.txt
10
20
30
</code></p>

<p>Intéressant quand on veut se créer rapidement un petit jeu de données pour
tester quelque chose…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
