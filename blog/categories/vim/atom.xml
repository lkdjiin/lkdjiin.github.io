<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-08T21:10:57+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim - Débarassez vous des buffers inutilisés]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/08/vim-debarassez-vous-des-buffers-inutilises/"/>
    <updated>2014-03-08T20:37:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/08/vim-debarassez-vous-des-buffers-inutilises</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>J'avais envie d'écrire un truc comme ça depuis quelques mois déjà.
Un plugin pour effacer tous les buffers inutilisés. Mais comme je ne
m'en servirais que 3 ou 4 fois par mois, et encore, j'ai toujours remis à
plus tard.</p>

<p>Quoiqu'il en soit, on l'a fait à ma place, parfait.</p>

<!-- more -->


<p>Le plugin
<a href="http://www.vim.org/scripts/script.php?script_id=4882">Wipeout</a>
permet de supprimer tous les buffers qui ne sont pas liés à une
fenêtre, ni à un onglet. On l'appelera comme ça:</p>

<pre><code>:Wipeout
</code></pre>

<p>Si vous n'utilisez pas les onglets, <a href="https://twitter.com/madx">@madx</a> en
a écrit un similaire qui supprimera les buffers qui ne sont pas affichés
(et donc du même coup les onglets autres que le courant):
<a href="https://github.com/madx/vim-plugins/blob/master/plugin/clean-buffers.vim">CleanBuffers</a>.
On le lancera avec:</p>

<pre><code>:CleanBuffers
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprenez Vim comme vous voulez]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/05/apprenez-vim-comme-vous-voulez/"/>
    <updated>2014-03-05T20:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/05/apprenez-vim-comme-vous-voulez</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Un jour j'ai commis ça : <a href="/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois/">Ayez confiance dans le mode normal</a>.
En gros, j'expliquai dans cet article qu'un débutant sur Vim doit se
<em>forcer</em> à rester le plus longtemps possible en mode normal. Parce que
c'est le mode le plus important de Vim, que c'est la <em>Vim way</em>, toussa…</p>

<p><strong>Bullshit !</strong></p>

<!-- more -->


<p>En le relisant, cet article, j'ai pensé à toutes celles et ceux qui ont
tentés de passer à Vim de cette manière, et qui sont revenus en arrière,
parfois plusieurs fois ; à celles et ceux qui voudraient franchir le pas
mais qui n'osent pas, ou qui remettent à plus tard, à cause de personnes
comme moi, qui disent «c'est ainsi qu'il faut faire et pas autrement».</p>

<p>Alors <em>mea culpa</em>, en y refléchissant un peu mieux, je ne vois <em>aucunes</em>
raisons pour ne pas vous mettre à Vim de la manière qui vous plaira. Ce
que je décrivais dans cet ancien article a fonctionné pour moi. Et ça
ne dois pas avoir valeur universelle. Faites comme vous l'entendez.
On peut très bien apprendre Vim en étant scotché en mode insertion pendant
des semaines, et en introduisant les autres modes tout doucement.
Si ça vous semble plus naturel, allez y comme ça. Ce qui compte vraiment, c'est
de franchir le pas, pas la manière dont on le franchit.</p>

<p>Bon Vim…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Vim - Les sections]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections/"/>
    <updated>2014-02-03T20:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je viens juste de découvrir deux nouveaux mouvements avec Vim que
j'aimerais partager avec vous:
section suivante et section précédente.</p>

<!-- more -->


<p>Pour aller à la section suivante :</p>

<pre><code>]]
</code></pre>

<p>Pour aller à la section précédente :</p>

<pre><code>[[
</code></pre>

<p>Le tout étant de savoir ce qu'est une section !? J'étudierais l'aide
de Vim plus tard… Pour l'instant, voici ce que ça donne avec les
langages suivants:</p>

<p><strong>Bash, C</strong> : Va au caractère <code>{</code> d'une fonction
 (uniquement quand il débute une ligne).</p>

<p><strong>Python</strong> : Va à chaque <code>class</code> et <code>def</code>.</p>

<p><strong>Ruby</strong> : Va à chaque <code>module</code> et <code>class</code>.</p>

<p><strong>Vim</strong> : Va à chaque <code>function</code>.</p>

<p>Notez que ça semble ne rien faire avec les fichiers Javascript,
Racket, Scheme, Java, Haskell, et j'en passe. Je n'ai pas plus
d'informations pour l'instant, mais je compte bien m'y pencher de
plus près. En attendant, si vous avez des connaissances sur ces
mouvements, n'hésitez pas à nous en faire profiter dans un
commentaire.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Sauvegarder et quitter les fichiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers/"/>
    <updated>2014-02-01T20:12:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/01/vim-sauvegarder-et-quitter-les-fichiers</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Il est temps pour moi de faire un point sur les différentes méthodes
qu'offre Vim pour quitter et/ou sauvegarder un fichier.</p>

<!-- more -->


<h2>Les basiques</h2>

<p>Voici, selon moi, les commandes à retenir en premier lieu.</p>

<p>Pour sauvegarder un fichier, utilisez la commande <code>write</code>, ou
plutôt son raccourci <code>w</code>:</p>

<pre><code>:w
:write
</code></pre>

<p>Je rappelle qu'on peut facilement obtenir une aide exhaustive sur une
commande quelconque:</p>

<pre><code>:h :write
</code></pre>

<p>Et je conseille de lire systématiquement l'aide de Vim sur les
commandes dont je vais vous parler. Vous découvrirez ainsi des tas
de variantes qui pourrait vous être utile.</p>

<p>Pour sauvegarder tous les fichiers en une seule fois:</p>

<pre><code>:wall
</code></pre>

<p>Pour quitter un fichier, on utilise <code>quit</code>, ou son raccourci <code>q</code>:</p>

<pre><code>:q
:quit
</code></pre>

<p>De même, pour quitter tous les fichiers (et fermer Vim):</p>

<pre><code>:qa
:qall
</code></pre>

<p>Si vous voulez fermer un fichier modifié <em>sans</em> enregistrer les
modifications, la commande suivante est indispensable:</p>

<pre><code>:q!
</code></pre>

<p>Voilà pour les basiques. Ces commandes sont simples à mémoriser.</p>

<h2>Les combinaisons</h2>

<p>Il arrive souvent qu'on veuille sauvegarder un fichier, <em>et en même
temps</em> le fermer. Je recommenderais aux débutants d'utiliser la
commande suivante:</p>

<pre><code>:wq
</code></pre>

<p>Elle est très facile à mémoriser, étant la combinaison de <code>write</code> et
de <code>quit</code>.</p>

<p>Quand du temps aura passé et que vous serez prêt à en apprendre
d'autres, essayez donc les deux qui suivent:</p>

<p>Un simple <code>:x</code> permet de sauver/quitter le fichier, vous gagnez une
touche par rapport à <code>:wq</code>:</p>

<pre><code>:x
</code></pre>

<p>Suivant le layout de votre clavier, la suivante peut vous convenir plus ou
moins. C'est la seule qui soit en mode normal et non pas en mode commande,
rapide comme l'éclair, je l'adore:</p>

<pre><code>ZZ
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4/"/>
    <updated>2014-01-28T20:42:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/28/installation-du-plugin-airline-pour-vim-partie-4</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Après <a href="/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/">avoir installé</a> le plugin Airline pour Vim,
après <a href="/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/">avoir configuré le thème</a>,
puis <a href="/blog/2014/01/27/installation-du-plugin-airline-pour-vim-partie-3/">personnalisé quelques sections</a>,
vous pensiez en avoir fini. Mais il se peut que la branche git
n'apparaisse pas dans votre barre de statut ?
Comment faire pour que Airline affiche le nom de la branche git ?</p>

<!-- more -->


<p>En fait, il ne peut pas. Enfin pas vraiment. Airline ne fait pas tout.
Par contre il intègre très bien d'autres plugins. Et notamment
l'excellent vim-fugitive de Tim Pope. Donc, pour que Airline affiche
votre branche git, il vous suffit d'installer vim-fugitive. Par
exemple, avec Pathogen:</p>

<pre><code>git clone git://github.com/tpope/vim-fugitive.git ~/.vim/bundle/vim-fugitive
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
