<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-13T21:19:13+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin minimal pour les titres markdown]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/"/>
    <updated>2014-03-12T21:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Hier on a vu <a href="/blog/2014/03/11/vim-cas-pratique-pour-les-debutants-les-titres-en-markdown/">comment faire rapidement des titres au format markdown</a>.
Aujourd'hui on transforme ça en plugin. Enfin, en un embryon de plugin.</p>

<!-- more -->


<p>Voici donc un plugin bricolé en deux minutes qui fait des titres de niveau 1
en markdown.</p>

<p>``` vim plugin/quickmarkdown.vim
if exists(&lsquo;g:loaded_quickmarkdown&rsquo;) || &amp;cp || v:version &lt; 700
  finish
endif
let g:loaded_quickmarkdown = 1</p>

<p>command! QuickMarkdownTitle1 call quickmarkdown#title1()
```</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#title1()
  execute "normal yypVr="
endfunction
</code></p>

<p>Et en mettant ce qui suit dans votre vimrc, on peut l'activer avec
leader puis <code>=</code>:</p>

<p><code>vim
map&lt;Leader&gt;= :QuickMarkdownTitle1&lt;Enter&gt;
</code></p>

<p>Quand j'aurais le temps j'ajouterais les niveaux 2, 3, 4, etc. Et aussi
la documentation et quelques explications ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Cas pratique pour les débutants : les titres en markdown]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/11/vim-cas-pratique-pour-les-debutants-les-titres-en-markdown/"/>
    <updated>2014-03-11T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/11/vim-cas-pratique-pour-les-debutants-les-titres-en-markdown</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vous débutez sur Vim ? Je vous propose aujourd'hui des exercices pratiques
pour définir des titres au format markdown.</p>

<!-- more -->


<p>Un titre de niveau 1 en markdown s'écrit comme ceci:</p>

<pre><code>Titre de niveau 1
=================
</code></pre>

<p>On est pas obligé de mettre autant de <code>=</code> que de caractères dans le titre
(de mémoire je crois que 3 suffisent), mais c'est quand même agréable à
l'œil.</p>

<p>La suite de commandes pour obtenir ça est: <code>yypVr=</code>. On décortique:</p>

<ul>
<li><code>yy</code> copie la ligne du titre dans un buffer.</li>
<li><code>p</code> affiche ce buffer sur la ligne du dessous et nous place sur cette
nouvelle ligne.</li>
<li><code>V</code> passe cette nouvelle ligne en mode selection.</li>
<li><code>r=</code> remplace toute la selection par autant de <code>=</code>.</li>
</ul>


<p>Pour les titres de niveau 2, on remplace le <code>=</code> par un <code>-</code>.</p>

<p>Voilà, la prochaine fois on en fera peut-être un plugin, allez savoir…</p>

<p>Et vous, vous faites comment ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Débarassez vous des buffers inutilisés]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/08/vim-debarassez-vous-des-buffers-inutilises/"/>
    <updated>2014-03-08T20:37:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/08/vim-debarassez-vous-des-buffers-inutilises</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>J'avais envie d'écrire un truc comme ça depuis quelques mois déjà.
Un plugin pour effacer tous les buffers inutilisés. Mais comme je ne
m'en servirais que 3 ou 4 fois par mois, et encore, j'ai toujours remis à
plus tard.</p>

<p>Quoiqu'il en soit, on l'a fait à ma place, parfait.</p>

<!-- more -->


<p>Le plugin
<a href="http://www.vim.org/scripts/script.php?script_id=4882">Wipeout</a>
permet de supprimer tous les buffers qui ne sont pas liés à une
fenêtre, ni à un onglet. On l'appelera comme ça:</p>

<pre><code>:Wipeout
</code></pre>

<p>Si vous n'utilisez pas les onglets, <a href="https://twitter.com/madx">@madx</a> en
a écrit un similaire qui supprimera les buffers qui ne sont pas affichés
(et donc du même coup les onglets autres que le courant):
<a href="https://github.com/madx/vim-plugins/blob/master/plugin/clean-buffers.vim">CleanBuffers</a>.
On le lancera avec:</p>

<pre><code>:CleanBuffers
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprenez Vim comme vous voulez]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/05/apprenez-vim-comme-vous-voulez/"/>
    <updated>2014-03-05T20:51:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/05/apprenez-vim-comme-vous-voulez</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Un jour j'ai commis ça : <a href="/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois/">Ayez confiance dans le mode normal</a>.
En gros, j'expliquai dans cet article qu'un débutant sur Vim doit se
<em>forcer</em> à rester le plus longtemps possible en mode normal. Parce que
c'est le mode le plus important de Vim, que c'est la <em>Vim way</em>, toussa…</p>

<p><strong>Bullshit !</strong></p>

<!-- more -->


<p>En le relisant, cet article, j'ai pensé à toutes celles et ceux qui ont
tentés de passer à Vim de cette manière, et qui sont revenus en arrière,
parfois plusieurs fois ; à celles et ceux qui voudraient franchir le pas
mais qui n'osent pas, ou qui remettent à plus tard, à cause de personnes
comme moi, qui disent «c'est ainsi qu'il faut faire et pas autrement».</p>

<p>Alors <em>mea culpa</em>, en y refléchissant un peu mieux, je ne vois <em>aucunes</em>
raisons pour ne pas vous mettre à Vim de la manière qui vous plaira. Ce
que je décrivais dans cet ancien article a fonctionné pour moi. Et ça
ne dois pas avoir valeur universelle. Faites comme vous l'entendez.
On peut très bien apprendre Vim en étant scotché en mode insertion pendant
des semaines, et en introduisant les autres modes tout doucement.
Si ça vous semble plus naturel, allez y comme ça. Ce qui compte vraiment, c'est
de franchir le pas, pas la manière dont on le franchit.</p>

<p>Bon Vim…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce Vim - Les sections]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections/"/>
    <updated>2014-02-03T20:39:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/03/astuce-vim-les-sections</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je viens juste de découvrir deux nouveaux mouvements avec Vim que
j'aimerais partager avec vous:
section suivante et section précédente.</p>

<!-- more -->


<p>Pour aller à la section suivante :</p>

<pre><code>]]
</code></pre>

<p>Pour aller à la section précédente :</p>

<pre><code>[[
</code></pre>

<p>Le tout étant de savoir ce qu'est une section !? J'étudierais l'aide
de Vim plus tard… Pour l'instant, voici ce que ça donne avec les
langages suivants:</p>

<p><strong>Bash, C</strong> : Va au caractère <code>{</code> d'une fonction
 (uniquement quand il débute une ligne).</p>

<p><strong>Python</strong> : Va à chaque <code>class</code> et <code>def</code>.</p>

<p><strong>Ruby</strong> : Va à chaque <code>module</code> et <code>class</code>.</p>

<p><strong>Vim</strong> : Va à chaque <code>function</code>.</p>

<p>Notez que ça semble ne rien faire avec les fichiers Javascript,
Racket, Scheme, Java, Haskell, et j'en passe. Je n'ai pas plus
d'informations pour l'instant, mais je compte bien m'y pencher de
plus près. En attendant, si vous avez des connaissances sur ces
mouvements, n'hésitez pas à nous en faire profiter dans un
commentaire.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
