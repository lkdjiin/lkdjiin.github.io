<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-05-08T18:30:26+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Insérer le contenu d'un fichier ou d'une commande shell dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim/"/>
    <updated>2014-04-29T21:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/29/inserer-le-contenu-dun-fichier-ou-dune-commande-shell-dans-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour insérer le contenu d'un fichier quelconque dans le buffer courant de
Vim, utilisez la commande <code>:r</code>:</p>

<!-- more -->


<p>Comme dans: <code>:r /mon/fichier/quelconque</code>.</p>

<p>C'est vraiment utile parfois, le problème est que le nom du fichier doit
être
absolu, ou doit commencer par le tilde (<code>~</code>). Ce qui dans certains cas
limite pas mal l'usage de cette commande.</p>

<p>Au fait, <code>r</code> est le petit nom de <code>read</code> :)</p>

<p>La version avec un point d'exclamation <code>:r!</code> est aussi très intéressante
puisqu'elle insère la sortie d'une commande shell. Par exemple, si je tape:</p>

<pre><code>:r! cal
</code></pre>

<p>Cela va insèrer le calendrier du mois dans cet article, comme ceci:</p>

<pre><code>     Avril 2014
di lu ma me je ve sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30
</code></pre>

<p>Mais là encore j'ai un souci. Ça ne fonctionne qu'avec des commandes shell
et automatiquement dans mon <em>home</em>. Je m'explique:</p>

<ol>
<li>Si j'édite un fichier <code>~/dossier/fichier</code> et que je veuille insérer le
contenu de <code>dossier</code>, je dois écrire <code>:r! ls ~/dossier</code>. Alors que
j'aimerais écrire juste <code>:r! ls</code>.</li>
<li>J'aimerais bien pouvoir insérer avec <code>r</code> la sortie de mes tests Rspec,
par exemple. Mais <code>:r! rspec ~/mon/fichier</code> ne fonctionne pas, <code>rspec</code>
n'étant pas reconnu par Vim comme étant une commande.</li>
</ol>


<p>Enfin, bref, si tu sais comment venir à bout de ses limitations, ton
commentaire m'intéresse. Sinon, il m'intéresse aussi ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mapper la souris dans Vim : pour quel usage ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/17/mapper-la-souris-dans-vim-pour-quel-usage/"/>
    <updated>2014-04-17T21:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/17/mapper-la-souris-dans-vim-pour-quel-usage</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Suite à <a href="https://twitter.com/VimLinks/status/456746951283720192">un tweet de @VimLinks</a>
j'ai (re)découvert aujourd'hui qu'on pouvait très bien mapper la souris dans
Vim.</p>

<!-- more -->


<p>Par exemple avec les mappings suivant:</p>

<p><code>vim
nmap &lt;LeftMouse&gt; gg
nmap &lt;RightMouse&gt; G
</code></p>

<p>Le bouton gauche de la souris nous place au tout début du buffer, alors que le
bouton droit nous place à la fin.</p>

<p>J'y ai pensé un peu dans la journée mais je n'ai pas trouvé
un truc intéressant à faire faire à ma souris :(</p>

<p>Est-ce que vous auriez une idée ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin vim-refactor pour Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby/"/>
    <updated>2014-04-15T21:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/15/plugin-vim-refactor-pour-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Voici un plugin Vim issu d'une expérience qu'on mène avec un collègue:
<a href="https://github.com/lkdjiin/vim-refactor">vim-refactor</a>.
Il fonctionne pour l'instant sur du code Ruby et permet d'extraire une
méthode.</p>

<!-- more -->


<p>À partir de ce genre de code:</p>

<p>``` ruby
class HelloWorld</p>

<p>  def greet</p>

<pre><code>greeting = "Hello World!"
puts greeting
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>En étant positionné sur la ligne 4, et en appelant <code>:ExtractMethod</code>
(ou bien sûr un mapping quelconque) vous obtenez ceci:</p>

<p>``` ruby
class HelloWorld</p>

<p>  def greet</p>

<pre><code>puts greeting
</code></pre>

<p>  end</p>

<p>  def greeting</p>

<pre><code>"Hello World!"
</code></pre>

<p>  end
end
```</p>

<p>C'est vraiment une version <em>alpha</em>. On espère implémenter d'autres types
de refactoring et supporter d'autres langages.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ce qui vous manque dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/05/ce-qui-vous-manque-dans-vim/"/>
    <updated>2014-04-05T21:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/05/ce-qui-vous-manque-dans-vim</id>
    <content type="html"><![CDATA[<p>Aujourd'hui pas d'article technique. Pas de code. Pas de truc ni
d'astuce. Aujourd'hui je vous pose une question si vous utilisez Vim :
qu'est ce qui vous manque ?</p>

<!-- more -->


<p>Qu'est-ce que vous aimeriez voir dans Vim qui n'existe pas (encore) ?
Que ce soit un plugin ou une fonctionnalité du programme…</p>

<p>Moi je me lance : j'aimerais avoir une fonction pour mettre à jour les
syntaxes/ftplugins des langages, par exemple une commande
<code>:UpdateLanguage('ruby')</code> qui irait chercher la dernière version
<em>officielle</em> sur un serveur distant, où elles seraient toutes centralisées,
un peu sur le principe des gem ruby.</p>

<p>Et vous ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9/"/>
    <updated>2014-04-04T21:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/04/vim-un-plugin-pour-markdown-partie-9</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je voudrais maintenant tester que ma fonction pour passer un mot en
italique fonctionne sur le dernier mot de la phrase, lorsque celui-ci
n'a qu'un seul caractère…</p>

<!-- more -->


<p>Voilà le test Vader:</p>

<p>``` raw
Given (a line whose the last word is of length 1):
  abc def ghi j</p>

<p>Execute (starting at the end of the last word who is of length 1):
  execute &ldquo;normal! fj&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (last word in italic):
  abc def ghi <em>j</em>
```</p>

<p>Et malheureusement, il échoue:</p>

<p>``` raw</p>

<pre><code>(4/4) [  GIVEN] a line whose the last word is of length 1
(4/4) [EXECUTE] starting at the end of the last word who is of length 1
(4/4) [ EXPECT] (X) last word in italic
  - Expected:
      abc def ghi *j*
  - Got:
      abc def ghi j
</code></pre>

<p>```</p>

<p>Je m'attendais à un échec, mais pas à celui-ci ! Je pensais obtenir ceci:</p>

<pre><code>abc def *ghi* j
</code></pre>

<p>Donc je trouve ça assez bizarre et j'écris deux autres tests sur le dernier
mot d'une phrase, quand ce mot est d'une longueur correcte:</p>

<p>```
Given (some text):
  abc def ghi jkl mno</p>

<p>Execute (from the beginning of the last word):
  execute &ldquo;normal! fm&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (last word in italic):
  abc def ghi jkl <em>mno</em></p>

<p>Execute (from the end of the last word):
  execute &ldquo;normal! fo&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (last word in italic):
  abc def ghi jkl <em>mno</em>
```</p>

<p>Là encore le test qui débute sur le dernier caractère échoue de la même
manière, c'est à dire sans avoir ajouter aucun <code>*</code>.</p>

<p>J'ai déjà entendu dire que Vim pouvait faire des choses bizarres quand
on se trouve à la fin d'une phrase. Je ne sais pas si c'est cela ou la
logique de ma fonction qui est en cause, c'est toujours un mystère et
j'espère avoir le temps ce week-end pour investiguer.</p>

<p>En attendant que je m'y mette, si vous avez des pistes, je suis preneur ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
