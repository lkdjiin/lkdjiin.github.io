<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-01-20T21:00:26+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compiler votre Vim sous Linux]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux/"/>
    <updated>2014-01-19T12:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment compiler la dernière version de
Vim sur Linux (Debian, mais Ubuntu devrait marcher aussi).</p>

<!-- more -->


<h2>Pourquoi vouloir faire ça ?</h2>

<p>Tout d'abord, pourquoi voudrais-t-on compiler Vim alors que Debian nous
le fournit dans les paquets ? Je vois plusieurs raisons:</p>

<ol>
<li>Parce qu'on peut le faire. Mais je sens que cet argument n'est pas
fait pour vous convaincre.</li>
<li>Parce que c'est fun. Idem, pas convaincant, hein ?</li>
<li>Parce qu'on peut vouloir profiter d'une des dernières fonctionnalités
ajoutées, ou du dernier bugfix.</li>
<li>Parce que Debian est parfois à la ramasse lorsqu'il s'agit de nous
fournir des versions suffisament récentes de certains logiciels.
J'ai par exemple une machine qui est toujours en Debian 6 et que je
ne peux pas upgrader, Vim y est <em>coincé</em> en version 7.2.</li>
</ol>


<h2>On y va</h2>

<p>Assurez vous d'abord d'avoir toutes les dépendances:</p>

<pre><code>$ sudo apt-get build-dep vim
</code></pre>

<p>Ensuite, on va télécharger les sources depuis GitHub:</p>

<pre><code>$ git clone https://github.com/b4winckler/vim.git
</code></pre>

<p>Puis peut-être aller chercher une release particulière:</p>

<pre><code>$ cd vim
$ git checkout tags/v-7-4-155
</code></pre>

<p>Ensuite on va dans les sources:</p>

<pre><code>$ cd src
</code></pre>

<p>On nettoie (ça fait pas de mal):</p>

<pre><code>$ make distclean
</code></pre>

<p>On configure avec la plupart des features disponibles, notamment une
interface graphique et le support de perl, python et ruby:</p>

<pre><code>$ ./configure --with-features=huge --enable-gui=gnome2
  --with-compiledby=lkdjiin --enable-perlinterp  --enable-pythoninterp
  --enable-rubyinterp
</code></pre>

<p>Il reste à compiler:</p>

<pre><code>$ make
</code></pre>

<p>Et enfin à installer notre nouveau Vim:</p>

<pre><code>$ sudo make install
</code></pre>

<p>Et voilà:</p>

<p><img src="/images/vim-7-4-155.png"></p>

<h2>Désinstaller la version que vous avez compilé</h2>

<p>Si, pour une raison ou une autre, vous vouliez désinstaller
votre nouveau Vim, il faut d'abord trouver où il est installé.
Pour cela, lancez la commande suivante dans Vim:</p>

<p><code>vim
:echo $VIMRUNTIME
</code></p>

<p>Dans mon cas, cela donne: <code>/usr/local/share/vim/vim74</code>.</p>

<p>Rendez-vous ensuite dans les sources que vous avez téléchargées,
par exemple:</p>

<pre><code>$ cd ~/tmp/vim/src
</code></pre>

<p>Puis:</p>

<pre><code>$ make VIMRUNTIME=/usr/local/share/vim/vim74
$ sudo make uninstall
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sauvegarde automatique des fichiers dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/"/>
    <updated>2014-01-18T09:45:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je parle d'un petit truc qui me facilite
énormément la vie sous Vim: la sauvegarde automatique.</p>

<!-- more -->


<p>Grâce à ce truc, je n'enregistre pratiquement jamais
<em>intentionnellement</em> un fichier. Ce qui fait que je
n'oublie jamais de le faire. Vous savez ? : On modifie
un fichier, on lance l'appli et… arg… ça fonctionne pas !
Tout ça parce qu'on a oublié d'enregistrer les
modifications.</p>

<p>Donc pour enregistrer le fichier courant, la commande est:</p>

<p><code>vim
:w
</code></p>

<p>Pour enregistrer tous les fichiers:</p>

<p><code>vim
:wall
</code></p>

<p>Pour les accros du Ctrl-S, on peut le reproduire avec le mapping
suivant dans le <code>.vimrc</code>:</p>

<p><code>vim
map &lt;C-s&gt; :w&lt;Enter&gt;
</code></p>

<p><strong>Et maintenant le truc promis</strong>. Je veux que mes fichiers soient enregistrés
quand un onglet perds le focus, ou quand Vim lui-même perds le focus:</p>

<p><code>vim
autocmd FocusLost,TabLeave * :wall
</code></p>

<p>Avec cette commande dans votre <code>.vimrc</code>, il est rare de devoir
enregistrer manuellement un fichier ;)</p>

<p>Et si vous voulez comprendre ce que fais exactement cette commande, je
vous laisse regarder l'aide:</p>

<p><code>vim
:h autocmd
:h FocusLost
:h TabLeave
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim et les digraphes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes/"/>
    <updated>2014-01-12T11:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Comment saisir facilement et rapidement des caractères tels que ¡, ¿ ou encore
ß dans Vim ?</p>

<!-- more -->


<p>Pour voir à quoi ressemble ces fameux digraphes dans Vim, tapez la commande
<code>:digraphs</code>. Vous allez obtenir la liste des digraphes qui sont définis.
La définition d'un digraphe ressemble à ceci:</p>

<pre><code>?I ¿  191
</code></pre>

<p>Ici, seules les deux premières colonnes nous intéressent. La première colonne
est le code de deux caractères qu'il faut saisir pour obtenir le caractère
de la seconde colonne.</p>

<p>Pour saisir un digraphe, il faut être en mode insertion et entrer
Control + k, puis les deux caractères du code. Donc <code>Control</code>, puis <code>k</code>,
puis <code>?</code>, puis <code>I</code> donnera le caractère <code>¿</code>.</p>

<p>Voici quelques exemples:</p>

<pre><code>!I ¡
?I ¿
ss ß
%0 ‰
13 ⅓
78 ⅞
l* λ
p* π
-&gt; →
=&gt; ⇒
</code></pre>

<p>Si vous utilisez régulièrement certains digraphes, il existe une manière
plus rapide de les saisir. Activez tout d'abord l'option <code>digraph</code> dans
votre <code>.vimrc</code>:</p>

<p><code>vim
set digraph
</code></p>

<p>Maintenant vous pouvez saisir un digraphe en entrant le premier caractère
du code, puis la touche Backspace, puis le second caractère du code.
Donc <code>p</code>, puis <code>Backspace</code>, puis <code>*</code> vous donneront le caractère Pi (<code>π</code>).
Attention quand même avec cette option, si vous faites régulièrement des
fautes de frappes, vous risquez de voir apparaître assez souvent des caractères
étranges et inattendus ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remplacer Sed et Awk par Ruby 10: Un exemple d'utilisation]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation/"/>
    <updated>2013-12-12T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/12/remplacer-sed-et-awk-par-ruby-10-un-exemple-dutilisation</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/12/11/les-algorithmes-genetiques-demystifies-42-un-probleme-deconomie/">article précédent</a>
sur les algorithmes génétiques, je devais générer des valeurs aléatoires
<em>en dur</em> dans un fichier source Ruby. Le code ressemble à ce qui suit:</p>

<p>``` ruby
KnapsackItem.new(&lsquo;ACCOR&rsquo;, 32, 9, 60),
KnapsackItem.new(&lsquo;AIR_LIQUIDE&rsquo;, 97, 7, 32),
KnapsackItem.new(&lsquo;ALSTOM&rsquo;, 25, 5, 6),
KnapsackItem.new(&lsquo;ARCELORMITTAL_REG&rsquo;, 12, 9, 43),
KnapsackItem.new(&lsquo;AXA&rsquo;, 18, 2, 65),
KnapsackItem.new(&lsquo;BNP_PARIBAS&rsquo;, 53, 3, 24),</p>

<h1>&hellip;</h1>

<p>```</p>

<p>Le dernier nombre de chaque ligne doit être compris entre 1 et 100.
Voici comment faire en utilisant ce qu'on a appris depuis le début
de cette série <a href="http://lkdjiin.github.io/blog/2013/11/29/remplacer-sed-et-awk-par-ruby/">Remplacer Sed et Awk par Ruby</a>.</p>

<!-- more -->


<p>J'ai tout d'abord écrit mes lignes en mettant la chaîne <code>ABC</code> là où je voulais
un nombre aléatoire:</p>

<p>``` ruby
KnapsackItem.new(&lsquo;ACCOR&rsquo;, 32, 9, ABC),
KnapsackItem.new(&lsquo;AIR_LIQUIDE&rsquo;, 97, 7, ABC),
KnapsackItem.new(&lsquo;ALSTOM&rsquo;, 25, 5, ABC),
KnapsackItem.new(&lsquo;ARCELORMITTAL_REG&rsquo;, 12, 9, ABC),
KnapsackItem.new(&lsquo;AXA&rsquo;, 18, 2, ABC),
KnapsackItem.new(&lsquo;BNP_PARIBAS&rsquo;, 53, 3, ABC),</p>

<h1>&hellip;</h1>

<p>```</p>

<p>Cela va permettre au script de <em>trouver</em> l'endroit où substituer un nombre.</p>

<p>Puis, on lance le script suivant depuis une console:</p>

<p><code>bash
ruby -ple 'r=rand(100)+1;$_.sub!(/ABC/,r.to_s)' fichier_source
</code></p>

<p>Explications: <code>rand(100)+1</code> génère un nombre aléatoire entre 1 inclus et
100 inclus. <code>$_.sub!(/ABC/,r.to_s)</code> opère une substitution de la ligne en
cours de traitement: ABC est remplacé par le contenu de <code>r</code>, soit le nombre
aléatoire.</p>

<p>En réalité, je n'ai pas lancé ce script depuis une console, mais directement
dans Vim:</p>

<p><code>vim
:%! ruby -ple 'r=rand(100)+1;$_.sub\!(/ABC/,r.to_s)'
</code></p>

<p>Dans ce cas, il faut faire attention à échapper le <code>!</code>, sans quoi Vim
n'aimeras pas…</p>

<p>Voilà un exemple simple d'utilisation du mode <em>sed/awk</em> de Ruby.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un plugin Vim pour replier/folder les commentaires]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires/"/>
    <updated>2013-12-02T18:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/02/un-plugin-vim-pour-replier-slash-folder-les-commentaires</id>
    <content type="html"><![CDATA[<p>Dans un <a href="http://lkdjiin.github.io/blog/2013/11/28/vim-plier-folder-les-commentaires-de-style-unix/">article précédent</a>, je montrai comment écrire une fonction pour
folder les commentaires de style Unix dans un fichier. Cette solution avait
plusieurs limites alors j'ai eu envie d'en faire un plugin plus
intéressant. Je vous présente donc vim-foldcomments, mon premier plugin
pour Vim.</p>

<!-- more -->


<p>Pouvoir folder/replier tous les commentaires d'un fichier peut être
utile quand vous étudiez un tout nouveau code, ou au contraire, quand vous
travaillez sur un code bien connu.
Vous pouvez trouver le plugin sur Github: <a href="https://github.com/lkdjiin/vim-foldcomments">vim-foldcomments</a>.
Une fois installé, avec <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> par exemple,
vous pouvez taper la commande:</p>

<pre><code>:FoldComments
</code></pre>

<p>pour replier les commentaires du fichier. Personnelement j'ai mappé cette
commande sur la touche F5 en mettant ceci dans mon .vimrc:</p>

<p><code>vim
map&lt;F5&gt; FoldComments&lt;Enter&gt;
</code></p>

<p>Le plugin est en version béta et ne gère pour l'instant que quelques
langages: Ruby, Haskell, Java, C, Javascript, Logo, Racket, Scheme, Vim,
ainsi que tous commentaires de style Unix (<code>#</code>). Les commentaires
multilignes (<code>/* … */</code> en C ou encore <code>=begin … =end</code> en Ruby) sont aussi
pris en compte.</p>

<p>N'hésitez pas à le tester et à me donner votre opinion. Vous pouvez aussi
bien sûr participer au code sur Github.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
