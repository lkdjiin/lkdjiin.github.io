<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-20T21:47:47+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim - un plugin pour markdown - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3/"/>
    <updated>2014-03-17T21:05:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/17/vim-un-plugin-pour-markdown-partie-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>J'ai ajouté les titres de niveau 2 et 3, nettoyer un peu le code et
et remplacer l'utilisation des commandes en mode normal <code>yy</code> et <code>p</code>
(qu'un utilisateur peut toujours avoir remappé) par des fonctions
d'évaluations:</p>

<!-- more -->


<p>``` vim
function s:build_title(char)
  let s:line_content = substitute(getline(&ldquo;.&rdquo;), &lsquo;.&rsquo;, a:char, &lsquo;g&rsquo;)
  call append(&lsquo;.&rsquo;, s:line_content)
endfunction</p>

<p>function! quickmarkdown#title1()
  call s:build_title(&ldquo;=&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title2()
  call s:build_title(&ldquo;&ndash;&rdquo;)
endfunction</p>

<p>function! quickmarkdown#title3()
  call setline(line(&lsquo;.&rsquo;), &lsquo;### &rsquo; . getline(&lsquo;.&rsquo;))
endfunction
```</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vader, un framework de test pour Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim/"/>
    <updated>2014-03-16T20:52:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/16/vader-un-framework-de-test-pour-vim</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/junegunn/vader.vim">Vader</a> est un framework de test pour Vim, écrit en VimScript. Sa syntaxe très simple
fait penser un peu à un mélange de Cucumber et de Python. Il est vraiment sympa
à utiliser.</p>

<!-- more -->


<p>Voici à quoi ressemble un test simple avec Vader:</p>

<pre><code>Given (A line of text):
  Make a title of this

Execute (To level 1 title):
  QuickMarkdownTitle1

Expect (to be a level 1 title):
  Make a title of this
  ====================
</code></pre>

<p>Le bloc <code>Given</code> permet de remplir un buffer de test avec des données.</p>

<p>Le bloc <code>Execute</code> lance des fonctions Vim.</p>

<p>Le bloc <code>Expect</code> vérifie que le buffer de test est bien celui attendu
après le passage du bloc <code>Execute</code>.</p>

<p>Il existe aussi un bloc <code>Do</code>, qui simule le mode normal:</p>

<pre><code>Given (Some text):
  Make a title of this
  and not of this one

Do (To title 1):
  gg
  :QuickMarkdownTitle1\&lt;Enter&gt;

Expect (to be a level 1 title):
  Make a title of this
  ====================
  and not of this one
</code></pre>

<p>On lance Vader simplement avec:</p>

<p><code>vim
:Vader
</code></p>

<p>et le framework ouvre un nouveau buffer avec toutes les informations
nécessaires:</p>

<pre><code>Starting Vader: 1 suite(s), 6 case(s)
  Starting Vader: /home/xavier/devel/vim/quickmarkdown/test/titles.vader
    (1/6) [  GIVEN] A line of text
    (1/6) [EXECUTE] To level 1 title
    (1/6) [ EXPECT] to be a level 1 title
    (2/6) [  GIVEN] A line of text
    (2/6) [EXECUTE] To level 2 title
    (2/6) [ EXPECT] to be a level 2 title
    (3/6) [  GIVEN] A line of text
    (3/6) [EXECUTE] To level 3 title
    (3/6) [ EXPECT] to be a level 3 title
    (4/6) [  GIVEN] Some text
    (4/6) [     DO] To title 1
    (4/6) [ EXPECT] to be a level 1 title
    (5/6) [  GIVEN] Some text
    (5/6) [     DO] To title 2
    (5/6) [ EXPECT] to be a level 2 title
    (6/6) [  GIVEN] Some text
    (6/6) [     DO] To title 3
    (6/6) [ EXPECT] to be a level 3 title
  Success/Total: 6/6
Success/Total: 6/6 (assertions: 0/0)
Elapsed time: 0.419884 sec.
</code></pre>

<p>Vader est «livré» avec coloration syntaxique, ftplugin, plusieurs exemples
d'utilisations. Il peut aussi faire des hooks <code>before</code> et <code>after</code>, inclure des
fichiers et d'autres choses encore…</p>

<p>Une très bonne découverte, très agréable à utiliser.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - plugin pour markdown - la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite/"/>
    <updated>2014-03-15T20:24:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/15/vim-plugin-pour-markdown-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>L'embryon de plugin Vim pour les titres en markdown écrit
<a href="/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/">la dernière fois</a>
ne me satisfait pas du tout. En effet, il ne fonctionne pas avec ma
configuration personnelle, adapté pour le clavier bépo.</p>

<!-- more -->


<p>La fonction pour faire un titre était la suivante:</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#title1()
  execute "normal yypVr="
endfunction
</code></p>

<p>Chez moi, la touche pour la fonction de remplacement n'est pas <code>r</code>, mais <code>h</code>.
Voici donc une nouvelle fonction qui devrait marcher pour tout type de
configuration (enfin j'espère):</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#title1()
  execute "normal yyp"
  execute ":s/./=/g"
endfunction
</code></p>

<p>Plutôt que de remplacer la ligne avec <code>Vr=</code>, on la remplace avec une
substitution. Pour être <em>vraiment</em> utilisable partout, il me reste à
trouver comment me passer du <code>yyp</code> pour dupliquer une ligne, histoire
que ça fonctionne même si vous avez remappé <code>y</code> ou <code>p</code>…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourquoi je passe à Vundle]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/14/pourquoi-je-passe-a-vundle/"/>
    <updated>2014-03-14T20:53:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/14/pourquoi-je-passe-a-vundle</id>
    <content type="html"><![CDATA[<p>Je suis (j'étais) un utilisateur de <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>, le plugin Vim pour gérer
les plugins Vim (!). De base, le système offert par Vim pour maintenir son
pool de plugin à jour est tellement exécrable qu'il faut bien un plugin
pour gérer ça ! En janvier dernier j'ai commencé à utiliser OS X au boulot,
et suite à quelques soucis, Pathogen refusait de fonctionner (pour être
honnête, ça n'était pas de sa faute). J'ai donc péniblement installé mes
plugins les plus importants à la main… avant d'essayer <a href="https://github.com/gmarik/Vundle.vim">Vundle</a>.</p>

<!-- more -->


<p>Et j'ai trouvé Vundle excellent. À tel point que je vais migrer ma configuration
à la maison ce week-end. Pourquoi je trouve Vundle meilleur que Pathogen ?</p>

<ul>
<li>BundleInstall installe le plugin tout seul comme un grand, et aussi la
documentation.</li>
<li>BundleInstall! met à jour les plugins.</li>
<li>BundleClean désinstalle automatiquement les plugins inutilisés.</li>
</ul>


<p>En un mot : <strong>comfort</strong>.</p>

<p>Bon, le système n'est pas parfait. Il manque quelque chose pour
installer une révision particulière d'un plugin et je ne peux plus <em>hacker</em>
directement le code source quand un plugin me pose problème en bépo (mais c'est
pas plus mal de trouver une autre solution).</p>

<p>Et vous, vous utilisez quoi, et pourquoi, pour gérer vos plugins Vim ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin minimal pour les titres markdown]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown/"/>
    <updated>2014-03-12T21:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/12/vim-un-plugin-minimal-pour-les-titres-markdown</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Hier on a vu <a href="/blog/2014/03/11/vim-cas-pratique-pour-les-debutants-les-titres-en-markdown/">comment faire rapidement des titres au format markdown</a>.
Aujourd'hui on transforme ça en plugin. Enfin, en un embryon de plugin.</p>

<!-- more -->


<p>Voici donc un plugin bricolé en deux minutes qui fait des titres de niveau 1
en markdown.</p>

<p>``` vim plugin/quickmarkdown.vim
if exists(&lsquo;g:loaded_quickmarkdown&rsquo;) || &amp;cp || v:version &lt; 700
  finish
endif
let g:loaded_quickmarkdown = 1</p>

<p>command! QuickMarkdownTitle1 call quickmarkdown#title1()
```</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#title1()
  execute "normal yypVr="
endfunction
</code></p>

<p>Et en mettant ce qui suit dans votre vimrc, on peut l'activer avec
leader puis <code>=</code>:</p>

<p><code>vim
map&lt;Leader&gt;= :QuickMarkdownTitle1&lt;Enter&gt;
</code></p>

<p>Quand j'aurais le temps j'ajouterais les niveaux 2, 3, 4, etc. Et aussi
la documentation et quelques explications ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
