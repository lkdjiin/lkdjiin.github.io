<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-22T12:06:38+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim: Créez des présentations avec Vimdeck]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/"/>
    <updated>2013-10-13T13:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck</id>
    <content type="html"><![CDATA[<p>Vimdeck est un programme écrit en Ruby qui transforme un fichier texte au
format Markdown en plusieurs <em>slides</em> pour effectuer une présentation avec
l'éditeur de texte Vim !</p>

<!-- more -->


<h2>Installation</h2>

<p>Installez tout d'abord le plugin Vim <a href="https://github.com/vim-scripts/SyntaxRange">SyntaxRange</a>.</p>

<p>Ensuite, installez le programme de manière classique:</p>

<pre><code>gem install vimdeck
</code></pre>

<p>Note: J'ai eu un problème de dépendance (sur Debian) et il a fallu installer la
librairie systême <code>libmagickwand-dev</code> pour que tout fonctionne bien.</p>

<h2>Utilisation</h2>

<p>Maintenant on écrit notre présentation au format Markdown, par exemple:</p>

<pre><code># Premier slide

- Premier point
- Second point
- Troisième point


# Deuxième slide

- Premier
{~- Deuxième point~}
{~- Troisième point~}


# Troisième et dernier slide

```ruby
class Foo
  def bar
    puts "Hello Vimdeck!"
  end
end
```
</code></pre>

<p>Et on lance la présentation ainsi:</p>

<pre><code>vimdeck mon_fichier.md
</code></pre>

<p>Ensuite, on change de slide avec les touches PageUp/PageDown.</p>

<p>Vous pouvez voir des captures d'écrans sur le <a href="https://github.com/tybenz/vimdeck">site du projet</a>.</p>

<h2>Conclusion</h2>

<p>Bon, le projet est un peu jeune et pas mal buggé, mais l'idée est vraiment
intéressante. C'est totalement improbable, complêtement loufoque, inutilisable
avec des graphiques, donc
rigoureusement indispensable, ne serait-ce que pour frimer devant les
collègues: «Regardez comment je fais une présentation en 3 minutes avec mon
éditeur de texte…».</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: la commande point et le clavier Azerty]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty/"/>
    <updated>2013-09-14T09:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Tout Vimiste sait à quoi sert le <code>.</code>, cette commande répète le dernier
changement. Si vous venez de saisir <code>dap</code> pour supprimer un paragraphe,
il suffit de tapez <code>.</code> pour en supprimer un second. Très utile, c'est
ce que nous dit toute la littérature sur Vim. Y'aurait pas comme un petit
malaise quand même ?</p>

<!-- more -->


<p>Quand j'ai débuté sur Vim, je lisais ça partout: «Le <code>.</code> c'est génial» ou
encore «Préparez vous à utiliser <code>.</code> tout le temps», etc. Après un mois
à utiliser Vim, j'avais du utiliser cette commande 3 fois maximum… Je
sentais bien qu'il y avait un souci quelque part, mais pris dans
l'apprentissage de Vim je ne mettais pas le doigt dessus. J'ai presque fini par
l'oublier, ce <code>.</code>.</p>

<p>Et puis un jour, j'ai changé de clavier pour un Bépo. Et comme par magie je
me suis mis à utiliser le <code>.</code> tout le temps, sans même m'en rendre compte.</p>

<p>Voici un clavier Bépo et un clavier Qwerty:</p>

<p><img src="/images/clavier-bepo.png"></p>

<p><img src="/images/clavier-qwerty.png"></p>

<p>Sur Bépo et Qwerty, le point est une touche en accès direct. Au contraire
de l'Azerty où il faut combiner avec la touche Majuscule pour l'atteindre:</p>

<p><img src="/images/clavier-azerty.png"></p>

<p>Du coup je me demande si ça ne vaudrait pas le coup d'échanger le <code>.</code> et
le <code>;</code> pour les Vimistes qui utilisent un clavier Azerty. Je suis curieux
de savoir ce que vous en pensez. Avez vous déjà tenté cette manip et la
conseilleriez vous ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le système de fenêtrage de Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/"/>
    <updated>2013-09-07T09:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je vous présente les combinaisons de touches que j'utilise
au quotidien pour travailler avec les fenêtres dans Vim.</p>

<!-- more -->


<p>Avant d'entrer dans le vif du sujet, je dois vous prévenir que
pour ouvrir un fichier dans une nouvelle fenêtre (ou dans un nouvel onglet)
j'utilise le plugin Ctrlp. Il n'y aura donc pas de commandes relatives
à l'ouverture d'un nouveau fichier.</p>

<h2>La base</h2>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
horizontale:</p>

<p><code>vim
:sp
</code></p>

<p><code>sp</code> est l'abréviation de <code>split</code>.</p>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
verticale:</p>

<p><code>vim
:vs
</code></p>

<p><code>vs</code> est l'abréviation de <code>vsplit</code>.</p>

<h2>Un peu de mappage</h2>

<p>Pour faciliter les manipulations de fenêtres, j'utilise <code>w</code> comme
un Ctrl+w. Ctrl+w étant le préfixe de nombreuses commandes concernants
les fenêtres:</p>

<p><code>vim
noremap w &lt;C-w&gt;
noremap W &lt;C-w&gt;&lt;C-w&gt;
</code></p>

<p>En mode normal, les touches fléchées me servent à changer de fenêtre.</p>

<p><code>vim
nnoremap &lt;up&gt; &lt;C-w&gt;&lt;up&gt;
nnoremap &lt;down&gt; &lt;C-w&gt;&lt;down&gt;
nnoremap &lt;left&gt; &lt;C-w&gt;&lt;left&gt;
nnoremap &lt;right&gt; &lt;C-w&gt;&lt;right&gt;
</code></p>

<h2>Bouger et fermer</h2>

<p>Pour changer de fenêtre en cycle:</p>

<p><code>vim
ww
</code></p>

<p>Pour échanger deux fenêtres:</p>

<p><code>vim
wx
</code></p>

<p>Pour fermer la fenêtre active, deux solutions:</p>

<p><code>vim
:q
" ou bien
ZZ
</code></p>

<p>Pour fermer toutes les fenêtres sauf la courante:</p>

<p><code>vim
wo
</code></p>

<p>Pour basculer la fenêtre active dans un nouvel onglet:</p>

<p><code>vim
wT
</code></p>

<h2>Dimensions des fenêtres</h2>

<p>Pour un agencement de fenêtres un peu complexe, il est sûrement plus simple et
rapide d'utiliser la souris. Et oui, il arrive parfois (mais c'est rare, hein)
que le clavier ne soit pas le périphérique le mieux adapté.</p>

<p>Pour donner une taille identique à toutes les fenêtres:</p>

<p><code>vim
w=
</code></p>

<p>Pour redimensionner les fenêtres, j'utilise la touche <code>Control</code> combinée
avec les flèches:</p>

<p><code>vim
nnoremap &lt;C-up&gt; :resize +2&lt;cr&gt;
nnoremap &lt;C-down&gt; :resize -2&lt;cr&gt;
nnoremap &lt;C-right&gt; :vertical resize +2&lt;cr&gt;
nnoremap &lt;C-left&gt; :vertical resize -2&lt;cr&gt;
</code></p>

<p>Ainsi,
Ctrl + flèche vers le haut va augmenter la hauteur de la fenêtre active.
Ctrl + flèche vers le bas va diminuer la hauteur de la fenêtre active.
Ctrl + flèche vers la droite va augmenter la largeur de la fenêtre active.
Ctrl + flèche vers la gauche va diminuer la largeur de la fenêtre active.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: Recherche de texte]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte/"/>
    <updated>2013-08-27T10:14:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je montre comment rechercher une chaîne de caractères dans un
fichier avec Vim: les commandes, les options et un petit truc en plus…</p>

<!-- more -->


<h2>Les commandes utiles</h2>

<p>Pour rechercher un texte dans le fichier, on utilise la commande <code>/</code> suivie
du texte à rechercher et de la touche entrée. Ainsi:</p>

<pre><code>/texte
</code></pre>

<p>va chercher toutes les occurences de «texte» dans le fichier.</p>

<p>Pour se déplacer parmi les occurences trouvées, on utilise <code>n</code> et <code>N</code>. <code>n</code>
va à l'occurence suivante tandis que <code>N</code> va à l'occurence précédente.</p>

<p>Attention, la commande de recherche <code>/</code> ne tient pas compte des <em>mots</em>.
Je m'explique: <code>/xxx</code> va trouver les 4 expressions suivantes.</p>

<ol>
<li>xxx</li>
<li>aaaxxx</li>
<li>xxxbbb</li>
<li>aaaxxxbbb</li>
</ol>


<p>Parfois c'est ce que l'on veut, parfois non. Pour modifier ce comportement
on utilise <code>\&lt;</code> et <code>\&gt;</code>, respectivement pour signifier le début et la fin
d'un mot. Ainsi <code>\&lt;xxx\&gt;</code> ne trouvera que l'expression n° 1. <code>\&lt;xxx</code> trouvera
la n° 1 et la n° 3. Quand à <code>/xxx\&gt;</code>, elle trouvera la n° 1 et la n° 2.</p>

<h2>Les options</h2>

<p>Voici quelques options à utiliser dans votre fichier .vimrc.</p>

<p><code>vim
set incsearch
</code></p>

<p>La recherche sera mise en évidence au fur et à mesure de la frappe clavier,
et non pas seulement après la touche entrée. <code>incsearch</code> signifie
<em>incremental search</em>.</p>

<p><code>vim
set ignorecase smartcase
</code></p>

<p>Ces deux options marchent souvent de pair. <code>ignorecase</code> permet d'ignorer la
différence minuscule/majuscule, ainsi <code>/texte</code> trouvera «texte», «TEXTE» et
«Texte». <code>smartcase</code> repassera en mode différenciation des
minuscules/majuscules si vous saisissez une majuscule, ainsi <code>/Texte</code> trouvera
«Texte» mais pas «TEXTE» ni «texte».</p>

<p><code>vim
set hlsearch
</code></p>

<p>Cette option sert à mettre en évidence la recherche, autrement dit à la
surligner.</p>

<h2>Supprimer la mise en évidence du texte après une recherche</h2>

<p>Une fois que vous avez fait ce que vous aviez à faire avec votre recherche,
celle-ci reste surlignée, ce qui devient vite très agaçant (pour rester poli).
Pour effacer le surlignage, on utilise la commande <code>nohlsearch</code>:</p>

<p><code>vim
:nohlsearch
</code></p>

<p>On aura évidemment intérêt à mapper cette commande, par exemple sur
<code>&lt;Leader&gt;h</code>:</p>

<p><code>vim
nnoremap &lt;Leader&gt;h :nohlsearch&lt;CR&gt;
</code></p>

<p>Personnellement, je n'ai pas de mappage pour cette commande: je ne m'en
sert tout simplement pas. Pour supprimer la mise en évidence de la
dernière recherche je tape juste <code>/xx</code>. Vous pouvez utiliser <code>/yy</code> ou <code>/ww</code>
ou tout ce qui tombe bien sous vos doigts. Le principe est de rechercher
une chaîne qui n'existe pas, ce qui a pour effet d'effacer la dernière
mise en évidence.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: la touche Escape]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/"/>
    <updated>2013-08-15T10:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vim a été développé sur des machines dont les claviers avaient une
disposition des touches autres que celle de nos claviers modernes. Comme par
exemple le terminal ADM-3A:</p>

<p><img src="/images/KB_Terminal_ADM3A.png"></p>

<!-- more -->


<p>Le plus frappant c'est l'endroit de la touche <em>Escape</em> à l'époque. On pouvait
y accéder avec une simple extension du petit doigt gauche, sans avoir à
bouger la main. De nos jours, cette touche a été reléguée aux confins de
l'univers. Sachant que c'est une touche qu'on utilise sans cesse, y a de
quoi choper une tendinite. Je vais vous donner 3 trucs pour remédier à ce
problème, choisissez celui qui vous conviendra le mieux.</p>

<h2>Control c</h2>

<p>C'est le truc le plus simple, rien à configurer. La combinaison <code>&lt;Ctrl-c&gt;</code>
fonctionne naturellement comme une touche <em>Escape</em>. Il y a bien
quelques différences, et vous vous en rendrez compte à l'occasion, mais
la plupart du temps ça fonctionne. Commencez donc par là avant de vous
attaquer à d'autres trucs, celui-ci est peut être amplement suffisant.</p>

<h2>Une combinaison personnalisée</h2>

<p>Il semble que <code>jj</code> soit une combinaison de remplacement populaire en
mode insertion:</p>

<p><code>vim
inoremap jj &lt;Esc&gt;
</code></p>

<p>L'idée c'est d'utiliser une combinaison de deux caractères qui n'existe
pas dans votre langue/langage, et qui bien sûr soit simple et rapide a
taper. J'ai essayé pendant un moment ce genre de chose, mais je n'ai
jamais réussi à m'y faire.</p>

<h2>Échanger caps lock et esc</h2>

<p>Si pour vous la touche <em>caps lock</em> (verrou majuscule) est un mystère, voici
le truc qu'il vous faut. Mettez donc votre système d'exploitation à
contribution pour:</p>

<ul>
<li>soit échanger la touche <em>caps lock</em> et <em>esc</em></li>
<li>soit faire de <em>caps lock</em> une touche <em>esc</em> supplémentaire</li>
</ul>


<p>Quelque soit votre OS, vous devriez trouver ça dans un menu du genre
Système > Préférences > Clavier.</p>

<h2>Pour conclure</h2>

<p>Vous trouverez plein d'autres trucs sur internet, n'hesitez pas à en
essayer plusieurs avant d'adopter celui qui vous ressemblera.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
