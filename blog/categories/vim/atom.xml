<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-03-31T21:12:36+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 8]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8/"/>
    <updated>2014-03-31T20:58:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/31/vim-un-plugin-pour-markdown-partie-8</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>On continue d'implémenter <a href="/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/">la fonctionnalité commencée hier</a>
en testant deux cas exceptionnels, toujours à l'aide de Vader.</p>

<!-- more -->


<p>Revoici le fichier de test d'hier:</p>

<p>``` raw
Given (some text):
  abc def ghi jkl mno</p>

<p>Execute (starting in middle of a word):
  execute &ldquo;normal! fe&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno
```</p>

<p>Je vais ajouter deux tests. L'un pour voir ce qu'il se passe quand le
curseur se trouve au début d'un mot, et idem pour la fin d'un mot:</p>

<p>``` raw
Given (some text):
  abc def ghi jkl mno</p>

<p>Execute (starting in middle of a word):
  execute &ldquo;normal! fe&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno</p>

<p>Execute (starting at beginning of a word):
  execute &ldquo;normal! fd&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno</p>

<p>Execute (starting at the end of a word):
  execute &ldquo;normal! ff&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno
```</p>

<p>Et avec l'implémentation de la dernière fois:</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#italic()
  execute "normal! bi*\&lt;Esc&gt;ea*\&lt;Esc&gt;"
endfunction
</code></p>

<p>… le test où le curseur se trouve au début d'un mot échoue
misérablement.</p>

<p>Pour le faire passer, on doit d'abord déplacer le curseur d'un cran
vers la droite:</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#italic()
  execute "normal! lbi*\&lt;Esc&gt;ea*\&lt;Esc&gt;"
endfunction
</code></p>

<p>La prochaine fois on continue avec d'autres cas exceptionnels.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7/"/>
    <updated>2014-03-30T21:20:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/30/vim-un-plugin-pour-markdown-partie-7</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour mon plugin Vim qui aide à écrire du markdown, j'ai envie d'une
fonctionnalité pour mettre un mot en italique (et aussi en gras).
Si j'ai le texte suivant:</p>

<pre><code>foo bar baz
</code></pre>

<p>et que le curseur est dans le mot <code>bar</code>, je veux que la combinaison de
touches <code>&lt;Leader&gt;qi</code> donne ceci:</p>

<pre><code>foo *bar* baz
</code></pre>

<p>Pour implémenter ça, j'utiliserais encore le framework de test Vader.</p>

<!-- more -->


<p>Voici un premier test, pour le cas général:</p>

<p>``` raw
Given (some text):
  abc def ghi jkl mno</p>

<p>Execute (starting in middle of a word):
  execute &ldquo;normal! fe&rdquo;
  QuickMarkdownItalic</p>

<p>Expect (2nd word in italic):
  abc <em>def</em> ghi jkl mno
```</p>

<p>Le bloc <code>Execute</code> place d'abord le curseur sur le caractêre <code>e</code>,
autrement dit <em>à l'intérieur</em> du mot <code>def</code>. Il lance ensuite la fonction
<code>QuickMarkdownItalic</code> qui devra faire le travail.</p>

<p>Dans le fichier <code>plugin/quickmarkdown.vim</code>, j'ajoute la nouvelle
fonction:</p>

<p><code>vim plugin/quickmarkdown.vim
command! QuickMarkdownItalic call quickmarkdown#italic()
</code></p>

<p>Puis j'implémente la fonction de la manière la plus simple à laquelle
je puisse penser:</p>

<p><code>vim autoload/quickmarkdown.vim
function! quickmarkdown#italic()
  execute "normal! bi*\&lt;Esc&gt;ea*\&lt;Esc&gt;"
endfunction
</code></p>

<p>Décodage: <code>b</code> place le curseur au début du mot. <code>i*\&lt;Esc&gt;</code> passe en
mode insertion, ajoute un <code>*</code> et revient en mode normal. <code>e</code> place le
curseur à la fin du mot. <code>a*\&lt;Esc&gt;</code> passe en mode insertion <em>derrière</em>
le mot et ajoute un <code>*</code> puis revient encore en mode normal.</p>

<p>Cette fonction sera amenée à bouger une fois qu'on se sera occupé des
cas particuliers. Ce sera pour une prochaine fois.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exemple de test pour Vim avec le framework Vader]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader/"/>
    <updated>2014-03-29T21:10:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/29/exemple-de-test-pour-vim-avec-le-framework-vader</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour mon plugin <a href="https://github.com/lkdjiin/quickmarkdown">QuickMarkdown</a>, je vais ajouter une petite fonction
qui insère la ligne <code>&lt;!-- more --&gt;</code> quand je tape la combinaison de
touche <code>&lt;Leader&gt;qm</code>. Ça devrait m'être utile vu que j'écris du markdown
pour Octopress tous les jours ;) Si on est pas obligé de passer par un
plugin pour ce genre de chose, ça va aussi me permettre de parler un peu
de Vader. Voici donc un exemple simple de TDD pour
Vim, avec le framework de test Vader.</p>

<!-- more -->


<p>Tout d'abord, j'écris le test:</p>

<p>``` raw test/more.vader
Given (some text):
  First line
  Last line</p>

<p>Do (insert more marker in normal mode):
  gg
  :QuickMarkdownMore&lt;Enter></p>

<p>Expect (marker inserted):
  First line
  <!-- more -->
  Last line
```</p>

<p>Voici comment il fonctionne. La directive <code>Given</code> produit un buffer (=~ fichier)
utilisé dans les directives suivante, qui contient 2 lignes, respectivement
<code>First line</code> et <code>Last line</code>:</p>

<p><code>raw
Given (some text):
  First line
  Last line
</code></p>

<p>Ensuite, la directive <code>Do</code> joue des commandes en mode normal. Tout d'abord
<code>gg</code>, pour s'assurer qu'on est sur la première ligne, puis la commande
<code>QuickMarkdownMore</code>, qui est celle qui est censée faire le travail:</p>

<p><code>raw
Do (insert more marker in normal mode):
  gg
  :QuickMarkdownMore\&lt;Enter&gt;
</code></p>

<p>Finalement, la directive <code>Expect</code> s'assure que le buffer de test a été
transformé comme je le voulais:</p>

<p><code>raw
Expect (marker inserted):
  First line
  &lt;!-- more --&gt;
  Last line
</code></p>

<p>Il reste à lancer le test (avec <code>:Vader</code>) pour s'assurer qu'il ne passe
pas, puis à écrire la fonction, et relancer le test en s'assurant qu'il
passe bien cette fois-ci.</p>

<p>Et voici pour finir le code d'implémentation:</p>

<p><code>vim plugin/markdown.vim
command! QuickMarkdownMore call quickmarkdown#more()
</code></p>

<p><code>vim autoload/markdown.vim
function! quickmarkdown#more()
  call append('.', "&lt;!-- more --&gt;")
endfunction
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Comment ouvrir la fenêtre courante dans un nouvel onglet]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet/"/>
    <updated>2014-03-26T21:09:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/26/vim-comment-ouvrir-la-fenetre-courante-dans-un-nouvel-onglet</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vous avez un écran bien large ? Vous travaillez régulierement avec 4 ou 5
fenêtres dans le même onglet, voir plus ?
Parfois vous aimeriez bien ouvrir rapidement une de ces fenêtres dans un
nouvel onglet ?</p>

<!-- more -->


<p>Alors ça va peut-être bien être l'article le plus court de l'histoire de ce
blog:</p>

<p><code>vim
:tab sp
</code></p>

<p>Et la fenêtre courante s'ouvre dans un nouvel onglet (<code>sp</code> est l'abréviation
de <code>split</code>).</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Un plugin pour markdown - partie 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5/"/>
    <updated>2014-03-23T20:57:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/03/23/vim-un-plugin-pour-markdown-partie-5</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>On fait un peu de nettoyage en mettant du code en commun, et on voit un
mapping plus intéressant.</p>

<!-- more -->


<p>Voici ce que ça donne après un refactoring:</p>

<p>``` vim autoload/quickmarkdown.vim
function s:build_big_title(char)
  let s:line_content = substitute(getline(&ldquo;.&rdquo;), &lsquo;.&rsquo;, a:char, &lsquo;g&rsquo;)
  call append(&lsquo;.&rsquo;, s:line_content)
endfunction</p>

<p>function s:build_little_title(str)
  call setline(line(&lsquo;.&rsquo;), a:str . getline(&lsquo;.&rsquo;))
endfunction</p>

<p>function! quickmarkdown#title(level)
  if a:level == 1</p>

<pre><code>call s:build_big_title("=")
</code></pre>

<p>  elseif a:level == 2</p>

<pre><code>call s:build_big_title("-")
</code></pre>

<p>  elseif a:level == 3</p>

<pre><code>call s:build_little_title("### ")
</code></pre>

<p>  elseif a:level == 4</p>

<pre><code>call s:build_little_title("#### ")
</code></pre>

<p>  elseif a:level == 5</p>

<pre><code>call s:build_little_title("##### ")
</code></pre>

<p>  elseif a:level == 6</p>

<pre><code>call s:build_little_title("###### ")
</code></pre>

<p>  endif
endfunction
```</p>

<p><code>vim plugin/quickmarkdown.vim
command! QuickMarkdownTitle1 call quickmarkdown#title(1)
command! QuickMarkdownTitle2 call quickmarkdown#title(2)
command! QuickMarkdownTitle3 call quickmarkdown#title(3)
command! QuickMarkdownTitle4 call quickmarkdown#title(4)
command! QuickMarkdownTitle5 call quickmarkdown#title(5)
command! QuickMarkdownTitle6 call quickmarkdown#title(6)
</code></p>

<p>On n'a plus qu'un seule fonction <code>quickmarkdown#title</code>, à laquelle on passe
en paramêtre le niveau du titre.</p>

<p>J'ai aussi changé le mapping.
Tout d'abord j'utilise leader+q, au lieu de leader+m. Pourquoi, parce que
je voulais m'en servir aussi en mode insertion avec la touche Control. Et
en mode insertion, Control+m est équivalent à la touche Entrée, ce qui pose
bien sûr quelques problèmes ;) Voici le mapping pour un clavier qwerty:</p>

<p><code>vim .vimrc
nmap &lt;Leader&gt;q1 :QuickMarkdownTitle1&lt;Enter&gt;
nmap &lt;Leader&gt;q2 :QuickMarkdownTitle2&lt;Enter&gt;
nmap &lt;Leader&gt;q3 :QuickMarkdownTitle3&lt;Enter&gt;
nmap &lt;Leader&gt;q4 :QuickMarkdownTitle4&lt;Enter&gt;
nmap &lt;Leader&gt;q5 :QuickMarkdownTitle5&lt;Enter&gt;
nmap &lt;Leader&gt;q6 :QuickMarkdownTitle6&lt;Enter&gt;
imap &lt;C-q&gt;1 &lt;C-o&gt;:QuickMarkdownTitle1&lt;Enter&gt;
imap &lt;C-q&gt;2 &lt;C-o&gt;:QuickMarkdownTitle2&lt;Enter&gt;
imap &lt;C-q&gt;3 &lt;C-o&gt;:QuickMarkdownTitle3&lt;Enter&gt;
imap &lt;C-q&gt;4 &lt;C-o&gt;:QuickMarkdownTitle4&lt;Enter&gt;
imap &lt;C-q&gt;5 &lt;C-o&gt;:QuickMarkdownTitle5&lt;Enter&gt;
imap &lt;C-q&gt;6 &lt;C-o&gt;:QuickMarkdownTitle6&lt;Enter&gt;
</code></p>

<p>Au fait, vous pouvez trouver ce plugin sur <a href="https://github.com/lkdjiin/quickmarkdown">Github</a>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
