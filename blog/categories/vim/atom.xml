<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-11-02T12:14:03+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim: Coloration syntaxique des parenthèses]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses/"/>
    <updated>2013-11-02T12:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/11/02/vim-coloration-syntaxique-des-parentheses</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je l'ai annoncé sur ce blog, je suis en train d'apprendre Racket (dérivé de
Scheme, de Lisp). Donc un langage qui fait un très large usage des
parenthèses.</p>

<p><img src="/images/rainbow-parentheses.png"></p>

<!-- more -->


<p>C'est là que le plugin <a href="http://www.vim.org/scripts/script.php?script_id=3772">Rainbow Parentheses</a> peut aider.
Il colore les parenthèses différement suivant le niveau d'imbrication.
Il n'est pas activé par défaut, et c'est tant mieux: ce type de coloration
syntaxique n'est pas utile tout le temps, mais seulement à certains moments,
quand on se sent un peu perdu
(<em>sinon, bonjour l'effet sapin de Noël</em>). Pour l'activer/le désactiver, il suffit de
taper:</p>

<p><code>vim
:RainbowParenthesesToggle
</code></p>

<p>Si vous l'utilsez régulièrement, il sera sûrement utile de mapper la fonction
précédente. Par exemple pour l'avoir en tapant la touche <code>leader</code> puis <code>p</code>,
vous ajouterez ceci dans votre .vimrc:</p>

<p><code>vim
map &lt;Leader&gt;p :RainbowParenthesesToggle&lt;Enter&gt;
</code></p>

<p>Le plugin Rainbow Parentheses peut aussi colorer d'autres paires de caractères,
comme <code>[]</code>, <code>{}</code> et <code>&lt;&gt;</code>. Consultez le readme pour en savoir plus.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim pour écrire un livre ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/27/vim-pour-ecrire-un-livre/"/>
    <updated>2013-10-27T21:34:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/27/vim-pour-ecrire-un-livre</id>
    <content type="html"><![CDATA[<p>Il y a une <a href="http://www.reddit.com/r/vim/comments/142zn7/are_you_interested_in_a_vim_for_writers_book/">discusion intéressante</a>
sur reddit, initié par quelqu'un qui souhaite écrire un petit livre sur
«Vim pour les écrivains». <em>Writer</em> en anglais, soit écrivain, rédacteur,
auteur, etc.</p>

<!-- more -->


<p>Le sujet me semble intéressant. En effet, si Vim est surtout utilisé par
des développeurs, il n'a pas été créé spécifiquement pour cela. À la base,
c'est juste un éditeur et il est légitime de vouloir l'utiliser pour écrire
un livre, une thèse, un devoir scolaire, de la documentation, etc.</p>

<p>Seulement ce genre de document est bien différent d'un code informatique.
Je pense par exemple aux notes de bas de pages, aux images, aux formules
mathématiques…</p>

<p>Je suis curieux, avez-vous déjà utilisé Vim pour écrire un livre ?
Connaissez-vous quelqu'un qui l'a fait ? Avez-vous des trucs, des astuces,
des plugins spécifiques à partager ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Créez des présentations avec Vimdeck]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/"/>
    <updated>2013-10-13T13:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck</id>
    <content type="html"><![CDATA[<p>Vimdeck est un programme écrit en Ruby qui transforme un fichier texte au
format Markdown en plusieurs <em>slides</em> pour effectuer une présentation avec
l'éditeur de texte Vim !</p>

<!-- more -->


<h2>Installation</h2>

<p>Installez tout d'abord le plugin Vim <a href="https://github.com/vim-scripts/SyntaxRange">SyntaxRange</a>.</p>

<p>Ensuite, installez le programme de manière classique:</p>

<pre><code>gem install vimdeck
</code></pre>

<p>Note: J'ai eu un problème de dépendance (sur Debian) et il a fallu installer la
librairie systême <code>libmagickwand-dev</code> pour que tout fonctionne bien.</p>

<h2>Utilisation</h2>

<p>Maintenant on écrit notre présentation au format Markdown, par exemple:</p>

<pre><code># Premier slide

- Premier point
- Second point
- Troisième point


# Deuxième slide

- Premier
{~- Deuxième point~}
{~- Troisième point~}


# Troisième et dernier slide

```ruby
class Foo
  def bar
    puts "Hello Vimdeck!"
  end
end
```
</code></pre>

<p>Et on lance la présentation ainsi:</p>

<pre><code>vimdeck mon_fichier.md
</code></pre>

<p>Ensuite, on change de slide avec les touches PageUp/PageDown.</p>

<p>Vous pouvez voir des captures d'écrans sur le <a href="https://github.com/tybenz/vimdeck">site du projet</a>.</p>

<h2>Conclusion</h2>

<p>Bon, le projet est un peu jeune et pas mal buggé, mais l'idée est vraiment
intéressante. C'est totalement improbable, complêtement loufoque, inutilisable
avec des graphiques, donc
rigoureusement indispensable, ne serait-ce que pour frimer devant les
collègues: «Regardez comment je fais une présentation en 3 minutes avec mon
éditeur de texte…».</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: la commande point et le clavier Azerty]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty/"/>
    <updated>2013-09-14T09:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Tout Vimiste sait à quoi sert le <code>.</code>, cette commande répète le dernier
changement. Si vous venez de saisir <code>dap</code> pour supprimer un paragraphe,
il suffit de tapez <code>.</code> pour en supprimer un second. Très utile, c'est
ce que nous dit toute la littérature sur Vim. Y'aurait pas comme un petit
malaise quand même ?</p>

<!-- more -->


<p>Quand j'ai débuté sur Vim, je lisais ça partout: «Le <code>.</code> c'est génial» ou
encore «Préparez vous à utiliser <code>.</code> tout le temps», etc. Après un mois
à utiliser Vim, j'avais du utiliser cette commande 3 fois maximum… Je
sentais bien qu'il y avait un souci quelque part, mais pris dans
l'apprentissage de Vim je ne mettais pas le doigt dessus. J'ai presque fini par
l'oublier, ce <code>.</code>.</p>

<p>Et puis un jour, j'ai changé de clavier pour un Bépo. Et comme par magie je
me suis mis à utiliser le <code>.</code> tout le temps, sans même m'en rendre compte.</p>

<p>Voici un clavier Bépo et un clavier Qwerty:</p>

<p><img src="/images/clavier-bepo.png"></p>

<p><img src="/images/clavier-qwerty.png"></p>

<p>Sur Bépo et Qwerty, le point est une touche en accès direct. Au contraire
de l'Azerty où il faut combiner avec la touche Majuscule pour l'atteindre:</p>

<p><img src="/images/clavier-azerty.png"></p>

<p>Du coup je me demande si ça ne vaudrait pas le coup d'échanger le <code>.</code> et
le <code>;</code> pour les Vimistes qui utilisent un clavier Azerty. Je suis curieux
de savoir ce que vous en pensez. Avez vous déjà tenté cette manip et la
conseilleriez vous ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le système de fenêtrage de Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/"/>
    <updated>2013-09-07T09:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je vous présente les combinaisons de touches que j'utilise
au quotidien pour travailler avec les fenêtres dans Vim.</p>

<!-- more -->


<p>Avant d'entrer dans le vif du sujet, je dois vous prévenir que
pour ouvrir un fichier dans une nouvelle fenêtre (ou dans un nouvel onglet)
j'utilise le plugin Ctrlp. Il n'y aura donc pas de commandes relatives
à l'ouverture d'un nouveau fichier.</p>

<h2>La base</h2>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
horizontale:</p>

<p><code>vim
:sp
</code></p>

<p><code>sp</code> est l'abréviation de <code>split</code>.</p>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
verticale:</p>

<p><code>vim
:vs
</code></p>

<p><code>vs</code> est l'abréviation de <code>vsplit</code>.</p>

<h2>Un peu de mappage</h2>

<p>Pour faciliter les manipulations de fenêtres, j'utilise <code>w</code> comme
un Ctrl+w. Ctrl+w étant le préfixe de nombreuses commandes concernants
les fenêtres:</p>

<p><code>vim
noremap w &lt;C-w&gt;
noremap W &lt;C-w&gt;&lt;C-w&gt;
</code></p>

<p>En mode normal, les touches fléchées me servent à changer de fenêtre.</p>

<p><code>vim
nnoremap &lt;up&gt; &lt;C-w&gt;&lt;up&gt;
nnoremap &lt;down&gt; &lt;C-w&gt;&lt;down&gt;
nnoremap &lt;left&gt; &lt;C-w&gt;&lt;left&gt;
nnoremap &lt;right&gt; &lt;C-w&gt;&lt;right&gt;
</code></p>

<h2>Bouger et fermer</h2>

<p>Pour changer de fenêtre en cycle:</p>

<p><code>vim
ww
</code></p>

<p>Pour échanger deux fenêtres:</p>

<p><code>vim
wx
</code></p>

<p>Pour fermer la fenêtre active, deux solutions:</p>

<p><code>vim
:q
" ou bien
ZZ
</code></p>

<p>Pour fermer toutes les fenêtres sauf la courante:</p>

<p><code>vim
wo
</code></p>

<p>Pour basculer la fenêtre active dans un nouvel onglet:</p>

<p><code>vim
wT
</code></p>

<h2>Dimensions des fenêtres</h2>

<p>Pour un agencement de fenêtres un peu complexe, il est sûrement plus simple et
rapide d'utiliser la souris. Et oui, il arrive parfois (mais c'est rare, hein)
que le clavier ne soit pas le périphérique le mieux adapté.</p>

<p>Pour donner une taille identique à toutes les fenêtres:</p>

<p><code>vim
w=
</code></p>

<p>Pour redimensionner les fenêtres, j'utilise la touche <code>Control</code> combinée
avec les flèches:</p>

<p><code>vim
nnoremap &lt;C-up&gt; :resize +2&lt;cr&gt;
nnoremap &lt;C-down&gt; :resize -2&lt;cr&gt;
nnoremap &lt;C-right&gt; :vertical resize +2&lt;cr&gt;
nnoremap &lt;C-left&gt; :vertical resize -2&lt;cr&gt;
</code></p>

<p>Ainsi,
Ctrl + flèche vers le haut va augmenter la hauteur de la fenêtre active.
Ctrl + flèche vers le bas va diminuer la hauteur de la fenêtre active.
Ctrl + flèche vers la droite va augmenter la largeur de la fenêtre active.
Ctrl + flèche vers la gauche va diminuer la largeur de la fenêtre active.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
