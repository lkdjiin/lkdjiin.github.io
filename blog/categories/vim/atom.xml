<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-01-26T16:13:22+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2/"/>
    <updated>2014-01-26T16:03:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/26/installation-du-plugin-airline-pour-vim-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après <a href="/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/">l'installation basique du plugin Airline</a>, voyons maintenant
comment modifier quelque peu le thème.</p>

<!-- more -->


<p>On peut visualiser les thèmes disponibles pour Airline
<a href="https://github.com/bling/vim-airline/wiki/Screenshots">sur cette page</a>.
J'ai choisi wombat pour l'instant, puisque je trouve que c'est celui
qui <em>colle</em> le mieux avec mon jeu de couleurs actuel. Voici ce qu'il
faut ajouter au <code>.vimrc</code> pour changer de thème:</p>

<p><code>vim
let g:airline_theme='wombat'
</code></p>

<p>Si vous n'êtes pas sûr du nom pour le thème que vous avez choisi,
regardez le nom du fichier dans le dossier
<code>vim-airline/autoload/airline/themes</code>.</p>

<p>J'ai ensuite installé quelques polices de caractères patchées pour Powerline,
trouvées
<a href="https://github.com/Lokaltog/powerline-fonts">ici</a>, mais aucunes
ne m'a vraiment séduite. J'utilise la font <code>Inconsolata-g</code>, qui me
convient parfaitement, je ne vois donc pas de raison d'en changer.</p>

<p>Il faut maintenant paramétrer les symboles pour les bords des sections,
la branche git, les fichiers en lectures seules, etc. Mettez donc
ceci dans votre <code>.vimrc</code>:</p>

<p><code>vim
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
</code></p>

<p>Comme il n'est pas certain que les symboles ci-dessus apparaissent dans
votre navigateur, en voici une version en image:</p>

<p><img src="/images/symboles-airline.png"></p>

<p>La prochaine fois, on verra comment modifier une section.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation du plugin Airline pour Vim - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1/"/>
    <updated>2014-01-25T18:34:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/25/installation-du-plugin-airline-pour-vim-partie-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Pour disposer de quelques informations dans la barre de statut,
j'utilisais jusqu'ici statline, qui me convenait assez bien, rien de
tape à l'œil. Et puis j'ai décidé d'essayer quelque chose de
plus coloré, histoire de voir si ça m'était utile.</p>

<!-- more -->


<p>Avant d'installer <a href="https://github.com/bling/vim-airline">Airline</a>,
il faut bien entendu retirer Powerline, ou Statline (je n'en connais pas
d'autres).</p>

<p>Comme j'utilise Pathogen pour gérer mes plugins, voici comment rapatrier
le code d'Airline:</p>

<pre><code>git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline
</code></pre>

<p>La documentation est exhaustive et fournit
<a href="https://github.com/bling/vim-airline#installation">ici</a>
d'autres méthodes d'installation pour Vundle, NeoBundle et VAM.</p>

<p>Avec Pathogen, ne pas oublier de générer la documentation, vous en
aurez besoin pour personnaliser l'apparence et les fonctionnalités
de Airline:</p>

<p><code>vim
:Helptags
</code></p>

<p>Un rapide coup d'œil à la documentation, justement, montre que la
personnalisation aux petits oignons va prendre un peu plus longtemps
que quelques minutes. Bref, on va devoir se manger de la doc…</p>

<p>À ce stade, c'est à dire en ayant seulement installé Airline et rien
configuré encore, ça fonctionne déja. Mais curieusement (du moins c'est
curieux à mes yeux) Airline est configuré par défaut pour n'apparaître que
lorsqu'une fenêtre est splittée. Pour l'avoir tout le temps, il faut ajouter
ceci dans le <code>.vimrc</code>:</p>

<p><code>vim
set laststatus=2
</code></p>

<p>La prochaine fois, je m'attaquerais à la modification du thème.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiler votre Vim sous Linux]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux/"/>
    <updated>2014-01-19T12:32:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/19/compiler-votre-vim-sous-linux</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui on voit comment compiler la dernière version de
Vim sur Linux (Debian, mais Ubuntu devrait marcher aussi).</p>

<!-- more -->


<h2>Pourquoi vouloir faire ça ?</h2>

<p>Tout d'abord, pourquoi voudrais-t-on compiler Vim alors que Debian nous
le fournit dans les paquets ? Je vois plusieurs raisons:</p>

<ol>
<li>Parce qu'on peut le faire. Mais je sens que cet argument n'est pas
fait pour vous convaincre.</li>
<li>Parce que c'est fun. Idem, pas convaincant, hein ?</li>
<li>Parce qu'on peut vouloir profiter d'une des dernières fonctionnalités
ajoutées, ou du dernier bugfix.</li>
<li>Parce que Debian est parfois à la ramasse lorsqu'il s'agit de nous
fournir des versions suffisament récentes de certains logiciels.
J'ai par exemple une machine qui est toujours en Debian 6 et que je
ne peux pas upgrader, Vim y est <em>coincé</em> en version 7.2.</li>
</ol>


<h2>On y va</h2>

<p>Assurez vous d'abord d'avoir toutes les dépendances:</p>

<pre><code>$ sudo apt-get build-dep vim
</code></pre>

<p>Ensuite, on va télécharger les sources depuis GitHub:</p>

<pre><code>$ git clone https://github.com/b4winckler/vim.git
</code></pre>

<p>Puis peut-être aller chercher une release particulière:</p>

<pre><code>$ cd vim
$ git checkout tags/v-7-4-155
</code></pre>

<p>Ensuite on va dans les sources:</p>

<pre><code>$ cd src
</code></pre>

<p>On nettoie (ça fait pas de mal):</p>

<pre><code>$ make distclean
</code></pre>

<p>On configure avec la plupart des features disponibles, notamment une
interface graphique et le support de perl, python et ruby:</p>

<pre><code>$ ./configure --with-features=huge --enable-gui=gnome2
  --with-compiledby=lkdjiin --enable-perlinterp  --enable-pythoninterp
  --enable-rubyinterp
</code></pre>

<p>Il reste à compiler:</p>

<pre><code>$ make
</code></pre>

<p>Et enfin à installer notre nouveau Vim:</p>

<pre><code>$ sudo make install
</code></pre>

<p>Et voilà:</p>

<p><img src="/images/vim-7-4-155.png"></p>

<h2>Désinstaller la version que vous avez compilé</h2>

<p>Si, pour une raison ou une autre, vous vouliez désinstaller
votre nouveau Vim, il faut d'abord trouver où il est installé.
Pour cela, lancez la commande suivante dans Vim:</p>

<p><code>vim
:echo $VIMRUNTIME
</code></p>

<p>Dans mon cas, cela donne: <code>/usr/local/share/vim/vim74</code>.</p>

<p>Rendez-vous ensuite dans les sources que vous avez téléchargées,
par exemple:</p>

<pre><code>$ cd ~/tmp/vim/src
</code></pre>

<p>Puis:</p>

<pre><code>$ make VIMRUNTIME=/usr/local/share/vim/vim74
$ sudo make uninstall
</code></pre>

<p>Et voilà.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sauvegarde automatique des fichiers dans Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim/"/>
    <updated>2014-01-18T09:45:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/18/sauvegarde-automatique-des-fichiers-dans-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je parle d'un petit truc qui me facilite
énormément la vie sous Vim: la sauvegarde automatique.</p>

<!-- more -->


<p>Grâce à ce truc, je n'enregistre pratiquement jamais
<em>intentionnellement</em> un fichier. Ce qui fait que je
n'oublie jamais de le faire. Vous savez ? : On modifie
un fichier, on lance l'appli et… arg… ça fonctionne pas !
Tout ça parce qu'on a oublié d'enregistrer les
modifications.</p>

<p>Donc pour enregistrer le fichier courant, la commande est:</p>

<p><code>vim
:w
</code></p>

<p>Pour enregistrer tous les fichiers:</p>

<p><code>vim
:wall
</code></p>

<p>Pour les accros du Ctrl-S, on peut le reproduire avec le mapping
suivant dans le <code>.vimrc</code>:</p>

<p><code>vim
map &lt;C-s&gt; :w&lt;Enter&gt;
</code></p>

<p><strong>Et maintenant le truc promis</strong>. Je veux que mes fichiers soient enregistrés
quand un onglet perds le focus, ou quand Vim lui-même perds le focus:</p>

<p><code>vim
autocmd FocusLost,TabLeave * :wall
</code></p>

<p>Avec cette commande dans votre <code>.vimrc</code>, il est rare de devoir
enregistrer manuellement un fichier ;)</p>

<p>Et si vous voulez comprendre ce que fais exactement cette commande, je
vous laisse regarder l'aide:</p>

<p><code>vim
:h autocmd
:h FocusLost
:h TabLeave
</code></p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim et les digraphes]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes/"/>
    <updated>2014-01-12T11:27:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/01/12/vim-et-les-digraphes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Comment saisir facilement et rapidement des caractères tels que ¡, ¿ ou encore
ß dans Vim ?</p>

<!-- more -->


<p>Pour voir à quoi ressemble ces fameux digraphes dans Vim, tapez la commande
<code>:digraphs</code>. Vous allez obtenir la liste des digraphes qui sont définis.
La définition d'un digraphe ressemble à ceci:</p>

<pre><code>?I ¿  191
</code></pre>

<p>Ici, seules les deux premières colonnes nous intéressent. La première colonne
est le code de deux caractères qu'il faut saisir pour obtenir le caractère
de la seconde colonne.</p>

<p>Pour saisir un digraphe, il faut être en mode insertion et entrer
Control + k, puis les deux caractères du code. Donc <code>Control</code>, puis <code>k</code>,
puis <code>?</code>, puis <code>I</code> donnera le caractère <code>¿</code>.</p>

<p>Voici quelques exemples:</p>

<pre><code>!I ¡
?I ¿
ss ß
%0 ‰
13 ⅓
78 ⅞
l* λ
p* π
-&gt; →
=&gt; ⇒
</code></pre>

<p>Si vous utilisez régulièrement certains digraphes, il existe une manière
plus rapide de les saisir. Activez tout d'abord l'option <code>digraph</code> dans
votre <code>.vimrc</code>:</p>

<p><code>vim
set digraph
</code></p>

<p>Maintenant vous pouvez saisir un digraphe en entrant le premier caractère
du code, puis la touche Backspace, puis le second caractère du code.
Donc <code>p</code>, puis <code>Backspace</code>, puis <code>*</code> vous donneront le caractère Pi (<code>π</code>).
Attention quand même avec cette option, si vous faites régulièrement des
fautes de frappes, vous risquez de voir apparaître assez souvent des caractères
étranges et inattendus ;)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
