<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : elixir | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-04-28T21:30:42+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quelques ressources libres pour Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir/"/>
    <updated>2013-08-24T11:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J'ai passé quelques semaines à tester/jouer avec le langage Elixir. Voici
une liste des ressources qui m'ont été très utiles.</p>

<!-- more -->


<h2>Le site officiel</h2>

<p>Tout commence ici: <a href="http://elixir-lang.org/">http://elixir-lang.org/</a>.
Plus spécifiquement, vous y trouverez une liste de
<a href="http://elixir-lang.org/getting_started/1.html">tutoriels</a>
bien foutus, quoique trop succints à mon goût.</p>

<h2>La documentation</h2>

<p>N'hésitez jamais à consulter la
<a href="http://elixir-lang.org/docs/stable/">documentation d'Elixir</a>. Elle est
claire et assez complète pour un jeune projet.</p>

<h2>Études for Elixir</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000001642">Études for Elixir</a>
est un bouquin par O'Reilly en open-source. Il s'agit d'une série d'exercices
à réaliser, on apprend beaucoup. Si vous êtes coincés, les solutions se
trouvent
<a href="https://github.com/oreillymedia/etudes-for-elixir">ici</a>.</p>

<h2>La mailing list</h2>

<p>Si vous êtes perdus, la <a href="https://groups.google.com/forum/#!forum/elixir-lang-talk">mailing list</a>
d'Elixir est votre amie. L'auteur du langage, et d'autres passionnés/engagés,
vous répondent rapidement et poliment. Les réponses sont toujours pertinentes.
C'est vraiment une très bonne mailing list.</p>

<h2>Plugin vim</h2>

<p>Si vous utilisez Vim, ce qu'il vous faut pour la syntaxe, l'indentation, etc,
se trouve <a href="https://github.com/elixir-lang/vim-elixir">ici</a>.</p>

<p>Si vous utilisez le plugin Vim Snipmate, voici en bonus un fichier de
snippets pour Elixir que j'ai commencé. Il y en a peu, mais je pense que
c'est un bon départ, à vous ensuite de créer les votres:</p>

<p>``` vim
snippet case</p>

<pre><code>case ${1:var} do
    ${2:condition1} -&gt; ${3:action1}
    _ -&gt; ${4:other}
end
</code></pre>

<p>snippet cond</p>

<pre><code>cond do
    ${1:condition1} -&gt; ${2:action1}
    true -&gt; ${3:other}
end
</code></pre>

<p>snippet d</p>

<pre><code>def ${1:function} do
    ${2}
end
</code></pre>

<p>snippet dm</p>

<pre><code>defmodule ${1:ModuleName} do
    ${2}
end
</code></pre>

<p>snippet dp</p>

<pre><code>defp ${1:function} do
    ${2}
end
</code></pre>

<p>snippet map</p>

<pre><code>Enum.map(${1:list}, fn e -&gt; ${2:action} end)
</code></pre>

<p>snippet puts</p>

<pre><code>IO.puts ${1}
</code></pre>

<p>```</p>

<h2>Conclusion provisoire sur Elixir</h2>

<p>Apprendre les bases d'Elixir a été plaisant, mais je vais m'arrêter là,
du moins jusqu'à la sortie de la version 1.0.
Le gros avantage d'Elixir est d'utiliser la totalité de vos processeurs
gratuitement. Il n'y a rien à faire, rien à dire, rien à configurer. Ça
marche et c'est tout. J'ai moins aimé la syntaxe qui te fait croire que
tu es en terrain conquis si tu connais Ruby. Ça n'est pas le cas, les
deux langages sont vraiment différents. Le couplage avec Erlang ne
m'a pas convaincu. À un moment ou un autre (du moins quand j'écris ces
lignes) si on veut écrire quelque chose de conséquent, il faut apprendre
un minimum d'Erlang. Ça changera peut-être avec le temps.</p>

<p>Quoiqu'il en soit, la fréquence de nos processeurs n'augmentant plus, un
langage élégant qui sait <em>réellement</em> utiliser le multi-coeur simplement
et avec efficacité est sans conteste un langage sur lequel il faut
garder un oeil…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une définition de la programmation fonctionnelle avec Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir/"/>
    <updated>2013-08-16T09:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<h2>Ou ma tentative désespérée de comprendre la non mutabilité</h2>

<p>Cet article est un article égoiste ! Depuis que je joue un peu avec Elixir, je
m'aperçois que j'ai des soucis à comprendre <em>vraiment</em> la programmation
fonctionnelle.
J'ai entre autres, des difficultés à me faire au coté immuable, non-mutable,
de la chose (<em>immutable</em> en anglais). Je tente donc aujourd'hui de
mettre au clair mes idées sur la question. Ce qui suit peut ressembler
à un dialogue de fou, vous êtes prévenus.</p>

<!-- more -->


<p>Revoici le module Somme, que j'ai utilisé dans un <a href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/">précédent article</a>.</p>

<p><code>elixir somme.exs
defmodule Somme do
  def run(0, acc), do: acc
  def run(n, acc), do: run(n - 1, n + acc)
end
IO.puts Somme.run(5, 0)
</code></p>

<p>Je vais l'écrire dans un bon vieux langage procédural, et analyser ce qu'il
s'y passe.</p>

<p>``` c somme.c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void)
{</p>

<pre><code>int somme = 0;
for(int n = 5 ; n &gt; 0 ; n--) {
    somme += n;
} 
printf("%i\n", somme);
return 0;
</code></pre>

<p>}
```</p>

<p>On compile et on lance:</p>

<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
15
</code></pre>

<p>Ici pas de récursivité mais une simple itération. Une boucle qui change la
variable <code>somme</code> à chaque passage. Je crois qu'on devrait d'abord définir
ce qu'est une variable. Une variable, c'est un concept. Une variable définit
à la fois un contenant, un contenu et un type, tout cela accessible par un
nom. Notre variable a ici pour nom <code>somme</code>. Son type est <code>int</code>. Son contenu,
ou encore sa valeur est initialement 0 et change à chaque itération. Son
contenant est un emplacement en mémoire, qui lui ne change pas. «<em>Et tu sais ça
comment que ça change pas ?</em>» Bon, puisque j'ai besoin d'une preuve,
j'ajoute un traceur qui affiche l'emplacement mémoire de <code>somme</code>:</p>

<p>``` c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void)
{</p>

<pre><code>int somme = 0;
printf("%d\n", &amp;somme);
for(int n = 5 ; n &gt; 0 ; n--) {
    somme += n;
    printf("%d\n", &amp;somme);
} 
printf("%i\n", somme);
return 0;
</code></pre>

<p>}
```</p>

<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
15
</code></pre>

<p>Voilà, on le sait maintenant: la <em>valeur</em> de <code>somme</code> change, mais son
<em>emplacement</em> (son contenant) reste identique.</p>

<p>Si je tente maintenant de mimer ce comportement avec Elixir, je serais tenté
d'écrire:</p>

<p><code>elixir
somme = 0
Enum.each 5..1, fn n -&gt;
  somme = somme + n
end
IO.puts somme
</code></p>

<pre><code>$ elixir somme.exs 
/home/xavier/somme.exs:3: variable somme is unused
0
</code></pre>

<p>Comme Elixir est sympa, il tente de me prévenir que quelque chose ne
tourne pas rond. On peut penser à un problème de <em>scope</em>, se dire que le
<code>somme</code> à l'intérieur de la fonction anonyme n'est pas le même que le
<code>somme</code> à l'extérieur de cette fonction. Mais c'est pas ça. Ou
plus exactement ce n'est pas <em>seulement</em> ça:</p>

<p><code>elixir
somme = 100
Enum.each 5..1, fn n -&gt;
  somme = somme + n
  IO.puts somme
end
IO.puts somme
</code></p>

<pre><code>$ elixir somme.exs 
105
104
103
102
101
100
</code></pre>

<p>La valeur du <code>somme</code> de l'intérieur est initialisée à chaque
itération par la valeur du <code>somme</code> de l'extérieur.
Donc le <code>somme</code> extérieur est connu dans la fonction anonyme.
Ce comportement me
fais m'arracher les cheveux, je sens que je passe complètement à coté
d'un truc essentiel. Je sais qu'on n'écrirait pas cette fonction de
cette manière, mais je veux comprendre <em>pourquoi</em> ce comportement
quand je fais ça. En fait donner le même nom à ces deux variables est
une illusion.
Pour Elixir le contenu de <code>somme</code> est immuable, il ne peut pas changer.
Il serait donc plus juste d'écrire ça:</p>

<p><code>elixir
somme = 0
Enum.each 5..1, fn n -&gt;
  temp = somme + n
end
IO.puts somme
</code></p>

<p>Ce qui, évidemment, ne mène à rien. Je commence peut-être à comprendre.
Si je reprend le programme du départ:</p>

<p><code>elixir somme.exs
defmodule Somme do
  def run(0, acc), do: acc
  def run(n, acc), do: run(n - 1, n + acc)
end
IO.puts Somme.run(5, 0)
</code></p>

<p>On voit bien que les variables ne changent (ne mutent) jamais. Ce sont à
chaque fois de <em>nouvelle création</em> qui sont passées dans les paramètres.</p>

<p><code>elixir
def run(n, acc), do: run(n - 1, n + acc)
</code></p>

<p>Lors d'un passage précis dans cette fonction, on se fiche royalement de savoir
quel était l'état de <code>n</code> et de <code>acc</code> lors des passages précédents. Ce qui
n'est pas le cas dans l'exemple en C:</p>

<p>``` c
for(int n = 5 ; n > 0 ; n&mdash;) {</p>

<pre><code>somme += n;
</code></pre>

<p>}
```</p>

<p>À chaque passage dans la boucle, il faut connaître l'état de <code>somme</code> dans
l'itération précédente.</p>

<p>On m'avait pourtant bien dit que la programmation fonctionnelle s'occupait
des <em>transformations</em> et pas des <em>états</em>. Mais je ne voyais pas du tout
ce que ça pouvait bien signifier. C'est maintenant un peu plus clair,
même s'il me reste encore du chemin à parcourir pour bien saisir tout
ce qu'implique la programmation fonctionnelle…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir et les paramètres par défaut]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut/"/>
    <updated>2013-08-07T08:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour définir un paramètre par défaut dans une fonction de module, Elixir
fournit l'opérateur <code>//</code>:</p>

<p>``` elixir test.exs
defmodule M do
  def foo(a // &ldquo;a&rdquo;) do</p>

<pre><code>IO.puts(a)
</code></pre>

<p>  end
end</p>

<p>M.foo()
M.foo(&ldquo;z&rdquo;)
```</p>

<!-- more -->


<pre><code>$ elixir test.exs 
a
z
</code></pre>

<p>Beaucoup d'autres langages permettent la même chose, en général à l'aide
de l'opérateur d'affection <code>=</code>. Si Elixir utilise <code>//</code> à la place de <code>=</code>,
ça n'est pas par goût de l'étrange ou par snobisme. Avec Elixir l'opérateur
<code>=</code> fait plus que de l'affectation, <code>=</code> fait aussi du
<a href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/">pattern matching</a>.
Et d'après ce que j'ai pu voir, le <em>pattern matching</em> est interdit dans
la définition des paramètres.</p>

<p>On peut bien sûr mixer paramètre <em>normal</em> et paramètre par défaut:</p>

<p>``` elixir test.exs
defmodule M do
  def foo(a, b // &ldquo;b&rdquo;) do</p>

<pre><code>IO.puts "#{a} #{b}"
</code></pre>

<p>  end
end</p>

<p>M.foo(&ldquo;a&rdquo;)
M.foo(&ldquo;a&rdquo;, &ldquo;z&rdquo;)
```</p>

<pre><code>$ elixir test.exs 
a b
a z
</code></pre>

<p>Encore une fois c'est comme avec un tas d'autres langages. On place les
paramètres par défaut à la fin. Mais Elixir va plus loin en permettant
de placer les paramètres par défaut n'importe où:</p>

<p>``` elixir test.exs
defmodule M do
  def foo(a // &ldquo;a&rdquo;, b) do</p>

<pre><code>IO.puts "#{a} #{b}"
</code></pre>

<p>  end
end</p>

<p>M.foo(&ldquo;z&rdquo;)
```</p>

<pre><code>$ elixir test.exs 
a z
</code></pre>

<p>C'est peut-être un classique de la programmation fonctionnelle, mais moi, c'est
la première fois que je vois ça. Je ne sais pas encore si c'est utile, mais
au moins c'est possible. Si vous connaissez d'autres langages qui permettent
ce truc, laissez moi un commentaire, je suis curieux.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment lire et écrire un fichier texte avec Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir/"/>
    <updated>2013-08-06T08:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Quand j'aborde un nouveau langage j'aime bien regarder l'API pour les
entrées/sorties. Je trouve que ça donne le ton.
Aujourd'hui on voit comment ouvrir, lire et écrire des fichiers texte.</p>

<!-- more -->


<h2>Lire un fichier</h2>

<p><code>elixir
{result, device} = File.open("file.ext", [:read, :utf8])
data = IO.read(device, :line)
File.close(device)
</code></p>

<p><code>result</code> contiendra <code>:ok</code> ou <code>:error</code>. On peut tester ce résultat après
coup ou bien se servir du
<a href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/">pattern matching</a> ainsi:</p>

<p><code>elixir
{:ok, device} = File.open("file.ext", [:read, :utf8])
</code></p>

<p>Lorsque la fin du fichier est atteinte, <code>IO.read</code> retourne <code>:eof</code>.
Si on veut lire un certain nombre de caractères au lieu d'une ligne
complète, on passe le nombre de caractères à lire à la fonction <code>IO.read</code>:</p>

<p><code>elixir
chars = IO.read(device, 3)
</code></p>

<p>On notera qu'il faut penser à fermer le fichier après utilisation, ce que
je trouve toujours bizarre avec un langage moderne. J'attends vraiment que
le runtime fasse ça pour moi.</p>

<h2>Écrire un fichier</h2>

<p><code>elixir
{:ok, device} = File.open("test", [:write, :utf8])
IO.write(device, "foo\n")
IO.puts(device, "bar")
File.close(device)
</code></p>

<p>Pas grand chose à dire, c'est clair. La seule différence entre <code>IO.write</code>
et <code>IO.puts</code> est que cette dernière ajoute le caractère de fin de ligne.</p>

<h2>Les entrées/sorties console</h2>

<p>Pour lire sur la console on utilise <code>IO.gets</code>. Le <em>device</em> est <code>:stdio</code>
par défaut:</p>

<p><code>iex
iex(46)&gt; str = IO.gets(:stdio, "Votre nom: ")
Votre nom: xavier
"xavier\n"
iex(47)&gt; str = IO.gets("Votre nom: ")        
Votre nom: foobar
"foobar\n"
</code></p>

<p>Pour écrire sur la console on utilise <code>IO.puts</code>, mais ça vous le saviez déjà.</p>

<p>``` iex
iex(48)> IO.puts(:stdio, str)      <br/>
foobar</p>

<p>:ok
iex(49)> IO.puts(str)      <br/>
foobar</p>

<p>:ok
```</p>

<h2>Pour finir</h2>

<p>Voilà, c'est suffisant pour commencer à bidouiller. Pour aller plus loin,
on pourra lire la documentation des modules IO et File, qui permettent de
faire bien d'autres choses…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern matching avec Elixir: une première approche]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/"/>
    <updated>2013-07-28T13:32:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Une tâche réccurente quand on utilise la récursivité pour résoudre un problème
est de séparer une liste en deux parties. La première partie étant le premier
élément de la liste et la seconde partie étant ce qui reste. Pour faire cela,
on peut utiliser le <em>pattern matching</em>, qu'on peut traduire par filtrage à
l'aide de motifs.</p>

<!-- more -->


<p>Voyons la syntaxe pour séparer une liste en deux:</p>

<p><code>elixir
[head | tail] = [1, 2, 3]
</code></p>

<p>Après ça, <code>head</code> (la tête) vaut 1 et <code>tail</code> (la queue) vaut [2, 3].
Maintenant les cas exceptionnels: Si on passe une liste d'un seul élément,
<code>tail</code> sera une liste vide ([]). Si on passe une liste vide, et bien c'est
une erreur. Voici une capture d'écran qui montre le résultat:</p>

<p><img src="/images/2013-07-28-1.jpg" width="890" height="577" title="pattern matching avec Elixir" ></p>

<p>Pour illustrer le <em>pattern matching</em> je vais écrire un module avec une fonction
<code>minimum</code> qui doit trouver le plus petit élément dans une liste de nombres
entiers.</p>

<p>``` elixir
defmodule Stats do
  def minimum([head|tail]) do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end</p>

<p>  defp minimum([], candidate) do</p>

<pre><code>candidate
</code></pre>

<p>  end</p>

<p>  defp minimum([head|tail], candidate) when head &lt; candidate do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end</p>

<p>  defp minimum([_|tail], candidate) do</p>

<pre><code>minimum tail, candidate
</code></pre>

<p>  end
end
```</p>

<p>On peut l'utiliser comme ceci:</p>

<p><code>elixir
IO.puts Stats.minimum([1, 2, -9, 3])
</code></p>

<p>Voici une explication des différentes fonctions:</p>

<p>``` elixir
  def minimum([head|tail]) do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end
```</p>

<p>Le <em>pattern matching</em> s'applique directement dans les arguments de la
fonction. Pour cette première passe, on considère que <code>head</code> est à priori
la plus petite valeur de la série.</p>

<p>``` elixir
  defp minimum([], candidate) do</p>

<pre><code>candidate
</code></pre>

<p>  end
```</p>

<p>Là, c'est la clause de sortie de la fonction <code>minimum</code>. Si la liste est
vide, c'est qu'on à trouvé la valeur minimum (<code>candidate</code>).</p>

<p>``` elixir
  defp minimum([head|tail], candidate) when head &lt; candidate do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end
```</p>

<p>Quand la liste est encore remplie, on compare la valeur de tête à notre
valeur candidate. Je rappelle que <code>candidate</code> est à ce moment la plus petite
valeur trouvée jusqu'ici. Si la valeur de <code>head</code> est plus petite que
la valeur de <code>candidate</code>, la première remplace la dernière.</p>

<p>``` elixir
  defp minimum([_|tail], candidate) do</p>

<pre><code>minimum tail, candidate
</code></pre>

<p>  end
```</p>

<p>Dans les autres cas, la valeur de tête n'a pas d'intérêt, ce que souligne
le caractère <code>_</code> dans <code>[_|tail]</code>. On remplace une variable par <code>_</code>
lorsque cette variable est inutilisée.</p>

<p>Nouveau venu en programmation fonctionnelle, je pense que je n'entrevois là
que la surface du <em>pattern matching</em>.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
