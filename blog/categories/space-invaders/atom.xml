<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : space invaders | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/space-invaders/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-13T20:09:40+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/13/un-space-invaders-avec-opal-dot-rb-partie-4/"/>
    <updated>2014-06-13T19:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/13/un-space-invaders-avec-opal-dot-rb-partie-4</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Petite séance de refactoring aujourd'hui. Tout d'abord, comme nous avons
maintenant deux classes dans le fichier <code>app/application.rb</code>, on va les mettre
dans des fichiers séparés, pour obtenir ça:</p>

<pre><code>● tree
.
├── app
│   ├── application.rb
│   ├── player.rb
│   └── space_canvas.rb
├── build.js
├── Gemfile
├── Gemfile.lock
├── index.html
└── Rakefile
</code></pre>

<!-- more -->


<p>Le fichier <code>application.rb</code> est maintenant réduit à ceci:</p>

<p>``` ruby app/application.rb
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>require &lsquo;space_canvas&rsquo;
require &lsquo;player&rsquo;</p>

<p>canvas = SpaceCanvas.new
player = Player.new
canvas.clear_background
canvas.draw_player(player)
```</p>

<p>Le fichier <code>player.rb</code> contient la classe <code>Player</code>:</p>

<p>``` ruby app/player.rb
class Player
  attr_accessor :x, :y, :w, :h, :color</p>

<p>  def initialize</p>

<pre><code>@x = 325
@y = 560
@w = 50
@h = 30
@color = 'green'
</code></pre>

<p>  end
end
```</p>

<p>Quant au fichier <code>space_canvas.rb</code>, le voici:</p>

<p>``` ruby app/space_canvas.rb
class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #@width, #@height)`
</code></pre>

<p>  end</p>

<p>  def draw_player(player)</p>

<pre><code>`#@context.fillStyle = #{player.color}`
`#@context.fillRect(#{player.x}, #{player.y}, #{player.w}, #{player.h})`
</code></pre>

<p>  end
end
```</p>

<p>Les méthodes <code>clear_background</code> et <code>draw_player</code> sont trop similaires pour
être laissées en l'état ! En voici un petit refactoring:</p>

<p>``` ruby app/space_canvas.rb
class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>draw_rect(0, 0, @width, @height, 'black')
</code></pre>

<p>  end</p>

<p>  def draw_player(player)</p>

<pre><code>draw_rect(player.x, player.y, player.w, player.h, player.color)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def draw_rect(x, y, w, h, color)</p>

<pre><code>`#@context.fillStyle = #{color}`
`#@context.fillRect(#{x}, #{y}, #{w}, #{h})`
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Comme toujours, <code>rake build</code> pour s'assurer que ça fonctionne bien !</p>

<p>Demain, on verra comment faire bouger notre joueur…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/12/un-space-invaders-avec-opal-dot-rb-partie-3/"/>
    <updated>2014-06-12T20:54:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/12/un-space-invaders-avec-opal-dot-rb-partie-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>C'est le moment d'afficher un joli vaisseau pour le joueur. Bon, en fait,
ça va être un gros rectangle vert, mais c'est pareil ;)</p>

<!-- more -->


<p>On commence par ajouter une classe <code>Player</code>:</p>

<p>``` ruby
class Player
  attr_accessor :x, :y, :w, :h, :color</p>

<p>  def initialize</p>

<pre><code>@x = 325
@y = 560
@w = 50
@h = 30
@color = 'green'
</code></pre>

<p>  end
end
```</p>

<p>Y a pas grand chose à dire, hein ? X et y sont la position du coin supérieur
gauche sur le canvas, w est la largeur et h est la hauteur. C'est tout.</p>

<p>Pour afficher notre joueur, on ajoute une méthode <code>draw_player</code> à la classe
<code>SpaceCanvas</code>:</p>

<p>``` ruby
  def draw_player(player)</p>

<pre><code>`#@context.fillStyle = #{player.color}`
`#@context.fillRect(#{player.x}, #{player.y}, #{player.w}, #{player.h})`
</code></pre>

<p>  end
```</p>

<p>Cette méthode est similaire à la méthode <code>clear_background</code>, vue la dernière
fois, ce qui va nous donner une séance de refactoring demain…</p>

<p>Finalement, voici le code complet du fichier <code>app/application.rb</code>:</p>

<p>``` ruby app/application.rb
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #@width, #@height)`
</code></pre>

<p>  end</p>

<p>  def draw_player(player)</p>

<pre><code>`#@context.fillStyle = #{player.color}`
`#@context.fillRect(#{player.x}, #{player.y}, #{player.w}, #{player.h})`
</code></pre>

<p>  end
end</p>

<p>class Player
  attr_accessor :x, :y, :w, :h, :color</p>

<p>  def initialize</p>

<pre><code>@x = 325
@y = 560
@w = 50
@h = 30
@color = 'green'
</code></pre>

<p>  end
end</p>

<p>canvas = SpaceCanvas.new
player = Player.new
canvas.clear_background
canvas.draw_player(player)
```</p>

<p>N'oubliez pas de faire un <code>rake build</code> avant d'ouvrir le fichier HTML.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/11/un-space-invaders-avec-opal-dot-rb-partie-2/"/>
    <updated>2014-06-11T12:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/11/un-space-invaders-avec-opal-dot-rb-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Hier j'ai commencé l'écriture d'un Space Invaders avec Opal.rb, et on a pu
afficher un beau canvas tout noir ;) Il manquait l'explication de la classe
<code>SpaceCanvas</code>, la voici.</p>

<!-- more -->


<p>``` ruby
class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>  end
end
```</p>

<p>Toute cette classe utilise un <em>truc</em> de Opal : ce qui se trouve entre
<em>backticks</em> est du javascript et on a accès à l'interpolation Ruby des
chaînes de caractères. En Ruby, les backticks permettent d'appeller une
commande externe, avec Opal c'est pareil, sauf que l'extérieur c'est
javascript.</p>

<p>Tout d'abord dans la méthode <code>initialize</code>, la première ligne:</p>

<p>``` ruby</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
</code></pre>

<p>```</p>

<p>C'est du javascript pur et dur ;) On récupère un référence au canvas par
son ID et on stocke cette référence dans <code>@canvas</code>.</p>

<p>Les trois lignes suivantes utilisent le même truc avec en plus de l'interpolation:</p>

<p>``` ruby</p>

<pre><code>@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>```</p>

<p>On obtient une référence au <em>contexte</em> du canvas, ce qui sera utile pour
dessiner dedans et on récupère sa hauteur et sa largeur.</p>

<p>La méthode <code>clear_background</code> maintenant:</p>

<p>``` ruby
  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>  end
```</p>

<p>On selectionne d'abord une couleur de remplissage avec:</p>

<pre><code>`#@context.fillStyle = 'black'`
</code></pre>

<p>Puis on remplit le canvas avec cette couleur:</p>

<pre><code>`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>Notez que j'ai utilisé ici une autre écriture pour l'interpolation. La ligne
précédente est equivalente à:</p>

<pre><code>`#@context.fillRect(0, 0, #@width, #@height)`
</code></pre>

<p>J'aurais d'ailleurs du écrire comme ça pour être homogène ;)</p>

<p>La prochaine on affiche un joueur ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un space invaders avec Opal.rb - partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/10/un-space-invaders-avec-opal-dot-rb-partie-1/"/>
    <updated>2014-06-10T21:25:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/10/un-space-invaders-avec-opal-dot-rb-partie-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après une courte <a href="blog/2014/06/06/introduction-a-opal-dot-rb/">introduction à Opal.rb</a>,
on va essayer de faire un truc plus ambitieux avec Opal: un jeu du genre
Space Invaders.</p>

<!-- more -->


<p>Pour ce jeu, je vais utiliser jQuery pour manipuler le DOM, parce que c'est
plus simple ;) On va aussi utiliser une structure de dossier un peu plus
<em>pro</em> que dans l'introduction et un Gemfile que voici:</p>

<p>``` ruby Gemfile
source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>&rsquo;</p>

<p>gem &lsquo;opal&rsquo;, &lsquo;~>0.6&rsquo;
gem &lsquo;opal-jquery&rsquo;
```</p>

<p>Au fait, Opal.rb supporte Ruby à partir de la version 2.0.</p>

<p>Il nous faut à présent un fichier HTML:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;
&lt;script src="http://code.jquery.com/jquery-1.11.0.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;canvas width="700" height="600" id="canvas"&gt;&lt;/canvas&gt;
&lt;script src="build.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Vous remarquerez l'inclusion de jQuery, d'un canvas pour notre jeu et d'un
script <code>build.js</code> qui est notre objectif.</p>

<p>Maintenant, voici un Rakefile qui va justement construire ce fameux
<code>build.js</code>:</p>

<p>``` ruby Rakefile
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>desc &ldquo;Build our app to build.js&rdquo;
task :build do
  env = Opal::Environment.new
  env.append_path &ldquo;app&rdquo;</p>

<p>  File.open(&ldquo;build.js&rdquo;, &ldquo;w+&rdquo;) do |out|</p>

<pre><code>out &lt;&lt; env["application"].to_s
</code></pre>

<p>  end
end
```</p>

<p>Si vous vous posez des questions sur ce fichier, les réponses sont sur
la <a href="http://opalrb.org/docs/static_applications/">documentation d'Opal</a>.</p>

<p>On s'occupe maintenant de notre canvas avec une classe Ruby qui va afficher
un arrière-plan noir:</p>

<p>``` ruby app/application.rb
require &lsquo;opal&rsquo;
require &lsquo;opal-jquery&rsquo;</p>

<p>class SpaceCanvas</p>

<p>  def initialize</p>

<pre><code>@canvas  = `document.getElementById('canvas')`
@context = `#@canvas.getContext('2d')`
@height  = `#@canvas.height`
@width   = `#@canvas.width`
</code></pre>

<p>  end</p>

<p>  def clear_background</p>

<pre><code>`#@context.fillStyle = 'black'`
`#@context.fillRect(0, 0, #{@width}, #{@height})`
</code></pre>

<p>  end
end</p>

<p>canvas = SpaceCanvas.new
canvas.clear_background
```</p>

<p>Les explications ligne par ligne de cette classe seront demain dans le prochain
car je suis préssé par le temps…</p>

<p>Pour construire le fichier <code>build.js</code>, on se sert de rake:</p>

<pre><code>rake build
</code></pre>

<p>Il suffit maintenant d'ouvrir le fichier HTML pour voir apparaitre un beau
rectangle tout noir ;)</p>

<p>Pour infos, voici la structure de notre jeu:</p>

<pre><code>● tree
.
├── app
│   └── application.rb
├── build.js
├── Gemfile
├── Gemfile.lock
├── index.html
└── Rakefile
</code></pre>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
