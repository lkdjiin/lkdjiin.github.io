<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ast | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ast/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2016-05-01T11:09:07+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/"/>
    <updated>2013-09-01T21:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir utilisé un AST pour représenter le code source de Naam,
je parcours cet AST pour sortir le code assembleur PIR pour la machine
virtuelle Parrot.</p>

<!-- more -->

<p>Voici la méthode principale (et temporaire):</p>

<p>``` ruby
def self.run(filename)
  .
  .
  .
  syntaxer = Syntaxer.new
  ast = syntaxer.run(units.dup)</p>

<p>organizer = Organizer.new(ast)
  ast = organizer.reorganize</p>

<p>emitter = Emitter.new(ast)
  pir_code = emitter.pir_code
  puts pir_code
end
```</p>

<p>La classe Syntaxer se charge de transformer la suite d’unités lexicales
en un arbre syntaxique abstrait (AST). La classe Organizer va en
quelque sorte réorganiser l’arbre, par exemple en regroupant les instructions
qui ne sont pas dans une fonction à l’intérieur d’une fonction principale
PIR.
Quant à la classe Emitter, elle est chargée de transformer l’AST en code PIR.</p>

<p>Voici un extrait de cette classe Emitter:</p>

<p>``` ruby
module Naam
  class Emitter</p>

<pre><code>def initialize(ast)
  @ast = ast.dup
  @code = ""
  @label = "LABEL0000"
  @labels = []
end

# Public: Get PIR code.
#
# Returns PIR code as a String.
def pir_code
  compile(@ast)
  @code
end

private

def compile(node)
  case node
  when MainAST then compile_main(node)
  when FunctionHeaderAST then compile_header(node)
  when IfClauseAST then compile_if_clause(node)
  when ElseClauseAST then compile_else_clause(node)
  when FunctionFooterAST then compile_footer(node)
  end
  node.children.each {|child| compile(child) }
end

...

def compile_header(node)
  name = node.children.first.value
  arg = node.children.last.value
  @code += ".sub #{name}\n"
  @code += "    .param int #{arg}\n"
  @code += "    .local int result\n"
end

...

# Get the next label.
#
# value - The String value attached to the label.
#
# Examples
#
#   next_label
#   # =&gt; {name: "LABEL0001", value: "123"}.
#
# Returns a Hash.
def next_label(value)
  label = {name: @label.next!.dup, value: value}
  @labels &lt;&lt; label
  label
end
</code></pre>

<p>end
end
```</p>

<p>La prochaine fois, le compilateur sera fonctionnel.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/"/>
    <updated>2013-08-31T11:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans le dernier épisode, j’utilisais un AST pour capturer la grammaire
de Naam, et le code n’était pas très propre. Cette fois je nettoie un peu
tout ça en mettant les règles de grammaire dans leur propres classes.</p>

<!-- more -->

<p>De ce fait, le syntaxer a beaucoup maigri puisqu’il se contente
maintenant de lancer la première règle:</p>

<p>``` ruby
module Naam</p>

<p># Public: Here we transform a list of lexical units in an AST.
  class Syntaxer</p>

<pre><code>def initialize
  @ast = AST.new "ast"
end

# Public: Compile lexical units from a Naam program in an AST.
#
# units - Array of LexicalUnits
#
# Returns the AST.
def run units
  ProgramRule.new(units, @ast).apply!
  @ast
end
</code></pre>

<p>end
end
```</p>

<p>Voici la règle de base:</p>

<p>``` ruby
module Naam
  class BaseRule</p>

<pre><code>def initialize(units, ast_node)
  @units = units
  @ast_node = ast_node
  @series = []
end

def apply!
  raise NotImplementedError
end

private

def accept(type, value = '')
  unit = @units.slice!(0)
  @series &lt;&lt; unit
  raise Error unless unit.type == type
  if value != ''
    raise Error unless unit.value == value
  end
end

def accept_series(*args)
  args.each {|arg| accept(arg) }
end
</code></pre>

<p>end
end
```</p>

<p>Reste à écrire une classe par règle de grammaire. Voici par exemple la 
règle pour la <code>else clause</code>:</p>

<p><code>ruby
module Naam
  class ElseClauseRule &lt; BaseRule
    def apply!
      accept(:int)
      accept(:keyword, 'else')
      accept(:eol)
      else_node = ElseClauseAST.new
      else_node.add_child(ReturnValueAST.new(@series[0].value))
      @ast_node.add_child(else_node)
    end
  end
end
</code></p>

<p>La prochaine étape sera de sortir le code PIR à partir de l’AST.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 11: Arbre syntaxique abstrait]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/"/>
    <updated>2013-08-26T08:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans le dernier épisode, je me suis rendu compte que j’aurais intéret
à utiliser un arbre syntaxique abstrait pour mon petit langage. En
voici une première implémentation.</p>

<!-- more -->

<p>Un arbre syntaxique abstrait (<em>Abstract Syntax Tree</em> en anglais, ou AST)
est avant tout une manière de structurer des données:</p>

<pre><code>    A
   / \
  B   C
 / \   \
D   E   F
   /
  G
</code></pre>

<p>On part d’un noeud racine (ici <code>A</code>) et on ajoute des branches qui mènent à
d’autres noeuds. On peut distinguer les noeuds terminaux (<code>D</code>, <code>F</code> et <code>G</code>) des
noeuds non-terminaux. 
Les noeuds terminaux, aussi appelés feuilles, contiennent une valeur. Les noeuds
non-terminaux contiennent d’autres noeuds.
C’est une manière pratique de représenter un code source,
l’AST étant (assez) facilement manipulable. Il est dit abstrait dans le sens
où il ne contient pas chaque éléments du langage source. Par exemple, les
parenthèses, les virgules, ou encore les débuts et fins de blocs sont
souvent absents de l’AST. Si vous voulez en savoir plus sur les AST:
<a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">http://en.wikipedia.org/wiki/Abstract_syntax_tree</a>.</p>

<p>Le code qui suit est sur <a href="https://github.com/lkdjiin/naam">Github</a>,
à la version 0.0.5.</p>

<p>L’objectif est de créer l’AST et de le visualiser ainsi:</p>

<pre><code>program
  function definition
    header
      name ::= sign
      argument ::= n
    if clause
      return value ::= 1
      test
        left value ::= n
        operator value ::= &gt;
        right value ::= 0
    if clause
      return value ::= -1
      test
        left value ::= n
        operator value ::= &lt;
        right value ::= 0
    else clause
      return value ::= 0
  print statement ::= sign(4)
</code></pre>

<p>Voici la classe de base de l’AST:</p>

<p>``` ruby
module Naam::AST
  class Node</p>

<pre><code>def initialize name
  @name = name
  @children = []
end

attr_reader :children, :name

def add_child child; @children &lt;&lt; child; end

def leaf?; @children.empty?; end

def display(indent = 0)
  print " " * indent + @name
  print " ::= #{@value}" if leaf?
  puts
  @children.each {|child| child.display(indent + 2) }
end   end end ```
</code></pre>

<p>Elle permet entre autres d’ajouter un noeud enfant avec <code>add_child</code> et de
déterminer si un noeud est une feuille avec <code>leaf?</code>. La méthode <code>display</code>,
appliquée sur le noeud racine permettra d’afficher l’arbre complet.</p>

<p>Un noeud non-terminal ressemblera à ça:</p>

<p><code>ruby
module Naam::AST
  class Program &lt; Node
    def initialize
      super("program")
    end
  end
end
</code></p>

<p>Pour un noeud terminal (une feuille), on ajoutera simplement une valeur:</p>

<p><code>ruby
module Naam::AST
  class Argument &lt; Node
    def initialize value
      super("argument")
      @value = value
    end
  end
end
</code></p>

<p>Comment appliquer tout ça ? Directement dans le <em>syntaxer</em>. En voici
quelques extraits:</p>

<p>``` ruby
module Naam::Parser
  class Syntaxer</p>

<pre><code>def initialize
  # ...
  @ast = Naam::AST::Program.new
end

# ...

def function_def
  node = Naam::AST::FunctionDef.new
  @ast.add_child node
  function_header(node)
  if_clause(node) while if_clause?
  else_clause(node)
end

def function_header(node)
  @series = []
  accept_series(:word, :paro, :word, :parc, :affect, :eol)
  f_header = Naam::AST::FunctionHeader.new
  f_header.add_child(Naam::AST::Name.new(@series[0].value))
  f_header.add_child(Naam::AST::Arg.new(@series[2].value))
  node.add_child(f_header)
end

# ...
</code></pre>

<p>end
end
```</p>

<p>L’AST va me permettre de faire un truc plus propre (même si cette classe
<code>Syntaxer</code> demande toujours un gros <em>refactoring</em>) et de manipuler plus
aisement le code source.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
</feed>
