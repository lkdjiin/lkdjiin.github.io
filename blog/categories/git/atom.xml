<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : git | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-23T10:00:02+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Générer un fichier Changelog avec Git]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/"/>
    <updated>2013-09-04T11:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><em>J'ai écrit un script pour Git qui permet de produire un fichier</em>
changelog
<em>en html ou en markdown à partir des commits.</em></p>

<!-- more -->


<p>Dans un
<a href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/">article précédent</a>
j'ai montré comment étendre Git avec un script pour créer ses propres
commandes. Aujourd'hui je vous présente mon script <code>git-changelog</code>.
Vous pouvez le trouver sur
<a href="https://github.com/lkdjiin/git-changelog">Github</a>.</p>

<p>Il s'agit d'un script Ruby qui ajoute une commande <code>changelog</code> à Git.
Il est utile pour automatiser (ou semi-automatiser) la production du
fichier changelog. Il peut produire des fichiers au format HTML ou au
format Markdown.</p>

<p>Pour l'installer, il faut mettre le fichier <code>git-changelog</code> quelque part
dans votre PATH, après l'avoir téléchargé.</p>

<h2>Utilisation</h2>

<p>Sortie sur la console:</p>

<pre><code>git changelog
</code></pre>

<p>Sortie dans un fichier:</p>

<pre><code>git changelog &gt; changelog.markdown
</code></pre>

<p>Le script accepte l'option <code>--since</code>. C'est la même option qu'utilise la
commande <code>git log</code>:</p>

<pre><code>git changelog --since=2013-07-01
git changelog --since=10.days
</code></pre>

<p>Sortie au format HTML:</p>

<pre><code>git changelog --html
</code></pre>

<p>Un exemple de combinaison:</p>

<pre><code>git changelog --html --since=2013-05-27 &gt; changelog.html
</code></pre>

<h2>Un exemple</h2>

<p>Voici ce que produit <code>git-changelog</code>:</p>

<pre><code>2013-07-18 Version 0.2.1  
==========================
* 2013-07-18 Fix bug for markdown format  
  Html entities are now escaped.
* 2013-07-18 Fix bug with markdown format  
  Commit body now start on a new line.
* 2013-07-18 Add auto-generated changelog file  

2013-07-18 Version 0.2.0  
==========================
* 2013-07-18 Add html format output  
  A new --html option outputs a &amp;lt;ul&amp;gt;.
* 2013-07-17 First commit  
  The script outputs in markdown and accept the option '--since'.
</code></pre>

<p>Et voilà ce que ça donne (avec le style de ce blog):</p>

<h1>2013-07-18 Version 0.2.1  </h1>

<ul>
<li>2013-07-18 Fix bug for markdown format<br/>
Html entities are now escaped.</li>
<li>2013-07-18 Fix bug with markdown format<br/>
Commit body now start on a new line.</li>
<li>2013-07-18 Add auto-generated changelog file</li>
</ul>


<h1>2013-07-18 Version 0.2.0  </h1>

<ul>
<li>2013-07-18 Add html format output<br/>
A new &mdash;html option outputs a &lt;ul&gt;.</li>
<li>2013-07-17 First commit<br/>
The script outputs in markdown and accept the option &lsquo;&mdash;since&rsquo;.</li>
</ul>


<h2>Rake task</h2>

<p>Voici un exemple de <em>rake task</em> pour une gem Ruby:</p>

<p><code>ruby
desc "Generate the changelog"
task :changelog do
  system "git changelog &gt; Changelog.markdown"
end
</code></p>

<p>Et un exemple pour un projet Rails:</p>

<p><code>ruby lib/tasks/changelog.rake
desc "Generate the changelog in html"
task :changelog do
  system "git changelog --html &gt; app/views/pages/_changelog.html"
end
</code></p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/"/>
    <updated>2013-07-18T07:39:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><em>Hier j'ai montré comment ajouter une commande à Git à l'aide d'un script.
Aujourd'hui je fais quelque chose d'utile grâce à ce nouveau pouvoir.</em></p>

<p>Ce que je fais régulierement avec Git c'est:</p>

<ol>
<li>ajouter une fonctionnalité dans la branche <code>ma_branche</code></li>
<li>quand c'est terminé, passer sur la branche <code>master</code></li>
<li>fusionner <code>ma_branche</code> dans <code>master</code></li>
</ol>


<p>Comme je ne travaille jamais directement dans la branche master, ce genre
de <em>merge</em> n'offre jamais de conflits. J'aimerais regrouper les
étapes 2 et 3 en une seule commande: <code>git merge-me</code>.</p>

<!-- more -->


<h2>Trouver la branche courante</h2>

<p>La première étape consiste à retrouver
et retenir le nom de la branche courante. Étant un grand fan de Sed, je
procederais naturellement comme ça:</p>

<pre><code>git branch | sed -n '/\* /s///p'
</code></pre>

<p>Mais je sais que Sed n'a pas les faveurs de tout le monde. J'ai donc fais une
recherche sur StackOverflow pour trouver une autre manière d'obtenir le
même résultat:</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre>

<p>Je pense que cette seconde solution est meilleure puisque moins fragile, même
si il y a peu de chance que Git change la sortie de <code>git branch</code>. Pour
retenir le nom de la branche, on place la sortie de cette commande dans une
variable Bash:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
echo $BRANCH_TO_MERGE
```</p>

<p>Comme en Ruby, les backticks déclenchent la commande et retournent sa
sortie. Le résultat:</p>

<pre><code>xavier:~$ git merge-me
ma_branche
</code></pre>

<p>Maintenant que j'ai vu que ça fonctionnait bien, le reste est un jeu
d'enfant.</p>

<h2>Le script final</h2>

<p>On ajoute les deux commandes Git, ce qui donne:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
git checkout master
git merge $BRANCH_TO_MERGE
```</p>

<p>Et voici le script en action:</p>

<pre><code>xavier:~$ git merge-me
Switched to branch 'master'
Updating 48540e6..c584593
Fast-forward
 TODO |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
xavier:~$ git branch
* master
  ma_branche
</code></pre>

<p>Ma nouvelle commande fait bien le travail que je lui demande.</p>

<h2>Pour aller plus loin</h2>

<p>Vous n'êtes pas limité à l'utilisation de Bash. Vous pouvez utiliser le
langage que vous voulez. À titre d'exemple, voici l'équivalent du script
précédent, cette fois en Ruby.
Toutefois comme ce genre de script va utiliser beaucoup de commandes
système, Ruby n'est peut-être pas le mieux placé. À vous de voir.</p>

<p>``` ruby git-merge-me version Ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>branch_to_merge = <code>git rev-parse --abbrev-ref HEAD</code>
system &lsquo;git checkout master&rsquo;
system &ldquo;git merge #{branch_to_merge.chomp}&rdquo;
```</p>

<p>On peut aussi combiner script et alias. On donne un nom bien explicite
à notre fichier, comme <code>git-merge-me-into-master</code> et on crée un alias
<code>mm = merge-me-into-master</code>. Ainsi on a une commande rapide sous les
doigts et on peut facilement retrouver le fichier grâce à son nom quand
on doit le modifier.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/"/>
    <updated>2013-07-17T08:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ces derniers jours j'ai montré comment étendre les fonctionnalités
de Git à l'aide des alias (voir les 2 articles précédents). Aujourd'hui
on passe à la suite logique avec la création de nos propres scripts pour
Git.</p>

<p><em>Ce qui suit fonctionne sur Linux et MacOS. Je ne sais pas si c'est
possible sur Windows.</em></p>

<!-- more -->


<p>Un exemple vaut parfois mieux qu'un long discours. Alors créez donc le fichier
<code>git-hello</code> suivant:</p>

<p>``` bash git-hello</p>

<h1>!/bin/bash</h1>

<p>echo Hello
```</p>

<p>Donnez lui les droits d'exécution (<code>chmod +x git-hello</code>) et placez le dans
votre PATH. Moi je le place dans <code>~/bin/</code> et j'ajoute la ligne suivante à
<code>~/.bashrc</code>:</p>

<p><code>bash
PATH=$PATH:/home/xavier/bin
</code></p>

<p>Si vous n'êtes pas sous Linux, vous devrez adapter ces directives pour
votre OS. Une fois que c'est fait, vérifiez si tout fonctionne
correctement:</p>

<pre><code>xavier:~$ git-hello 
Hello
</code></pre>

<p>Maintenant vous vous dites peut-être <em>«Bon d'accord, il vient d'écrire un
script bidon, et alors ? Je vois toujours pas le rapport avec Git !»</em>
Le fichier qu'on vient d'écrire n'est pas nommé n'importe comment. Il
commence par <code>git-</code>. C'est ce qui va permettre à la magie d'opérer:</p>

<pre><code>xavier:~$ git h[Tab]
hello   help    hist    
xavier:~$ git hello
Hello
</code></pre>

<p>La même chose en différé live &ndash;<em> c'est mon dixième article sur ce blog,
je fête ça avec mon tout premier gif, je m'amuse comme je veux…</em> &ndash;</p>

<p><img src="/images/2013-07-17-1.gif"></p>

<p>La règle est simple:</p>

<p><blockquote><p>Un fichier nommé <code>git-foo</code> sera vu par Git comme étant une de ses propres<br/>commandes, nommée <code>foo</code>.</p></blockquote></p>

<p>C'est possible grâce à l'auto complétion programmable de Bash, dont je
parlerais une prochaine fois. Si vous avez défini des alias un peu
complexe, vous auriez peut-être avantage à les placez dans un script pour
profiter de la coloration syntaxique.
Demain, je montrerais un script un
peu plus utile et étoffé que celui-ci :) En attendant, testez vos propres idées.</p>

<p>À demain.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git et les alias: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/16/git-et-les-alias-la-suite/"/>
    <updated>2013-07-16T09:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/16/git-et-les-alias-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p><em>Hier, j'abordai les bases de la
<a href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/">création d'alias avec Git</a>.
Aujourd'hui je pousse un peu plus loin en montrant comment intégrer
des commandes externes dans ces alias.</em></p>

<p>J'ai constaté récemment que j'utilisai énormément Git:</p>

<p><code>bash
xavier:~$ wc -l .bash_history
500 .bash_history
xavier:~$ sed -n '/^git/p' .bash_history | wc -l
238
</code></p>

<p>Sur 500 lignes d'historique, 238 sont consacrées à Git ! Ça m'a décidé
à approfondir la question des alias.</p>

<!-- more -->


<h2>L'opérateur !</h2>

<p>Git permet d'utiliser des commandes externes dans la définitions des
alias à l'aide de l'opérateur <code>!</code>. L'exemple qui suit est parfaitement
inutile mais illustre bien ce qui est possible.</p>

<p><code>ini
[alias]
  ls = !ls
</code></p>

<p><code>bash
xavier:~$ git ls
bin    Documents  Images            Modèles    Téléchargements   www
[...]
</code></p>

<p>C'est pas tout, Git accepte aussi les arguments des commandes externes:</p>

<p><code>bash
xavier:~$ git ls -a
.          .fonts       .javafx_eula_accepted   .remmina
[...]
</code></p>

<p>Vous imaginez un peu ce qu'on va pouvoir faire avec ça ? Prenons un
workflow simple : nouvelle branche, ajout de fichier, commit, retour à au
master et merge.</p>

<p>``` bash</p>

<pre><code>git checkout -b new_branch
# Édition du code
git add . # 1 fois sur 2 j'oublie celle-là.
git commit -a
git checkout master
git merge new_branch
</code></pre>

<p>```</p>

<p>Il est clair que <code>git add . ; git commit -a</code> va se répéter plusieurs fois.
Je cherche donc a optimiser cette partie. Pour cela je modifie mon vieil
alias <code>ci</code> (<a href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/">voir article précédent</a>).</p>

<p><em>Dans les exemples suivants, je n'écris plus <code>[alias]</code>, cette ligne est
désormais sous-entendue.</em></p>

<pre><code>ci = !git add . &amp;&amp; git commit -a
</code></pre>

<p>Git traite <code>git</code> comme une commande externe comme les autres &ndash;
<em>logique mais marrant</em> &ndash;, quant à <code>&amp;&amp;</code>, cela permet à Bash de n'exécuter
la commande de droite que si la commande de gauche réussie. Il n'y a pas
de raison de douter que <code>git add .</code> va crasher et vous pouvez remplacer
<code>&amp;&amp;</code> par <code>;</code> si vous voulez.</p>

<p>Pour finir sur une note d'humour de geek, voici la commande <code>la</code> (pour
list alias) qui va afficher tout les alias.</p>

<pre><code># Lister tout les alias.
la = !git config -l | sed -n '/alias/s/alias\\.//p' | sort
</code></pre>

<p>Tout d'abord <code>git</code> est utilisé pour lister le contenu du fichier .gitconfig.
Ensuite <code>sed</code> sélectionne seulement les lignes commençant par <code>alias</code> et en
même temps supprime <code>alias.</code> de la ligne. Et enfin <code>sort</code> nous trie tout
ça par ordre alphabétique. Notez au passage que le fichier <code>.gitconfig</code>
accepte les commentaires.</p>

<h2>Conclusion</h2>

<p>On a là un sacré terrain de jeu. Si vous aimez écrire des oneliners, vous
allez pouvoir vous amuser. Voici par exemple une page où vous trouverez
<a href="http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/">des définitions d'alias</a>
bien plus complexe que ce que j'ai montré ici.
Malgré tout, je ne pense pas que les alias de Git soient la réponse à tout
les problèmes.
Écrire une commande sur une seule ligne va vite devenir illisible si
vous avez besoin de faire quelque chose d'un peu élaboré. Dans un
prochain article je montrerais comment créer vos propres commandes Git
à l'aide de scripts, et non plus simplement d'alias.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: complétion automatique et alias pour débutants]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/"/>
    <updated>2013-07-15T07:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Utilisez git en ligne de commande, c'est taper encore et encore les mêmes
commandes sur votre clavier. Si vous êtes comme moi, vous utilisez la
ligne de commande parce que vous savez que c'est ce qu'il y a de plus
rapide. C'est puissant, mais ça peut aussi finir par lasser. On va voir
comment accélerer encore les choses.</p>

<!-- more -->


<h2>Complétion automatique</h2>

<p>Il y a tout d'abord la complétion automatique, si votre système est
configuré pour. Si par exemple je tape <code>git c</code>, suivi de la touche
tabulation ([Tab]), voici ce qu'il se passe:</p>

<p><code>bash
xavier:~$ git c
checkout      cherry-pick   clean         clone         commit
cherry        ci            cleanup       co            config
xavier:~$ git c
</code></p>

<p>Je suis informé de toutes les commandes commençant par la lettre <code>c</code>. Et la
ligne de commande est reprise automatiquement sur une nouvelle ligne, prête à
être complétée. Si je tape <code>git chec</code> puis [Tab], la commande s'étends de suite
en <code>git checkout</code> puisqu'il n'y a plus d'ambiguités. C'est un bon moyen pour se
rafraichir la mémoire sur les différentes commandes disponibles, et ça accélère
un peu la frappe au clavier. Mais on doit pouvoir faire mieux.</p>

<h2>Les alias git</h2>

<p>Git permet de définir des alias (littéralement: pseudonyme ou nom d'emprunt) sur
ses commandes. Un classique du genre est <code>git co</code>, à la place de <code>git
checkout</code>. Pour faire ça, on utilise la commande <code>config</code> de git:</p>

<pre><code>git config --global alias.co 'checkout'
</code></pre>

<p>Maintenant, partout où vous utilisiez <code>checkout</code> vous pouvez vous contentez
de <code>co</code>, par exemple:</p>

<p>``` bash</p>

<h1>Grâce à son système d'alias, git transforme la ligne suivante</h1>

<h1>en &lsquo;git checkout master&rsquo;.</h1>

<p>git co master
```</p>

<p>Il faut noter que la complétion automatique fonctionne aussi sur le nom de
la branche. Ainsi <code>git co m[Tab]</code> sera étendu en <code>git co master</code> (si la
branche <code>master</code> est la seule commençant par la lettre <code>m</code>, bien entendu).</p>

<h2>Le fichier .gitconfig</h2>

<p>Git enregistre vos alias dans le fichier <code>~/.gitconfig</code>. Si vous vous sentez
à l'aise avec l'idée d'éditer ce fichier, vous pouvez le faire. Je trouve
que c'est plus simple que d'avoir à se souvenir de la syntaxe de la
commande <code>git config</code>. Voyons ce que ça donne avec notre alias <code>co</code>:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 1
[alias]</p>

<pre><code>co = checkout
</code></pre>

<p>```</p>

<p>Ajoutons un autre classique du genre, <code>ci</code> pour <code>commit</code>:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 2
[alias]</p>

<pre><code>co = checkout
ci = commit
</code></pre>

<p>```</p>

<p>Voilà, maintenant vous pouvez écrire:</p>

<pre><code>git ci -a ...
</code></pre>

<p>à la place de</p>

<pre><code>git commit -a ...
</code></pre>

<p>Les alias peuvent aussi contenir des options. Par exemple, pour afficher les
3 derniers commits, on peut ajouter un alias sur la commande <code>log</code> de cette
manière:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 3
[alias]</p>

<pre><code>co = checkout
ci = commit
</code></pre>

<p>  last = log -3
```</p>

<h2>Pour conclure</h2>

<p>Je vous ai présenté les fonctionnalités basiques des alias de git. On a vu
notamment deux manières de les créer. Les alias git
peuvent se révéler beaucoup plus puissants que ce que j'ai abordé dans
ce tutoriel d'introduction. En attendant un possible futur article sur
le sujet, si vous
cherchez un peu sur internet vous trouverez des tas de définitions
d'alias, certaines très utiles et d'autres moins. À vous de faire le tri
selon vos besoins.</p>

<p>À demain.
</p>
]]></content>
  </entry>
  
</feed>
