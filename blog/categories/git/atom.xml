<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : git | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-07-08T21:15:16+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Une histoire de git diff]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff/"/>
    <updated>2014-06-05T21:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/06/05/une-histoire-de-git-diff</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je devais fusionner notre branche <code>development</code> dans la branche
<code>master</code> et envoyer cette nouvelle version en production.</p>

<p>Mais avant d'envoyer quoi que ce soit, en production ou même sur Github,
je lance toujours la suite de tests. Vu notre <em>workflow</em>, quand il s'agit
de <em>merger</em> <code>development</code> dans <code>master</code>, c'est plus une formalité, une
habitude, qu'autre chose.</p>

<p>Sauf que cette fois-ci, certains tests ne passaient pas.</p>

<!-- more -->


<p>Comme je l'ai dit, vu notre <em>workflow</em>, c'est normalement impossible !
À moins que…</p>

<p>À moins qu'un collêgue &ndash;<em> pas moi bien sûr ;) </em>&ndash; ai fusionné un <em>hotfix</em>
dans <code>master</code> et oublié de le mettre dans <code>development</code> ? Vu qu'on déploit
plusieurs fois par semaines, ça a été vite à controler. C'était pas ça…</p>

<p>En regardant de plus près ce que racontaient les tests qui échouaient, j'ai
remarqué un truc très bizarre. Une des lignes d'où était sensée partir
l'erreur dans le code était … vide ! <code>Rspec</code> me disait que l'erreur partait
de la ligne 6, alors qu'elle partait en réalité de la ligne 7 ! Et c'est pas
tout, <code>Rspec</code> me soutenait que j'envoyais deux arguments à telle méthode
(c'était ça les erreurs), alors
qu'en réalité j'en envoyais bien un seul ! J'avais le code sous les yeux !</p>

<p>Qui mentait ? <code>Rspec</code> ou le code ?</p>

<p>C'est là qu'intervient la commande Git du titre de cet article, si vous avez
lu jusqu'ici.</p>

<pre><code>git diff master..development
</code></pre>

<p>Ça m'a permis de voir les différences entre les deux branches. Il y avait
simplement un fichier qui avait été déplacé et remanié. Seulement l'ancienne
version de ce fichier était elle aussi toujours là, à son ancien emplacement.</p>

<p>Après la suppression de ce fichier indélicat, j'ai pu envoyer le tout
en production. Je ne sais toujours pas pourquoi il y avait cette différence.
Je n'ai pas eu (<em>pris ?</em>) le temps de chercher. Enfin bref, merci Git :)</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hub - Git plus facile avec Github]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github/"/>
    <updated>2014-05-20T21:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/05/20/hub-git-plus-facile-avec-github</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui j'ai découvert <a href="http://hub.github.com/">Hub</a>.
Un programme (en Ruby) qui étend les fonctionnalités de Git en ligne de
commande quand on travaille avec un dépot Github. Je n'est pas encore
eu le temps de le tester, ni même de l'installer, mais je voulais tout
de même vous en parler au cas où, comme moi, vous seriez passé à coté.</p>

<!-- more -->


<p>Ne l'ayant pas tester, je me contente de paraphraser la page d'acceuil
pour vous donner l'eau à la bouche ;)</p>

<p>Pour cloner un de vos propre projet, il suffit de:</p>

<pre><code>git clone projet
</code></pre>

<p>Si le projet ne vous appartient pas, il faut faire:</p>

<pre><code>git clone github/projet
</code></pre>

<p>Rien que ça, c'est déjà sympathique. Mais je suis impatient d'essayer la
commande suivante:</p>

<pre><code>git pull-request
</code></pre>

<p>Il y plusieurs autres commandes avec lesquelles j'ai hâte de m'amuser.
Si vous avez déjà utiliser Hub, dites moi donc ce que vous en pensez.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Astuce pour Git - merge et checkout en une commande]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande/"/>
    <updated>2014-02-19T20:49:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/19/astuce-pour-git-merge-et-checkout-en-une-commande</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui, je vous présente un petit script pour Git. Il vous permettra,
en une commande, de merger la branche courante dans <code>master</code> et de vous
retrouver sur <code>master</code>.</p>

<!-- more -->


<p>Ce script, <code>merge-me</code>, est a placer quelquepart dans votre <code>$PATH</code>.
N'oubliez pas de lui fournir les droits d'exécution (<code>chmod +x</code>).</p>

<p>``` bash merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
git checkout master
git merge $BRANCH_TO_MERGE
```</p>

<p>Une fois installé, en partant d'une branche <code>ma-branche</code>, vous tapez:</p>

<pre><code>git merge-me
</code></pre>

<p>et la branche <code>ma-branche</code> sera mergée dans la branche <code>master</code>.</p>

<p>N'hésitez pas à vous en servir comme d'un point de départ et à le modifier,
à lui ajouter des fonctionnalités.</p>

<p>Tiens, d'ailleurs ! Vous y ajouteriez quoi ?</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment mettre temporairement de coté ses modifications de code avec Git]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git/"/>
    <updated>2014-02-18T21:03:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/18/comment-mettre-temporairement-de-cote-ses-modifications-de-code-avec-git</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><strong>Scénario</strong> : Vous êtes en train de travailler sur la branche
<code>ma-nouvelle-fonction</code> et on vous demande de réparer un bug de toute
urgence. Ce bug est sur la branche <code>master</code>.</p>

<p><strong>Problème</strong> : votre branche
<code>ma-nouvelle-fonction</code> est dans un état instable, vous n'êtes pas prêt
à commiter les changements. Il se peut que le code ne fonctionne pas,
qu'il vous faille 10 minutes pour faire des commits propres, etc.</p>

<!-- more -->


<p><strong>Solution</strong> : Utilisez <code>git stash</code>.</p>

<p>Il vous suffit d'entrer:</p>

<pre><code>git stash
</code></pre>

<p>et tous vos changements vont être mis dans la «zone de stashing». Une
espèce d'endroit à part. Votre branche <code>ma-nouvelle-fonction</code> se retrouve
dans l'état stable du dernier commit.</p>

<p>Vous pouvez maintenant créer une nouvelle branche <code>mon-fix</code> à partir de
<code>master</code>, travailler dessus, commiter, pusher, merger, enfin bref faire
ce que vous avez à faire.</p>

<p>Quand vous en avez fini, vous pouvez retourner sur la branche
<code>ma-nouvelle-fonction</code> et récupérer vos modifications:</p>

<pre><code>git checkout ma-nouvelle-fonction
git stash pop
</code></pre>

<p><code>git stash pop</code> va réintroduire vos modifications et effacer la zone de
stashing.</p>

<p>La commande <code>stash</code> peut faire bien d'autres choses que ce que je viens
de montrer, c'est tout juste le sommet de l'iceberg. Je vous recommande
donc un petit <code>git help stash</code> pour en savoir plus.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques commandes Git par Michael Hartl]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/02/12/quelques-commandes-git-par-michael-hartl/"/>
    <updated>2014-02-12T20:29:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/02/12/quelques-commandes-git-par-michael-hartl</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Michael Hartl, l'auteur de <a href="http://ruby.railstutorial.org/">Ruby on Rails Tutorial</a>
a écrit plusieurs commandes Git bien utiles.</p>

<!-- more -->


<p>Le code se trouve sur Github : <a href="https://github.com/mhartl/git-utils">git-utils</a>.
On y trouve par exemple une commande <code>git cleanup</code>, qui supprime toutes
les branches locales qui ne sont pas encore mergées dans la branche
courante. Ou encore <code>git merge-branch</code>, qui merge la branche courante
dans master par défaut.</p>

<p>Aujourd'hui, toutes ces commandes sont écrites en Ruby, mais avant
elle l'était en Bash, comme la suivante:</p>

<p>``` bash</p>

<h1>!/bin/bash git-merge-branch</h1>

<h1>Copyright &copy; 2013 Michael Hartl</h1>

<h1>Released under the MIT License (<a href="http://opensource.org/licenses/MIT">http://opensource.org/licenses/MIT</a>)</h1>

<h1>Merges the current branch into the given branch (defaults to master).</h1>

<h1>E.g., &lsquo;git merge-branch foobar&rsquo; merges the current branch into foobar.</h1>

<h1>&lsquo;git merge-branch&rsquo;, merges the current branch into master.</h1>

<h1>git merge-branch uses the &mdash;no-ff &mdash;log options to ensure that the</h1>

<h1>merge creates a new commit object and that the individual commits appear</h1>

<h1>in the log file.</h1>

<p>CURRENT_BRANCH=<code>git rev-parse --abbrev-ref HEAD</code>
if [ $# -eq 1 ]
then
  TARGET_BRANCH=$1
else
  TARGET_BRANCH=&ldquo;master&rdquo;
fi
git checkout $TARGET_BRANCH
git merge &mdash;no-ff &mdash;log $CURRENT_BRANCH
```</p>

<p>Essayez les, certaines pourraient bien vous changer la vie.</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
