<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-16T16:35:32+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0: Les arguments nommés]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes/"/>
    <updated>2013-10-14T19:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/14/ruby-2-dot-0-les-arguments-nommes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Les arguments nommés étaient absents de Ruby jusqu'à sa version 2.0, curieux
pour un langage qui fait tellement penser à Smalltalk.</p>

<!-- more -->


<p>Il était bien sûr possible de les <em>simuler</em> en utilisant un hash, un peu
comme ce qu'on fait en Javascript:</p>

<p><code>ruby
def person(opts = {})
  defaults = {name: "toto", age: 99}
  opts = defaults.merge opts
  puts opts[:name]
  puts opts[:age]
end
</code></p>

<p>Mais bof. Ça ressemble à tout sauf à du Ruby. C'est un <em>hack</em>, un truc, une
astuce, tout ce qu'on veut mais ça ne s'intègre pas au langage.
Voici la même méthode, avec cette fois-ci des arguments nommés:</p>

<p><code>ruby
def person(name: "toto", age: 99)
  puts name
  puts age
end
</code></p>

<p>Et voici comment différentes manières d'appeler cette méthode:</p>

<p><code>ruby
person
person name: "oscar"
person age: 18
person name: "oscar", age: 18
person age: 18, name: "oscar"
</code></p>

<p>Cool, ça fonctionne dans tous les sens. Par contre, pas question d'oublier
le nom de l'argument:</p>

<p><code>irb
person "oscar", 18
ArgumentError: wrong number of arguments (2 for 0)
</code></p>

<p>On peut aussi mélanger arguments normaux et nommés, à condition que les
arguments nommés viennent après. Le code suivant est valide:</p>

<p>``` ruby
def person(name, age: 99)
  puts name
  puts age
end</p>

<p>person &ldquo;oscar&rdquo;
```</p>

<p>Mais pas celui-ci:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def person(age: 99, name)
end
SyntaxError: (irb):1: syntax error, unexpected tIDENTIFIER
def person(age: 99, name)</p>

<pre><code>                    ^
</code></pre>

<p>```</p></blockquote></blockquote>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Créez des présentations avec Vimdeck]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck/"/>
    <updated>2013-10-13T13:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/13/vim-creez-des-presentations-avec-vimdeck</id>
    <content type="html"><![CDATA[<p>Vimdeck est un programme écrit en Ruby qui transforme un fichier texte au
format Markdown en plusieurs <em>slides</em> pour effectuer une présentation avec
l'éditeur de texte Vim !</p>

<!-- more -->


<h2>Installation</h2>

<p>Installez tout d'abord le plugin Vim <a href="https://github.com/vim-scripts/SyntaxRange">SyntaxRange</a>.</p>

<p>Ensuite, installez le programme de manière classique:</p>

<pre><code>gem install vimdeck
</code></pre>

<p>Note: J'ai eu un problème de dépendance (sur Debian) et il a fallu installer la
librairie systême <code>libmagickwand-dev</code> pour que tout fonctionne bien.</p>

<h2>Utilisation</h2>

<p>Maintenant on écrit notre présentation au format Markdown, par exemple:</p>

<pre><code># Premier slide

- Premier point
- Second point
- Troisième point


# Deuxième slide

- Premier
{~- Deuxième point~}
{~- Troisième point~}


# Troisième et dernier slide

```ruby
class Foo
  def bar
    puts "Hello Vimdeck!"
  end
end
```
</code></pre>

<p>Et on lance la présentation ainsi:</p>

<pre><code>vimdeck mon_fichier.md
</code></pre>

<p>Ensuite, on change de slide avec les touches PageUp/PageDown.</p>

<p>Vous pouvez voir des captures d'écrans sur le <a href="https://github.com/tybenz/vimdeck">site du projet</a>.</p>

<h2>Conclusion</h2>

<p>Bon, le projet est un peu jeune et pas mal buggé, mais l'idée est vraiment
intéressante. C'est totalement improbable, complêtement loufoque, inutilisable
avec des graphiques, donc
rigoureusement indispensable, ne serait-ce que pour frimer devant les
collègues: «Regardez comment je fais une présentation en 3 minutes avec mon
éditeur de texte…».</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0: Raffinement de méthode]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode/"/>
    <updated>2013-10-10T18:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/10/ruby-2-dot-0-raffinement-de-methode</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ruby possède un truc cool : les classes ouvertes. Lorsque j'écris :</p>

<p>``` ruby
class String
  def foo</p>

<pre><code>"foo"
</code></pre>

<p>  end
end
```</p>

<p>Je ne suis pas en train de <em>définir</em> une nouvelle classe <code>String</code>, je suis
simplement en train <em>d'ouvrir</em> la classe <code>String</code> existante pour lui ajouter
une nouvelle méthode.</p>

<!-- more -->


<p>C'est très utile et très cohérent avec l'esprit orienté objet de Ruby.
Mettons que j'ai besoin de cacher les voyelles d'une phrase pour un
hypothétique jeu de lettre, je peux écrire un module avec une collection
de méthodes utilitaires, par exemple:</p>

<p>``` ruby
module Util
  def self.hide_vowels(string)</p>

<pre><code>string.tr('aeiouy', '*')
</code></pre>

<p>  end
end</p>

<p>puts Util.hide_vowels(&ldquo;bonjour xavier&rdquo;)
```</p>

<p>Ce qui donne:</p>

<pre><code>b*nj**r x*v**r
</code></pre>

<p>Mais on peut aussi tirer parti des classes ouvertes de cette manière:</p>

<p>``` ruby
class String
  def hide_vowels</p>

<pre><code>tr('aeiouy', '*')
</code></pre>

<p>  end
end</p>

<p>puts &ldquo;bonjour xavier&rdquo;.hide_vowels
```</p>

<p>C'est plus élégant, à la fois dans la définition et dans l'utilisation.
Seulement ce genre de code peut poser problème quand il est utilisé dans
des bibliothèques, puisque une fois chargée, la nouvelle méthode est visible
dans tout le code client. Parfois c'est ce qu'on veut, parfois ce ne devrait
être qu'une méthode utilitaire du code tiers.</p>

<p>Ruby 2.0 propose le raffinement de méthode (<em>method refinement</em>) pour
pallier à ce problème. L'idée est de limiter la portée des méthodes ajoutées
ou modifiées avec le mécanisme des classes ouvertes. Voici un petit exemple:</p>

<p>```
module CoolString
  refine String do</p>

<pre><code>def hide_vowels
  tr('aeiouy', '*')
end
</code></pre>

<p>  end
end</p>

<h1>puts &ldquo;abc&rdquo;.hide_vowels</h1>

<p>using CoolString
puts &ldquo;abc&rdquo;.hide_vowels
```</p>

<p>La ligne en commentaire provoquerait une erreur (NoMethodError). Pour pouvoir
utiliser la méthode <code>hide_vowels</code> il faut explicitement écrire
<code>using CoolString</code>. La portée de <code>hide_vowels</code> s'étend du moment où on utilise
la méthode <code>using</code> jusqu'à la fin du fichier.</p>

<p>Le raffinement de méthode est expérimental dans Ruby 2.0 et devrait être
définitivement adopté dans Ruby 2.1. Pour aller plus loin, on peut se
reporter à la <a href="http://www.ruby-doc.org/core-2.0.0/doc/syntax/refinements_rdoc.html">documentation</a>.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: un point sur les performances]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances/"/>
    <updated>2013-10-09T11:57:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/09/les-algorithmes-genetiques-demystifies-un-point-sur-les-performances</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui j'ai peu de temps à consacrer à ce blog. Je voudrais faire
un petit point sur les performances de différentes versions de
l'interpréteur Ruby.</p>

<!-- more -->


<p>Utiliser un interpréteur plus rapide est le moyen le plus simple de
booster les performances. J'ai calculé le temps que prends une génération
avec diverses tailles d'échiquier (16, 30 et 40) et trois interpréteurs
différents: MRI 1.9.3, MRI 2.0.0 et Rubinius 2.0.0.
Voici les résultats:</p>

<pre><code>Temps en seconde pour une génération
====================================

                 16x16  30x30  40x40

MRI 1.9.3        0.092  0.24   0.40
MRI 2.0.0        0.081  0.20   0.34
Rubinius 2.0.0   0.075  0.15   0.24
</code></pre>

<p>C'est sans appel et sans surprise. On peut quand même noter que plus
la taille de l'échiquier augmente, plus Rubinius est proportionnelement rapide.
En gros 22% plus rapide sur un échiquier de 16x16 cases et 66% plus rapide sur
un échiquier de 40x40 cases.</p>

<p>Conclusion évidente: choisissez bien vos outils ;&ndash;)</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 30: La population initiale]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale/"/>
    <updated>2013-10-08T21:30:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/08/les-algorithmes-genetiques-demystifies-30-la-population-initiale</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Aujourd'hui je voudrais parler un peu de la population initiale dans
l'algorithme génétique du problème des 8 dames et en général.</p>

<!-- more -->


<h2>La population initiale</h2>

<p>Dans le paradoxe du singe savant, les chromosomes de la population initiale,
c'est à dire les phrases, étaient générés complètement au hasard. Ce n'est
pas le cas dans le programme qu'on a développé pour solutionner le problème
des 8 dames…</p>

<p>Les dames ne sont pas placées au hasard sur l'échiquier, mais sont
placées une seule par rangée. Cela a pour effet d'<em>orienter</em> la population
initiale. Les chromosomes de la population initiale appartiennent à un
sous-ensemble des chromosomes possibles. Et comme la fonction de mutation
s'applique elle aussi sur une rangée on ne peut jamais sortir de ce
sous-ensemble.</p>

<p>On pourrait même <em>orienter</em> encore plus la population initiale en faisant
en sorte que les dames ne puissent se trouver ni sur une même rangée, ni
sur une même colonne. Pour cela, on pourrait changer la méthode
<code>initialize</code> de la classe <code>Individual</code> ainsi:</p>

<p>``` ruby
  def initialize(chromosome = nil, chromosome_size = nil)</p>

<pre><code>if chromosome
  # Comme précédement…
else
  @chromosome = (0...chromosome_size).to_a.shuffle
end
</code></pre>

<p>  end
```</p>

<p>Alors est-ce-que c'est bien d'orienter la population initiale ? Ça dépend.
Le truc c'est qu'on ne possède pas toujours une totale compréhension du
problème et de l'ensemble des solutions potentielles. Et bien souvent,
orienter la population initiale d'une manière que l'on <em>croit</em> bonne a pour
effet d'emmener le programme dans un extremum local d'où il peut être
long de sortir. Il est difficile d'obtenir la preuve qu'on puisse se passer
de certains gènes…</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
