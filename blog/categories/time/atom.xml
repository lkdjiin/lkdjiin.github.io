<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : time | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/time/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-04-01T21:31:10+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tester facilement vos dates avec Timecop]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop/"/>
    <updated>2014-04-01T21:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/01/tester-facilement-vos-dates-avec-timecop</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><a href="https://github.com/travisjeffery/timecop">Timecop</a>
n'est pas une nouvelle gem. Mais je ne la découvre qu'aujourd'hui.
Ça fait pourtant 4 ans que je travaille quotidiennement avec Ruby
et/ou Rails… Et je ne me suis jamais sentis très à l'aise pour tester
les dates. Avec Timecop, ça devient un jeu d'enfant.</p>

<!-- more -->


<p>Pour voir un souci possible, prenons la classe suivante qui représente
un article:</p>

<p>``` ruby article.rb
class Article
  def initialize(name)</p>

<pre><code>@name = name
@created_at = Time.now
</code></pre>

<p>  end</p>

<p>  attr_reader :name, :created_at
end
```</p>

<p>Dans le monde réel, ce serait surement un ActiveRecord, mais pour
l'exemple on se contentera bien de cette classe ;)</p>

<p>Maintenant testons la création d'un article:</p>

<p>``` ruby tc_article.rb
require_relative &ldquo;article&rdquo;
require &ldquo;test/unit&rdquo;</p>

<p>class TestArticle &lt; Test::Unit::TestCase
  def test_creation</p>

<pre><code>article = Article.new('Foo')
assert_equal 'Foo', article.name
assert_equal Time.now, article.created_at
</code></pre>

<p>  end
end
```</p>

<p>Et voilà le souci, à quelques nano-secondes près ça pète:</p>

<p>``` bash
$ ruby tc_article.rb
Run options:</p>

<h1>Running tests:</h1>

<p>[1/1] TestArticle#test_creation = 0.00 s
  1) Failure:
TestArticle#test_creation [tc_article.rb:8]:
&lt;2014-04-01 21:05:10 +0200> (204201[ns]) expected but was
&lt;2014-04-01 21:05:10 +0200> (176685[ns]).</p>

<p>Finished tests in 0.009979s, 100.2062 tests/s, 200.4125 assertions/s.
1 tests, 2 assertions, 1 failures, 0 errors, 0 skips
```</p>

<p>Timecop est la meilleure solution que j'ai vu jusqu'ici pour régler
ce type de problème. La gem propose tout simplement (entre autres)
<em>de geler le temps</em>:</p>

<p>``` ruby tc_article.rb
require_relative &ldquo;article&rdquo;
require &ldquo;test/unit&rdquo;
require &ldquo;timecop&rdquo;</p>

<p>class TestArticle &lt; Test::Unit::TestCase
  def test_creation</p>

<pre><code>Timecop.freeze do
  article = Article.new('Foo')
  assert_equal 'Foo', article.name
  assert_equal Time.now, article.created_at
end
</code></pre>

<p>  end
end
```</p>

<p>Et voilà le résultat:</p>

<p>``` bash
ruby tc_article.rb
Run options:</p>

<h1>Running tests:</h1>

<p>Finished tests in 0.010756s, 92.9747 tests/s, 185.9494 assertions/s.
1 tests, 2 assertions, 0 failures, 0 errors, 0 skips
```</p>

<p>J'aimerais bien savoir quelles solutions vous avez adoptés pour
régler ce genre de soucis…</p>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
