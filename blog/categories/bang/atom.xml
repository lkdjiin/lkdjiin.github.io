<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : bang | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/bang/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2014-06-27T21:45:53+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Le double bang en Ruby]]></title>
    <link href="http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby/"/>
    <updated>2014-04-23T20:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2014/04/23/le-double-bang-en-ruby</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Ou encore !!, ou double point d'exclamation</h2>

<p>On peut voir ici ou là ce genre de code Ruby:</p>

<pre><code>!!expression
</code></pre>

<p><em>-C'est un truc qui n'est d'ailleurs pas spécifique au langage Ruby-</em>
Pourquoi voudrait-on écrire ça ?</p>

<!-- more -->


<p>Le <code>!</code> (not) fait une négation booléenne. Donc si une expression est <code>true</code>,
cela va donner <code>false</code>, et inversement, si une expression est <code>false</code>, cela
va donner <code>true</code>. Exemple:</p>

<p>``` irb
$ irb</p>

<blockquote><blockquote><p>!true
=> false
!false
=> true
```</p></blockquote></blockquote>

<p>Donc le <code>!!</code> est la négation booléenne d'une négation booléenne! Hum, ça
a l'air un peu inutile, hein:</p>

<p>``` irb</p>

<blockquote><blockquote><p>!!true
=> true
!!false
=> false
```</p></blockquote></blockquote>

<p>Ce qu'il ne faut pas oublier, c'est qu'en Ruby, comme dans plein d'autres
langages, beaucoup de choses peuvent être <strong>true</strong> ou <strong>false</strong>.
La preuve pour <code>true</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>puts &lsquo;ok&rsquo; if &lsquo;kind of true value&rsquo;
ok
puts &lsquo;ok&rsquo; if [1, 2]
ok
puts &lsquo;ok&rsquo; if []
ok
```</p></blockquote></blockquote>

<p>En fait, toute valeur autre que <code>false</code> ou <code>nil</code> est considérée comme <code>true</code>.
Et le corollaire: sont considérées comme <code>false</code> les valeurs <code>false</code> ou <code>nil</code>.</p>

<p>On peut maintenant voir l'intérêt du <code>!!</code>. Soit la classe suivante pour nous
servir d'exemple:</p>

<p>``` ruby
class Connection
  def initialize(connection = nil)</p>

<pre><code>@connection = connection
</code></pre>

<p>  end</p>

<p>  # Returns a boolean.
  def connected?</p>

<pre><code>!!@connection
</code></pre>

<p>  end
end
```</p>

<p>Bien que <code>@connection</code> soit <code>nil</code> ou un objet quelconque, je veux que
<code>connected?</code> renvoit <code>true</code> ou <code>false</code>. Pour ça je peux écrire:</p>

<pre><code>if @connection
  true
else
  false
end
</code></pre>

<p>ou bien encore:</p>

<pre><code>@connection ? true : false
</code></pre>

<p>Mais le <code>!!@connection</code> fonctionne tout aussi bien. Il est plus concis, et
surtout exprime bien le <em>cast</em> en booléen:</p>

<p>``` irb</p>

<blockquote><blockquote><p>c1 = Connection.new
=> #&lt;Connection:0x9236910 @connection=nil>
c1.connected?
=> false
c2 = Connection.new(Object.new)
=> #&lt;Connection:0x922deb4 @connection=#&lt;Object:0x922dec8>>
c2.connected?
=> true
```</p></blockquote></blockquote>

<script id='fb33k8u'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>


<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
