<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : bash | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-11-14T13:30:00+01:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash: ajouter une ligne à la fin de plusieurs fichiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/"/>
    <updated>2013-08-23T11:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans l'article d'hier, je décrivais mon deuxième plugin pour Octopress.
Pour le mettre en place sur ce blog, je vais devoir ajouter une ligne de
texte à l'ensemble des articles. Il y en a presque une cinquantaine
maintenant, il est donc hors de question de le faire à la main.
Bash va me faire ça en quelques secondes.</p>

<!-- more -->


<p>J'ouvre une console dans le dossier où sont placés mes articles, et j'entre
ce qui suit:</p>

<p>``` console
[~/&hellip;/source/_posts]⇒ for file in *.markdown; do</p>

<blockquote><p>echo &lsquo;ligne à ajouter&rsquo; >> &ldquo;$file&rdquo;
done
```</p></blockquote>

<p>Tada ! C'est fini. Si vous n'êtes pas familier de Bash, voici une petite
description de ce qui s'est passé:</p>

<p>``` bash
for file in *.markdown; do</p>

<h1>&hellip;</h1>

<p>done
```</p>

<p><code>for - do - done</code> est une structure d'itération de Bash, en gros l'équivalent
d'une boucle <code>for</code> en C, Java, etc. On l'utilise généralement pour itérer
sur les arguments de la ligne de commande, ou bien, comme ici, sur les
fichiers du répertoire. Elle peut s'écrire aussi sur 3 lignes:</p>

<p><code>bash
for x in *
do
ma_commande
done
</code></p>

<p>Et même sur une seule ligne: <code>for x in *; do ma_commande ; done</code></p>

<p><code>bash
echo 'ligne à ajouter' &gt;&gt; "$file"
</code></p>

<p>La commande <code>echo</code> affiche normalement une chaîne de caractère sur
la console. Ici cette chaîne est redirigée avec <code>&gt;&gt;</code> dans le fichier
représenté par <code>"$file"</code>.</p>

<p><code>&gt;&gt;</code> permet d'ajouter en fin de fichier. et le <code>$</code> permet d'extraire le contenu
d'une variable.</p>

<h2>Pour conclure</h2>

<p>La syntaxe de Bash m'a toujours défrisé, mais quand il s'agit de traiter des
fichiers texte, c'est vraiment un outil puissant. Comme je suis curieux,
j'aimerais bien savoir ce que <em>toi</em>, lecteur, tu aurais utilisé pour
cette tâche. Bash, Perl, Sed, Awk, Ruby, autre chose ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
