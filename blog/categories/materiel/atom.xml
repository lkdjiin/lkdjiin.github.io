<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : matériel | Xavier Nayrac]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/materiel/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2015-04-04T14:27:51+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un jeu de Simon - Étape 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1/"/>
    <updated>2015-03-01T21:00:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/03/01/un-jeu-de-simon-etape-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Lors d’un projet du dimanche avec ma fille, j’ai commencé un
<a href="http://fr.wikipedia.org/wiki/Simon_%28jeu%29">jeu de Simon</a> sur l’Arduino.
Nous avons simplifié les règles au maximum (ma fille n’a pas 3 ans) et obtenu
ce que je vous propose dans cet article.</p>

<p>C’est seulement un point de départ, j’ai bien envie d’implémenter le jeu en
entier et d’en faire un objet réel. Il devrait donc y avoir d’autres articles…</p>

<p><img class="center" src="/images/simon-1.jpg"></p>

<!-- more -->

<h2 id="les-rgles">Les règles</h2>

<p>J’ai réduit les règles du jeu au plus simple : Il y a deux couleurs, rouge et
vert. La machine donne une couleur en allumant une LED et le joueur répond en
appuyant sur un bouton de couleur. Si la réponse est juste le joueur gagne et
une nouvelle partie commence. Si la réponse est fausse les LEDs clignotent
quelque temps pour signaler que le jeu est perdu et une nouvelle partie
commence.</p>

<p>Difficile de faire plus simple, hein ?</p>

<h2 id="les-composants">Les composants</h2>

<p>Nous aurons besoin de :</p>

<ul>
  <li>2 LEDs, une rouge et une verte</li>
  <li>2 boutons momentanés, si possible un rouge et un vert (sinon les gris
moches ça marche aussi)</li>
  <li>2 résistances de 220 Ohms pour les LEDs</li>
  <li>2 résistances de 10 kilo Ohms pour les boutons</li>
  <li>du câble</li>
</ul>

<h2 id="lassemblage">L’assemblage</h2>

<p><img class="center" src="/images/simon-etape1-bb.png"></p>

<h2 id="le-code">Le code</h2>

<p>Rien de spécial à dire pour le code, si ce n’est qu’il a été écrit sous la
pression de ma fille et la patience n’est pas son fort. Ça pourrait expliquer
pourquoi le code n’est pas très joli.</p>

<p>``` c
const byte RED = 0;
const byte GREEN = 1;</p>

<p>byte buttonRed = 8;
byte buttonGreen = 9;
byte ledRed = 2;
byte ledGreen = 3;
byte computerTurn = 1;
byte lastPly;</p>

<p>void setup() {
  pinMode(buttonRed, INPUT);
  pinMode(buttonGreen, INPUT);
  pinMode(ledRed, OUTPUT);
  pinMode(ledGreen, OUTPUT);</p>

<p>randomSeed(analogRead(0));
}</p>

<p>void loop() {
  if(computerTurn) {
    lastPly = random(2);
    allLedsOff();
    if(lastPly == RED) {
      digitalWrite(ledRed, HIGH);
    } else {
      digitalWrite(ledGreen, HIGH);
    }
    delay(300);
    allLedsOff();
    computerTurn = 0;
  } else {
    int stateRed = digitalRead(buttonRed);
    int stateGreen = digitalRead(buttonGreen);
    if(stateRed || stateGreen) {
      if(stateRed) {
        lightTheLed(ledRed);
      } else {
        lightTheLed(ledGreen);
      }
      if(stateRed &amp;&amp; lastPly == RED) {
        delay(2000);
      } else if(stateGreen &amp;&amp; lastPly == GREEN) {
        delay(2000);
      } else if((stateRed &amp;&amp; lastPly == GREEN) || (stateGreen &amp;&amp; lastPly == RED)) {
        blinkLeds();
        delay(2000);
      }
      computerTurn = 1;
    }
    delay(1);
  }
}</p>

<p>void allLedsOff() {
  digitalWrite(ledRed, LOW);
  digitalWrite(ledGreen, LOW);
}</p>

<p>void lightTheLed(byte led) {
  digitalWrite(led, HIGH);
  delay(200);
  digitalWrite(led, LOW);
}</p>

<p>void blinkLeds() {
  for(int i = 0; i &lt; 10; i++) {
    digitalWrite(ledRed, HIGH);
    digitalWrite(ledGreen, HIGH);
    delay(100);
    allLedsOff();
    delay(100);
  }
}
```</p>

<h2 id="la-suite">La suite</h2>

<p>Il reste beaucoup de choses à faire… Ajouter le bleu et le jaune ; ajouter du son ;
enregistrer les séquences de couleur ; le vrai jeu de Simon, quoi.
Et ensuite il faudra en faire un objet autonome, sans Arduino.</p>

<p>Alors à la prochaine.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mes premiers pas avec Arduino]]></title>
    <link href="http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino/"/>
    <updated>2015-01-25T18:04:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2015/01/25/mes-premiers-pas-avec-arduino</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça faisait un ou deux ans que l’envie me titillait. Jouer avec Arduino,
Raspberry Pi, etc. Mais essentiellement par manque de temps, je n’avais pas
encore franchi le pas. Et puis dernièrement, on m’a offert le
<a href="http://arduino.cc/en/Main/ArduinoStarterKit">Starter Kit Arduino</a>. Plus de faux pretextes, je devais m’y mettre ;)</p>

<p><img class="center" src="/images/projet-1-paral.jpg"></p>

<!-- more -->

<h2 id="les-premiers-projets-du-bouquin">Les premiers projets du bouquin</h2>

<p>Le premier projet pose les très grandes bases de l’éléctricité. Tu apprends
à allumer une LED avec un ou deux boutons, en série puis en parallèle.
Tu révises aussi la <a href="http://fr.wikipedia.org/wiki/Loi_d%27Ohm">loi d’Ohm</a>:</p>

<p><strong><em>V = R x I</em></strong></p>

<p>Avec <strong>V</strong> pour voltage (mesuré en volts), <strong>R</strong> pour résistance (mesuré en ohms)
et <strong>I</strong> pour intensité (mesuré en ampères). J’avais appris cette loi au lycée
sous la forme U = RxI,
en français le <strong>V</strong> devient donc <strong>U</strong>, pour des raisons de normalisation de
l’AFNOR.</p>

<p>Dans le second projet, tu allumes plusieurs LEDs, avec un peu de code pour les
faire clignoter. Pour le troisième projet, toujours des LEDs à allumer mais
cette fois-ci à l’aide d’un détecteur de chaleur.</p>

<p>Le quatrième projet te propose devine quoi ? Gagné ! il te propose d’allumer
une LED, cette fois en la contrôlant avec des photo-résistances:</p>

<p><img class="center" src="/images/projet-4.jpg"></p>

<h2 id="lenvironnement-de-dveloppement">L’environnement de développement</h2>

<p>Arduino est aussi un IDE, dans lequel tu tapes du code, avec lequel tu compiles
tes programmes arduino, etc. Mais comment te dire, quand tu es habitué à bosser
avec autre chose (Vim dans mon cas), tu n’imagines pas une seconde devoir
utiliser cet IDE Arduino.</p>

<p>J’ai trouvé <a href="http://inotool.org">ino</a> qui permet de travailler en console, c’est parfait pour moi.
Pour pouvoir installer ino, il faut le gestionnaire de package <code>pip</code> pour
Python.</p>

<p>Pour installer (et comprendre) pip:
<a href="http://sametmax.com/votre-python-aime-les-pip/">Sam et Max - Votre python aime les pip</a>.</p>

<p>Pour ensuite installer ino: <a href="http://inotool.org/">inotool.org</a>.</p>

<p>Maintenant vous avez accès à ces commandes:</p>

<pre><code>ino init
ino build
ino upload
ino serial # C-A C-X pour sortir ?
</code></pre>

<p>Le fichier qui nous intéresse, celui où l’on va écrire notre code, est créé
par <code>ino init</code>. C’est le fichier <code>src/sketch.ino</code>.</p>

<pre><code>$ tree
.
├── lib
└── src
    └── sketch.ino
</code></pre>

<p>Pour finir, si vous avez besoin d’un fichier de syntaxe pour Vim, c’est ici:
<a href="https://github.com/sudar/vim-arduino-syntax">sudar/vim-arduino-syntax</a>.</p>

<p>Vivement les prochains projets, qui vont me faire contrôler des servo-moteurs,
produire de la musique, etc. Parce que j’en ai un peu marre d’allumer des
LEDs ;)</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typematrix 2030: Problème avec le pavé numérique]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/20/typematrix-2030-probleme-avec-le-pave-numerique/"/>
    <updated>2013-12-20T16:06:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/20/typematrix-2030-probleme-avec-le-pave-numerique</id>
    <content type="html"><![CDATA[<p>Normalement, un simple appui sur la touche «num» bascule du clavier
normal vers le clavier numérique et vice-versa. Cela fonctionnait
très bien quand j’ai reçu le clavier et puis d’un jour à l’autre,
sans prévenir, plus rien…</p>

<!-- more -->

<p>Quand je dis «plus rien», je veux dire : l’appui sur la touche «num» met
bien en marche la petite led, mais quand tu appuis sur un chiffre, ça
marche pas.</p>

<p>Frustrant. Surtout quand tu met plus de 100€ dans un clavier et qu’en faisant
quelques recherches tu t’aperçois que c’est un problème récurrent et
que <a href="http://typematrix.com/support/user-guide.php">le site de Typematrix</a> n’est pas très loquace sur le sujet. En gros tu ne
trouves pas la solution à ton problème (récurrent hein) sur le site du
fabriquant. Il me semble pourtant que la FAQ serait un bon endroit pour 
ça, non ?</p>

<p>Bref, le Typematrix 2030 gère la bascule pavé numérique/clavier normal en
interne, et pour cela, il s’attend à ce que l’ordinateur démarre en mode
«verrou numérique». Ce que font 99% des machines, dont la mienne. C’est donc
pas le problème.</p>

<p>La solution, <a href="http://brainstormy.wordpress.com/2011/11/29/typematrix-ez-2030-et-ubuntu-11-10/">trouvée ici</a> (au passage un grand merci !),
est de décocher l’option «permettre le contrôle du pointeur en utilisant le
pavé numérique» qui, sur Debian, se trouve dans <code>Système&gt;Préférences&gt;Clavier</code>.</p>

<p>Grâce à cela, ça fonctionne de nouveau. Mais il reste toujours un mystère.
Si cette fameuse option était précédement décochée, comment s’est-elle
retrouvée cochée ? Dans le cas contraire, pourquoi le Typematrix s’est
mis soudainement à la considérer ? En conclusion, ça marche, mais je ne
sais pas vraiment pourquoi.</p>

<script id="fb33k8u">(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=lkdjiin&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=62;f.width=55;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fb33k8u');</script>

<p>À demain.</p>

<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le ventilo de mon alimentation fait un bruit d'enfer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer/"/>
    <updated>2013-12-03T20:20:00+01:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/12/03/le-ventilo-de-mon-alimentation-fait-un-bruit-denfer</id>
    <content type="html"><![CDATA[<p>Juste avant d’écrire cet article, le ventilo de l’alimentation de mon pc
c’est mis a faire un bruit d’enfer. Le pc tremble de partout.</p>

<!-- more -->

<p>Je vais tenter un truc pour prolonger un peu sa vie. Si ça rate, je ne
pourrais peut-être pas publié d’article demain :(</p>

<p>Quand ce genre de chose arrive, on peut tenter de démonter le ventilo, puis
de mettre une goutte d’huile sur le palier, le truc qui se trouve sous
une pastille autocollante. Voilà, j’espère que ça va fonctionner…</p>

<p>À demain ?</p>

<p><strong>Edit du jour même</strong> <em>Je ne l’ai jamais trouvé ce foutu palier ! Sous la
pastille autocollante il y avait… du plastique moulé ! Quoiqu’il en soit,
il semblerait qu’un bon coup d’aspirateur ai suffit à rendre le sourire
au ventilo ;) Je touche du bois…</em></p>

<p></p>
]]></content>
  </entry>
  
</feed>
